// Class Solarland.3DMeshWidget
// Size: 0x238 (Inherited: 0x228)
struct A3DMeshWidget : AActor {
	struct USceneComponent* DefaultSceneRoot; // 0x228(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x230(0x08)
};

// Class Solarland.3DMeshWidgetTrack
// Size: 0x2d8 (Inherited: 0x238)
struct A3DMeshWidgetTrack : A3DMeshWidget {
	char pad_238[0x8]; // 0x238(0x08)
	struct FVector BoxHalfExtent; // 0x240(0x0c)
	float PlayerNearbyAlpha; // 0x24c(0x04)
	bool bDebugCollision; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	struct FName MaterialAlphaParamName; // 0x254(0x08)
	struct FName MaterialCountDownName; // 0x25c(0x08)
	float MaxTraceDist; // 0x264(0x04)
	float DistFromGround; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UStaticMeshComponent* StaticMeshCountDown; // 0x270(0x08)
	struct UTextRenderComponent* DistTextComp; // 0x278(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialIcon; // 0x280(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialCountDown; // 0x288(0x08)
	struct UMaterialInstanceDynamic* DynamicMaterialDistText; // 0x290(0x08)
	char pad_298[0x40]; // 0x298(0x40)
};

// Class Solarland.AbilityTask_WaitAbilityEnd
// Size: 0x148 (Inherited: 0x80)
struct UAbilityTask_WaitAbilityEnd : UAbilityTask {
	struct FMulticastInlineDelegate OnEnd; // 0x80(0x10)
	char pad_90[0xb8]; // 0x90(0xb8)

	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEndWithTagRequirements(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements TagRequirements, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEndWithTagRequirements // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c2b0e0
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd_Query(struct UGameplayAbility* OwningAbility, struct FGameplayTagQuery Query, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd_Query // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c2b2e0
	struct UAbilityTask_WaitAbilityEnd* WaitForAbilityEnd(struct UGameplayAbility* OwningAbility, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool InIncludeTriggeredAbilities, bool InTriggerOnce); // Function Solarland.AbilityTask_WaitAbilityEnd.WaitForAbilityEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c2af50
	void OnAbilityEnd(struct FAbilityEndedData& EndedData); // Function Solarland.AbilityTask_WaitAbilityEnd.OnAbilityEnd // (Final|Native|Protected|HasOutParms) // @ game+0x1c29f50
};

// Class Solarland.SolarAbilityTask
// Size: 0x80 (Inherited: 0x80)
struct USolarAbilityTask : UAbilityTask {
};

// Class Solarland.AbilityTask_WaitAttributeChangeWithOldValue
// Size: 0xf8 (Inherited: 0x80)
struct UAbilityTask_WaitAttributeChangeWithOldValue : USolarAbilityTask {
	struct FMulticastInlineDelegate OnChange; // 0x80(0x10)
	char pad_90[0x60]; // 0x90(0x60)
	struct UAbilitySystemComponent* ExternalOwner; // 0xf0(0x08)

	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChangeWithComparison(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, enum class EWaitAttributeChangeComparison InComparisonType, float InComparisonValue, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChangeWithComparison // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c2b760
	struct UAbilityTask_WaitAttributeChangeWithOldValue* WaitForAttributeChange(struct UGameplayAbility* OwningAbility, struct FGameplayAttribute InAttribute, struct FGameplayTag InWithTag, struct FGameplayTag InWithoutTag, bool bTriggerOnce, struct AActor* OptionalExternalOwner); // Function Solarland.AbilityTask_WaitAttributeChangeWithOldValue.WaitForAttributeChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c2b4a0
};

// Class Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent
// Size: 0xc0 (Inherited: 0x80)
struct UAbilityTask_WaitDelayAndResetOnGameplayEvent : USolarAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	struct FDelegate OnRecalculateWaitDelayOnEventTriggered; // 0x90(0x10)
	char pad_A0[0x20]; // 0xa0(0x20)

	struct UAbilityTask_WaitDelayAndResetOnGameplayEvent* CreateTask(struct UGameplayAbility* OwningAbility, float DelayTime, struct FGameplayTag& EventTag); // Function Solarland.AbilityTask_WaitDelayAndResetOnGameplayEvent.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1c28570
};

// Class Solarland.AbilityTask_WaitEvaluation
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitEvaluation : USolarAbilityTask {
	struct FMulticastInlineDelegate OnGotDesiredValue; // 0x80(0x10)
	struct FDelegate EvaluationFunction; // 0x90(0x10)
	char pad_A0[0x8]; // 0xa0(0x08)

	struct UAbilityTask_WaitEvaluation* CreateTask(struct UGameplayAbility* OwningAbility, bool bDesiredValue, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitEvaluation.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c28680
};

// Class Solarland.AbilityTask_WaitInputAction
// Size: 0xa8 (Inherited: 0x80)
struct UAbilityTask_WaitInputAction : USolarAbilityTask {
	struct FMulticastInlineDelegate OnInputAction; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)

	struct UAbilityTask_WaitInputAction* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent, bool bTriggerOnce); // Function Solarland.AbilityTask_WaitInputAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c28790
};

// Class Solarland.AbilityTask_WaitTagRequirementsMetStatusChange
// Size: 0xf0 (Inherited: 0x80)
struct UAbilityTask_WaitTagRequirementsMetStatusChange : USolarAbilityTask {
	struct FMulticastInlineDelegate OnMetStatusChange; // 0x80(0x10)
	struct FGameplayTagRequirements TagRequirements; // 0x90(0x50)
	char pad_E0[0x10]; // 0xe0(0x10)

	struct UAbilityTask_WaitTagRequirementsMetStatusChange* CreateTask(struct UGameplayAbility* OwningAbility, struct FGameplayTagRequirements& TagRequirements, bool bMetInitially); // Function Solarland.AbilityTask_WaitTagRequirementsMetStatusChange.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1c288d0
};

// Class Solarland.ActionNode
// Size: 0x70 (Inherited: 0x28)
struct UActionNode : UObject {
	struct FMulticastInlineDelegate OnBeganCallback; // 0x28(0x10)
	struct FMulticastInlineDelegate OnEndedCallback; // 0x38(0x10)
	struct FMulticastInlineDelegate OnResetCallback; // 0x48(0x10)
	struct FMulticastInlineDelegate OnDisposedCallback; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)

	void Reset(); // Function Solarland.ActionNode.Reset // (Final|Native|Public) // @ game+0x1c2a700
	bool Finished(); // Function Solarland.ActionNode.Finished // (Final|Native|Public|Const) // @ game+0x1c28bc0
	void Finish(); // Function Solarland.ActionNode.Finish // (Native|Public) // @ game+0x1c28b10
	bool Execute(float DeltaTime); // Function Solarland.ActionNode.Execute // (Final|Native|Public) // @ game+0x1c28a80
	bool Disposed(); // Function Solarland.ActionNode.Disposed // (Final|Native|Public|Const) // @ game+0x1c28a60
	void Dispose(); // Function Solarland.ActionNode.Dispose // (Final|Native|Public) // @ game+0x1c28a40
};

// Class Solarland.ActorEffect
// Size: 0x50 (Inherited: 0x28)
struct UActorEffect : UObject {
	struct UActorEffectController* ControllerClass; // 0x28(0x08)
	struct UActorEffectController* Controller; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.ActorEffectController
// Size: 0x28 (Inherited: 0x28)
struct UActorEffectController : UObject {
};

// Class Solarland.ActorEffectSubsystem
// Size: 0x48 (Inherited: 0x30)
struct UActorEffectSubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UActorEffect*> Effects; // 0x38(0x10)

	bool Stop(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2aec0
	struct UActorEffect* Start(struct UActorEffect* EffectClass, struct AActor* AffectedActor); // Function Solarland.ActorEffectSubsystem.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2ae00
	bool Finish(struct UActorEffect* EffectInstance); // Function Solarland.ActorEffectSubsystem.Finish // (Final|Native|Public|BlueprintCallable) // @ game+0x1c28b30
};

// Class Solarland.SolarUserWidget
// Size: 0x340 (Inherited: 0x260)
struct USolarUserWidget : UUserWidget {
	enum class EWidgetLayerLevel WidgetLayerLevel; // 0x260(0x01)
	enum class EWidgetScope WidgetScope; // 0x261(0x01)
	enum class EInputCapture CaptureInput; // 0x262(0x01)
	bool bHideCursorDuringCapture; // 0x263(0x01)
	int32_t MyRoot; // 0x264(0x04)
	struct FString widgetkey; // 0x268(0x10)
	bool bIsPersistent; // 0x278(0x01)
	bool bReceiveKeyMap; // 0x279(0x01)
	bool bReceiveShowMouse; // 0x27a(0x01)
	bool bShowTransBlackAnim; // 0x27b(0x01)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct UWidgetInputManager* InputManagerClass; // 0x280(0x08)
	struct UWidgetInputManager* InputManager; // 0x288(0x08)
	struct TMap<struct FName, struct UWidgetAnimation*> AnimationsMap; // 0x290(0x50)
	struct TWeakObjectPtr<struct UWidgetAnimation> PlayingAnimation; // 0x2e0(0x08)
	char pad_2E8[0x18]; // 0x2e8(0x18)
	struct TArray<struct FPlayAnimationParams> PendingPlayAnimations; // 0x300(0x10)
	bool WidgetTickEnabled; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct USolarInputActionContext* InputActionContext; // 0x318(0x08)
	char pad_320[0x10]; // 0x320(0x10)
	struct TArray<struct USolarUserWidget*> AllSolarUserWidgetChilds; // 0x330(0x10)

	void StopListeningForInputActionEx(struct FName ActionName, enum class EInputEvent EventType); // Function Solarland.SolarUserWidget.StopListeningForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ecb6f0
	void ShowSelfPanelUI(); // Function Solarland.SolarUserWidget.ShowSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecb6d0
	void ShowMouseCursor(); // Function Solarland.SolarUserWidget.ShowMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ecb6b0
	void SetZOrder(int32_t ZOrder); // Function Solarland.SolarUserWidget.SetZOrder // (Final|Native|Public) // @ game+0x1ecb630
	void SetWidgetVisible(struct UWidget* Widget, bool bVisible, bool bHitTest); // Function Solarland.SolarUserWidget.SetWidgetVisible // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1ecb520
	void SetWidgetTickEnabled(bool bEnabled); // Function Solarland.SolarUserWidget.SetWidgetTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecb4a0
	void SetWidgetKey(struct FString InWidgetKey); // Function Solarland.SolarUserWidget.SetWidgetKey // (Final|Native|Public) // @ game+0x1ecb400
	void SetInputActionIsEnabled(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled); // Function Solarland.SolarUserWidget.SetInputActionIsEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ecb2f0
	void SetBlockInputForOneTick(); // Function Solarland.SolarUserWidget.SetBlockInputForOneTick // (Final|Native|Public) // @ game+0x1ecb2d0
	void ReceiveTick(struct FGeometry& MyGeometry, float InDeltaTime); // Function Solarland.SolarUserWidget.ReceiveTick // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveShow(); // Function Solarland.SolarUserWidget.ReceiveShow // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveHide(); // Function Solarland.SolarUserWidget.ReceiveHide // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool PlayAnimationByName(struct FName& AnimationName, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed); // Function Solarland.SolarUserWidget.PlayAnimationByName // (Final|Native|Public|HasOutParms) // @ game+0x1ecaf30
	void PlayAnimationByExclusively(struct UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, enum class EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState); // Function Solarland.SolarUserWidget.PlayAnimationByExclusively // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1ecad70
	void OnTouchManagerInitialized(); // Function Solarland.SolarUserWidget.OnTouchManagerInitialized // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnSynchronizeProperties(); // Function Solarland.SolarUserWidget.OnSynchronizeProperties // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSolarUIOpened(); // Function Solarland.SolarUserWidget.OnSolarUIOpened // (Native|Event|Protected|BlueprintEvent) // @ game+0x7efae0
	void OnSolarUIClosed(); // Function Solarland.SolarUserWidget.OnSolarUIClosed // (Native|Event|Protected|BlueprintEvent) // @ game+0x12593d0
	void OnShow(); // Function Solarland.SolarUserWidget.OnShow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1259310
	void OnHide(); // Function Solarland.SolarUserWidget.OnHide // (Native|Event|Protected|BlueprintEvent) // @ game+0x1259490
	void OnExclusivelyAnimationFinished(); // Function Solarland.SolarUserWidget.OnExclusivelyAnimationFinished // (Final|Native|Protected) // @ game+0x1ecacf0
	void OnDeinitialize(); // Function Solarland.SolarUserWidget.OnDeinitialize // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBackKey(enum class EWidgetBackKeyType BackKeyType); // Function Solarland.SolarUserWidget.OnBackKey // (Native|Event|Protected|BlueprintEvent) // @ game+0x1eca8b0
	void ListenForInputActionEx(struct FName ActionName, enum class EInputEvent EventType, bool bInIsEnabled, struct FDelegate Callback); // Function Solarland.SolarUserWidget.ListenForInputActionEx // (Final|Native|Protected|BlueprintCallable) // @ game+0x1eca730
	bool IsWidgetTickEnabled(); // Function Solarland.SolarUserWidget.IsWidgetTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca710
	bool IsSolarUserWidgetAndBindLua(struct UWidget* InWidget); // Function Solarland.SolarUserWidget.IsSolarUserWidgetAndBindLua // (Final|Native|Static|Public) // @ game+0x1eca690
	bool IsPlatformDesktop(); // Function Solarland.SolarUserWidget.IsPlatformDesktop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca660
	void HideMouseCursor(); // Function Solarland.SolarUserWidget.HideMouseCursor // (Final|Native|Protected|BlueprintCallable) // @ game+0x1eca4b0
	struct FString GetWidgetKeyByPanelName(enum class EUIPanelName PanelName); // Function Solarland.SolarUserWidget.GetWidgetKeyByPanelName // (Final|Native|Static|Public) // @ game+0x1eca3f0
	struct FString GetWidgetKey(); // Function Solarland.SolarUserWidget.GetWidgetKey // (Final|Native|Public|Const) // @ game+0x1eca370
	struct TArray<struct FVector2D> GetTouchedLocation(); // Function Solarland.SolarUserWidget.GetTouchedLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca2f0
	struct TArray<struct FVector2D> GetPointerLocation(); // Function Solarland.SolarUserWidget.GetPointerLocation // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca240
	struct ASolarPlayerState* GetOwningSolarPlayerState(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca210
	struct ASolarCharacter* GetOwningSolarPlayerCharacter(); // Function Solarland.SolarUserWidget.GetOwningSolarPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca1e0
	struct UWidgetAnimation* GetAnimationByName(struct FName& AnimationName); // Function Solarland.SolarUserWidget.GetAnimationByName // (Final|Native|Public|HasOutParms|Const) // @ game+0x1eca070
	struct UWidget* FindWidgetFromName(struct FName& Name); // Function Solarland.SolarUserWidget.FindWidgetFromName // (Final|Native|Public|HasOutParms|Const) // @ game+0x1ec9fd0
	void ExecuteSolarUIShow(); // Function Solarland.SolarUserWidget.ExecuteSolarUIShow // (Final|Native|Public) // @ game+0x1ec9fb0
	void ExecuteSolarUIOpened(); // Function Solarland.SolarUserWidget.ExecuteSolarUIOpened // (Final|Native|Public) // @ game+0x1ec9f90
	void ExecuteSolarUIHide(); // Function Solarland.SolarUserWidget.ExecuteSolarUIHide // (Final|Native|Public) // @ game+0x1ec9f70
	void ExecuteSolarUIClosed(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClosed // (Final|Native|Public) // @ game+0x1ec9f50
	void ExecuteSolarUIClean(); // Function Solarland.SolarUserWidget.ExecuteSolarUIClean // (Final|Native|Public) // @ game+0x1ec9f30
	void ExecuteBindCustomControl(); // Function Solarland.SolarUserWidget.ExecuteBindCustomControl // (Final|Native|Public) // @ game+0x1ec9f10
	void CloseSelfPanelUI(); // Function Solarland.SolarUserWidget.CloseSelfPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec9ef0
	struct TArray<struct USolarUserWidget*> CacheAllSolarUserWidgetChilds(); // Function Solarland.SolarUserWidget.CacheAllSolarUserWidgetChilds // (Final|Native|Public) // @ game+0x1ec9e70
};

// Class Solarland.ActorMarkBase
// Size: 0x398 (Inherited: 0x340)
struct UActorMarkBase : USolarUserWidget {
	char pad_340[0x18]; // 0x340(0x18)
	struct AActor* CurrentFollowActor; // 0x358(0x08)
	struct APlayerController* CurrentPlayerController; // 0x360(0x08)
	struct FVector2D MarkIconAlignment; // 0x368(0x08)
	struct FVector2D MarkPanelSize; // 0x370(0x08)
	char pad_378[0x18]; // 0x378(0x18)
	float MaxVisibleDis; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)

	void SetUpdateState(bool InShouldUpdateLocation); // Function Solarland.ActorMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2ad70
	void InitActorMarkBaseByFixedPos(struct FVector Pos, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBaseByFixedPos // (Final|Native|Public|HasDefaults) // @ game+0x1c28e50
	void InitActorMarkBase(struct AActor* InActor, struct APlayerController* Controller); // Function Solarland.ActorMarkBase.InitActorMarkBase // (Final|Native|Public) // @ game+0x1c28d90
	struct FVector GetFollowActorLocation(); // Function Solarland.ActorMarkBase.GetFollowActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28cb0
	float GetDistance(bool bIncludeZ); // Function Solarland.ActorMarkBase.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c28c10
	struct AActor* GetCurrentFollowActor(); // Function Solarland.ActorMarkBase.GetCurrentFollowActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28be0
};

// Class Solarland.ActorMaterialSubsystemSettings
// Size: 0x70 (Inherited: 0x38)
struct UActorMaterialSubsystemSettings : UDeveloperSettings {
	struct FGameplayTag DefaultMaterialChangePriorityTag; // 0x38(0x08)
	struct TArray<struct FGameplayTag> OrderedMaterialChangePriorityTags; // 0x40(0x10)
	struct TArray<struct FSoftObjectPath> GlobalNoChangeMaterials; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)

	int32_t GetMaterialChangePriority(struct FGameplayTag& Tag); // Function Solarland.ActorMaterialSubsystemSettings.GetMaterialChangePriority // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28cf0
};

// Class Solarland.ActorMaterialSubsystem
// Size: 0x90 (Inherited: 0x30)
struct UActorMaterialSubsystem : UWorldSubsystem {
	struct TMap<struct AActor*, struct FActorMaterialInfo> ActorMaterialsMap; // 0x30(0x50)
	char pad_80[0x10]; // 0x80(0x10)

	bool SetStaticMesh(struct AActor* Actor, struct UStaticMeshComponent* MeshComp, struct UStaticMesh* NewMesh); // Function Solarland.ActorMaterialSubsystem.SetStaticMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2ac70
	bool SetSkeletalMesh(struct AActor* Actor, struct USkeletalMeshComponent* MeshComp, struct USkeletalMesh* NewMesh, bool bReinitPose, bool bForceSkipTickAnimation); // Function Solarland.ActorMaterialSubsystem.SetSkeletalMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2aad0
	bool SetOriginalMultiplePassMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, struct UMaterialInterface* Material, bool bNeedMultiplePass); // Function Solarland.ActorMaterialSubsystem.SetOriginalMultiplePassMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a980
	bool SetOriginalMaterials(struct AActor* Actor, struct UMeshComponent* MeshComp, struct TArray<struct UMaterialInterface*>& Materials); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c2a860
	bool SetOriginalMaterial(struct AActor* Actor, struct UMeshComponent* MeshComp, int32_t MaterialIndex, struct UMaterialInterface* Material); // Function Solarland.ActorMaterialSubsystem.SetOriginalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a720
	void RemoveNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.RemoveNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c2a630
	bool RemoveMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.RemoveMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a570
	bool RemoveAllMaterialChanges(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RemoveAllMaterialChanges // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a4e0
	void RebuildMaterialChangesOnMeshAddedOrRemoved(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnMeshAddedOrRemoved // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a460
	void RebuildMaterialChangesOnAllOriginalMaterialsChanged(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.RebuildMaterialChangesOnAllOriginalMaterialsChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2a3e0
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameterByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* SourcePrimitiveComponent, int32_t SourceElementIndex, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameterByIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c2a230
	struct UMaterialInstanceDynamic* OverrideDynamicMaterialInstanceParameter(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, struct FName ParameterName, enum class EMaterialParameterType2 ParameterType, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.OverrideDynamicMaterialInstanceParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c2a0b0
	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.ActorMaterialSubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x1c29ff0
	bool K2_SetVectorMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, struct FVector ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetVectorMaterialParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c29c70
	bool K2_SetScalarMaterialParameter(struct AActor* Actor, struct FMaterialChangeHandle Handle, struct FName ParameterName, float ParameterValue, struct FMaterialFilter Filter); // Function Solarland.ActorMaterialSubsystem.K2_SetScalarMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x1c299a0
	void K2_RebuildMaterialChangesOnOriginalMaterialChanged(struct AActor* Actor, struct TArray<struct UMeshComponent*> ChangedMeshes); // Function Solarland.ActorMaterialSubsystem.K2_RebuildMaterialChangesOnOriginalMaterialChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1c29880
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParametersByIndex(struct UMaterialInstanceDynamic* TargetMaterial, struct UPrimitiveComponent* PrimitiveComponent, int32_t SourceElementIndex, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParametersByIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c296a0
	struct UMaterialInstanceDynamic* K2_OverrideDynamicMaterialInstanceAllParameters(struct UMaterialInstanceDynamic* TargetMaterial, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, bool bOverridenOnly); // Function Solarland.ActorMaterialSubsystem.K2_OverrideDynamicMaterialInstanceAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c29500
	struct UMaterialInstanceDynamic* K2_CreateDynamicMaterialInstanceOverrideAllParameters(struct UPrimitiveComponent* TargetPrimitiveComponent, struct UMaterialInterface* SourceMaterial, int32_t ParameterTypeFlags, struct FMaterialParameterFilter& ParameterFilter, int32_t TargetElementIndex, bool bOverridenOnly, struct FName OptionalMaterialName); // Function Solarland.ActorMaterialSubsystem.K2_CreateDynamicMaterialInstanceOverrideAllParameters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c292c0
	struct FMaterialChangeHandle K2_AddMaterialChangeByPath(struct AActor* Actor, struct FSoftObjectPath& MaterialPath, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChangeByPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c290e0
	struct FMaterialChangeHandle K2_AddMaterialChange(struct AActor* Actor, struct UMaterialInterface* SourceMaterial, struct FAddMaterialChangeParams Params); // Function Solarland.ActorMaterialSubsystem.K2_AddMaterialChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1c28f20
	bool ContainsMaterialChangeByPriority(struct AActor* Actor, int32_t Priority); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChangeByPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c284b0
	bool ContainsMaterialChange(struct AActor* Actor, struct FMaterialChangeHandle Handle); // Function Solarland.ActorMaterialSubsystem.ContainsMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c283f0
	bool ContainsAnyMaterialChange(struct AActor* Actor); // Function Solarland.ActorMaterialSubsystem.ContainsAnyMaterialChange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28360
	void AddNoChangeMaterials(struct TArray<struct FSoftObjectPath>& Materials); // Function Solarland.ActorMaterialSubsystem.AddNoChangeMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c28290
};

// Class Solarland.ActorMaterialSubsystemAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorMaterialSubsystemAgentInterface : UInterface {
};

// Class Solarland.ActorParticleEffectSpawner
// Size: 0xb0 (Inherited: 0x28)
struct UActorParticleEffectSpawner : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FActorParticleEffectSpawnInfo Info; // 0x38(0x70)
	char pad_A8[0x8]; // 0xa8(0x08)
};

// Class Solarland.ActorParticleEffectSubsystem
// Size: 0x48 (Inherited: 0x30)
struct UActorParticleEffectSubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct UActorParticleEffectSpawner*> Spawners; // 0x38(0x10)

	struct FActorParticleEffectSpawnHandle K2_RequestParticleEffectSpawn(struct AActor* Actor, struct FActorParticleEffectSpawnInfo SpawnInfo); // Function Solarland.ActorParticleEffectSubsystem.K2_RequestParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1c30750
	void CancelParticleEffectSpawn(struct FActorParticleEffectSpawnHandle Handle); // Function Solarland.ActorParticleEffectSubsystem.CancelParticleEffectSpawn // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f090
};

// Class Solarland.AdvProgressBase
// Size: 0x310 (Inherited: 0x260)
struct UAdvProgressBase : UUserWidget {
	struct UImage* Progress; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float CurrentHP; // 0x274(0x04)
	float MaxHP; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct TMap<int32_t, float> ActionMap; // 0x280(0x50)
	float AnimCurrentHP; // 0x2d0(0x04)
	float ProgressAdd; // 0x2d4(0x04)
	float ProgressMinus; // 0x2d8(0x04)
	char pad_2DC[0x34]; // 0x2dc(0x34)

	void UpdateMaxHPLength(float NewHPMax, float NewCurrentHP); // Function Solarland.AdvProgressBase.UpdateMaxHPLength // (Final|Native|Public|BlueprintCallable) // @ game+0x1c30f90
	void SetProgress(float _PreMinus, float _CurrentHP, float _PreAdd); // Function Solarland.AdvProgressBase.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1c30e80
	int32_t PreAction(float Number); // Function Solarland.AdvProgressBase.PreAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1c30df0
	void Init(float _DefaultHP, float _MaxHP); // Function Solarland.AdvProgressBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f410
	float GetMaxHP(); // Function Solarland.AdvProgressBase.GetMaxHP // (Final|Native|Public|Const) // @ game+0x1c2f340
	float GetCurrentHPPercent(); // Function Solarland.AdvProgressBase.GetCurrentHPPercent // (Final|Native|Public|Const) // @ game+0x1c2f320
	void DoActionSmoothly(float Number); // Function Solarland.AdvProgressBase.DoActionSmoothly // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f270
	void DoActionDirectly(float Number); // Function Solarland.AdvProgressBase.DoActionDirectly // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f1f0
	void DoAction(int32_t ID); // Function Solarland.AdvProgressBase.DoAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f170
	struct FLinearColor Debug(); // Function Solarland.AdvProgressBase.Debug // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c2f130
	void CleanPreActions(); // Function Solarland.AdvProgressBase.CleanPreActions // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2f110
	void CancelAction(int32_t ID); // Function Solarland.AdvProgressBase.CancelAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1c2ef80
};

// Class Solarland.AirDropAudioActor
// Size: 0x2c8 (Inherited: 0x228)
struct AAirDropAudioActor : AActor {
	struct FVector DropBeginLocation; // 0x228(0x0c)
	struct FVector DropEndLocation; // 0x234(0x0c)
	float CurrZ; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	bool bOnGround; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct AActor* SpawnedWarningEffect; // 0x250(0x08)
	struct AActor* WarningEffect; // 0x258(0x08)
	int32_t ThisID; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	bool bSummonedByCharacter; // 0x268(0x01)
	char pad_269[0x7]; // 0x269(0x07)
	struct FString SNameAirDropSpawnWarning; // 0x270(0x10)
	struct FString SNameAirDropStopSpawnWarning; // 0x280(0x10)
	struct FString SNameAirDropApprochWarning; // 0x290(0x10)
	struct FString SNameAirDropStopApprochWarning; // 0x2a0(0x10)
	struct UAkComponent* AkAudioComponent; // 0x2b0(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x2b8(0x08)
	char pad_2C0[0x1]; // 0x2c0(0x01)
	bool bHasLanded; // 0x2c1(0x01)
	char pad_2C2[0x6]; // 0x2c2(0x06)

	void OnAirDropTreasureBoxStateChanged(int32_t ItemID, enum class EAirDropMovementState MovementState, enum class EAirDropOpenState OpenState); // Function Solarland.AirDropAudioActor.OnAirDropTreasureBoxStateChanged // (Final|Native|Public) // @ game+0x1c30a20
	void OnAirDropApproch(int32_t InThisID); // Function Solarland.AirDropAudioActor.OnAirDropApproch // (Final|Native|Public) // @ game+0x1c309a0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.AirDropAudioActor.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x1c30210
};

// Class Solarland.SolarDormantActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDormantActor : AActor {
};

// Class Solarland.SolarItemActor
// Size: 0x3d0 (Inherited: 0x228)
struct ASolarItemActor : ASolarDormantActor {
	char pad_228[0x40]; // 0x228(0x40)
	struct FSolarItemData ItemData; // 0x268(0xb0)
	float SpawnOffset; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x320(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x330(0x18)
	struct FSoftObjectPath FXPath; // 0x348(0x18)
	struct FString FXBPPath; // 0x360(0x10)
	struct USphereComponent* SphereComponent; // 0x370(0x08)
	char pad_378[0x4]; // 0x378(0x04)
	struct TWeakObjectPtr<struct AActor> FXActor; // 0x37c(0x08)
	enum class EItemState ItemCurrentState; // 0x384(0x01)
	char pad_385[0xb]; // 0x385(0x0b)
	struct TArray<char> MarkedTeamIdList; // 0x390(0x10)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x3a8(0x08)
	struct TArray<struct UMaterialInstanceDynamic*> NormalMats; // 0x3b0(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> OutlineMats; // 0x3c0(0x10)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarItemActor.UnMarkThisItem // (Native|Public) // @ game+0x1d88f20
	void SwitchDiscardMaterials(); // Function Solarland.SolarItemActor.SwitchDiscardMaterials // (Final|Native|Protected) // @ game+0x1daf410
	void SetOutlineMeshVisible(bool Visible); // Function Solarland.SolarItemActor.SetOutlineMeshVisible // (Native|Public) // @ game+0x1daf380
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarItemActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x1d88d80
	void OnServerPawned(); // Function Solarland.SolarItemActor.OnServerPawned // (Native|Public) // @ game+0x1d88b60
	void OnRep_ItemDataChange(); // Function Solarland.SolarItemActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x7e17a0
	void OnRep_ItemCurrentStateChanged(); // Function Solarland.SolarItemActor.OnRep_ItemCurrentStateChanged // (Native|Protected) // @ game+0x1257850
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarItemActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x1daee20
	void MarkThisItem(char TeamID); // Function Solarland.SolarItemActor.MarkThisItem // (Native|Public) // @ game+0x1d88aa0
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarItemActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x1daee00
	int32_t GetQuality(); // Function Solarland.SolarItemActor.GetQuality // (Native|Public) // @ game+0x1d88a60
};

// Class Solarland.SolarTreasureBoxActor
// Size: 0x598 (Inherited: 0x3d0)
struct ASolarTreasureBoxActor : ASolarItemActor {
	enum class ETreasureBoxState CurrentState; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct FSolarItemDataArray ItemDataList; // 0x3d8(0x118)
	struct TArray<struct FSolarItemData> SortedGameItemDatas; // 0x4f0(0x10)
	char pad_500[0x20]; // 0x500(0x20)
	int32_t DataLeng; // 0x520(0x04)
	enum class ECostType CostType; // 0x524(0x01)
	char pad_525[0x3]; // 0x525(0x03)
	int32_t CostNum; // 0x528(0x04)
	char pad_52C[0x54]; // 0x52c(0x54)
	int32_t HighestItemQuality; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct UAkComponent* AkAudioComponent; // 0x588(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x590(0x08)

	void UpdateTreasureBoxInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateTreasureBoxInternal // (Native|Public) // @ game+0xa3c790
	void UpdateOpenBoxUIByState(enum class ETreasureBoxState NewState); // Function Solarland.SolarTreasureBoxActor.UpdateOpenBoxUIByState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateItemDataListInternal(); // Function Solarland.SolarTreasureBoxActor.UpdateItemDataListInternal // (Final|Native|Public) // @ game+0x1ec1380
	void ServerSetState(enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarTreasureBoxActor.ServerSetState // (Final|Native|Public) // @ game+0x1ec0fc0
	void ServerNotifyPlayerOpen(struct ASolarCharacter* RequestCharacter, enum class EItemType InItemType); // Function Solarland.SolarTreasureBoxActor.ServerNotifyPlayerOpen // (Final|Native|Public) // @ game+0x1ec0e30
	void PlayOpenAnimation(); // Function Solarland.SolarTreasureBoxActor.PlayOpenAnimation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_ItemDataList(); // Function Solarland.SolarTreasureBoxActor.OnRep_ItemDataList // (Final|Native|Public) // @ game+0x1ec0c70
	void OnRep_CurrentState(); // Function Solarland.SolarTreasureBoxActor.OnRep_CurrentState // (Final|Native|Public) // @ game+0x1ec0c10
	void OnClientItemHighestQualityChanged(int32_t NewQuality, int32_t PrevQuality); // Function Solarland.SolarTreasureBoxActor.OnClientItemHighestQualityChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ec0b50
	bool IsEmpty(); // Function Solarland.SolarTreasureBoxActor.IsEmpty // (Final|Native|Public) // @ game+0x1ec0670
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarTreasureBoxActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1ec04c0
	int32_t GetNumCost(); // Function Solarland.SolarTreasureBoxActor.GetNumCost // (Final|Native|Public|Const) // @ game+0x1ec00b0
	struct TArray<struct FSolarItemData> GetItemList(); // Function Solarland.SolarTreasureBoxActor.GetItemList // (Final|Native|Public) // @ game+0x1ebff50
	enum class ECostType GetCostType(); // Function Solarland.SolarTreasureBoxActor.GetCostType // (Final|Native|Public|Const) // @ game+0x1ebff30
	void ConstructTreasureBoxTest(struct TArray<int32_t>& itemIdList); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBoxTest // (Final|Native|Public|HasOutParms) // @ game+0xae7770
	void ConstructTreasureBox(int32_t dropId); // Function Solarland.SolarTreasureBoxActor.ConstructTreasureBox // (Final|Native|Public) // @ game+0x90ca00
	bool BOpened(); // Function Solarland.SolarTreasureBoxActor.BOpened // (Native|Public) // @ game+0x1ebfcc0
};

// Class Solarland.AirDropTreasureBox
// Size: 0x948 (Inherited: 0x598)
struct AAirDropTreasureBox : ASolarTreasureBoxActor {
	bool bIsOpening; // 0x598(0x01)
	char pad_599[0x3]; // 0x599(0x03)
	float openProgress; // 0x59c(0x04)
	struct ASolarCharacter* OpeningCharacter; // 0x5a0(0x08)
	float OpenTime; // 0x5a8(0x04)
	float ProtectionTime; // 0x5ac(0x04)
	char pad_5B0[0xd]; // 0x5b0(0x0d)
	bool bBoxLanded; // 0x5bd(0x01)
	char pad_5BE[0x52]; // 0x5be(0x52)
	struct FString SummonPlayerID; // 0x610(0x10)
	float StartDropHeight; // 0x620(0x04)
	struct FRotator TargetRotation; // 0x624(0x0c)
	struct FVector TargetLocation; // 0x630(0x0c)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct UParticleSystem* LandHitEffect; // 0x640(0x08)
	struct AActor* WarningEffect; // 0x648(0x08)
	struct TSoftObjectPtr<UParticleSystem> LandSmokeEffect; // 0x650(0x28)
	struct ASolarAbility* RangeAbility; // 0x678(0x08)
	float dropGravity; // 0x680(0x04)
	float maxDropSpeed; // 0x684(0x04)
	float originHeight; // 0x688(0x04)
	float DecelerateHeight; // 0x68c(0x04)
	float DecelerateTime; // 0x690(0x04)
	float AirDropSpawnDelay; // 0x694(0x04)
	float AudioActorHeightOffset; // 0x698(0x04)
	float AudioActorFallSpeed; // 0x69c(0x04)
	struct FSoftClassPath AirDropGuideMeshBPClassPath; // 0x6a0(0x18)
	float DropApprochDuration; // 0x6b8(0x04)
	bool bSummonBySkill; // 0x6bc(0x01)
	enum class EAirDropMovementState MovementState; // 0x6bd(0x01)
	enum class EAirDropOpenState OpenState; // 0x6be(0x01)
	char pad_6BF[0x51]; // 0x6bf(0x51)
	struct FString SNameAirDropOpen; // 0x710(0x10)
	struct FString SNameLandHit; // 0x720(0x10)
	struct FString SNameAirDropSpawn; // 0x730(0x10)
	struct FString SNameAirDropSpawnWarning; // 0x740(0x10)
	struct FString SNameAirDropStopSpawnWarning; // 0x750(0x10)
	struct FString SNameAirDropApprochWarning; // 0x760(0x10)
	struct FString SNameAirDropStopApprochWarning; // 0x770(0x10)
	struct FString SNameStartDrop; // 0x780(0x10)
	struct FString SNameStopDrop; // 0x790(0x10)
	struct FString SNameDecelerateAudio; // 0x7a0(0x10)
	struct FString SNamePlayLandedLoopAudio; // 0x7b0(0x10)
	struct FString SNameStopLandedLoopAudio; // 0x7c0(0x10)
	struct FString SNamePlayOnGroundBroadcastLoopAudio; // 0x7d0(0x10)
	struct FString SNameStopOnGroundBroadcastLoopAudio; // 0x7e0(0x10)
	struct FString SNamePlayStartHackAudio; // 0x7f0(0x10)
	struct FString SNameStopStartHackAudio; // 0x800(0x10)
	struct FString SNamePlayHackingLoopAudio; // 0x810(0x10)
	struct FString SNameStopHackingLoopAudio; // 0x820(0x10)
	struct FString SNameStopHackingLoopAudioAux; // 0x830(0x10)
	char pad_840[0x108]; // 0x840(0x108)

	void PlayLandingAnimation(); // Function Solarland.AirDropTreasureBox.PlayLandingAnimation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool OpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.OpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1c30d60
	void OnStateChanged(); // Function Solarland.AirDropTreasureBox.OnStateChanged // (Native|Public) // @ game+0x12586b0
	void OnRep_TargetLocation(); // Function Solarland.AirDropTreasureBox.OnRep_TargetLocation // (Final|Native|Public) // @ game+0x8ba190
	void OnRep_SummonPlayerID(); // Function Solarland.AirDropTreasureBox.OnRep_SummonPlayerID // (Final|Native|Public) // @ game+0x1c30d20
	void OnRep_StartDropHeight(); // Function Solarland.AirDropTreasureBox.OnRep_StartDropHeight // (Final|Native|Public) // @ game+0x1c30d00
	void OnRep_OpenState(enum class EAirDropOpenState OpenState); // Function Solarland.AirDropTreasureBox.OnRep_OpenState // (Final|Native|Public) // @ game+0x1c30c80
	void OnRep_OpenProgressChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenProgressChange // (Final|Native|Public) // @ game+0x1c30c60
	void OnRep_OpenCharacterChange(); // Function Solarland.AirDropTreasureBox.OnRep_OpenCharacterChange // (Final|Native|Public) // @ game+0x1c30c40
	void OnRep_MovementState(enum class EAirDropMovementState MovementState); // Function Solarland.AirDropTreasureBox.OnRep_MovementState // (Final|Native|Public) // @ game+0x1c30bc0
	void OnRep_IsOpening(); // Function Solarland.AirDropTreasureBox.OnRep_IsOpening // (Final|Native|Public) // @ game+0x1c30ba0
	void OnRep_bBoxLanded(); // Function Solarland.AirDropTreasureBox.OnRep_bBoxLanded // (Final|Native|Public) // @ game+0x1c30d40
	void OnOpenStateChanged(enum class EAirDropOpenState InPrevOpenState, enum class EAirDropOpenState InCurrOpenState); // Function Solarland.AirDropTreasureBox.OnOpenStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnMovementStateChanged(enum class EAirDropMovementState InPrevMovementState, enum class EAirDropMovementState InCurrMovementState); // Function Solarland.AirDropTreasureBox.OnMovementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsSummonedByCharacter(); // Function Solarland.AirDropTreasureBox.IsSummonedByCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1c30720
	bool IsOpenningCharacterOffline(); // Function Solarland.AirDropTreasureBox.IsOpenningCharacterOffline // (Final|Native|Protected) // @ game+0x1c306f0
	bool IsOpeningCharacterInRange(); // Function Solarland.AirDropTreasureBox.IsOpeningCharacterInRange // (Final|Native|Protected) // @ game+0x1c306c0
	bool CancelOpenAirDropTreasureBox(struct ASolarCharacter* _OpeningCharacter); // Function Solarland.AirDropTreasureBox.CancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1c2f000
};

// Class Solarland.AirlineCruiseCompInterface
// Size: 0x28 (Inherited: 0x28)
struct UAirlineCruiseCompInterface : UInterface {

	struct UAirlineCruiseComponent* GetAirlineCruiseComponent(); // Function Solarland.AirlineCruiseCompInterface.GetAirlineCruiseComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c2f2f0
};

// Class Solarland.GameModeCompBase
// Size: 0xd0 (Inherited: 0xb0)
struct UGameModeCompBase : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	bool bPreStartPlay; // 0xb8(0x01)
	bool bTakeChargeStartPlay; // 0xb9(0x01)
	bool bPostStartPlay; // 0xba(0x01)
	char pad_BB[0x2]; // 0xbb(0x02)
	bool bPreHandleMatchHasStarted; // 0xbd(0x01)
	bool bTakeChargeHandleMatchHasStarted; // 0xbe(0x01)
	bool bPostHandleMatchHasStarted; // 0xbf(0x01)
	char pad_C0[0x2]; // 0xc0(0x02)
	bool bPreRestartPlayer; // 0xc2(0x01)
	bool bTakeChargeRestartPlayer; // 0xc3(0x01)
	bool bPostRestartPlayer; // 0xc4(0x01)
	char pad_C5[0x2]; // 0xc5(0x02)
	bool bPreEndPlay; // 0xc7(0x01)
	bool bTakeChargeEndPlay; // 0xc8(0x01)
	bool bPostEndPlay; // 0xc9(0x01)
	char pad_CA[0x6]; // 0xca(0x06)

	void PreStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c72780
	void PreRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c72690
	void PreHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c725e0
	void PreGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c72530
	void PreGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PreGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c72430
	void PreGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PreGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c72380
	void PreGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c72280
	void PreEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PreEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c72190
	void PostStartPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostStartPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c720e0
	void PostRestartPlayerBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostRestartPlayerBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c71ff0
	void PostHandleMatchHasStartedBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostHandleMatchHasStartedBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c71f40
	void PostGameModeStartPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71e90
	void PostGameModeRestartPlayer(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.PostGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71d90
	void PostGameModeHandleMatchHasStarted(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.PostGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71ce0
	void PostGameModeEndPlay(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71be0
	void PostEndPlayBind(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.PostEndPlayBind // (Final|Native|Protected|HasOutParms) // @ game+0x1c71af0
	void OnGameModeStartPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeStartPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71920
	void OnGameModeRestartPlayer(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // Function Solarland.GameModeCompBase.OnGameModeRestartPlayer // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c717e0
	void OnGameModeHandleMatchHasStarted(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // Function Solarland.GameModeCompBase.OnGameModeHandleMatchHasStarted // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c716d0
	void OnGameModeEndPlay(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameModeCompBase.OnGameModeEndPlay // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c71580
	struct ASolarGameMode* GetGameModeOwner(); // Function Solarland.GameModeCompBase.GetGameModeOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71010
};

// Class Solarland.AirlineCruiseComponent
// Size: 0x198 (Inherited: 0xd0)
struct UAirlineCruiseComponent : UGameModeCompBase {
	int32_t UsedAirlineID; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct ASolarCapsuleRoot* CapsuleRootClass; // 0xd8(0x08)
	struct ASolarCapsuleRoot* CapsuleRoot; // 0xe0(0x08)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0xe8(0x50)
	struct ASolarCharacter* CruiseTemplate; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)
	struct ASolarFlyTrail* FlyTrailClass; // 0x148(0x08)
	bool bEnableSkydiveTrail; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct ASolarFlyTrail* FlyTrailActor; // 0x158(0x08)
	bool bDebugFlyTrail; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct TSoftClassPtr<UObject> DebugTrailEffectClass; // 0x168(0x28)
	bool bDebugFlyTrailPlayer; // 0x190(0x01)
	char pad_191[0x7]; // 0x191(0x07)

	void OnPlayerJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnPlayerJoin // (Final|Native|Protected) // @ game+0x1c30920
	void OnCruiseCompleted(struct AActor* DestroyedRoot); // Function Solarland.AirlineCruiseComponent.OnCruiseCompleted // (Final|Native|Protected) // @ game+0x1c30b20
	void OnAIJoin(struct ASCMPlayerState* PlayerState); // Function Solarland.AirlineCruiseComponent.OnAIJoin // (Final|Native|Protected) // @ game+0x1c30920
	int32_t GetUsedAirlineData(struct FAirlineData& outData); // Function Solarland.AirlineCruiseComponent.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c2f360
};

// Class Solarland.AmmoConfig
// Size: 0x660 (Inherited: 0x30)
struct UAmmoConfig : UDataAsset {
	enum class EHoldActionType HoldAction; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFireChargeData> FireChargeDatas; // 0x38(0x10)
	struct FString FireChargeStopSoundName; // 0x48(0x10)
	float ChargingToleranceEndTime; // 0x58(0x04)
	float ChargingWorkingEndTime; // 0x5c(0x04)
	float ChargingHoldingEndTime; // 0x60(0x04)
	float ChargingTrajectoryTime; // 0x64(0x04)
	bool bScaleHitEffectByChargingTime; // 0x68(0x01)
	bool bCostToChargeScale; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	int32_t FireCostFullShot; // 0x6c(0x04)
	bool bForceFullShot; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float MaxChargingDamageScale; // 0x74(0x04)
	bool bIsTracer; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	struct FTracerBulletData TracerData; // 0x7c(0x0c)
	float DeltaAngle; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct FString Name; // 0x90(0x10)
	struct FString Des; // 0xa0(0x10)
	int32_t PropID; // 0xb0(0x04)
	float Lifetime; // 0xb4(0x04)
	enum class EFireMethodType FireMethodType; // 0xb8(0x01)
	enum class ETrajectoryType TrajectoryType; // 0xb9(0x01)
	char pad_BA[0x2]; // 0xba(0x02)
	float CustomValue; // 0xbc(0x04)
	struct ASolarBullet* BulletClass; // 0xc0(0x08)
	enum class EBounceType BulletBounce; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	int32_t BounceTimes; // 0xcc(0x04)
	enum class ETriggerType TriggerType; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	float MaxRange; // 0xd4(0x04)
	float EffRange; // 0xd8(0x04)
	float Radius; // 0xdc(0x04)
	float InitSpeed; // 0xe0(0x04)
	enum class ECostFireType FireCostType; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	int32_t FireCostPerAttack; // 0xe8(0x04)
	int32_t FireSpeedChangeTime; // 0xec(0x04)
	float FireSpeedChangeCOP; // 0xf0(0x04)
	float FastestFireInterval; // 0xf4(0x04)
	float SlowestFireInterval; // 0xf8(0x04)
	float BaseFireInterval; // 0xfc(0x04)
	float FireIntervalRevertPreTime; // 0x100(0x04)
	float FireIntervalReavertSpeed; // 0x104(0x04)
	float BoltActionTime; // 0x108(0x04)
	float StartBoltDuration; // 0x10c(0x04)
	float AutoFireBreakTime; // 0x110(0x04)
	float FirePrepareTime; // 0x114(0x04)
	float FireStateBreakTime; // 0x118(0x04)
	float FireStreakBreakTime; // 0x11c(0x04)
	int32_t FireIdx; // 0x120(0x04)
	bool bTimedExplode; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	float BaseReloadTime; // 0x128(0x04)
	float PostFireOverload; // 0x12c(0x04)
	bool bPlayHitSound; // 0x130(0x01)
	bool bPlayExplodeSound; // 0x131(0x01)
	char pad_132[0x2]; // 0x132(0x02)
	float FlySoundReceiveRadius; // 0x134(0x04)
	float FlySoundIgnoreDistance; // 0x138(0x04)
	int32_t SingleSoundCount; // 0x13c(0x04)
	struct FString Play_Land_Common_Hit_1P; // 0x140(0x10)
	struct FString Play_Land_Common_Hit_3P; // 0x150(0x10)
	struct FString Play_Land_Common_Hit_3P_Enemy; // 0x160(0x10)
	struct FString Play_Land_Fly_Once_3P; // 0x170(0x10)
	struct FString Play_Land_Fly_Once_3P_Enemy; // 0x180(0x10)
	struct FString Play_Land_Fly_Loop_1P; // 0x190(0x10)
	struct FString Play_Land_Fly_Loop_3P; // 0x1a0(0x10)
	struct FString Play_Land_Fly_Loop_3P_Enemy; // 0x1b0(0x10)
	struct FString Stop_Land_Fly_Loop_1P; // 0x1c0(0x10)
	struct FString Stop_Land_Fly_Loop_3P; // 0x1d0(0x10)
	struct FString Stop_Land_Fly_Loop_3P_Enemy; // 0x1e0(0x10)
	struct FString Play_Fire_Empty_1p; // 0x1f0(0x10)
	struct FString Play_Fire_Empty_3p; // 0x200(0x10)
	struct FString Play_Fire_Empty_3p_Enemy; // 0x210(0x10)
	struct UCurveFloat* PostFireSpreadCurveStruct; // 0x220(0x08)
	float VhADSSpreadCOP; // 0x228(0x04)
	float ADSSpreadCOP; // 0x22c(0x04)
	float SpreadFirePreTime; // 0x230(0x04)
	float SpreadPostFireSpeed; // 0x234(0x04)
	float SpreadRestorePreTime; // 0x238(0x04)
	float SpreadRestoreSpeed; // 0x23c(0x04)
	struct TArray<float> SkillCDDiscountArray; // 0x240(0x10)
	struct FWeaponFireTPPAnimConfig TPPRecoilConfig; // 0x250(0x28)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigNoScope; // 0x278(0x70)
	struct FWeaponFireFPPAnimConfig FPPRecoilConfigWithScope; // 0x2e8(0x70)
	struct FAmmonVerticalRecoilStruct PitchRecoilStruct; // 0x358(0x30)
	struct FAmmonHorizontalRecoilStruct YawRecoilStruct; // 0x388(0x30)
	struct FAmmonRecoilRollStruct RollRecoilStruct; // 0x3b8(0x40)
	struct FAmmonRecoilScope ScopeRecoil; // 0x3f8(0xb8)
	float ADSRecoilCOP; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct TMap<struct FString, float> RecoilCOPMap; // 0x4b8(0x50)
	struct TArray<enum class EPhysicalSurface> IgnoreEPhysicalSurface; // 0x508(0x10)
	struct FSoftObjectPath SummonConfigPath; // 0x518(0x18)
	bool bAutoBurstFire; // 0x530(0x01)
	char pad_531[0x3]; // 0x531(0x03)
	float BurstFireInterval; // 0x534(0x04)
	float BurstFireInternalInterval; // 0x538(0x04)
	float FireAnimationPlayRate; // 0x53c(0x04)
	int32_t AmmoSoundType; // 0x540(0x04)
	float ProjectileMaxGravity; // 0x544(0x04)
	float ParticleStartDistance; // 0x548(0x04)
	float TrajectoryStartDistance; // 0x54c(0x04)
	bool bPenetrable; // 0x550(0x01)
	char pad_551[0x3]; // 0x551(0x03)
	float PenetrationRadius; // 0x554(0x04)
	struct UCurveFloat* PenetrationDamageMultiplierCurve; // 0x558(0x08)
	struct UCurveFloat* CylinderDamageMultiplierCurve; // 0x560(0x08)
	struct FSlateBrush TriggerIcon; // 0x568(0x98)
	struct UCurveFloat* BulletDamageCurve; // 0x600(0x08)
	struct UCurveFloat* BulletScaleCurve; // 0x608(0x08)
	struct UCurveFloat* BulletSpeedCurve; // 0x610(0x08)
	bool bThirdPesonViewXScaledByDistance; // 0x618(0x01)
	bool bForceApplyAbility; // 0x619(0x01)
	char pad_61A[0x6]; // 0x61a(0x06)
	struct TArray<struct ASolarAbility*> AmmoAbilityClasses; // 0x620(0x10)
	struct TArray<struct ASolarAbility*> AmmoAbilityClassesOnDestroyed; // 0x630(0x10)
	struct ASolarAbility* AmmoAbilityClassesOnSelf; // 0x640(0x08)
	int32_t SkillType; // 0x648(0x04)
	int32_t NameLocalTextIDNumber; // 0x64c(0x04)
	int32_t DescriptionLocalTextIDNumber; // 0x650(0x04)
	int32_t RangeLocalTextID; // 0x654(0x04)
	int32_t DifficultyLocalTextID; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)

	void InitVerticalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitVerticalRecoilStruct // (Final|Native|Public|Const) // @ game+0x1c304c0
	void InitSpreadData(float adscop, float vhadscop, float firepre, float changespeed, float restorepre, float restorespeed); // Function Solarland.AmmoConfig.InitSpreadData // (Final|Native|Public|Const) // @ game+0x1c302e0
	void InitScopeRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitScopeRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x1c2ffd0
	void InitScopeAndCrossHairVibration(float ScopeVMaxDistanceOffSet, float ScopeVVibrationDuration, float ScopeHMaxDistanceOffSet, float ScopeHVibrationDuration, float ScopeVContinuousFallingDuration, float ScopeVContinuousFallingPointIndex, float VMaxDistanceOffSetScale, float VVibrationDurationScale, float VSingleOffSetScale, float VContinuousOffSetScale, float HMaxDistanceOffSetScale, float HVibrationDurationScale, float HSingleOffSetScale, float HContinuousOffSetScale, float HOffSetProbabilityScale); // Function Solarland.AmmoConfig.InitScopeAndCrossHairVibration // (Final|Native|Public|Const) // @ game+0x1c2fb70
	void InitRollRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax, float adscop); // Function Solarland.AmmoConfig.InitRollRecoilStruct // (Final|Native|Public|Const) // @ game+0x1c2f930
	void InitRecoilCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.AmmoConfig.InitRecoilCOPMap // (Final|Native|Public|HasOutParms|Const) // @ game+0x1c2f7f0
	void InitPostFireSpreadCurveStruct(struct FString Path); // Function Solarland.AmmoConfig.InitPostFireSpreadCurveStruct // (Final|Native|Public|Const) // @ game+0x1c2f750
	void InitHorizontalRecoilStruct(float CostTime, int32_t AIndex, float AMin, float AMax, int32_t BIndex, float BMin, float BMax); // Function Solarland.AmmoConfig.InitHorizontalRecoilStruct // (Final|Native|Public|Const) // @ game+0x1c2f550
	void InitBaseData(int32_t Trigger); // Function Solarland.AmmoConfig.InitBaseData // (Final|Native|Public|Const) // @ game+0x1c2f4d0
};

// Class Solarland.AndroidInputManager
// Size: 0x38 (Inherited: 0x28)
struct UAndroidInputManager : UObject {
	struct FMulticastInlineDelegate OnAndroidBackPressed; // 0x28(0x10)
};

// Class Solarland.AnimNotify_CharacterFootEffect
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterFootEffect : UAnimNotify {
	struct TArray<struct FFootEffect> FootEffectList; // 0x38(0x10)

	void AddNewFootEffect(struct FFootEffect& NewEffect); // Function Solarland.AnimNotify_CharacterFootEffect.AddNewFootEffect // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1c35710
};

// Class Solarland.SolarAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct USolarAnimNotify : UAnimNotify {
	bool bDynamic; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotify_CharacterStartSound
// Size: 0x80 (Inherited: 0x40)
struct UAnimNotify_CharacterStartSound : USolarAnimNotify {
	struct TArray<struct FCharacterSound> SoundList; // 0x40(0x10)
	bool bUseSwitch; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<struct FString> SwitchGroupNames; // 0x58(0x10)
	bool bUseRTPC; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct TArray<struct FString> RPTCNames; // 0x70(0x10)

	int32_t RemoveAllSwitches(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllSwitches // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c36380
	int32_t RemoveAllRPTCs(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllRPTCs // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c36350
	int32_t RemoveAllCharacterSounds(); // Function Solarland.AnimNotify_CharacterStartSound.RemoveAllCharacterSounds // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c36320
	void AddNewSwitch(struct FString NewSwitch); // Function Solarland.AnimNotify_CharacterStartSound.AddNewSwitch // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c35870
	void AddNewRPTC(struct FString NewRTPC); // Function Solarland.AnimNotify_CharacterStartSound.AddNewRPTC // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c357d0
	void AddNewCharacterSound(struct FCharacterSound& NewSound); // Function Solarland.AnimNotify_CharacterStartSound.AddNewCharacterSound // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1c35570
};

// Class Solarland.AnimNotify_CharacterStopSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_CharacterStopSound : UAnimNotify {
	struct TArray<struct FCharacterSound> StopList; // 0x38(0x10)

	int32_t RemoveAllCharacterSoundStops(); // Function Solarland.AnimNotify_CharacterStopSound.RemoveAllCharacterSoundStops // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1c362f0
	void AddNewCharacterSoundStop(struct FCharacterSound& NewStop); // Function Solarland.AnimNotify_CharacterStopSound.AddNewCharacterSoundStop // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x1c35640
};

// Class Solarland.AnimNotify_ExecuteGameplayCueLocal
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_ExecuteGameplayCueLocal : UAnimNotify {
	struct FGameplayCueTag GameplayCueTag; // 0x38(0x08)
};

// Class Solarland.AnimNotify_FlyWaterEffect
// Size: 0x88 (Inherited: 0x38)
struct UAnimNotify_FlyWaterEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FName SocketName; // 0x68(0x08)
	struct FVector LocationOffset; // 0x70(0x0c)
	struct FRotator RotationOffset; // 0x7c(0x0c)
};

// Class Solarland.AnimNotify_LegVehicleRiseDust
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_LegVehicleRiseDust : UAnimNotify {
	struct TArray<int32_t> NotifyFootIndex; // 0x38(0x10)
};

// Class Solarland.AnimNotify_PlayParticleAsync
// Size: 0xb0 (Inherited: 0x38)
struct UAnimNotify_PlayParticleAsync : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	struct FVector LocationOffset; // 0x68(0x0c)
	struct FRotator RotationOffset; // 0x74(0x0c)
	struct FVector Scale; // 0x80(0x0c)
	char pad_8C[0x14]; // 0x8c(0x14)
	char Attached : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FName SocketName; // 0xa4(0x08)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.AnimNotify_PlayPickupSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_PlayPickupSound : UAnimNotify {
	struct FString DefaultSoundEventName; // 0x38(0x10)

	struct FString GetDefaultSoundEventName(); // Function Solarland.AnimNotify_PlayPickupSound.GetDefaultSoundEventName // (Final|Native|Public|Const) // @ game+0x1c35e10
};

// Class Solarland.AnimNotify_ReloadClip
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_ReloadClip : UAnimNotify {
	struct FName HandBoneName; // 0x38(0x08)
	enum class EAnimReloadNotifyType StepType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Solarland.AnimNotify_ShieldEndRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldEndRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldHideRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldHideRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldOperatorSet
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldOperatorSet : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldShowRechargeFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldShowRechargeFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldStartRecharge
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldStartRecharge : UAnimNotify {
};

// Class Solarland.AnimNotify_ShieldUpgradeFinishFX
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ShieldUpgradeFinishFX : UAnimNotify {
};

// Class Solarland.AnimNotify_ThrowThrown
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ThrowThrown : UAnimNotify {
};

// Class Solarland.AnimNotify_VehicleCameraShake
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_VehicleCameraShake : UAnimNotify {
	struct UCameraShake* VehicleCameraShake; // 0x38(0x08)
};

// Class Solarland.AnimNotify_VehicleFlyRoll
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotify_VehicleFlyRoll : UAnimNotify {
	enum class EVehicleFlyRollType VehicleRollType; // 0x38(0x01)
	bool bEnter; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float RollMoveSpeed; // 0x3c(0x04)
};

// Class Solarland.AnimNotify_VehiclePlaySound
// Size: 0x60 (Inherited: 0x38)
struct UAnimNotify_VehiclePlaySound : UAnimNotify {
	bool bCheckEnemy; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FString SameTeamSound; // 0x40(0x10)
	struct FString EnemySound; // 0x50(0x10)
};

// Class Solarland.AnimNotify_VehiclePreviewSound
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehiclePreviewSound : UAnimNotify {
	struct FString Sound; // 0x38(0x10)
};

// Class Solarland.AnimNotify_VehicleVFX
// Size: 0x48 (Inherited: 0x38)
struct UAnimNotify_VehicleVFX : UAnimNotify {
	struct TArray<struct FVehicleVFX> VehicleVFXes; // 0x38(0x10)
};

// Class Solarland.AnimNotify_WeaponBolt
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_WeaponBolt : UAnimNotify {
};

// Class Solarland.AnimNotifyState_AddLooseGameplayTag
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_AddLooseGameplayTag : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
};

// Class Solarland.AnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AllowPhysicsRotationDuringAnimRootMotion : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_AutoCancelOnInputReleased
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_AutoCancelOnInputReleased : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_CharacterLoopedSound
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_CharacterLoopedSound : UAnimNotifyState {
	struct TArray<struct FCharacterSound> EventListToPlay; // 0x30(0x10)
	struct TArray<struct FCharacterSound> EventListToStop; // 0x40(0x10)
};

// Class Solarland.AnimNotifyState_InhibitAimOffset
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitAimOffset : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_InhibitLeftHandWeaponAttach
// Size: 0x40 (Inherited: 0x30)
struct UAnimNotifyState_InhibitLeftHandWeaponAttach : UAnimNotifyState {
	float InhibitSmoothTime; // 0x30(0x04)
	float RecoverSmoothTime; // 0x34(0x04)
	bool bCalcRecoverSmoothTimeByRemainingTime; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Solarland.AnimNotifyState_OpenTreasureBox
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_OpenTreasureBox : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_PlayGameplayCueLocal
// Size: 0x38 (Inherited: 0x30)
struct UAnimNotifyState_PlayGameplayCueLocal : UAnimNotifyState {
	struct FGameplayCueTag GameplayCueTag; // 0x30(0x08)
};

// Class Solarland.AnimNotifyState_RechargeShield
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_RechargeShield : UAnimNotifyState {
	struct FGameplayTagContainer GameplayTags; // 0x30(0x20)
	bool bFXorMesh; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Solarland.AnimNotifyState_RepairVehicleWeakPoints
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_RepairVehicleWeakPoints : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_ShieldUpgradeFX
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_ShieldUpgradeFX : UAnimNotifyState {
};

// Class Solarland.AnimNotifyState_SolarSpawnMeshAndAttach
// Size: 0x50 (Inherited: 0x30)
struct UAnimNotifyState_SolarSpawnMeshAndAttach : UAnimNotifyState {
	struct TArray<struct FAttachedMeshInfo> MeshesInfo; // 0x30(0x10)
	struct TArray<struct UStaticMeshComponent*> SpawnedMeshComps; // 0x40(0x10)
};

// Class Solarland.AnimNotifyState_SolarTimedParticleEffect
// Size: 0xb0 (Inherited: 0x30)
struct UAnimNotifyState_SolarTimedParticleEffect : UAnimNotifyState {
	bool bAsyncLoad; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct TSoftObjectPtr<UParticleSystem> PSTemplateSoft; // 0x40(0x28)
	bool Attached; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	struct FName SocketName; // 0x6c(0x08)
	struct FVector LocationOffset; // 0x74(0x0c)
	struct FRotator RotationOffset; // 0x80(0x0c)
	struct FVector Scale; // 0x8c(0x0c)
	bool bDestroyAtEnd; // 0x98(0x01)
	bool bLockRelativeRotation; // 0x99(0x01)
	char pad_9A[0x16]; // 0x9a(0x16)
};

// Class Solarland.AttributeSubExecCalc
// Size: 0x68 (Inherited: 0x40)
struct UAttributeSubExecCalc : UGameplayEffectExecutionCalculation {
	struct UAttributeSubExecProxy* CDOProxyClass; // 0x40(0x08)
	struct UAttributeSubExecProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.AttributeSubExecProxy
// Size: 0x30 (Inherited: 0x28)
struct UAttributeSubExecProxy : UObject {
	struct TWeakObjectPtr<struct UAttributeSubExecCalc> CDOOwner; // 0x28(0x08)

	void ModifyAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, enum class EAttributeSubBehavior Behavior, int32_t AttributeSubID, struct FName AttrSubTag, float ModifyValue); // Function Solarland.AttributeSubExecProxy.ModifyAttributeSub // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c36160
	struct FGameplayModifierEvaluatedData MakeExecProxyEvaluated(struct FGameplayAttribute InAttribute, float InMagnitud); // Function Solarland.AttributeSubExecProxy.MakeExecProxyEvaluated // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1c35e90
	void ExecutePureAttributeSub(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs); // Function Solarland.AttributeSubExecProxy.ExecutePureAttributeSub // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ExecuteAttributeCalculation(struct USolarAttributeSubComponent* AttrSubComp, struct TArray<struct FAttributeSubSetting>& InAttributeSubs, struct TArray<struct FGameplayAttribute>& InAttribute, struct TArray<struct FGameplayModifierEvaluatedData>& OutModResults); // Function Solarland.AttributeSubExecProxy.ExecuteAttributeCalculation // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct UAttributeSubExecProxy* CreateProxy(struct UAttributeSubExecCalc* InCDOOwner, struct UAttributeSubExecProxy* ProxyClass); // Function Solarland.AttributeSubExecProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1c35d50
};

// Class Solarland.AttributeSubGameplayEffect
// Size: 0x868 (Inherited: 0x848)
struct UAttributeSubGameplayEffect : UGameplayEffect {
	struct TArray<struct FAttributeSubSetting> AttributeSubMods; // 0x848(0x10)
	struct TArray<struct FAttributeSubSetting> PureAttributeSubs; // 0x858(0x10)

	void UpdateAttributeBySub(struct FGameplayAttribute Attribute); // Function Solarland.AttributeSubGameplayEffect.UpdateAttributeBySub // (Final|Native|Public|BlueprintCallable) // @ game+0x1c363b0
	struct UAttributeSubGameplayEffect* CreateAttributeSubEffectInstance(struct UObject* Outer, struct UAttributeSubExecCalc* AttributeSubCalcClass, struct UAttributeSubGameplayEffect* Class); // Function Solarland.AttributeSubGameplayEffect.CreateAttributeSubEffectInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c35c60
	void CancelPureAttributeSub(int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x1c35be0
	void CancelAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID); // Function Solarland.AttributeSubGameplayEffect.CancelAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x1c359e0
	void AddPureAttributeSub(int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddPureAttributeSub // (Final|Native|Public|BlueprintCallable) // @ game+0x1c35910
	void AddAttributeSubModify(struct FGameplayAttribute Attribute, int32_t AttributeSubID, float Value); // Function Solarland.AttributeSubGameplayEffect.AddAttributeSubModify // (Final|Native|Public|BlueprintCallable) // @ game+0x1c35350
};

// Class Solarland.AttributeSubInterface
// Size: 0x28 (Inherited: 0x28)
struct UAttributeSubInterface : UInterface {

	struct USolarAttributeSubComponent* GetAttributeSubComponent(); // Function Solarland.AttributeSubInterface.GetAttributeSubComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c2f2f0
};

// Class Solarland.VertAnimMeshComponent
// Size: 0x630 (Inherited: 0x600)
struct UVertAnimMeshComponent : UStaticMeshComponent {
	char pad_600[0x30]; // 0x600(0x30)

	void PlayInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.VertAnimMeshComponent.PlayInfo // (Final|Native|Public|HasOutParms) // @ game+0x1f1e9e0
	void Play(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.VertAnimMeshComponent.Play // (Final|Native|Public) // @ game+0x1f1e890
};

// Class Solarland.BackpackVertAnimMeshComponent
// Size: 0x710 (Inherited: 0x630)
struct UBackpackVertAnimMeshComponent : UVertAnimMeshComponent {
	struct FVertexAnimInfo DefaultAnimInfo; // 0x628(0x10)
	struct TMap<enum class EBackPackAnimSubType, struct FVertexAnimInfo> BackPackAnimInfoMap; // 0x638(0x50)
	struct ASolarCharacter* SolarCharacter; // 0x688(0x08)
	struct ASolarBackpackActor* BackPackActor; // 0x690(0x08)
	char pad_6A0[0x70]; // 0x6a0(0x70)
};

// Class Solarland.SolarAttributeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarAttributeSet : UAttributeSet {

	void K2_SetAttributeValue(struct FName AttributeName, float NewVal); // Function Solarland.SolarAttributeSet.K2_SetAttributeValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cf2130
	void K2_OnReplicationAttribute(struct FGameplayAttributeData& OldValue, struct FGameplayAttributeData& ReplicatedAttribute, struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_OnReplicationAttribute // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1cf1ff0
	void K2_InitAttributeValue(struct FGameplayAttributeData& OriginAttribute, float NewVal); // Function Solarland.SolarAttributeSet.K2_InitAttributeValue // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1cf1f00
	float K2_GetAttributeValue(struct FGameplayAttributeData& OriginAttribute); // Function Solarland.SolarAttributeSet.K2_GetAttributeValue // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce2320
	struct FGameplayAttribute K2_GetAttribute(struct FName AttributeName); // Function Solarland.SolarAttributeSet.K2_GetAttribute // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf1db0
};

// Class Solarland.BasalAttributeSet
// Size: 0x50 (Inherited: 0x30)
struct UBasalAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData MaxHealth; // 0x30(0x10)
	struct FGameplayAttributeData CurrentHealth; // 0x40(0x10)

	void OnRep_MaxHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_MaxHealth // (Native|Protected|HasOutParms) // @ game+0x1c3ca70
	void OnRep_CurrentHealth(struct FGameplayAttributeData& Previous); // Function Solarland.BasalAttributeSet.OnRep_CurrentHealth // (Native|Protected|HasOutParms) // @ game+0x1c3c9c0
};

// Class Solarland.BattleChat
// Size: 0x338 (Inherited: 0x260)
struct UBattleChat : UUserWidget {
	struct UGaugeImage* ChatCDMask; // 0x260(0x08)
	struct UImage* ImgBG; // 0x268(0x08)
	struct UCheckBoxGroup* CBGroupOperation; // 0x270(0x08)
	struct UScrollBox* PanelChatOptions; // 0x278(0x08)
	struct USolarCheckBox* CBoxChatSwitch; // 0x280(0x08)
	struct UWidgetAnimation* AnimChatCooldown; // 0x288(0x08)
	struct UQuickChatUnit* ChatButtonClass; // 0x290(0x08)
	struct FSlateBrush SeparatorBrush; // 0x298(0x98)
	char pad_330[0x8]; // 0x330(0x08)

	void SetLogDisplay(bool bDisplay); // Function Solarland.BattleChat.SetLogDisplay // (Final|Native|Protected) // @ game+0x1c3d140
	void ReceiveQuickMessage(struct FString InName, struct FString InMessage1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleChat.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x1c3ccb0
	void ReceiveQuickChatSending(); // Function Solarland.BattleChat.ReceiveQuickChatSending // (Final|Native|Protected) // @ game+0x1c3cc90
	void OnGroupOperationStateChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.BattleChat.OnGroupOperationStateChanged // (Final|Native|Protected|HasOutParms) // @ game+0x1c3c790
};

// Class Solarland.SolarHUD
// Size: 0x318 (Inherited: 0x318)
struct ASolarHUD : AHUD {
};

// Class Solarland.BattleHUDBase
// Size: 0x380 (Inherited: 0x318)
struct ABattleHUDBase : ASolarHUD {
	struct UHUDDispatcherBase* Dispatcher; // 0x318(0x08)
	struct UHUDDispatcherBase* WidgetEventDispatcher; // 0x320(0x08)
	bool bUseBattleDeathView; // 0x328(0x01)
	char pad_329[0x57]; // 0x329(0x57)

	void ShowDiePage_Deprecated(); // Function Solarland.BattleHUDBase.ShowDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x1c3d1d0
	struct UUISubsystem* GetUISubSystem(); // Function Solarland.BattleHUDBase.GetUISubSystem // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c3c630
	void CloseDiePage_Deprecated(struct UUserWidget* InDiePageClass); // Function Solarland.BattleHUDBase.CloseDiePage_Deprecated // (Final|Native|Public|BlueprintCallable) // @ game+0x1c3c340
};

// Class Solarland.BattleHUDForTechDesign
// Size: 0x380 (Inherited: 0x380)
struct ABattleHUDForTechDesign : ABattleHUDBase {
};

// Class Solarland.UINoticeBase
// Size: 0x368 (Inherited: 0x340)
struct UUINoticeBase : USolarUserWidget {
	struct USolarRichTextBlock* TextWidget; // 0x340(0x08)
	struct UImage* TxtBg; // 0x348(0x08)
	struct UImage* Icon; // 0x350(0x08)
	struct UImage* IconBg; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void ShowEnterAnimation(); // Function Solarland.UINoticeBase.ShowEnterAnimation // (Native|Public|BlueprintCallable) // @ game+0xb56310
	void SetIconBrush(struct FString IconPath); // Function Solarland.UINoticeBase.SetIconBrush // (Final|Native|Public|BlueprintCallable) // @ game+0x1f1a410
	void SetColor(struct FNoticeColorData& InColorData); // Function Solarland.UINoticeBase.SetColor // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1f1a2c0
	void ResetIsPlayingVoice(enum class EAkCallbackType CallbackType, struct UAkCallbackInfo* CallbackInfo); // Function Solarland.UINoticeBase.ResetIsPlayingVoice // (Final|Native|Public) // @ game+0x1f1a130
	struct UWidgetAnimation* GetExitAnimation(); // Function Solarland.UINoticeBase.GetExitAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1f19b70
	struct UWidgetAnimation* GetEnterAnimation(); // Function Solarland.UINoticeBase.GetEnterAnimation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1f19b40
	void DefaultClose(); // Function Solarland.UINoticeBase.DefaultClose // (Final|Native|Public|BlueprintCallable) // @ game+0x1f19b20
	void CloseNotice(); // Function Solarland.UINoticeBase.CloseNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1f19a80
};

// Class Solarland.BattleNoticeEquipReplace
// Size: 0x450 (Inherited: 0x368)
struct UBattleNoticeEquipReplace : UUINoticeBase {
	struct UImage* Img_Item1; // 0x368(0x08)
	struct UImage* Img_Item2; // 0x370(0x08)
	struct UImage* Img_Item1_BG; // 0x378(0x08)
	struct UImage* Img_Item2_BG; // 0x380(0x08)
	struct UTextBlock* Quality1; // 0x388(0x08)
	struct UTextBlock* Quality2; // 0x390(0x08)
	struct UWidgetAnimation* Enter_Animation_1; // 0x398(0x08)
	struct UWidgetAnimation* Enter_Animation_2; // 0x3a0(0x08)
	struct UWidgetAnimation* Enter_Animation_3; // 0x3a8(0x08)
	struct TMap<enum class EItemType, struct TSoftObjectPtr<UTexture2D>> DefaultEquipIcons; // 0x3b0(0x50)
	struct TMap<enum class EWeaponPartType, struct TSoftObjectPtr<UTexture2D>> DefaultWeaponPartIcons; // 0x400(0x50)

	void OnEquipReplaceAnimFinished(); // Function Solarland.BattleNoticeEquipReplace.OnEquipReplaceAnimFinished // (Final|Native|Public) // @ game+0x1c3c770
};

// Class Solarland.BattleNoticePickup
// Size: 0x398 (Inherited: 0x368)
struct UBattleNoticePickup : UUINoticeBase {
	struct USolarTextBlock* Txt_PickupNotice_ItemName; // 0x368(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Head; // 0x370(0x08)
	struct USolarTextBlock* Txt_PickupNotice_Tail; // 0x378(0x08)
	struct UImage* Img_Txt_bg; // 0x380(0x08)
	struct TArray<struct FLinearColor> QualityColor; // 0x388(0x10)
};

// Class Solarland.BattleOBHUD
// Size: 0x390 (Inherited: 0x380)
struct ABattleOBHUD : ABattleHUDBase {
	char pad_380[0x8]; // 0x380(0x08)
	struct USolarOBUIModule* SolarOBUIModule; // 0x388(0x08)

	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.BattleOBHUD.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c3d0b0
	void OpenShortCutKeyboard(); // Function Solarland.BattleOBHUD.OpenShortCutKeyboard // (Final|Native|Public|BlueprintCallable) // @ game+0x1c3cc70
	void OnUISettingHeadInfoChanged(bool bShow); // Function Solarland.BattleOBHUD.OnUISettingHeadInfoChanged // (Final|Native|Private) // @ game+0x1c3cbe0
	bool IsDirectorModeEnabled(); // Function Solarland.BattleOBHUD.IsDirectorModeEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c3c680
	struct UOBHUDDispatcher* GetOBHUDDispatcher(); // Function Solarland.BattleOBHUD.GetOBHUDDispatcher // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c3c600
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.BattleOBHUD.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c3c3c0
	void AddWidgetToOBRoot(struct UPanelSlot*& ResultSlot, struct UWidget* InChildWidget, struct FName& PanelName, bool bReplaceOld); // Function Solarland.BattleOBHUD.AddWidgetToOBRoot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c3bf30
};

// Class Solarland.BattlePassConfigInfo
// Size: 0x38 (Inherited: 0x28)
struct UBattlePassConfigInfo : UObject {
	struct TArray<struct FBattlePassLevelInfo> BattlePassLevel; // 0x28(0x10)

	bool IsMaxLevelWithExp(int32_t BattlePassID, int32_t TotalExp); // Function Solarland.BattlePassConfigInfo.IsMaxLevelWithExp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c3c6b0
	void Initialize(); // Function Solarland.BattlePassConfigInfo.Initialize // (Final|Native|Public) // @ game+0x1c3c660
	int32_t GetLevelByTestExp(int32_t BattlePassID, int32_t InTestExp); // Function Solarland.BattlePassConfigInfo.GetLevelByTestExp // (Final|Native|Public) // @ game+0x1c3c540
	int32_t GetExpNeedForLv(int32_t BattlePassID, int32_t Level); // Function Solarland.BattlePassConfigInfo.GetExpNeedForLv // (Final|Native|Public) // @ game+0x1c3c480
	int32_t GetBattllePassMaxLevel(int32_t BattlePassID); // Function Solarland.BattlePassConfigInfo.GetBattllePassMaxLevel // (Final|Native|Public) // @ game+0x1c3c3f0
};

// Class Solarland.BattlePromptWidget
// Size: 0x4d8 (Inherited: 0x340)
struct UBattlePromptWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UCanvasPanel* EnterAnimPanel; // 0x348(0x08)
	struct UMeshRectangleWidget* MeshWidget_Arrow; // 0x350(0x08)
	struct UMeshRectangleWidget* MeshWidget_Detail; // 0x358(0x08)
	float CloseCheckAngle; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	struct TMap<enum class EBattlePromptType, float> ElemRadiusMap; // 0x368(0x50)
	struct TMap<enum class EOffsetLevelType, struct FDisOffsetInfo> XYLevelMap; // 0x3b8(0x50)
	struct TMap<enum class EOffsetLevelType, struct FDisOffsetInfo> HeavyFireXYLevelMap; // 0x408(0x50)
	struct TSet<struct AActor*> EffectedNightmareActors; // 0x458(0x50)
	char pad_4A8[0x20]; // 0x4a8(0x20)
	struct TArray<struct FPromptElemInfo> Datas; // 0x4c8(0x10)

	void PlayForbidAnim(bool bQuickEnter); // Function Solarland.BattlePromptWidget.PlayForbidAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.BattlePromptWidget.OnSpecTargetChanged // (Final|Native|Public) // @ game+0x1c3cb20
	void OnNightComesActorChanged(struct AActor* InActor); // Function Solarland.BattlePromptWidget.OnNightComesActorChanged // (Final|Native|Public) // @ game+0x1c3c880
};

// Class Solarland.BattleSubSundry
// Size: 0x390 (Inherited: 0x340)
struct UBattleSubSundry : USolarUserWidget {
	struct UScrollBox* PanelInformation; // 0x340(0x08)
	struct USolarRichTextBlock* TxtInformation03; // 0x348(0x08)
	struct USolarRichTextBlock* TxtInformation02; // 0x350(0x08)
	struct USolarRichTextBlock* TxtInformation01; // 0x358(0x08)
	struct UWidgetAnimation* AnimInformationDisappear; // 0x360(0x08)
	int32_t MaxMessageStock; // 0x368(0x04)
	float ChatCoolDown; // 0x36c(0x04)
	float InfoKeepDuration; // 0x370(0x04)
	char pad_374[0x1c]; // 0x374(0x1c)

	void ReceiveQuickMessage(struct FString InName, struct FString InMessage, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString InMessage2); // Function Solarland.BattleSubSundry.ReceiveQuickMessage // (Final|Native|Protected) // @ game+0x1c3ceb0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.BattleSubSundry.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x1c3c900
};

// Class Solarland.BattleUpgradeEffectCategoryData
// Size: 0x80 (Inherited: 0x30)
struct UBattleUpgradeEffectCategoryData : UDataAsset {
	struct TMap<enum class EBattleUpgradeEffectCategory, struct FBattleUpgradeEffectCategoryConfig> CategoryConfigMap; // 0x30(0x50)

	void BreakBattleUpgradeEffectCategoryColorSet(struct FBattleUpgradeEffectCategoryColorSet& ColorSet, struct FLinearColor& BannerCategoryTextColor, struct FLinearColor& BannerIconColor, struct FLinearColor& BannerBorderColor, struct FLinearColor& BannerBackgroundColor, struct FLinearColor& BadgeIconColor, struct FLinearColor& BadgeBackgroundColor); // Function Solarland.BattleUpgradeEffectCategoryData.BreakBattleUpgradeEffectCategoryColorSet // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c3c0a0
};

// Class Solarland.BattleUpgradeEffectSettings
// Size: 0x90 (Inherited: 0x38)
struct UBattleUpgradeEffectSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UDataTable> EffectTypeConfig; // 0x38(0x28)
	int32_t SelectEffectHintLocalTextID; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TSoftObjectPtr<UBattleUpgradeEffectCategoryData> EffectCategoryData; // 0x68(0x28)
};

// Class Solarland.BigWaterGun
// Size: 0x388 (Inherited: 0x228)
struct ABigWaterGun : AActor {
	float CylinderRadius; // 0x228(0x04)
	float CylinderLength; // 0x22c(0x04)
	float TraceIntaval; // 0x230(0x04)
	float DamageChaPerInteval; // 0x234(0x04)
	float DamageVehPerInteval; // 0x238(0x04)
	float DamageDecayFirst; // 0x23c(0x04)
	float DamageDecaySecond; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct FSoftObjectPath MeshPath; // 0x248(0x18)
	struct FName MeshSocket; // 0x260(0x08)
	struct FRotator WaterColumeEffectRotator; // 0x268(0x0c)
	char pad_274[0x4]; // 0x274(0x04)
	struct UParticleSystem* WaterColumnEffect; // 0x278(0x08)
	struct FName InstigatorEffectID; // 0x280(0x08)
	struct UCameraShake* CameraShakeClass; // 0x288(0x08)
	struct UUserWidget* InCrossHairClass; // 0x290(0x08)
	float NearlyEndTime; // 0x298(0x04)
	bool bShowDebug; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	float MuzzleTraceOffset; // 0x2a0(0x04)
	struct FName ShotAnimNotifyName; // 0x2a4(0x08)
	struct FName UnequipAnimNotifyName; // 0x2ac(0x08)
	struct FName UnequipAnimNotifyName_Gatling; // 0x2b4(0x08)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x2c0(0x08)
	bool bInFire; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct UParticleSystemComponent* ClientWaterColumnEffectHandle; // 0x2d0(0x08)
	int32_t InstigatorEffectHandle; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UCameraShake* CameraShakeInstance; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x2f0(0x08)
	struct FGameplayEffectSpecHandle SlowDownEffectHandle; // 0x2f8(0x10)
	char pad_308[0x70]; // 0x308(0x70)
	struct FName LeftHandIKGripSocketName; // 0x378(0x08)
	struct FGameplayTag BigWaterGunOrnamentTag; // 0x380(0x08)

	void ServerHit(struct FHitResult Impact, int32_t DamageDacayCount); // Function Solarland.BigWaterGun.ServerHit // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1c40a60
	void PlayNearlyEndSound(); // Function Solarland.BigWaterGun.PlayNearlyEndSound // (Final|Native|Private) // @ game+0x1c40a40
	void OnRep_InFire(); // Function Solarland.BigWaterGun.OnRep_InFire // (Final|Native|Private) // @ game+0x1c40a20
	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.BigWaterGun.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x1c40940
};

// Class Solarland.BotAIDataAsset
// Size: 0x40 (Inherited: 0x30)
struct UBotAIDataAsset : UDataAsset {
	struct TArray<struct FBotAIBehavirTreeInMapData> BotAIConfigDataMap; // 0x30(0x10)
};

// Class Solarland.SpawnerInGuide
// Size: 0x278 (Inherited: 0x228)
struct ASpawnerInGuide : AActor {
	int32_t BotAISpawnerId; // 0x228(0x04)
	int32_t BotAICharacterId; // 0x22c(0x04)
	int32_t TeamID; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct FString AIName; // 0x238(0x10)
	bool bSpawnDeathBox; // 0x248(0x01)
	bool bSpawnBeginPlay; // 0x249(0x01)
	char pad_24A[0x2]; // 0x24a(0x02)
	float DelaySec; // 0x24c(0x04)
	struct FVector SpawnLocationOffset; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct ASolarBotAIController* BotAIControllerClass; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	struct ASolarBotAIController* SpawnBotAI(); // Function Solarland.SpawnerInGuide.SpawnBotAI // (Final|Native|Public|BlueprintCallable) // @ game+0x1f049d0
	void SetBotAIConfig(struct ASolarBotAIController* Ctrl); // Function Solarland.SpawnerInGuide.SetBotAIConfig // (Native|Public) // @ game+0x127a870
	struct ASolarBotAIController* GetSpawnedAIController(); // Function Solarland.SpawnerInGuide.GetSpawnedAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f04560
};

// Class Solarland.BotAISpawnerInGuide
// Size: 0x2b8 (Inherited: 0x278)
struct ABotAISpawnerInGuide : ASpawnerInGuide {
	struct UBehaviorTree* BehaviorTree; // 0x278(0x08)
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x280(0x10)
	int32_t BotDefaultWeaponId; // 0x290(0x04)
	uint32_t BotShootDisperse; // 0x294(0x04)
	float HitRate; // 0x298(0x04)
	float ActiveDamageRate; // 0x29c(0x04)
	float NoDamageLeftHP; // 0x2a0(0x04)
	float BotAttackRange; // 0x2a4(0x04)
	struct FVector MoveTarget; // 0x2a8(0x0c)
	char pad_2B4[0x4]; // 0x2b4(0x04)
};

// Class Solarland.BTDecorator_BlackboardDelay
// Size: 0xc8 (Inherited: 0xc0)
struct UBTDecorator_BlackboardDelay : UBTDecorator_Blackboard {
	float DelaySeconds; // 0xc0(0x04)
	bool bOnlyDelayLowerPri; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.BTDecorator_TickFlow
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_TickFlow : UBTDecorator_BlackboardBase {
	float TickInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotAttributeCompare
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_BotAttributeCompare : UBTDecorator_TickFlow {
	enum class EBotAttrType AttrType; // 0x98(0x01)
	enum class EBotAttrValueType ValueType; // 0x99(0x01)
	enum class EBotAttrOperator Operator; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float CompareValue; // 0x9c(0x04)
	bool bCheckVehicle; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float EqualThreshold; // 0xa4(0x04)
};

// Class Solarland.BTDecorator_BotCheck
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheck : UBTDecorator_TickFlow {
	enum class EBotCheckCondition Condition; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckAIServer
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckAIServer : UBTDecorator_TickFlow {
	enum class EBotCheckAIServer Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckGameplayTags
// Size: 0xb8 (Inherited: 0x98)
struct UBTDecorator_BotCheckGameplayTags : UBTDecorator_TickFlow {
	struct FGameplayTagContainer AbilityTags; // 0x98(0x20)
};

// Class Solarland.BTDecorator_BotCheckInEffectArea
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckInEffectArea : UBTDecorator_TickFlow {
	enum class EPerceivableEffectAreaType CheckInAreaType; // 0x98(0x01)
	bool bCheckAreaTendency; // 0x99(0x01)
	enum class EPerceivableEffectAreaTendency AreaTendency; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.BTDecorator_BotCheckNgaiMLAction
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckNgaiMLAction : UBTDecorator_TickFlow {
	enum class EBotCheckNgaiMLAction Action; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckRoleAbility
// Size: 0x70 (Inherited: 0x68)
struct UBTDecorator_BotCheckRoleAbility : UBTDecorator {
	struct FGameplayTag AbilityTag; // 0x68(0x08)
};

// Class Solarland.BTDecorator_BotCheckShieldUpgradeItem
// Size: 0x68 (Inherited: 0x68)
struct UBTDecorator_BotCheckShieldUpgradeItem : UBTDecorator {
};

// Class Solarland.BTDecorator_BotCheckState
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckState : UBTDecorator_TickFlow {
	enum class EBotCheckState CheckState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckTeamMemberState
// Size: 0xa0 (Inherited: 0x98)
struct UBTDecorator_BotCheckTeamMemberState : UBTDecorator_TickFlow {
	enum class ESolarBotMemberState CheckState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.BTDecorator_BotCheckWeaponType
// Size: 0x98 (Inherited: 0x90)
struct UBTDecorator_BotCheckWeaponType : UBTDecorator_BlackboardBase {
	enum class EWeaponType WeaponType; // 0x90(0x01)
	bool bCheckById; // 0x91(0x01)
	char pad_92[0x2]; // 0x92(0x02)
	int32_t weaponid; // 0x94(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyDetectArea
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyDetectArea : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	float TimeThresholdMin; // 0x9c(0x04)
	float TimeThresholdMinDeviation; // 0xa0(0x04)
	bool bSpecifyAreaType; // 0xa4(0x01)
	enum class EPerceivableEffectAreaType SpecifiedAreaType; // 0xa5(0x01)
	bool bSpecifyAreaTendency; // 0xa6(0x01)
	enum class EPerceivableEffectAreaTendency SpecifiedAreaTendency; // 0xa7(0x01)
	float MinInfluenceValue; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_BotWasRecentlyHit
// Size: 0xb0 (Inherited: 0x98)
struct UBTDecorator_BotWasRecentlyHit : UBTDecorator_TickFlow {
	float TimeThresholdMax; // 0x98(0x04)
	bool bIncludeHearingHit; // 0x9c(0x01)
	bool bTriggerDelay; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	float TriggerDelaySeconds; // 0xa0(0x04)
	float TriggerDelaySecondsDeviation; // 0xa4(0x04)
	float TriggerExpiredSeconds; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.BTDecorator_DistanceCompare
// Size: 0x128 (Inherited: 0x98)
struct UBTDecorator_DistanceCompare : UBTDecorator_TickFlow {
	enum class EDistanceComparison Operator; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FBlackboardKeySelector BlackboardKeyFrom; // 0xa0(0x28)
	struct FBlackboardKeySelector BlackboardKeyTo; // 0xc8(0x28)
	float DistanceToCompare; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FBlackboardKeySelector BBK_DistanceToCompare; // 0xf8(0x28)
	bool bDistance2D; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	float EqualThreshold; // 0x124(0x04)
};

// Class Solarland.BTDecorator_TimeLimitRand
// Size: 0x78 (Inherited: 0x70)
struct UBTDecorator_TimeLimitRand : UBTDecorator_TimeLimit {
	float RandDeviation; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Solarland.BTDecorator_VehicleCheck
// Size: 0xa8 (Inherited: 0x98)
struct UBTDecorator_VehicleCheck : UBTDecorator_TickFlow {
	struct TArray<int32_t> VehicleIds; // 0x98(0x10)
};

// Class Solarland.BuffEffectActorGroupVO
// Size: 0xd8 (Inherited: 0x28)
struct UBuffEffectActorGroupVO : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TMap<struct FName, struct FBuffEffectActorElemList> InstantActorListMap; // 0x30(0x50)
	char pad_80[0x8]; // 0x80(0x08)
	struct TMap<struct FName, struct UBuffEffectActorElem*> DurationActorMap; // 0x88(0x50)
};

// Class Solarland.BuffEffectVO
// Size: 0x40 (Inherited: 0x28)
struct UBuffEffectVO : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Solarland.BuffEffectActorVO
// Size: 0x58 (Inherited: 0x40)
struct UBuffEffectActorVO : UBuffEffectVO {
	char pad_40[0x18]; // 0x40(0x18)
};

// Class Solarland.BuffEffectActorElem
// Size: 0x40 (Inherited: 0x28)
struct UBuffEffectActorElem : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Solarland.BuffEffectLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBuffEffectLibrary : UBlueprintFunctionLibrary {

	void StopScreenEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c40e30
	void StopActorEffect(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.StopActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c40d80
	int32_t StartScreenEffect(struct UObject* WorldContextObject, struct FString RowName); // Function Solarland.BuffEffectLibrary.StartScreenEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c40ca0
	int32_t StartActorEffect(struct UObject* WorldContextObject, struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectLibrary.StartActorEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c40b80
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(struct UObject* WorldContextObject, int32_t InHandle); // Function Solarland.BuffEffectLibrary.GetActorEffectPSComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c40840
};

// Class Solarland.BuffEffectScreenPanel
// Size: 0x450 (Inherited: 0x340)
struct UBuffEffectScreenPanel : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	struct UCanvasPanel* LayerDurationGroup; // 0x350(0x08)
	struct UCanvasPanel* LayerDurationTwoSidePart; // 0x358(0x08)
	struct UCanvasPanel* LayerDurationBottomHalfPart; // 0x360(0x08)
	struct UCanvasPanel* LayerDurationBorderPart; // 0x368(0x08)
	struct UCanvasPanel* LayerDurationTopHalfPart; // 0x370(0x08)
	struct UCanvasPanel* LayerDurationFullPart; // 0x378(0x08)
	struct UCanvasPanel* LayerInstantGroup; // 0x380(0x08)
	struct UCanvasPanel* LayerInstantTwoSidePart; // 0x388(0x08)
	struct UCanvasPanel* LayerInstantBottomHalfPart; // 0x390(0x08)
	struct UCanvasPanel* LayerInstantBorderPart; // 0x398(0x08)
	struct UCanvasPanel* LayerInstantTopHalfPart; // 0x3a0(0x08)
	struct UCanvasPanel* LayerInstantFullPart; // 0x3a8(0x08)
	char pad_3B0[0xa0]; // 0x3b0(0xa0)
};

// Class Solarland.BuffEffectScreenVO
// Size: 0x70 (Inherited: 0x40)
struct UBuffEffectScreenVO : UBuffEffectVO {
	char pad_40[0x30]; // 0x40(0x30)
};

// Class Solarland.BuffEffectSubsystem
// Size: 0x220 (Inherited: 0x30)
struct UBuffEffectSubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<enum class EBuffEffectTagType, struct FBuffEffectScreenListVO> InstantBuffEffectScreenListMap; // 0x38(0x50)
	char pad_88[0x8]; // 0x88(0x08)
	struct TMap<enum class EBuffEffectTagType, struct UBuffEffectScreenVO*> DurationBuffEffectScreenMap; // 0x90(0x50)
	struct TMap<int32_t, struct UBuffEffectScreenVO*> BuffEffectScreenHandleMap; // 0xe0(0x50)
	struct TMap<uint32_t, struct UBuffEffectActorGroupVO*> BuffEffectActorGroupMap; // 0x130(0x50)
	struct TMap<uint32_t, struct UBuffEffectActorElem*> BuffEffectActorElemMap; // 0x180(0x50)
	struct TMap<int32_t, struct UBuffEffectActorVO*> BuffEffectActorHandleMap; // 0x1d0(0x50)

	void StopScreenEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1c459a0
	void StopActorEffect(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.StopActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1c45920
	int32_t StartScreenEffectSafe(struct FName& RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c45880
	int32_t StartScreenEffect(struct FString RowName); // Function Solarland.BuffEffectSubsystem.StartScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1c457d0
	int32_t StartActorEffectSafe(struct FName& RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffectSafe // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c456f0
	int32_t StartActorEffect(struct FString RowName, struct USceneComponent* AttachToComponent); // Function Solarland.BuffEffectSubsystem.StartActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1c45600
	void OnPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.BuffEffectSubsystem.OnPSCompFinish // (Final|Native|Private) // @ game+0x1c45310
	struct TArray<struct UParticleSystemComponent*> GetActorEffectPSComponents(int32_t InHandle); // Function Solarland.BuffEffectSubsystem.GetActorEffectPSComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x1c44f00
};

// Class Solarland.BulletAttackAbility
// Size: 0x400 (Inherited: 0x400)
struct UBulletAttackAbility : UGameplayAbility {
};

// Class Solarland.CameraModifier_CameraShakeWithCurve
// Size: 0xb8 (Inherited: 0x48)
struct UCameraModifier_CameraShakeWithCurve : UCameraModifier {
	struct TMap<struct UCameraShakeWithCurve*, struct FCameraShakeWithCurvePool> ShakePoolByClass; // 0x48(0x50)
	struct TArray<struct FCameraShakeWithCurveTemplatePool> ShakePoolByTemplate; // 0x98(0x10)
	struct TArray<struct FActiveCameraShakeWithCurve> ActiveShakes; // 0xa8(0x10)
};

// Class Solarland.CameraShakeWithCurve
// Size: 0xe0 (Inherited: 0x28)
struct UCameraShakeWithCurve : UObject {
	bool bSingleInstance; // 0x28(0x01)
	bool bDisableObjectPool; // 0x29(0x01)
	char pad_2A[0x6]; // 0x2a(0x06)
	struct UCameraModifier_CameraShakeWithCurve* Modifier; // 0x30(0x08)
	float ShakeTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve ShakeCurve; // 0x40(0x88)
	struct TArray<struct UCameraShakeWithCurve_Element*> ShakeElements; // 0xc8(0x10)
	char pad_D8[0x8]; // 0xd8(0x08)
};

// Class Solarland.CameraShakeWithCurve_Element
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakeWithCurve_Element : UObject {
};

// Class Solarland.CameraShakeWithCurve_Location
// Size: 0x60 (Inherited: 0x28)
struct UCameraShakeWithCurve_Location : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat XRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat ZRange; // 0x40(0x0c)
	bool bLocalSpace; // 0x4c(0x01)
	char pad_4D[0x13]; // 0x4d(0x13)
};

// Class Solarland.CameraShakeWithCurve_Rotation
// Size: 0x58 (Inherited: 0x28)
struct UCameraShakeWithCurve_Rotation : UCameraShakeWithCurve_Element {
	struct FSymmetricRangeFloat PitchRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat YawRange; // 0x34(0x0c)
	struct FSymmetricRangeFloat RollRange; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Solarland.CameraShakeWithCurve_FOV
// Size: 0x38 (Inherited: 0x28)
struct UCameraShakeWithCurve_FOV : UCameraShakeWithCurve_Element {
	struct FRangeFloat FOVRange; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.CapsuleFormationData
// Size: 0x90 (Inherited: 0x30)
struct UCapsuleFormationData : UDataAsset {
	struct TMap<char, struct FEchelonFormation> TeamFormation; // 0x30(0x50)
	struct FCruiseFormation CruiseFormation; // 0x80(0x10)

	void OverrideTeamFormation(struct TMap<char, struct FEchelonFormation>& InNewFormation); // Function Solarland.CapsuleFormationData.OverrideTeamFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c45390
	void ClearTeamFormationData(); // Function Solarland.CapsuleFormationData.ClearTeamFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x1c44ee0
	void ClearCruiseFormationData(); // Function Solarland.CapsuleFormationData.ClearCruiseFormationData // (Final|Native|Public|BlueprintCallable) // @ game+0x1c44ea0
	void AddTeamFormationLocation(char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddTeamFormationLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c44900
	void AddLocationToTeamFormation(struct TMap<char, struct FEchelonFormation>& InFormation, char InEchelon, struct FVector& InLocation); // Function Solarland.CapsuleFormationData.AddLocationToTeamFormation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c44780
	void AddEchelonFormation(char InEchelon, struct FEchelonFormation& InFormation); // Function Solarland.CapsuleFormationData.AddEchelonFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c44610
	void AddCruiseFormation(struct FCruiseFormation& InFormation); // Function Solarland.CapsuleFormationData.AddCruiseFormation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c44560
};

// Class Solarland.CardView
// Size: 0x228 (Inherited: 0x138)
struct UCardView : UWidget {
	struct UUserWidget* EntryWidgetClass; // 0x138(0x08)
	struct FUserWidgetPool EntryWidgetPool; // 0x140(0x80)
	float CenterScale; // 0x1c0(0x04)
	float CenterOffset; // 0x1c4(0x04)
	float PageSpacing; // 0x1c8(0x04)
	float AlignmentPercent; // 0x1cc(0x04)
	enum class EOrientation Orientation; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct TArray<struct UObject*> ListItems; // 0x1d8(0x10)
	char pad_1E8[0x10]; // 0x1e8(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x1f8(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedItemChanged; // 0x208(0x10)
	struct FMulticastInlineDelegate BP_OnSelectedIndexChanged; // 0x218(0x10)

	void SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.SetListItems // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1c44a30
	void RemoveItem(struct UObject* InItem); // Function Solarland.CardView.RemoveItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c45580
	struct TArray<struct UObject*> GetListItems(); // Function Solarland.CardView.GetListItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c45110
	struct TArray<struct UUserWidget*> GetDisplayedEntryWidgets(); // Function Solarland.CardView.GetDisplayedEntryWidgets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c45080
	void ClearListItems(); // Function Solarland.CardView.ClearListItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c44ec0
	void BP_SetSelectedItem(struct UObject* Item); // Function Solarland.CardView.BP_SetSelectedItem // (Final|Native|Private|BlueprintCallable) // @ game+0x1c44ba0
	void BP_SetSelectedIndex(int32_t Index, bool bFromFirst); // Function Solarland.CardView.BP_SetSelectedIndex // (Final|Native|Private|BlueprintCallable) // @ game+0x1c44ae0
	void BP_SetListItems(struct TArray<struct UObject*>& InListItems); // Function Solarland.CardView.BP_SetListItems // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1c44a30
	struct UObject* BP_GetSelectedItem(); // Function Solarland.CardView.BP_GetSelectedItem // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c44a00
	int32_t BP_GetSelectedIndex(); // Function Solarland.CardView.BP_GetSelectedIndex // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c449d0
	void AddItem(struct UObject* InItem); // Function Solarland.CardView.AddItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c44700
};

// Class Solarland.CardViewDesignerPreviewItem
// Size: 0x28 (Inherited: 0x28)
struct UCardViewDesignerPreviewItem : UObject {
};

// Class Solarland.CGCustomeBattleRoyaleComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UCGCustomeBattleRoyaleComponent : UGameModeCompBase {
	char pad_D0[0x8]; // 0xd0(0x08)

	void ChangeEnvironmentTime(struct ASolarTimeLineManager* SolarTimeLineManager, int32_t DaylightChange); // Function Solarland.CGCustomeBattleRoyaleComponent.ChangeEnvironmentTime // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.CGFormula
// Size: 0x258 (Inherited: 0x228)
struct ACGFormula : AInfo {
	struct FKnockoutParams KnockoutParams; // 0x228(0x28)
	bool bInitKnockParams; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.CGFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c45200
	bool IsSettlementBagItem(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.IsSettlementBagItem // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.CGFormula.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x1c45140
	int32_t GetZomborg(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetZomborg // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x224bbb0
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.CGFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetWeaponExp(struct ASolarPlayerState* InPS, int32_t InWeaponID); // Function Solarland.CGFormula.GetWeaponExp // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GetTeamScoreComparison(struct ASolarPlayerState* InPS, struct FString& OutTeamScore); // Function Solarland.CGFormula.GetTeamScoreComparison // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void GetShowPageIndexs(struct ASolarPlayerState* InPS, struct FSettlePageParam& InParam, struct TArray<int32_t>& OutResult); // Function Solarland.CGFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FSettlementReward> GetSettlementRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetSettlementRewards // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerId, struct FString& InPBName); // Function Solarland.CGFormula.GetPersonalResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	float GetKDA(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetKDA // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerId, struct FString& InPBName); // Function Solarland.CGFormula.GetGroupResultPlayerExData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetExtraRewards // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GetCharacterExp(struct ASolarPlayerState* InPS, int32_t& OutGetExp, struct TArray<int32_t>& OutReason); // Function Solarland.CGFormula.GetCharacterExp // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetAccountExp(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.GetAccountExp // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x224bbb0
	int32_t CalculateTeamRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateTeamRank // (Native|Event|Public|BlueprintEvent) // @ game+0x1c44e00
	int32_t CalculatePlayerRank(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculatePlayerRank // (Native|Event|Public|BlueprintEvent) // @ game+0x1c44d60
	float CalculateMVPScore(struct ASolarPlayerState* InPS); // Function Solarland.CGFormula.CalculateMVPScore // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.CGFormula.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x1c44c20
};

// Class Solarland.SolarGameModeAIComponent
// Size: 0x120 (Inherited: 0xd0)
struct USolarGameModeAIComponent : UGameModeCompBase {
	struct ASolarBotAIController* BotAIControllerClass; // 0xd0(0x08)
	struct ASolarAIControllerBase* OfflinePlayerAIControllerClass; // 0xd8(0x08)
	struct ASolarGameMode* GameModeOwner; // 0xe0(0x08)
	bool bEnableIrisAIStrategy; // 0xe8(0x01)
	bool bEnableMLSetting; // 0xe9(0x01)
	bool bPreserveBotOnMatchStart; // 0xea(0x01)
	bool bEnableWarmClock; // 0xeb(0x01)
	char pad_EC[0x4]; // 0xec(0x04)
	struct USolarBotAITeamManager* BotTeamManagerClass; // 0xf0(0x08)
	int32_t MaxNumPreservedBots; // 0xf8(0x04)
	float MaxRatioPreservedBots; // 0xfc(0x04)
	char pad_100[0x10]; // 0x100(0x10)
	struct USolarBotAITeamManager* BotTeamManager; // 0x110(0x08)
	bool bCanBotTeamRebirth; // 0x118(0x01)
	bool bCanPlayerTeamRebirth; // 0x119(0x01)
	bool bCanBotTeamBuyRescue; // 0x11a(0x01)
	bool bCanPlayerTeamBuyRescue; // 0x11b(0x01)
	char pad_11C[0x4]; // 0x11c(0x04)

	bool PreserveBot(struct ASolarBotAIController* InBotController, struct FVector& InPreservedLocation); // Function Solarland.SolarGameModeAIComponent.PreserveBot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d5b930
	bool PopPreservedBot(struct ASolarBotAIController*& OutController, struct FVector& OutTeleportLocation, struct ASolarBotAIController* InSpecificController); // Function Solarland.SolarGameModeAIComponent.PopPreservedBot // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d5b800
	void OnPlayerRequestWarmBot(struct ASolarPlayerController* Player); // Function Solarland.SolarGameModeAIComponent.OnPlayerRequestWarmBot // (Native|Event|Public|BlueprintEvent) // @ game+0x1d5b4f0
	void OnAcquiredIrisAIFeedStrategy(struct TArray<struct FFeedBotStrategyInfo>& StrategyInfos); // Function Solarland.SolarGameModeAIComponent.OnAcquiredIrisAIFeedStrategy // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void GetDeathBoxExtraStuff(struct ASolarPlayerState* BotState, struct ASolarPlayerState* PlayerState, struct TMap<int32_t, int32_t>& Stuff); // Function Solarland.SolarGameModeAIComponent.GetDeathBoxExtraStuff // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d5a830
};

// Class Solarland.CGMAIComponent
// Size: 0x120 (Inherited: 0x120)
struct UCGMAIComponent : USolarGameModeAIComponent {
};

// Class Solarland.CGMCrossLevelDataMgr
// Size: 0x78 (Inherited: 0x28)
struct UCGMCrossLevelDataMgr : UObject {
	struct TMap<struct FString, struct UObject*> CrossLevelData; // 0x28(0x50)

	void RegistryCrossLevelData(struct FString InSoltName, struct UObject* InDataObj); // Function Solarland.CGMCrossLevelDataMgr.RegistryCrossLevelData // (Final|Native|Public|BlueprintCallable) // @ game+0x1c454a0
	struct UObject* GetCrossLevelData(struct FString InSoltName); // Function Solarland.CGMCrossLevelDataMgr.GetCrossLevelData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c44fd0
};

// Class Solarland.CustomGameModeComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCustomGameModeComponent : UGameModeCompBase {
};

// Class Solarland.CGMDataComponent
// Size: 0xe8 (Inherited: 0xd0)
struct UCGMDataComponent : UCustomGameModeComponent {
	struct AGameDataManager* DataManager; // 0xd0(0x08)
	struct UDataTable* DataTable; // 0xd8(0x08)
	float ConfigRepDeltaTime; // 0xe0(0x04)
	float ConfigRepMaxNum; // 0xe4(0x04)
};

// Class Solarland.CGMDeathComponent
// Size: 0xd0 (Inherited: 0xd0)
struct UCGMDeathComponent : UCustomGameModeComponent {

	void ReceivePlayerResurrect(struct ASolarCharacter* ResurrectCharacter, struct ASCMPlayerState* ResurrectPlayer); // Function Solarland.CGMDeathComponent.ReceivePlayerResurrect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerKill(struct ASCMPlayerState* Killer, struct ASCMPlayerState* Killed, struct TArray<struct ASCMPlayerState*>& Assists, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerDeathVerge(struct ASCMPlayerState* InAttacker, struct ASCMPlayerState* InDeathVergePlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.CGMDeathComponent.ReceivePlayerDeathVerge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.GameplayConfigBase
// Size: 0x38 (Inherited: 0x30)
struct UGameplayConfigBase : UDataAsset {
	struct UGameModeGlobalSetting* GameModeSettingTemplate; // 0x30(0x08)
};

// Class Solarland.CGMGameplayConfig
// Size: 0x1e0 (Inherited: 0x38)
struct UCGMGameplayConfig : UGameplayConfigBase {
	struct ACGFormula* Formula; // 0x38(0x08)
	struct USettlementPageConfig* SettlePageConfig; // 0x40(0x08)
	struct TMap<struct FString, struct FSCMMapConfig> MapConfig; // 0x48(0x50)
	struct FDataManagerConfig DataManagerConfig; // 0x98(0x10)
	struct FJobManagerConfig JobConfig; // 0xa8(0x08)
	bool EnableUltimateSkill; // 0xb0(0x01)
	enum class ERoleSkillOperation UltimateSkillStateOperationOnInit; // 0xb1(0x01)
	bool EnableTacticalSkill; // 0xb2(0x01)
	enum class ERoleSkillOperation TacticalSkillStateOperationOnInit; // 0xb3(0x01)
	int32_t AirDropSkillMode; // 0xb4(0x04)
	bool EnableWeaponUpgrade; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t InitInGamePlayerLevel; // 0xbc(0x04)
	bool EnablePlayerUpgrade; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct FInGameLevelingConfig InGameLevelingConfig; // 0xc8(0x08)
	struct TArray<enum class ESolarTablesEnum_BattleUpgradeEffectType> CharacterDamageUpgradeTypes; // 0xd0(0x10)
	struct FExpItemConfig ExpItemConfig; // 0xe0(0x10)
	bool bIfShouldSpawnDeathBox; // 0xf0(0x01)
	bool bIfSupportDeathverge; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)
	struct TMap<int32_t, int32_t> DeathBoxEnergyLimitConfig; // 0xf8(0x50)
	bool EnableSect; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct FCustomRoomData CustomRoomData; // 0x150(0x70)
	bool bIsCustomRoomMode; // 0x1c0(0x01)
	bool bEnableTracking; // 0x1c1(0x01)
	char pad_1C2[0x2]; // 0x1c2(0x02)
	float InitTrackingDelay; // 0x1c4(0x04)
	float TrackingTimeInterval; // 0x1c8(0x04)
	float DefaultTrackMaxRevealDistance; // 0x1cc(0x04)
	float TrackReplaceDistance; // 0x1d0(0x04)
	float MinRevealDistance; // 0x1d4(0x04)
	float TrackTimeout; // 0x1d8(0x04)
	int32_t MaxTrackNum; // 0x1dc(0x04)

	bool IsEnableSect(); // Function Solarland.CGMGameplayConfig.IsEnableSect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c49020
	bool IsCustomRoomMode(); // Function Solarland.CGMGameplayConfig.IsCustomRoomMode // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0xb8d020
	int32_t GetRequiredExpForLevel(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetRequiredExpForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c48dc0
	int32_t GetMaxShieldMatCountToDeathbox(int32_t InLevel); // Function Solarland.CGMGameplayConfig.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|Const) // @ game+0x1c48d30
	int32_t GetMaxInGameLevel(); // Function Solarland.CGMGameplayConfig.GetMaxInGameLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c48d00
	int32_t GetExpItemCountByLevel(int32_t InLevel, int32_t InLevelGap); // Function Solarland.CGMGameplayConfig.GetExpItemCountByLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c48b20
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.CGMGameplayConfig.GetCustomRoomData // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1c489a0
};

// Class Solarland.CGMLogicComponent
// Size: 0x138 (Inherited: 0xd0)
struct UCGMLogicComponent : UCustomGameModeComponent {
	float TimeOutSeconds; // 0xd0(0x04)
	char pad_D4[0x64]; // 0xd4(0x64)

	void ReceiveSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceiveSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveServerLevelLoaded(struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceiveServerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool ReceivePlayerTeamPreJoinRequest(struct TArray<struct ASCMPlayerState*>& PreJoinPlayers, int32_t TeamID); // Function Solarland.CGMLogicComponent.ReceivePlayerTeamPreJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1c49190
	bool ReceivePlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoinRequest // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1c49080
	void ReceivePlayerReJoin(struct ASCMPlayerState* NewPlayer); // Function Solarland.CGMLogicComponent.ReceivePlayerReJoin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerPreLogin(struct FString PlayerId, struct ASCMPlayerState* OfflinePlayer, struct FString& ErrorMsg); // Function Solarland.CGMLogicComponent.ReceivePlayerPreLogin // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerNonSpectatorJoinData(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.ReceivePlayerNonSpectatorJoinData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerLevelLoaded(struct ASCMPlayerController* Player, struct FString LevelName); // Function Solarland.CGMLogicComponent.ReceivePlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerJoinData(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerJoinBattle(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoinBattle // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerJoin(struct ASCMPlayerState* NewPlayer, bool IsAI); // Function Solarland.CGMLogicComponent.ReceivePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerCancelJoin(struct FString PlayerId); // Function Solarland.CGMLogicComponent.ReceivePlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerBattleEnd(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // Function Solarland.CGMLogicComponent.ReceivePlayerBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOBPlayersChanged(); // Function Solarland.CGMLogicComponent.ReceiveOBPlayersChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveGameModeInit(); // Function Solarland.CGMLogicComponent.ReceiveGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBattleTick(float BattleTime, float DeltaTime); // Function Solarland.CGMLogicComponent.ReceiveBattleTick // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBattleEnd(); // Function Solarland.CGMLogicComponent.ReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBattleBegin(); // Function Solarland.CGMLogicComponent.ReceiveBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnStartBattle(); // Function Solarland.CGMLogicComponent.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x1c49060
	void OnPlayerSettled(struct ASCMPlayerState* Player); // Function Solarland.CGMLogicComponent.OnPlayerSettled // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerOfflineTimeOut(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerGiveUp(struct ASCMPlayerState* OfflineTimeoutPlayer); // Function Solarland.CGMLogicComponent.OnPlayerGiveUp // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerDisconnect(struct ASCMPlayerState* OfflinePlayer); // Function Solarland.CGMLogicComponent.OnPlayerDisconnect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnMatchEnd(int32_t RPCID); // Function Solarland.CGMLogicComponent.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnDSClose(); // Function Solarland.CGMLogicComponent.OnDSClose // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.CGMLogicComponent.OnBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsAllowReconnectGame(struct ASCMPlayerState* InPC); // Function Solarland.CGMLogicComponent.IsAllowReconnectGame // (Native|Event|Public|BlueprintEvent) // @ game+0x1c48f80
};

// Class Solarland.SolarGameplayConfigComponent
// Size: 0xd8 (Inherited: 0xb0)
struct USolarGameplayConfigComponent : UActorComponent {
	bool EnableTestGameplayConfig; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct UGameplayConfigBase* CGMConfig; // 0xb8(0x08)
	struct UGameplayConfigBase* TestCGMConfig; // 0xc0(0x08)
	struct UGameplayConfigBase* InstGameplayConfig; // 0xc8(0x08)
	struct UGameplayConfigBase* InstTestGameplayConfig; // 0xd0(0x08)

	struct UGameplayConfigBase* GetConfigs(); // Function Solarland.SolarGameplayConfigComponent.GetConfigs // (Native|Public|BlueprintCallable) // @ game+0x1d73f30
};

// Class Solarland.CGMManagerConfigComponent
// Size: 0xd8 (Inherited: 0xd8)
struct UCGMManagerConfigComponent : USolarGameplayConfigComponent {
};

// Class Solarland.CGMMapInfo
// Size: 0x180 (Inherited: 0xd0)
struct UCGMMapInfo : UGameModeCompBase {
	struct TArray<struct FVector> AreaPosArray; // 0xd0(0x10)
	int32_t MapID; // 0xe0(0x04)
	int32_t UsedAirlineID; // 0xe4(0x04)
	struct FAirlineData UsedAirlineData; // 0xe8(0x28)
	char pad_110[0x10]; // 0x110(0x10)
	struct TMap<int32_t, struct FAirlineData> AirlineDataList; // 0x120(0x50)
	int32_t MaskWidth; // 0x170(0x04)
	float MaskScale; // 0x174(0x04)
	int32_t MapWidth; // 0x178(0x04)
	int32_t MapHeight; // 0x17c(0x04)

	void LoadAirlineData(); // Function Solarland.CGMMapInfo.LoadAirlineData // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c49040
	void InitInfo(int32_t InMapID); // Function Solarland.CGMMapInfo.InitInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1c48f00
	int32_t GetUsedAirlineData(struct FAirlineData& outData); // Function Solarland.CGMMapInfo.GetUsedAirlineData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c48e50
	int32_t GetMapIDByName(struct ASCustomGameState* InGameState, struct FString Name); // Function Solarland.CGMMapInfo.GetMapIDByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c48be0
};

// Class Solarland.CGMSettlementComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UCGMSettlementComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USettlementPageConfig* PageConfig; // 0xb8(0x08)
	struct TArray<int32_t> PageIndexs; // 0xc0(0x10)
	bool IsCustomRoom; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)

	bool SkipToTarget(); // Function Solarland.CGMSettlementComponent.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool ShowNextStage(); // Function Solarland.CGMSettlementComponent.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.ChaAT_AddSynchronizedForce
// Size: 0xc0 (Inherited: 0x80)
struct UChaAT_AddSynchronizedForce : UAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	char pad_90[0x30]; // 0x90(0x30)

	struct UChaAT_AddSynchronizedForce* AddForce(struct UGameplayAbility* OwningAbility, struct FVector InStartLocation, struct FVector InForce, float Duration, struct UCurveFloat* OptionalInterpolationCurve, struct UCurveVector* OptionalVectorInterpolationCurve, float InServerStartTime); // Function Solarland.ChaAT_AddSynchronizedForce.AddForce // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1c48790
};

// Class Solarland.ChaAT_AltitudeQuery
// Size: 0x130 (Inherited: 0x80)
struct UChaAT_AltitudeQuery : UAbilityTask {
	struct FMulticastInlineDelegate OnResponsed; // 0x80(0x10)
	char pad_90[0xa0]; // 0x90(0xa0)

	struct UChaAT_AltitudeQuery* StartSphereAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartSphereAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x1c49530
	struct UChaAT_AltitudeQuery* StartLineAltitudeQuery(struct UGameplayAbility* OwningAbility, float InAltitude, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, bool bIgnoreSelf, bool bUsingAsyncQuery, bool bInTriggerOnce); // Function Solarland.ChaAT_AltitudeQuery.StartLineAltitudeQuery // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable) // @ game+0x1c49290
};

// Class Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_LimitCameraOnStickingOutOfVehicle : USolarAbilityTask {
	char pad_80[0x18]; // 0x80(0x18)

	struct UChaAT_LimitCameraOnStickingOutOfVehicle* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_LimitCameraOnStickingOutOfVehicle.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c530
};

// Class Solarland.ChaAT_ListenChaTakeDamage
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_ListenChaTakeDamage : UAbilityTask {
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x80(0x10)

	void OnCharacterTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaAT_ListenChaTakeDamage.OnCharacterTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1c4d010
	struct UChaAT_ListenChaTakeDamage* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_ListenChaTakeDamage.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c5b0
};

// Class Solarland.ChaAT_ListenScopeOpeningAction
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_ListenScopeOpeningAction : USolarAbilityTask {
	struct UGameplayAbility* OwnerAbility; // 0x80(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_ListenScopeOpeningAction* CreateTask(struct UGameplayAbility* OwningAbility, struct ASolarCharacter* InCharacter, float MaxWaitTime); // Function Solarland.ChaAT_ListenScopeOpeningAction.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c630
};

// Class Solarland.ChaAT_PlayMontageAndWaitForNotify
// Size: 0x118 (Inherited: 0x108)
struct UChaAT_PlayMontageAndWaitForNotify : UAbilityTask_PlayMontageAndWait {
	struct FMulticastInlineDelegate OnMontageNotify; // 0x108(0x10)

	void OnMontageNotifyCallBack(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointPayload); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.OnMontageNotifyCallBack // (Final|Native|Private|HasOutParms) // @ game+0x1c4d390
	struct UChaAT_PlayMontageAndWaitForNotify* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct UAnimMontage* InMontageToPlay, float InRate, struct FName InStartSection, bool bInStopWhenAbilityEnds, float InAnimRootMotionTranslationScale); // Function Solarland.ChaAT_PlayMontageAndWaitForNotify.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c730
};

// Class Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent
// Size: 0x150 (Inherited: 0x80)
struct UChaAT_PlayMontageForMeshAndWaitForEvent : UAbilityTask {
	struct FMulticastInlineDelegate OnCompleted; // 0x80(0x10)
	struct FMulticastInlineDelegate OnBlendOut; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInterrupted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCancelled; // 0xb0(0x10)
	struct FMulticastInlineDelegate EventReceived; // 0xc0(0x10)
	struct USkeletalMeshComponent* Mesh; // 0xd0(0x08)
	struct UAnimMontage* MontageToPlay; // 0xd8(0x08)
	struct FGameplayTagContainer EventTags; // 0xe0(0x20)
	float Rate; // 0x100(0x04)
	struct FName StartSection; // 0x104(0x08)
	float AnimRootMotionTranslationScale; // 0x10c(0x04)
	bool bStopWhenAbilityEnds; // 0x110(0x01)
	bool bReplicateMontage; // 0x111(0x01)
	char pad_112[0x2]; // 0x112(0x02)
	float OverrideBlendOutTimeForCancelAbility; // 0x114(0x04)
	float OverrideBlendOutTimeForStopWhenEndAbility; // 0x118(0x04)
	bool bInterruptedCalledBeforeBlendingOut; // 0x11c(0x01)
	char pad_11D[0x33]; // 0x11d(0x33)

	struct UChaAT_PlayMontageForMeshAndWaitForEvent* PlayMontageForMeshAndWaitForEvent(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct USkeletalMeshComponent* Mesh, struct UAnimMontage* MontageToPlay, float Rate, struct FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bReplicateMontage, float OverrideBlendOutTimeForCancelAbility, float OverrideBlendOutTimeForStopWhenEndAbility); // Function Solarland.ChaAT_PlayMontageForMeshAndWaitForEvent.PlayMontageForMeshAndWaitForEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4d7b0
};

// Class Solarland.ChaAT_UpdateSkydiveTrail
// Size: 0x88 (Inherited: 0x80)
struct UChaAT_UpdateSkydiveTrail : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)

	struct UChaAT_UpdateSkydiveTrail* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_UpdateSkydiveTrail.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c920
};

// Class Solarland.ChaAT_WaitCharacterDeathEnd
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterDeathEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterDeathEnd; // 0x80(0x10)

	struct UChaAT_WaitCharacterDeathEnd* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterDeathEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4c9a0
};

// Class Solarland.ChaAT_WaitCharacterLaunchEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterLaunchEnd : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterLaunchEnd; // 0x80(0x10)
	char pad_90[0xc]; // 0x90(0x0c)
	float MoveModeCheckDelayTime; // 0x9c(0x04)

	struct UChaAT_WaitCharacterLaunchEnd* CreateTask(struct UGameplayAbility* OwningAbility, float InWaitLaunchingTime); // Function Solarland.ChaAT_WaitCharacterLaunchEnd.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4ca20
};

// Class Solarland.ChaAT_WaitCharacterPostDeath
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitCharacterPostDeath : USolarAbilityTask {
	struct FMulticastInlineDelegate OnDestroyCharacterCorpse; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitCharacterPostDeath* CreateTask(struct UGameplayAbility* OwningAbility, float InDestroyCorpseTime); // Function Solarland.ChaAT_WaitCharacterPostDeath.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4caf0
};

// Class Solarland.ChaAT_WaitCharacterSprintCancel
// Size: 0x90 (Inherited: 0x80)
struct UChaAT_WaitCharacterSprintCancel : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCharacterSprintCancel; // 0x80(0x10)

	struct UChaAT_WaitCharacterSprintCancel* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.ChaAT_WaitCharacterSprintCancel.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4cbc0
};

// Class Solarland.ChaAT_WaitControlRotationYawOutOfRange
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitControlRotationYawOutOfRange : UAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)

	struct UChaAT_WaitControlRotationYawOutOfRange* CreateTask(struct UGameplayAbility* OwningAbility, float YawMin, float YawMax); // Function Solarland.ChaAT_WaitControlRotationYawOutOfRange.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4cc40
};

// Class Solarland.ChaAT_WaitDelay
// Size: 0x98 (Inherited: 0x80)
struct UChaAT_WaitDelay : UAbilityTask {
	struct FMulticastInlineDelegate OnFinish; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)

	struct UChaAT_WaitDelay* WaitDelay(struct UGameplayAbility* OwningAbility, float Time); // Function Solarland.ChaAT_WaitDelay.WaitDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4db30
};

// Class Solarland.ChaAT_WaitOverlapEx
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitOverlapEx : UAbilityTask {
	struct FMulticastInlineDelegate OnOverLap; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct UChaAT_WaitOverlapEx* WaitForOverlap(struct UGameplayAbility* OwningAbility, struct TArray<struct AActor*> InIgnoreClasses); // Function Solarland.ChaAT_WaitOverlapEx.WaitForOverlap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c4dc00
	void OnHitCallback(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.ChaAT_WaitOverlapEx.OnHitCallback // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1c4d1c0
};

// Class Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd
// Size: 0xa0 (Inherited: 0x80)
struct UChaAT_WaitVehicleWeakPointRepairingEnd : USolarAbilityTask {
	char pad_80[0x8]; // 0x80(0x08)
	struct FMulticastInlineDelegate OnVehicleWeakPointRepairingEnd; // 0x88(0x10)
	char pad_98[0x8]; // 0x98(0x08)

	struct UChaAT_WaitVehicleWeakPointRepairingEnd* CreateTask(struct UGameplayAbility* OwningAbility, struct FVehicleWeakPointSpec& RepairingVehicleWeakPoint); // Function Solarland.ChaAT_WaitVehicleWeakPointRepairingEnd.CreateTask // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1c4cd30
};

// Class Solarland.SolarGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarGameplayAbility : UGameplayAbility {
	bool bTryActivateWhenGranted; // 0x400(0x01)
	enum class ESolarGAInputID InputID; // 0x401(0x01)
	bool bAllowReconnection; // 0x402(0x01)
	bool bActiveOnPress; // 0x403(0x01)
	char pad_404[0x4]; // 0x404(0x04)
	struct TArray<struct FAbilityMeshMontage> CurrentAbilityMeshMontages; // 0x408(0x10)

	void RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.RemoveGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d75850
	void ReceivingGiven(struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.ReceivingGiven // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	bool OnLevelUp(int32_t OldLevel, struct FGameplayAbilitySpec& Spec); // Function Solarland.SolarGameplayAbility.OnLevelUp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d75580
	void MontageStopForMesh(struct USkeletalMeshComponent* InMesh, float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d754b0
	void MontageStopForAllMeshes(float OverrideBlendOutTime); // Function Solarland.SolarGameplayAbility.MontageStopForAllMeshes // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d75430
	void MontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct FName FromSectionName, struct FName ToSectionName); // Function Solarland.SolarGameplayAbility.MontageSetNextSectionNameForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d75330
	void MontageJumpToSectionForMesh(struct USkeletalMeshComponent* InMesh, struct FName SectionName); // Function Solarland.SolarGameplayAbility.MontageJumpToSectionForMesh // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d75270
	int32_t GetDefaultGrantedLevel(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.SolarGameplayAbility.GetDefaultGrantedLevel // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d73ff0
	struct UAnimMontage* GetCurrentMontageForMesh(struct USkeletalMeshComponent* InMesh); // Function Solarland.SolarGameplayAbility.GetCurrentMontageForMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1d73f60
	void ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.ExecuteGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d73c60
	void AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SolarGameplayAbility.AddGameplayCueLocal // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d73630
};

// Class Solarland.SolarCharacterGameplayAbility
// Size: 0x460 (Inherited: 0x418)
struct USolarCharacterGameplayAbility : USolarGameplayAbility {
	struct FGameplayTagContainer ActivationOwnedReplicatedTags; // 0x418(0x20)
	struct TArray<struct FSolarGameplayEffectConfig> ActivationOwnedReplicatedGameplayEffects; // 0x438(0x10)
	char pad_448[0x18]; // 0x448(0x18)

	struct ASolarCharacter* GetOwningCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetOwningCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d2ac90
	struct ASolarCharacter* GetAvatarSolarCharacterFromActorInfo(); // Function Solarland.SolarCharacterGameplayAbility.GetAvatarSolarCharacterFromActorInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d2ac20
};

// Class Solarland.ChaGA_Aim
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Aim : USolarCharacterGameplayAbility {
	struct UGameplayEffect* AimGameplayEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_ThrowSkill
// Size: 0x4c0 (Inherited: 0x460)
struct UChaGA_ThrowSkill : USolarCharacterGameplayAbility {
	enum class ESkillAnimType SkillAnimType; // 0x460(0x01)
	enum class ESkillAnimRightHandType SkillAnimRightHandType; // 0x461(0x01)
	bool bShouldWaitMontageNotifyToThrow; // 0x462(0x01)
	char pad_463[0x1]; // 0x463(0x01)
	struct FName MontageNotifyToWait; // 0x464(0x08)
	bool bCanHoldWeapon; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
	struct FName ActiveMontageNotifyToReady; // 0x470(0x08)
	bool bShouldWaitActiveMontageNotifyToPrepare; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	struct FName ActiveMontageNotifyToPrepare; // 0x47c(0x08)
	bool bShouldWaitActiveMontageNotifyToThrow; // 0x484(0x01)
	char pad_485[0x3]; // 0x485(0x03)
	struct FName ActiveMontageNotifyToThrow; // 0x488(0x08)
	struct FName MontageSectionToJumpOnInputReleased; // 0x490(0x08)
	struct UAbilityTask_NetworkSyncPoint* WaitThrowTask; // 0x498(0x08)
	struct UAnimMontage* ActiveMontage; // 0x4a0(0x08)
	struct UAnimMontage* FireMontage; // 0x4a8(0x08)
	struct UAnimMontage* CancelMontage; // 0x4b0(0x08)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void WaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.WaitToThrow // (Final|Native|Protected) // @ game+0x1c57390
	void StartToThrow(); // Function Solarland.ChaGA_ThrowSkill.StartToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1258330
	void PrepareToThrow(); // Function Solarland.ChaGA_ThrowSkill.PrepareToThrow // (Native|Event|Protected|BlueprintEvent) // @ game+0x12584b0
	void OnRceiveWaitToThrow(); // Function Solarland.ChaGA_ThrowSkill.OnRceiveWaitToThrow // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnMontageNotify // (Native|Protected) // @ game+0x1c568c0
	void OnMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnMontageCompleted // (Native|Protected) // @ game+0x1257b70
	void OnFireMontageStartBlendingOut(); // Function Solarland.ChaGA_ThrowSkill.OnFireMontageStartBlendingOut // (Native|Protected) // @ game+0x1257710
	void OnActiveMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageNotify // (Native|Protected) // @ game+0x1c56240
	void OnActiveMontageCompleted(); // Function Solarland.ChaGA_ThrowSkill.OnActiveMontageCompleted // (Native|Protected) // @ game+0x1257770
};

// Class Solarland.SolarSkillGA_Projectile
// Size: 0x580 (Inherited: 0x4c0)
struct USolarSkillGA_Projectile : UChaGA_ThrowSkill {
	struct FSolarSkillProjectileData ProjectileData; // 0x4c0(0x70)
	struct AGameplayAbilityTargetActor* GATargetActorClass; // 0x530(0x08)
	struct TArray<struct AActor*> SpawnActorClasses; // 0x538(0x10)
	struct UGameplayEffect* GEToSelfClass; // 0x548(0x08)
	struct UGameplayEffect* GEToTargetClass; // 0x550(0x08)
	struct UAbilityTask_WaitTargetData* WaitTargetDataTask; // 0x558(0x08)
	struct TArray<struct AActor*> SpawnActors; // 0x560(0x10)
	struct TWeakObjectPtr<struct AGameplayAbilityTargetActor> TargetActorCache; // 0x570(0x08)
	char pad_578[0x8]; // 0x578(0x08)

	void OnWaitTargetDataTaskValid(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskValid // (Native|Protected|HasOutParms) // @ game+0x1e140e0
	void OnWaitTargetDataTaskCancelled(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.SolarSkillGA_Projectile.OnWaitTargetDataTaskCancelled // (Native|Protected|HasOutParms) // @ game+0x1e13fc0
};

// Class Solarland.SolarSkillGA_Summon
// Size: 0x5b0 (Inherited: 0x580)
struct USolarSkillGA_Summon : USolarSkillGA_Projectile {
	struct USolarSummonDetectionConfig* SummonConfig; // 0x580(0x08)
	int32_t SummonFailedNoticeID; // 0x588(0x04)
	bool bUseKeyUpLocationSummon; // 0x58c(0x01)
	char pad_58D[0x3]; // 0x58d(0x03)
	struct TWeakObjectPtr<struct ASolarSkillGATA_Summon> SummonTargetActor; // 0x590(0x08)
	struct UAnimMontage* ActiveMontageForGunAim; // 0x598(0x08)
	struct UAnimMontage* FireMontageForGunAim; // 0x5a0(0x08)
	struct UAnimMontage* CancelMontageForGunAim; // 0x5a8(0x08)
};

// Class Solarland.ChaGA_AirDrop
// Size: 0x630 (Inherited: 0x5b0)
struct UChaGA_AirDrop : USolarSkillGA_Summon {
	struct ASolarTreasureBoxSpawner* TreasureBoxSpawnerClass; // 0x5b0(0x08)
	int32_t OutcomeID; // 0x5b8(0x04)
	char pad_5BC[0x4]; // 0x5bc(0x04)
	struct TArray<struct FAirDropSkillDatas> AirDropSkillSetting; // 0x5c0(0x10)
	int32_t ChestID; // 0x5d0(0x04)
	int32_t BoxType; // 0x5d4(0x04)
	float CastTime; // 0x5d8(0x04)
	float ReadyTime; // 0x5dc(0x04)
	struct FGameplayTag PrepareGameplayCue; // 0x5e0(0x08)
	struct FGameplayTag OpenAirDropMontageTag; // 0x5e8(0x08)
	char pad_5F0[0x10]; // 0x5f0(0x10)
	struct FTransform SpawnTransform; // 0x600(0x30)

	void OnWaitCompleted(); // Function Solarland.ChaGA_AirDrop.OnWaitCompleted // (Final|Native|Private) // @ game+0x1c4d790
};

// Class Solarland.ResidentPassiveSkill
// Size: 0x438 (Inherited: 0x418)
struct UResidentPassiveSkill : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> ResidentEffectClasses; // 0x418(0x10)
	char pad_428[0x10]; // 0x428(0x10)
};

// Class Solarland.ChaGA_AntiexposureSuit
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_AntiexposureSuit : UResidentPassiveSkill {
	struct FGameplayTag ExecuteCueTag; // 0x438(0x08)

	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_AntiexposureSuit.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1c4d4f0
};

// Class Solarland.ChaGA_AttributeInit
// Size: 0x428 (Inherited: 0x418)
struct UChaGA_AttributeInit : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> InitializationEffectClasses; // 0x418(0x10)
};

// Class Solarland.CharacterTalent
// Size: 0x420 (Inherited: 0x418)
struct UCharacterTalent : USolarGameplayAbility {
	struct UGameplayEffect* GrantedEffectClass; // 0x418(0x08)

	float GetTalentCooldownDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentCooldownDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c602d0
	float GetTalentActivationDuration(struct AActor* InOwner, struct AActor* InAvatar); // Function Solarland.CharacterTalent.GetTalentActivationDuration // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c60200
};

// Class Solarland.PermanentTalent
// Size: 0x440 (Inherited: 0x420)
struct UPermanentTalent : UCharacterTalent {
	struct TArray<struct UGameplayEffect*> PermanentEffectClasses; // 0x420(0x10)
	char pad_430[0x10]; // 0x430(0x10)
};

// Class Solarland.PermanentTalentOnVehicle
// Size: 0x458 (Inherited: 0x440)
struct UPermanentTalentOnVehicle : UPermanentTalent {
	struct TArray<int32_t> ActivatedVehicleTypes; // 0x440(0x10)
	struct FGameplayTag GetOffVehicleEventTag; // 0x450(0x08)

	void ReceiveGetOffVehicle(struct FGameplayEventData InPayload); // Function Solarland.PermanentTalentOnVehicle.ReceiveGetOffVehicle // (Final|Native|Protected) // @ game+0x1ca9500
};

// Class Solarland.ChaGA_AutoHealingOnVehicle
// Size: 0x468 (Inherited: 0x458)
struct UChaGA_AutoHealingOnVehicle : UPermanentTalentOnVehicle {
	struct UGameplayEffect* FullHealthSignEffect; // 0x458(0x08)
	char pad_460[0x8]; // 0x460(0x08)

	void ReceiveCurrentHealthChange(); // Function Solarland.ChaGA_AutoHealingOnVehicle.ReceiveCurrentHealthChange // (Final|Native|Protected) // @ game+0x1c4dae0
};

// Class Solarland.ChaGA_BigRechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_BigRechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_BigWaterGun
// Size: 0x4a8 (Inherited: 0x460)
struct UChaGA_BigWaterGun : USolarCharacterGameplayAbility {
	struct ABigWaterGun* BigWaterGunClass; // 0x460(0x08)
	struct ABigWaterGun* CacheBigWaterGun; // 0x468(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct UAnimMontage* PreAnimMontage; // 0x478(0x08)
	struct UAnimMontage* ExcuteAnimMontage; // 0x480(0x08)
	struct UAnimMontage* PostAnimMontage; // 0x488(0x08)
	float Lifetime; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct UGameplayEffect* SlowDownGameplayEffect; // 0x498(0x08)
	char pad_4A0[0x8]; // 0x4a0(0x08)

	void OnPrePhase(); // Function Solarland.ChaGA_BigWaterGun.OnPrePhase // (Final|Native|Private) // @ game+0x1c4d4b0
	void OnPreMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPreMontageCompleted // (Final|Native|Private) // @ game+0x1c4d1a0
	void OnPostPhase(); // Function Solarland.ChaGA_BigWaterGun.OnPostPhase // (Final|Native|Private) // @ game+0x1c4d490
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x1c4d470
	void OnExecutePhase(); // Function Solarland.ChaGA_BigWaterGun.OnExecutePhase // (Final|Native|Private) // @ game+0x1c4d1a0
	void OnExecuteMontageCompleted(); // Function Solarland.ChaGA_BigWaterGun.OnExecuteMontageCompleted // (Final|Native|Private) // @ game+0x1c4d180
};

// Class Solarland.ChaGA_Bolt
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Bolt : USolarCharacterGameplayAbility {
	struct FGameplayTag BoltMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_ChangeCurrentCDRemain
// Size: 0x460 (Inherited: 0x418)
struct UChaGA_ChangeCurrentCDRemain : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	enum class EGameplayModOp RemainTimeModifierOption; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FScalableFloat RemainTimeModifierValue; // 0x440(0x20)
};

// Class Solarland.ChaGA_ChangeTotalCD_WithDuration
// Size: 0x450 (Inherited: 0x418)
struct UChaGA_ChangeTotalCD_WithDuration : USolarGameplayAbility {
	struct FGameplayTagContainer AbilityQueryTags; // 0x418(0x20)
	struct UGameplayEffect* CDModifierEffect; // 0x438(0x08)
	bool bUsedForNextActivation; // 0x440(0x01)
	enum class EActiveEffectDurationChangeProxy ActiveEffectDurationChangeProxy; // 0x441(0x01)
	char pad_442[0xe]; // 0x442(0x0e)

	void OnModifierFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.OnModifierFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c4cf30
	void ModifierAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_ChangeTotalCD_WithDuration.ModifierAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1c4cf30
};

// Class Solarland.ChaGA_ChangeTotalCD_WithTimes
// Size: 0x458 (Inherited: 0x450)
struct UChaGA_ChangeTotalCD_WithTimes : UChaGA_ChangeTotalCD_WithDuration {
	int32_t CDTimes; // 0x450(0x04)
	char pad_454[0x4]; // 0x454(0x04)

	void OnCooldownCompleted(); // Function Solarland.ChaGA_ChangeTotalCD_WithTimes.OnCooldownCompleted // (Final|Native|Protected) // @ game+0x1c4d160
};

// Class Solarland.ChaGA_CombatRegeneration
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_CombatRegeneration : USolarCharacterGameplayAbility {
	float ForecastInterval; // 0x460(0x04)
	float RegenerateInterval; // 0x464(0x04)
	struct FGameplayTag RegenerateCueTag; // 0x468(0x08)
	char pad_470[0x28]; // 0x470(0x28)

	void PreRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.PreRegenerate // (Final|Native|Protected) // @ game+0x1c4dac0
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HealtDamage); // Function Solarland.ChaGA_CombatRegeneration.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1c4d640
	void OnRegenerate(); // Function Solarland.ChaGA_CombatRegeneration.OnRegenerate // (Final|Native|Protected) // @ game+0x1c4d4d0
};

// Class Solarland.ChaGA_Crouch
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Crouch : USolarCharacterGameplayAbility {

	bool ShouldCancelCrouch(); // Function Solarland.ChaGA_Crouch.ShouldCancelCrouch // (Final|Native|Private) // @ game+0x1c4db00
};

// Class Solarland.ChaGA_Cruise
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Cruise : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ParachuteZoneEnteredEffect; // 0x460(0x08)
	struct FName ParachuteActionName; // 0x468(0x08)
	struct UAbilityTask_WaitInputAction* WaitParachuteInputTask; // 0x470(0x08)
	struct UAbilityTask_NetworkSyncPoint* WaitToParachuteTask; // 0x478(0x08)
	char pad_480[0x8]; // 0x480(0x08)

	void WaitToParachute(); // Function Solarland.ChaGA_Cruise.WaitToParachute // (Final|Native|Private) // @ game+0x1c52e20
	void OnRequestedToParachute(); // Function Solarland.ChaGA_Cruise.OnRequestedToParachute // (Final|Native|Private) // @ game+0x1c52490
	void OnIntoParachuteZone(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnIntoParachuteZone // (Final|Native|Private) // @ game+0x1c520a0
	void OnForceToParachute(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnForceToParachute // (Final|Native|Private) // @ game+0x1c51ec0
	void OnFinishCruise(struct FGameplayEventData Payload); // Function Solarland.ChaGA_Cruise.OnFinishCruise // (Final|Native|Private) // @ game+0x1c51cc0
};

// Class Solarland.ChaGA_Death
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Death : USolarCharacterGameplayAbility {
	float DestroyCorpseTime; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UGameplayEffect* RemoveDebuffEffectClass; // 0x468(0x08)

	void DestroyCharacterCorpse(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DestroyCharacterCorpse // (Final|Native|Protected) // @ game+0x1c51540
	void DeathEnd(struct ASolarCharacter* Character); // Function Solarland.ChaGA_Death.DeathEnd // (Final|Native|Protected) // @ game+0x1c514c0
};

// Class Solarland.ChaGA_DeathVerge
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_DeathVerge : USolarCharacterGameplayAbility {
	struct TArray<struct UGameplayEffect*> DeathVergeHPEffects; // 0x460(0x10)
	char pad_470[0x10]; // 0x470(0x10)
	struct FGameplayTag DeathVergeMaxHPDataTag; // 0x480(0x08)
	float TimeToWait; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)

	void OnWaitDelayFinished(); // Function Solarland.ChaGA_DeathVerge.OnWaitDelayFinished // (Final|Native|Protected) // @ game+0x1c52810
};

// Class Solarland.ChaGA_Equip
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_Equip : USolarCharacterGameplayAbility {
	struct FGameplayTag EquipMontageTag; // 0x460(0x08)
};

// Class Solarland.SideResidentPassiveSkill
// Size: 0x438 (Inherited: 0x418)
struct USideResidentPassiveSkill : USolarGameplayAbility {
	struct UGameplayEffect* SignEffectClass; // 0x418(0x08)
	char pad_420[0x18]; // 0x420(0x18)

	bool OnSidePassiveSkillEnded(struct FSideAttributeSet& InSideAttributeSet, struct ASCMPlayerState* CurrentPlayer, bool bWasCancelled); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillEnded // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1cd69b0
	bool OnSidePassiveSkillActivated(struct FSideAttributeSet& InSideAttributeSet, struct ASCMPlayerState* CurrentPlayer); // Function Solarland.SideResidentPassiveSkill.OnSidePassiveSkillActivated // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1cd6820
	void OnSideLeaving(struct FGameplayEventData Payload); // Function Solarland.SideResidentPassiveSkill.OnSideLeaving // (Final|Native|Protected) // @ game+0x1cd6640
	void OnSideJoining(struct FGameplayEventData Payload); // Function Solarland.SideResidentPassiveSkill.OnSideJoining // (Final|Native|Protected) // @ game+0x1cd6460
	void OnCharacterBeforeChange(); // Function Solarland.SideResidentPassiveSkill.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x1cd6440
};

// Class Solarland.ChaGA_FastTreatment
// Size: 0x448 (Inherited: 0x438)
struct UChaGA_FastTreatment : USideResidentPassiveSkill {
	float ModifierTreatmentValue; // 0x438(0x04)
	float ModifierShieldValue; // 0x43c(0x04)
	float ModifierBigShieldValue; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
};

// Class Solarland.ChaGA_Fire
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Fire : USolarCharacterGameplayAbility {
	struct ASolarCharacter* ActCharacter; // 0x460(0x08)
	char pad_468[0x5]; // 0x468(0x05)
	bool bPrintDebugString; // 0x46d(0x01)
	char pad_46E[0x2]; // 0x46e(0x02)

	void OnFireTaskEnd(); // Function Solarland.ChaGA_Fire.OnFireTaskEnd // (Final|Native|Public) // @ game+0x1c51ea0
	void OnCtrlTaskEnd(); // Function Solarland.ChaGA_Fire.OnCtrlTaskEnd // (Final|Native|Public) // @ game+0x1c51ca0
	void DoFireTask(); // Function Solarland.ChaGA_Fire.DoFireTask // (Final|Native|Public) // @ game+0x1c515c0
};

// Class Solarland.ChaGA_GetOffVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOffVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_GetOnVehicle
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_GetOnVehicle : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_HitRecover
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_HitRecover : USolarCharacterGameplayAbility {
	float Duration; // 0x460(0x04)
	float KnockbackDuration; // 0x464(0x04)
	struct TMap<enum class EHitRecoverType, float> HitbackDistance; // 0x468(0x50)

	void OnBlock(struct FGameplayAbilityTargetDataHandle& InTargetData); // Function Solarland.ChaGA_HitRecover.OnBlock // (Final|Native|Public|HasOutParms) // @ game+0x1c51a60
};

// Class Solarland.ChaGA_HitShield
// Size: 0x4c8 (Inherited: 0x438)
struct UChaGA_HitShield : UResidentPassiveSkill {
	struct ASolarEnergyShield* HitShieldClass; // 0x438(0x08)
	float DistanceToCharacter; // 0x440(0x04)
	float CoolDown; // 0x444(0x04)
	float MaxAngleinZ; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FGameplayTagContainer BlockShieldSpawnTags; // 0x450(0x20)
	struct TSet<enum class ESCMDamageType> TriggerDamageTypes; // 0x470(0x50)
	char pad_4C0[0x8]; // 0x4c0(0x08)

	void SpawnHitShield(struct FVector Direction); // Function Solarland.ChaGA_HitShield.SpawnHitShield // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_HitShield.OnTakeDamage // (Final|Native|Protected|HasOutParms) // @ game+0x1c52630
};

// Class Solarland.ChaGA_Hoarder
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_Hoarder : USideResidentPassiveSkill {
	float ModifierValue; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
};

// Class Solarland.ChaGA_HomeVault
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_HomeVault : USolarCharacterGameplayAbility {
	struct FGameplayTag ClimbWaterMontageTag; // 0x460(0x08)
	struct FGameplayTag VaultCrossMontageTag; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnMontageCompleted(); // Function Solarland.ChaGA_HomeVault.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1c516c0
};

// Class Solarland.ChaGA_InitializationFromGameMode
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_InitializationFromGameMode : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VJetCDOverrideEffect; // 0x460(0x08)
	struct UGameplayEffect* HJetCDOverrideEffect; // 0x468(0x08)
	struct FGameplayTag SettingOverrideTag; // 0x470(0x08)
};

// Class Solarland.ChaGA_JetFlyAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_JetFlyAction : USolarCharacterGameplayAbility {
	bool bVerticalFly; // 0x460(0x01)
	char pad_461[0x7]; // 0x461(0x07)
	struct UGameplayEffect* BoostEffect; // 0x468(0x08)
};

// Class Solarland.ChaGA_JetFlyCharge
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_JetFlyCharge : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VerticalChargeEffect; // 0x460(0x08)
	struct UGameplayEffect* TempVerticalChargeEffect; // 0x468(0x08)
	struct UGameplayEffect* OnceVChargeCompletedEffect; // 0x470(0x08)
	struct UGameplayEffect* HorizontalChargeEffect; // 0x478(0x08)
	struct UGameplayEffect* TempHorizontalChargeEffect; // 0x480(0x08)
	struct UGameplayEffect* OnceHChargeCompletedEffect; // 0x488(0x08)
	struct FGameplayTag TempChargeDurationTag; // 0x490(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceVJetChargeFinished; // 0x498(0x08)
	struct UAbilityTask_WaitGameplayEffectRemoved* OnOnceHJetChargeFinished; // 0x4a0(0x08)
	char pad_4A8[0x10]; // 0x4a8(0x10)

	void StartVerticalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartVerticalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1c52d40
	void StartHorizontalJetChargeFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.StartHorizontalJetChargeFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1c52c40
	void ReceiveVerticalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalJetTimesChanged // (Final|Native|Protected) // @ game+0x1c52bf0
	void ReceiveVerticalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveVerticalChargeCDChanged // (Final|Native|Protected) // @ game+0x1c52b70
	void ReceiveHorizontalJetTimesChanged(); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalJetTimesChanged // (Final|Native|Protected) // @ game+0x1c52b50
	void ReceiveHorizontalChargeCDChanged(float OldCD); // Function Solarland.ChaGA_JetFlyCharge.ReceiveHorizontalChargeCDChanged // (Final|Native|Protected) // @ game+0x1c52ad0
	void OnceVerticalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceVerticalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c529f0
	void OnceHorizontalJetChargeFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_JetFlyCharge.OnceHorizontalJetChargeFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c52910
};

// Class Solarland.ChaGA_Jump
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Jump : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LaunchAction
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_LaunchAction : USolarCharacterGameplayAbility {
	float WaitingLaunchingTime; // 0x460(0x04)
	struct FGameplayTag LaunchCueTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)

	void EndLaunch(); // Function Solarland.ChaGA_LaunchAction.EndLaunch // (Final|Native|Protected) // @ game+0x1c516c0
};

// Class Solarland.ChaGA_LostConnection
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_LostConnection : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_LowHPShieldRecAcc
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPShieldRecAcc : UCharacterTalent {
	struct UGameplayEffect* AccelerationEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPShieldRecAcc.CheckHPThreshold // (Final|Native|Protected) // @ game+0x1c51480
};

// Class Solarland.ChaGA_LowHPSpeedup
// Size: 0x458 (Inherited: 0x420)
struct UChaGA_LowHPSpeedup : UCharacterTalent {
	struct UGameplayEffect* SpeedupEffectClass; // 0x420(0x08)
	struct FScalableFloat LowHPThreshold; // 0x428(0x20)
	char pad_448[0x10]; // 0x448(0x10)

	void OnSpeedUpFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnSpeedUpFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c524d0
	void OnCoolingDownFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.OnCoolingDownFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c51bc0
	void EffectAppliedFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.ChaGA_LowHPSpeedup.EffectAppliedFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1c515e0
	void CheckHPThreshold(); // Function Solarland.ChaGA_LowHPSpeedup.CheckHPThreshold // (Final|Native|Protected) // @ game+0x1c514a0
};

// Class Solarland.ChaGA_MassInvisibility
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_MassInvisibility : USolarCharacterGameplayAbility {
	struct UAnimMontage* SkillMontage; // 0x460(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x468(0x08)
	struct FName StartSkillMontageNotify; // 0x470(0x08)
	struct FGameplayTag MassInvisibilityRangeCueTag; // 0x478(0x08)
	struct UGameplayEffect* MassInvisibilityEffectClass; // 0x480(0x08)
	float MassInvisibilityRangeRadius; // 0x488(0x04)
	float MassInvisibilityRangeHalfHeight; // 0x48c(0x04)
	char pad_490[0x8]; // 0x490(0x08)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_MassInvisibility.OnMontageNotify // (Final|Native|Protected) // @ game+0x1c52300
};

// Class Solarland.ChaGA_Melee
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_Melee : USolarCharacterGameplayAbility {
	struct TArray<struct FGameplayTag> CrouchMeleeMontageTags; // 0x460(0x10)
	struct TArray<struct FGameplayTag> StandMeleeMontageTags; // 0x470(0x10)
	float MotionWarpingAngleTolerance; // 0x480(0x04)
	char pad_484[0xc]; // 0x484(0x0c)

	void OnStopMelee(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_Melee.OnStopMelee // (Final|Native|Public) // @ game+0x1c525b0
	void GetYawToleranceMinMax(struct FRotator& CurrentControlRotation, struct FRotator& TargetRotation, float& YawMin, float& YawMax); // Function Solarland.ChaGA_Melee.GetYawToleranceMinMax // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1c516e0
};

// Class Solarland.ChaGA_MultiRecoverShield
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_MultiRecoverShield : USolarCharacterGameplayAbility {
	struct UGameplayEffect* ActivationEffect; // 0x460(0x08)
	struct UGameplayEffect* CustomCoolDownEffect; // 0x468(0x08)
	char pad_470[0x10]; // 0x470(0x10)

	void OnCoolDownEffectStart(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectStart // (Final|Native|Protected) // @ game+0x1c51ba0
	void OnCoolDownEffectFinish(); // Function Solarland.ChaGA_MultiRecoverShield.OnCoolDownEffectFinish // (Final|Native|Protected) // @ game+0x1c51b80
	void OnActivationEffect(struct FGameplayEventData Payload); // Function Solarland.ChaGA_MultiRecoverShield.OnActivationEffect // (Final|Native|Protected) // @ game+0x1c51880
};

// Class Solarland.ChaGA_NightComes
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_NightComes : USolarCharacterGameplayAbility {
	struct UGameplayEffect* NightComesBuffGameplayEffect; // 0x460(0x08)
	struct ASolarNightComesActor* NightComesActorClass; // 0x468(0x08)
	struct UAnimMontage* SkillMontage; // 0x470(0x08)
	struct UAnimMontage* SkillMontageWithWeapon; // 0x478(0x08)
	struct FName StartSkillMontageNotify; // 0x480(0x08)
	struct FName MeshSocket; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_NightComes.OnMontageNotify // (Final|Native|Protected) // @ game+0x1c52380
};

// Class Solarland.ChaGA_OpenNewTreasureBox
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_OpenNewTreasureBox : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_OpenScope
// Size: 0x4b8 (Inherited: 0x460)
struct UChaGA_OpenScope : USolarCharacterGameplayAbility {
	struct FGameplayTagRequirements OngoingTagRequirements; // 0x460(0x50)
	float MaxEnteringScopeOpeningTime; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)

	void OnOngoingTagRequirementsMetStatusChange(bool bMet); // Function Solarland.ChaGA_OpenScope.OnOngoingTagRequirementsMetStatusChange // (Final|Native|Private) // @ game+0x1c52400
};

// Class Solarland.ChaGA_OpenTreasureBox
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_OpenTreasureBox : USolarCharacterGameplayAbility {
	struct FGameplayTag OpenTreasureBoxMontageTag; // 0x460(0x08)
};

// Class Solarland.ChaGA_ParkourMaster
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_ParkourMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* VertEffect; // 0x460(0x08)
	struct UGameplayEffect* HoriEffect; // 0x468(0x08)
	char pad_470[0x20]; // 0x470(0x20)

	void OnJetFlyActivated(struct UGameplayAbility* InActivatedAbility); // Function Solarland.ChaGA_ParkourMaster.OnJetFlyActivated // (Final|Native|Protected) // @ game+0x1c52280
};

// Class Solarland.ChaGA_PickUp
// Size: 0x490 (Inherited: 0x460)
struct UChaGA_PickUp : USolarCharacterGameplayAbility {
	struct FGameplayTag PickUpHighEmptyMontageTag; // 0x460(0x08)
	struct FGameplayTag PickUpLowEmptyMontageTag; // 0x468(0x08)
	struct FGameplayTag PickUpHighGunAimMontageTag; // 0x470(0x08)
	struct FGameplayTag PickUpLowGunAimMontageTag; // 0x478(0x08)
	char pad_480[0x10]; // 0x480(0x10)

	void OnWeaponSlotReplace(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.ChaGA_PickUp.OnWeaponSlotReplace // (Final|Native|Private) // @ game+0x1c52850
	void OnMontageCompleted(); // Function Solarland.ChaGA_PickUp.OnMontageCompleted // (Final|Native|Private) // @ game+0x1c516c0
};

// Class Solarland.ChaGA_RadarScanning
// Size: 0x4a8 (Inherited: 0x460)
struct UChaGA_RadarScanning : USolarCharacterGameplayAbility {
	float SpawnRadarDelayTime; // 0x460(0x04)
	float Lifetime; // 0x464(0x04)
	float LifeTimeNoResult; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct ASolarRadarBase* RadarClass; // 0x470(0x08)
	int32_t SpawnRadarEventID; // 0x478(0x04)
	float EffectRadius; // 0x47c(0x04)
	struct FGameplayTag CueTag; // 0x480(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x488(0x08)
	char pad_490[0x18]; // 0x490(0x18)

	void StartSpawnRadar(); // Function Solarland.ChaGA_RadarScanning.StartSpawnRadar // (Final|Native|Private) // @ game+0x1c52d20
};

// Class Solarland.ChaGA_RapidBoost
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_RapidBoost : USolarCharacterGameplayAbility {
	struct UGameplayEffect* JetFlyCooldownEffectClass; // 0x460(0x08)
};

// Class Solarland.ChaGA_Rebirth
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Rebirth : USolarCharacterGameplayAbility {
	struct UGameplayEffect* RebirthHPEffect; // 0x460(0x08)
	struct UGameplayEffect* ResetJetFlyTimesEffect; // 0x468(0x08)
};

// Class Solarland.ChaGA_RechargeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_RechargeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag RechargeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_Reload
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_Reload : USolarCharacterGameplayAbility {
	struct FGameplayTag ReloadMontageTag; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)

	void OnWeaponReloadComplete(); // Function Solarland.ChaGA_Reload.OnWeaponReloadComplete // (Final|Native|Public) // @ game+0x1c52830
};

// Class Solarland.ChaGA_RepairVehicle
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_RepairVehicle : USolarCharacterGameplayAbility {
	struct FGameplayTag RepairVehicleWeakPointsMontageTag; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)

	void OnVehicleWeakPointRepairingEnd(bool bCompleted); // Function Solarland.ChaGA_RepairVehicle.OnVehicleWeakPointRepairingEnd // (Final|Native|Private) // @ game+0x1c52780
};

// Class Solarland.ChaGA_Rescue
// Size: 0x480 (Inherited: 0x460)
struct UChaGA_Rescue : USolarCharacterGameplayAbility {
	float SucceedBeforeSoundTime; // 0x460(0x04)
	struct FGameplayTag TeamRescueMontageTag; // 0x464(0x08)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct UChaAT_WaitDelay* DelayTask; // 0x470(0x08)
	struct FGameplayTag SucceedCueTag; // 0x478(0x08)

	bool ShouldCancelRescue(); // Function Solarland.ChaGA_Rescue.ShouldCancelRescue // (Final|Native|Protected) // @ game+0x1c52c10
	void OnRescueCompleted(); // Function Solarland.ChaGA_Rescue.OnRescueCompleted // (Final|Native|Protected) // @ game+0x1c524b0
	void OnMontageCompleted(); // Function Solarland.ChaGA_Rescue.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1c516c0
	void BeforeRescueCompleted(); // Function Solarland.ChaGA_Rescue.BeforeRescueCompleted // (Final|Native|Protected) // @ game+0x1c51460
};

// Class Solarland.ChaGA_ReviveTeammates
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_ReviveTeammates : USolarCharacterGameplayAbility {
	struct FGameplayTag ReviveTeammatesMontageTag; // 0x460(0x08)

	void OnReviveCompleted(); // Function Solarland.ChaGA_ReviveTeammates.OnReviveCompleted // (Final|Native|Protected) // @ game+0x1c56cf0
	void OnAbilityExec(); // Function Solarland.ChaGA_ReviveTeammates.OnAbilityExec // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.ChaGA_ShopVIP
// Size: 0x440 (Inherited: 0x438)
struct UChaGA_ShopVIP : USideResidentPassiveSkill {
	float ModifierValue; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
};

// Class Solarland.ChaGA_SkydiveFly
// Size: 0x468 (Inherited: 0x460)
struct UChaGA_SkydiveFly : USolarCharacterGameplayAbility {
	struct FGameplayTag SkydiveSoundCue; // 0x460(0x08)

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveFly.OnMovementModeChanged // (Final|Native|Private) // @ game+0x1c56950
};

// Class Solarland.ChaGA_SkydiveLand
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SkydiveLand : USolarCharacterGameplayAbility {

	void OnMovementModeChanged(enum class EMovementMode NewMovementMode); // Function Solarland.ChaGA_SkydiveLand.OnMovementModeChanged // (Final|Native|Private) // @ game+0x1c569d0
};

// Class Solarland.ChaGA_Sprint
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_Sprint : USolarCharacterGameplayAbility {
	struct UGameplayEffect* SprintEffectClass; // 0x460(0x08)
	struct UGameplayEffect* CancelSprintEffectClass; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void OnSprintCancelled(); // Function Solarland.ChaGA_Sprint.OnSprintCancelled // (Final|Native|Private) // @ game+0x1c56eb0
};

// Class Solarland.ChaGA_StickOutOfVehicle
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_StickOutOfVehicle : USolarCharacterGameplayAbility {
	float OutShotTimerForPC; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct FGameplayTagContainer BreakOutShotTags; // 0x468(0x20)

	void OnCancelByAdditionalCheck(); // Function Solarland.ChaGA_StickOutOfVehicle.OnCancelByAdditionalCheck // (Final|Native|Private) // @ game+0x79f030
	bool CheckAdditionalCancel(); // Function Solarland.ChaGA_StickOutOfVehicle.CheckAdditionalCancel // (Final|Native|Private) // @ game+0x1c55ff0
};

// Class Solarland.ChaGA_SuperRadarScan
// Size: 0x518 (Inherited: 0x460)
struct UChaGA_SuperRadarScan : USolarCharacterGameplayAbility {
	struct ASolarCharacter* CacheCharacter; // 0x460(0x08)
	bool bSpawnRadarSuccess; // 0x468(0x01)
	bool bSpawnedRadar; // 0x469(0x01)
	bool bBackswingPlayed; // 0x46a(0x01)
	char pad_46B[0x1]; // 0x46b(0x01)
	struct FVector HitLocation; // 0x46c(0x0c)
	struct FGameplayTag RadarOrnamentTag; // 0x478(0x08)
	float Lifetime; // 0x480(0x04)
	float PrecastTime; // 0x484(0x04)
	float BackswingTime; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UGameplayAbility* RadarScanningAbilityClass; // 0x490(0x08)
	struct UAnimMontage* ScanAnimMontage; // 0x498(0x08)
	struct FGameplayTag CueTag; // 0x4a0(0x08)
	float MoveRadius; // 0x4a8(0x04)
	float OverlookCameraHeight; // 0x4ac(0x04)
	float OverlookCameraPitch; // 0x4b0(0x04)
	float CameraMoveScale; // 0x4b4(0x04)
	struct UParticleSystem* PreviewEffect; // 0x4b8(0x08)
	float CancelCD; // 0x4c0(0x04)
	char pad_4C4[0x3c]; // 0x4c4(0x3c)
	struct ACameraActor* CacheOverlookCamera; // 0x500(0x08)
	struct AActor* CacheViewTarget; // 0x508(0x08)
	struct UParticleSystemComponent* CacheEmitter; // 0x510(0x08)

	void TryCreateRadarForAI(); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadarForAI // (Final|Native|Private) // @ game+0x1c57370
	void TryCreateRadar(bool bSpawn, struct FVector& InLoc); // Function Solarland.ChaGA_SuperRadarScan.TryCreateRadar // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1c57290
	void StartBackswing(); // Function Solarland.ChaGA_SuperRadarScan.StartBackswing // (Final|Native|Protected) // @ game+0x1c57230
	void PlaySound(struct FString InSoundName); // Function Solarland.ChaGA_SuperRadarScan.PlaySound // (Final|Native|Public|BlueprintCallable) // @ game+0x1c57190
	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // Function Solarland.ChaGA_SuperRadarScan.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1c56ed0
	void OnSpawnRadarSuccessfulHandle(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.ChaGA_SuperRadarScan.OnSpawnRadarSuccessfulHandle // (Final|Native|Public) // @ game+0x1c56df0
	void OnReceivdTryCreateRadar(bool bSpawn); // Function Solarland.ChaGA_SuperRadarScan.OnReceivdTryCreateRadar // (Final|Native|Public) // @ game+0x1c56a70
	void OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.OnPrecastReady // (Final|Native|Protected) // @ game+0x1c56a50
	void OnPostMontageCompleted(); // Function Solarland.ChaGA_SuperRadarScan.OnPostMontageCompleted // (Final|Native|Private) // @ game+0x1c4d470
	void OnCameraRight(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraRight // (Final|Native|Public) // @ game+0x1c56350
	void OnCameraForward(float Value); // Function Solarland.ChaGA_SuperRadarScan.OnCameraForward // (Final|Native|Public) // @ game+0x1c562d0
	void OnBackswingReady(); // Function Solarland.ChaGA_SuperRadarScan.OnBackswingReady // (Final|Native|Protected) // @ game+0x1c4d470
	void K2_OnPrecastReady(); // Function Solarland.ChaGA_SuperRadarScan.K2_OnPrecastReady // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void K2_OnBackswingStart(bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnBackswingStart // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void K2_OnAbilityEnd(struct ASolarCharacter* Character, bool bSuccess); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityEnd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void K2_OnAbilityActive(struct ASolarCharacter* Character); // Function Solarland.ChaGA_SuperRadarScan.K2_OnAbilityActive // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.ChaGA_Swap
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swap : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_Swim
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_Swim : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_SwitchVehicleSeat
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_SwitchVehicleSeat : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_TeamBoost
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_TeamBoost : USolarCharacterGameplayAbility {
	struct UAnimMontage* SkillMontage; // 0x460(0x08)
	struct FName StartSkillMontageNotify; // 0x468(0x08)
	struct UGameplayEffect* PurifyEffectClass; // 0x470(0x08)
	struct UGameplayEffect* SelfBoostEffectClass; // 0x478(0x08)
	struct UGameplayEffect* TeammateBoostEffectClass; // 0x480(0x08)
	struct ATeamBoostProjectile* TeamBoostProjectileClass; // 0x488(0x08)
	float SkillRangeRadius; // 0x490(0x04)
	float SkillRangeHalfHeight; // 0x494(0x04)
	char pad_498[0x8]; // 0x498(0x08)

	void OnMontageNotify(struct FName NotifyName); // Function Solarland.ChaGA_TeamBoost.OnMontageNotify // (Final|Native|Protected) // @ game+0x1c56840
};

// Class Solarland.ChaGA_TrackingMaster
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_TrackingMaster : USolarCharacterGameplayAbility {
	struct UGameplayEffect* TrackingMasterEffect; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)

	void OnCharacterBeforeChange(); // Function Solarland.ChaGA_TrackingMaster.OnCharacterBeforeChange // (Final|Native|Protected) // @ game+0x1c563f0
};

// Class Solarland.ChaGA_Treat
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_Treat : USolarCharacterGameplayAbility {
	struct FGameplayTag TreatMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)
};

// Class Solarland.ChaGA_UAVRescue
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_UAVRescue : USolarCharacterGameplayAbility {
	struct ASolarUAVRescue* RescueUAVClass; // 0x460(0x08)
	float Lifetime; // 0x468(0x04)
	bool bEffectTeammates; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
	struct UAnimMontage* SummoEmptyMontage; // 0x470(0x08)
	struct UAnimMontage* SummonAnimMontage; // 0x478(0x08)
	float SummonTime; // 0x480(0x04)
	float PermanentSpawnDelay; // 0x484(0x04)
	char pad_488[0x10]; // 0x488(0x10)

	void SummonUAV(); // Function Solarland.ChaGA_UAVRescue.SummonUAV // (Final|Native|Private) // @ game+0x1c57250
};

// Class Solarland.ChaGA_UAVShield
// Size: 0x4a0 (Inherited: 0x460)
struct UChaGA_UAVShield : USolarCharacterGameplayAbility {
	struct ASolarUAVShield* ShieldUAVClass; // 0x460(0x08)
	char pad_468[0x10]; // 0x468(0x10)
	float Lifetime; // 0x478(0x04)
	bool bEffectTeammates; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	struct UAnimMontage* SummonAnimMontage; // 0x480(0x08)
	struct UAnimMontage* SummonAnimMontage_Aim; // 0x488(0x08)
	float SummonTime; // 0x490(0x04)
	char pad_494[0xc]; // 0x494(0x0c)

	void SummonUAV(); // Function Solarland.ChaGA_UAVShield.SummonUAV // (Final|Native|Private) // @ game+0x1c57270
};

// Class Solarland.ChaGA_UpgradeShield
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_UpgradeShield : USolarCharacterGameplayAbility {
	struct FGameplayTag UpgradeShieldMontageTag; // 0x460(0x08)
	struct FGameplayTagContainer ActivationRequiredTagsAny; // 0x468(0x20)

	void OnMontageCompleted(); // Function Solarland.ChaGA_UpgradeShield.OnMontageCompleted // (Final|Native|Private) // @ game+0x1c56820
};

// Class Solarland.ChaGA_VaultBase
// Size: 0x498 (Inherited: 0x460)
struct UChaGA_VaultBase : USolarCharacterGameplayAbility {
	struct AActor* ContactActor; // 0x460(0x08)
	char pad_468[0x30]; // 0x468(0x30)

	void OnServerConfirm(); // Function Solarland.ChaGA_VaultBase.OnServerConfirm // (Final|Native|Protected) // @ game+0x1c56dd0
	void OnMontageCompleted(); // Function Solarland.ChaGA_VaultBase.OnMontageCompleted // (Final|Native|Protected) // @ game+0x1c516c0
	void OnMontageBlendOut(); // Function Solarland.ChaGA_VaultBase.OnMontageBlendOut // (Final|Native|Protected) // @ game+0x1c56800
};

// Class Solarland.ChaGA_Vault
// Size: 0x568 (Inherited: 0x498)
struct UChaGA_Vault : UChaGA_VaultBase {
	struct FGameplayTag StepMontageTag; // 0x498(0x08)
	struct FGameplayTag Step_CrossMontageTag; // 0x4a0(0x08)
	struct FGameplayTag Step_SprintMontageTag; // 0x4a8(0x08)
	struct FGameplayTag Step_Sprint_CrossMontageTag; // 0x4b0(0x08)
	struct FGameplayTag VaultMontageTag; // 0x4b8(0x08)
	struct FGameplayTag Vault_CrossMontageTag; // 0x4c0(0x08)
	struct FGameplayTag Vault_SprintMontageTag; // 0x4c8(0x08)
	struct FGameplayTag Vault_Sprint_CrossMontageTag; // 0x4d0(0x08)
	struct FGameplayTag ClimbMontageTag; // 0x4d8(0x08)
	struct FGameplayTag Climb_CrossMontageTag; // 0x4e0(0x08)
	struct FGameplayTag Climb_SprintMontageTag; // 0x4e8(0x08)
	struct FGameplayTag Climb_Sprint_CrossMontageTag; // 0x4f0(0x08)
	struct FGameplayTag Climb_WaterMontageTag; // 0x4f8(0x08)
	struct FGameplayTag HighClimbMontageTag; // 0x500(0x08)
	struct FGameplayTag HighClimb_CrossMontageTag; // 0x508(0x08)
	struct FGameplayTag HighClimb_SprintMontageTag; // 0x510(0x08)
	struct FGameplayTag HighClimb_Sprint_CrossMontageTag; // 0x518(0x08)
	struct FString PlayerCancelVaultEventName; // 0x520(0x10)
	struct FString TeammateCancelVaultEventName; // 0x530(0x10)
	struct FString EnemyCancelVaultEventName; // 0x540(0x10)
	char pad_550[0x18]; // 0x550(0x18)

	void OnRootMotionModifierDeactivate(struct ACharacter* Character, struct URootMotionModifier* Modifier); // Function Solarland.ChaGA_Vault.OnRootMotionModifierDeactivate // (Final|Native|Protected) // @ game+0x1c56d10
	void OnHandleNotify(struct USolarAnimInstance* AnimInstance, struct USolarAnimNotify* Notify, int32_t& OutDenial); // Function Solarland.ChaGA_Vault.OnHandleNotify // (Final|Native|Protected|HasOutParms) // @ game+0x1c56620
};

// Class Solarland.ChaGA_VehicleFire
// Size: 0x470 (Inherited: 0x460)
struct UChaGA_VehicleFire : USolarCharacterGameplayAbility {
	struct ASolarCharacter* ActCharacter; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)

	void OnFireTaskEnd(); // Function Solarland.ChaGA_VehicleFire.OnFireTaskEnd // (Final|Native|Public) // @ game+0x1c56600
	void OnCtrlTaskEnd(); // Function Solarland.ChaGA_VehicleFire.OnCtrlTaskEnd // (Final|Native|Public) // @ game+0x1c56410
	void DoFireTask(); // Function Solarland.ChaGA_VehicleFire.DoFireTask // (Final|Native|Public) // @ game+0x1c56020
};

// Class Solarland.ChaGA_VehicleForceJetFlyAction
// Size: 0x460 (Inherited: 0x460)
struct UChaGA_VehicleForceJetFlyAction : USolarCharacterGameplayAbility {
};

// Class Solarland.ChaGA_VehicleReload
// Size: 0x478 (Inherited: 0x460)
struct UChaGA_VehicleReload : USolarCharacterGameplayAbility {
	char pad_460[0x8]; // 0x460(0x08)
	struct ASolarVehicleWeapon* CachedReloadWeapon; // 0x468(0x08)
	struct UGameplayEffect* VehicleWeaponReloadEffect; // 0x470(0x08)

	void OnWeaponReloadComplete(); // Function Solarland.ChaGA_VehicleReload.OnWeaponReloadComplete // (Final|Native|Public) // @ game+0x1c57170
};

// Class Solarland.ChaGA_WallRun
// Size: 0x4e8 (Inherited: 0x498)
struct UChaGA_WallRun : UChaGA_VaultBase {
	float InertiaSpeed; // 0x498(0x04)
	float WallRunCameraAngleTolerance; // 0x49c(0x04)
	float WallRunJumpHeight; // 0x4a0(0x04)
	float WallRunJumpDist; // 0x4a4(0x04)
	float WallRunFailedHeight; // 0x4a8(0x04)
	float WallRunFailedDist; // 0x4ac(0x04)
	struct FName CancelActionName; // 0x4b0(0x08)
	struct FName JumpActionName; // 0x4b8(0x08)
	struct FString WarpTargetPrefix; // 0x4c0(0x10)
	struct FGameplayTag WallRunMontageTag; // 0x4d0(0x08)
	struct FGameplayTag WallRunFailedMontageTag; // 0x4d8(0x08)
	char pad_4E0[0x8]; // 0x4e0(0x08)

	void OnTakeDamage(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HealtDamage); // Function Solarland.ChaGA_WallRun.OnTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x1c57020
	void OnRequestedToJump(); // Function Solarland.ChaGA_WallRun.OnRequestedToJump // (Final|Native|Private) // @ game+0x1c56cd0
	void OnCancel(); // Function Solarland.ChaGA_WallRun.OnCancel // (Final|Native|Private) // @ game+0x1c563d0
};

// Class Solarland.ChaGA_WallRunJump
// Size: 0x488 (Inherited: 0x460)
struct UChaGA_WallRunJump : USolarCharacterGameplayAbility {
	float InertiaSpeed; // 0x460(0x04)
	float CameraRotLagSpeed; // 0x464(0x04)
	struct FGameplayTag WallRunJumpMontageTag; // 0x468(0x08)
	char pad_470[0x18]; // 0x470(0x18)

	void OnMontageCompleted(); // Function Solarland.ChaGA_WallRunJump.OnMontageCompleted // (Final|Native|Private) // @ game+0x1c516c0
	void OnMontageBlendOut(); // Function Solarland.ChaGA_WallRunJump.OnMontageBlendOut // (Final|Native|Private) // @ game+0x1c516c0
};

// Class Solarland.ChaGC_AirDrop
// Size: 0x298 (Inherited: 0x298)
struct AChaGC_AirDrop : AGameplayCueNotify_Actor {
};

// Class Solarland.ChaGC_CharacterActorCueBase
// Size: 0x2a8 (Inherited: 0x298)
struct AChaGC_CharacterActorCueBase : AGameplayCueNotify_Actor {
	struct TArray<struct FCueContent> CueContents; // 0x298(0x10)

	bool WhileActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.WhileActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c573b0
	bool OnRemoveInternal(struct ASolarCharacter* NullableCharacter, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnRemoveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c56b00
	void OnLocalPlayerSpectateMeStatusChanged(struct ASolarCharacter* Character, bool bIsSpectating); // Function Solarland.ChaGC_CharacterActorCueBase.OnLocalPlayerSpectateMeStatusChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x1c56730
	bool OnExecuteInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnExecuteInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c56430
	bool OnActiveInternal(struct ASolarCharacter* Character, struct FGameplayCueParameters& Parameters); // Function Solarland.ChaGC_CharacterActorCueBase.OnActiveInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1c56070
	bool ListenLocalPlayerSpectateMeStatus(); // Function Solarland.ChaGC_CharacterActorCueBase.ListenLocalPlayerSpectateMeStatus // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1c56040
};

// Class Solarland.ChaGC_JetFlyBoost
// Size: 0x298 (Inherited: 0x298)
struct AChaGC_JetFlyBoost : AGameplayCueNotify_Actor {
};

// Class Solarland.ChaGC_SuperSkillActorCueBase
// Size: 0x2b0 (Inherited: 0x2a8)
struct AChaGC_SuperSkillActorCueBase : AChaGC_CharacterActorCueBase {
	struct FGameplayTag SuperSkillGameplayEffectTag; // 0x2a8(0x08)
};

// Class Solarland.ChaGC_MassInvisibility
// Size: 0x338 (Inherited: 0x2b0)
struct AChaGC_MassInvisibility : AChaGC_SuperSkillActorCueBase {
	struct UActorEffect* InvisibilityEffectClass; // 0x2b0(0x08)
	float InvisibilityValueToTeammate; // 0x2b8(0x04)
	float InvisibilityValueOnSprinting; // 0x2bc(0x04)
	float MaterialSmoothSpeedOnSprinting; // 0x2c0(0x04)
	int32_t SprintingStatusNotificationID; // 0x2c4(0x04)
	int32_t SprintingStatusTipShowInterval; // 0x2c8(0x04)
	float WarningOtherRange; // 0x2cc(0x04)
	float WarningOtherRangeOutThreshold; // 0x2d0(0x04)
	float TimeBeforeEndToStartEndWarning; // 0x2d4(0x04)
	struct FName EndWarningMaterialParameterName; // 0x2d8(0x08)
	struct FName EndWarningSoundGroupName; // 0x2e0(0x08)
	float EndWarningSoundTriggerPoint; // 0x2e8(0x04)
	float EndWarningRate; // 0x2ec(0x04)
	struct UCameraShake* CameraModifierClass; // 0x2f0(0x08)
	char pad_2F8[0x40]; // 0x2f8(0x40)
};

// Class Solarland.ChaGC_MassInvisibilityPrepare
// Size: 0x2c0 (Inherited: 0x2a8)
struct AChaGC_MassInvisibilityPrepare : AChaGC_CharacterActorCueBase {
	struct UActorEffect* InvisibilityPrepareEffectClass; // 0x2a8(0x08)
	float PrepareDuration; // 0x2b0(0x04)
	char pad_2B4[0xc]; // 0x2b4(0x0c)
};

// Class Solarland.ChaGC_ParkourAcceleration
// Size: 0x310 (Inherited: 0x298)
struct AChaGC_ParkourAcceleration : AGameplayCueNotify_Actor {
	struct FName FlushEffectID; // 0x298(0x08)
	struct FName TrailEffectID; // 0x2a0(0x08)
	struct TMap<struct FName, struct FVector2D> TrailEmitterParameters; // 0x2a8(0x50)
	struct FGameplayTag DurationTag; // 0x2f8(0x08)
	char pad_300[0x10]; // 0x300(0x10)
};

// Class Solarland.ChaGC_SkydiveSound
// Size: 0x2b8 (Inherited: 0x298)
struct AChaGC_SkydiveSound : AGameplayCueNotify_Actor {
	struct FName StartSkydiveLoopSoundGroup_Speed; // 0x298(0x08)
	struct FName StartSkydiveLoopSoundGroup_Height; // 0x2a0(0x08)
	struct FName StopSkydiveLoopSoundGroup_Speed; // 0x2a8(0x08)
	struct FName StopSkydiveLoopSoundGroup_Height; // 0x2b0(0x08)
};

// Class Solarland.ChaGC_WallRun
// Size: 0x50 (Inherited: 0x50)
struct UChaGC_WallRun : UGameplayCueNotify_Static {
};

// Class Solarland.CharacterBasalAttributeSet
// Size: 0x330 (Inherited: 0x50)
struct UCharacterBasalAttributeSet : UBasalAttributeSet {
	struct FGameplayAttributeData Speed; // 0x50(0x10)
	struct FGameplayAttributeData BaseSpeed; // 0x60(0x10)
	struct FGameplayAttributeData PassiveSkillSpeedMultiple; // 0x70(0x10)
	struct FGameplayAttributeData ShootingSpeedMultiple; // 0x80(0x10)
	struct FGameplayAttributeData CustomJumpHeightMultiple; // 0x90(0x10)
	struct FGameplayAttributeData AllSpeedParamA; // 0xa0(0x10)
	struct FGameplayAttributeData AllSpeedParamB; // 0xb0(0x10)
	struct FGameplayAttributeData AllSpeedParamC; // 0xc0(0x10)
	struct FGameplayAttributeData AllSpeedParamD; // 0xd0(0x10)
	struct FGameplayAttributeData GroundSpeedParamA; // 0xe0(0x10)
	struct FGameplayAttributeData GroundSpeedParamB; // 0xf0(0x10)
	struct FGameplayAttributeData GroundSpeedParamC; // 0x100(0x10)
	struct FGameplayAttributeData GroundSpeedParamD; // 0x110(0x10)
	struct FGameplayAttributeData SwimSpeedParamA; // 0x120(0x10)
	struct FGameplayAttributeData SwimSpeedParamB; // 0x130(0x10)
	struct FGameplayAttributeData SwimSpeedParamC; // 0x140(0x10)
	struct FGameplayAttributeData SwimSpeedParamD; // 0x150(0x10)
	struct FGameplayAttributeData MaxShield; // 0x160(0x10)
	struct FGameplayAttributeData CurrentShield; // 0x170(0x10)
	struct FGameplayAttributeData ShieldMultiRecoverCoeff; // 0x180(0x10)
	struct FGameplayAttributeData ShieldReductionDamageMultiple; // 0x190(0x10)
	struct FGameplayAttributeData RadialDamageReductionMultiple; // 0x1a0(0x10)
	struct FGameplayAttributeData WeaponDamageParamA; // 0x1b0(0x10)
	struct FGameplayAttributeData WeaponDamageParamB; // 0x1c0(0x10)
	struct FGameplayAttributeData WeaponDamageParamC; // 0x1d0(0x10)
	struct FGameplayAttributeData WeaponDamageParamD; // 0x1e0(0x10)
	struct FGameplayAttributeData UnarmedWeaponDamageParamB; // 0x1f0(0x10)
	struct FGameplayAttributeData VehicleWeaponDamageParamB; // 0x200(0x10)
	struct FGameplayAttributeData VehicleHitDamageParamB; // 0x210(0x10)
	struct FGameplayAttributeData VehicleAbilityDamageParamB; // 0x220(0x10)
	struct FGameplayAttributeData CharacterSkillDamageParamB; // 0x230(0x10)
	struct FGameplayAttributeData VerticalJetTimesCD; // 0x240(0x10)
	struct FGameplayAttributeData VerticalJetInnerCD; // 0x250(0x10)
	struct FGameplayAttributeData VerticalJetTimes; // 0x260(0x10)
	struct FGameplayAttributeData VerticalJetRestTimes; // 0x270(0x10)
	struct FGameplayAttributeData HorizontalJetTimesCD; // 0x280(0x10)
	struct FGameplayAttributeData HorizontalJetInnerCD; // 0x290(0x10)
	struct FGameplayAttributeData HorizontalJetTimes; // 0x2a0(0x10)
	struct FGameplayAttributeData HorizontalJetRestTimes; // 0x2b0(0x10)
	struct FGameplayAttributeData RescueRecoveredMultiple; // 0x2c0(0x10)
	struct FGameplayAttributeData TreatmentDurationReductionMultiple; // 0x2d0(0x10)
	struct FGameplayAttributeData ShieldRecoveredMultiple; // 0x2e0(0x10)
	struct FGameplayAttributeData ChargingMultiple; // 0x2f0(0x10)
	struct FGameplayAttributeData AutoHealingRateOnMotorbike; // 0x300(0x10)
	struct FGameplayAttributeData RescueDurationReductionMultiple; // 0x310(0x10)
	struct FGameplayAttributeData ReviveDurationReductionBonus; // 0x320(0x10)

	void OnRep_VerticalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b7b0
	void OnRep_VerticalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b710
	void OnRep_VerticalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b670
	void OnRep_VerticalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_VerticalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b5d0
	void OnRep_TreatmentDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_TreatmentDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b530
	void OnRep_Speed(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_Speed // (Native|Protected|HasOutParms) // @ game+0x1c5b480
	void OnRep_ShieldMultiRecoverCoeff(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_ShieldMultiRecoverCoeff // (Native|Protected|HasOutParms) // @ game+0x1c5b3d0
	void OnRep_RescueDurationReductionMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_RescueDurationReductionMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b330
	void OnRep_MaxShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_MaxShield // (Native|Protected|HasOutParms) // @ game+0x1c5b280
	void OnRep_HorizontalJetTimesCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimesCD // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b1e0
	void OnRep_HorizontalJetTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b140
	void OnRep_HorizontalJetRestTimes(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetRestTimes // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b0a0
	void OnRep_HorizontalJetInnerCD(struct FGameplayAttributeData& Previous); // Function Solarland.CharacterBasalAttributeSet.OnRep_HorizontalJetInnerCD // (Final|Native|Protected|HasOutParms) // @ game+0x1c5b000
	void OnRep_CurrentShield(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterBasalAttributeSet.OnRep_CurrentShield // (Native|Protected|HasOutParms) // @ game+0x1c5af50
};

// Class Solarland.CharacterBodyScaleConfigDataAsset
// Size: 0x1a8 (Inherited: 0x30)
struct UCharacterBodyScaleConfigDataAsset : UDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterBodyScaleConfig> ConfigMap; // 0x30(0x50)
	struct FCharacterAssistAimTargetConfig DefaultAssistAimTargetConfig; // 0x80(0xd8)
	struct TMap<enum class ECharacterBodyScaleType, struct FCharacterAssistAimTargetConfig> AssistAimTargetConfigMap; // 0x158(0x50)
};

// Class Solarland.CharacterConfigAsset
// Size: 0x30 (Inherited: 0x30)
struct UCharacterConfigAsset : UDataAsset {
};

// Class Solarland.CharacterCruiseComponent
// Size: 0xf8 (Inherited: 0xb0)
struct UCharacterCruiseComponent : UActorComponent {
	struct ASolarCapsuleActor* BoardedCapsulePrivate; // 0xb0(0x08)
	char pad_B8[0xc]; // 0xb8(0x0c)
	struct FName CruiseStartSoundGroupName; // 0xc4(0x08)
	char pad_CC[0x2c]; // 0xcc(0x2c)

	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.CharacterCruiseComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c5af30
};

// Class Solarland.CharacterGameplayTagsConfig
// Size: 0x598 (Inherited: 0x30)
struct UCharacterGameplayTagsConfig : UDataAsset {
	struct FGameplayTag CruiseAbilityTag; // 0x30(0x08)
	struct FGameplayTag SkydiveFlyAbilityTag; // 0x38(0x08)
	struct FGameplayTag SkydiveLandAbilityTag; // 0x40(0x08)
	struct FGameplayTag CrouchAbilityTag; // 0x48(0x08)
	struct FGameplayTag JumpAbilityTag; // 0x50(0x08)
	struct FGameplayTag SprintAbilityTag; // 0x58(0x08)
	struct FGameplayTag SwimAbilityTag; // 0x60(0x08)
	struct FGameplayTag VaultAbilityTag; // 0x68(0x08)
	struct FGameplayTag JetFlyAbilityTag; // 0x70(0x08)
	struct FGameplayTag JetFlyVertAbilityTag; // 0x78(0x08)
	struct FGameplayTag JetFlyHoriAbilityTag; // 0x80(0x08)
	struct FGameplayTag LaunchAbilityTag; // 0x88(0x08)
	struct FGameplayTag EquipAbilityTag; // 0x90(0x08)
	struct FGameplayTag MeleeAbilityTag; // 0x98(0x08)
	struct FGameplayTag FireAbilityTag; // 0xa0(0x08)
	struct FGameplayTag ReloadAbilityTag; // 0xa8(0x08)
	struct FGameplayTag VehicleFireAbilityTag; // 0xb0(0x08)
	struct FGameplayTag VehicleReloadAbilityTag; // 0xb8(0x08)
	struct FGameplayTag BoltAbilityTag; // 0xc0(0x08)
	struct FGameplayTag OpenScopeAbilityTag; // 0xc8(0x08)
	struct FGameplayTag WeaponAbilityTag; // 0xd0(0x08)
	struct FGameplayTag GetOnVehicleAbilityTag; // 0xd8(0x08)
	struct FGameplayTag GetOffVehicleAbilityTag; // 0xe0(0x08)
	struct FGameplayTag SwitchVehicleSeatAbilityTag; // 0xe8(0x08)
	struct FGameplayTag StickOutOffVehicleAbilityTag; // 0xf0(0x08)
	struct FGameplayTag TreatAbilityTag; // 0xf8(0x08)
	struct FGameplayTag RechargeShieldAbilityTag; // 0x100(0x08)
	struct FGameplayTag BigRechargeShieldAbilityTag; // 0x108(0x08)
	struct FGameplayTag UpgradeShieldAbilityTag; // 0x110(0x08)
	struct FGameplayTag OpenTreasureBoxAbilityTag; // 0x118(0x08)
	struct FGameplayTag OpenNewTreasureBoxAbilityTag; // 0x120(0x08)
	struct FGameplayTag RepairVehicleAbilityTag; // 0x128(0x08)
	struct FGameplayTag RescueAbilityTag; // 0x130(0x08)
	struct FGameplayTag PickUpAbilityTag; // 0x138(0x08)
	struct FGameplayTag AutoPickUpAbilityTag; // 0x140(0x08)
	struct FGameplayTag ResurrectTeammateAbilityTag; // 0x148(0x08)
	struct FGameplayTag DeathVergeAbilityTag; // 0x150(0x08)
	struct FGameplayTag DeathAbilityTag; // 0x158(0x08)
	struct FGameplayTag RebirthAbilityTag; // 0x160(0x08)
	struct FGameplayTag ParkourMasterEffectTag; // 0x168(0x08)
	struct FGameplayTag HawkEyeEffectTag; // 0x170(0x08)
	struct FGameplayTag MassInvisibilityEffectTag; // 0x178(0x08)
	struct FGameplayTag RapidBoostEffectTag; // 0x180(0x08)
	struct FGameplayTag MainContinousTag; // 0x188(0x08)
	struct FGameplayTag SubContinousTag; // 0x190(0x08)
	struct FGameplayTag DurationPauseTag; // 0x198(0x08)
	struct FGameplayTag SuperSkillEffectTag; // 0x1a0(0x08)
	struct FGameplayTag TacticleSkillEffectTag; // 0x1a8(0x08)
	struct FGameplayTag SkydiveSoundTag; // 0x1b0(0x08)
	struct FGameplayTag CruisingStatusTag; // 0x1b8(0x08)
	struct FGameplayTag WalkingStatusTag; // 0x1c0(0x08)
	struct FGameplayTag FallingStatusTag; // 0x1c8(0x08)
	struct FGameplayTag FlyingStatusTag; // 0x1d0(0x08)
	struct FGameplayTag SwimmingStatusTag; // 0x1d8(0x08)
	struct FGameplayTag SkydivingStatusTag; // 0x1e0(0x08)
	struct FGameplayTag VaultingStatusTag; // 0x1e8(0x08)
	struct FGameplayTag VaultingAcceptCancelTag; // 0x1f0(0x08)
	struct FGameplayTag VaultingAcceptWeaponInputTag; // 0x1f8(0x08)
	struct FGameplayTag WallRunStatusTag; // 0x200(0x08)
	struct FGameplayTag WallRunAcceptCancelTag; // 0x208(0x08)
	struct FGameplayTag WallRunAcceptJumpTag; // 0x210(0x08)
	struct FGameplayTag WallRunAttemptVaultTag; // 0x218(0x08)
	struct FGameplayTag LaunchStatusTag; // 0x220(0x08)
	struct FGameplayTag RunningStatusTag; // 0x228(0x08)
	struct FGameplayTag SprintingStatusTag; // 0x230(0x08)
	struct FGameplayTag FollowViewRotationStatusTag; // 0x238(0x08)
	struct FGameplayTag PassiveMoveStatusTag; // 0x240(0x08)
	struct FGameplayTag MeleeAttackingStatusTag; // 0x248(0x08)
	struct FGameplayTag FullBodyMeleeStatusTag; // 0x250(0x08)
	struct FGameplayTag FiringStatusTag; // 0x258(0x08)
	struct FGameplayTag VehicleFiringStatusTag; // 0x260(0x08)
	struct FGameplayTag HiddenFireStatusTag; // 0x268(0x08)
	struct FGameplayTag BoltingStatusTag; // 0x270(0x08)
	struct FGameplayTag ReloadingStatusTag; // 0x278(0x08)
	struct FGameplayTag ScopeOpeningStatusTag; // 0x280(0x08)
	struct FGameplayTag EnteringScopeOpeningStatusTag; // 0x288(0x08)
	struct FGameplayTag FunctionalityStatusTag; // 0x290(0x08)
	struct FGameplayTag OpeningTreasureBoxStatusTag; // 0x298(0x08)
	struct FGameplayTag RechargingShieldStatusTag; // 0x2a0(0x08)
	struct FGameplayTag RescuingStatusTag; // 0x2a8(0x08)
	struct FGameplayTag TreatingStatusTag; // 0x2b0(0x08)
	struct FGameplayTag ReviveTeammateStatusTag; // 0x2b8(0x08)
	struct FGameplayTag InVehicleTag; // 0x2c0(0x08)
	struct FGameplayTag UsingContinuousSkill; // 0x2c8(0x08)
	struct FGameplayTag HoldingSkill; // 0x2d0(0x08)
	struct FGameplayTag AutoCancelOnInputReleased; // 0x2d8(0x08)
	struct FGameplayTag MassInvisibilityStatusTag; // 0x2e0(0x08)
	struct FGameplayTag MassInvisibilityPrepareStatusTag; // 0x2e8(0x08)
	struct FGameplayTag SuperRadarChooseStatusTag; // 0x2f0(0x08)
	struct FGameplayTag RadarScanningStatusTag; // 0x2f8(0x08)
	struct FGameplayTag EMPStatusTag; // 0x300(0x08)
	struct FGameplayTag FreezeStatusTag; // 0x308(0x08)
	struct FGameplayTag PerspectiveByRadarStatusTag; // 0x310(0x08)
	struct FGameplayTag InhibitDebuffStatusTag; // 0x318(0x08)
	struct FGameplayTag DeathVergeStatusTag; // 0x320(0x08)
	struct FGameplayTag DeathStatusTag; // 0x328(0x08)
	struct FGameplayTag InhibitOpenScopeStatusTag; // 0x330(0x08)
	struct FGameplayTag InhibitWeaponInputStatusTag; // 0x338(0x08)
	struct FGameplayTag InhibitWeaponFireInputStatusTag; // 0x340(0x08)
	struct FGameplayTag InhibitMoveStatusTag; // 0x348(0x08)
	struct FGameplayTag InhibitUnCrouchStatusTag; // 0x350(0x08)
	struct FGameplayTag InhibitAimOffsetStatusTag; // 0x358(0x08)
	struct FGameplayTag InhibitLeftHandWeaponAttachTag; // 0x360(0x08)
	struct FGameplayTag InhibitInteractionOption; // 0x368(0x08)
	struct FGameplayTag InhibitContinuousTreatStatusTag; // 0x370(0x08)
	struct FGameplayTag InhibitFireStatusTag; // 0x378(0x08)
	struct FGameplayTag VJetChargingStatusTag; // 0x380(0x08)
	struct FGameplayTag HJetChargingStatusTag; // 0x388(0x08)
	struct FGameplayTag GenericTalentActivationStatusTag; // 0x390(0x08)
	struct FGameplayTag TrackingMasterStatusTag; // 0x398(0x08)
	struct FGameplayTag ShieldMultiRecoverTag; // 0x3a0(0x08)
	struct FGameplayTag ShieldMultiRecoverOnGoingTag; // 0x3a8(0x08)
	struct FGameplayTag OpenAirDropTag; // 0x3b0(0x08)
	struct FGameplayTag ResurrectTeammateTag; // 0x3b8(0x08)
	struct FGameplayTag ReviveTeammateTag; // 0x3c0(0x08)
	struct FGameplayTag ReviveSelfTag; // 0x3c8(0x08)
	struct FGameplayTag HasRotationInputStatusTag; // 0x3d0(0x08)
	struct FGameplayTag InSmokeStatusTag; // 0x3d8(0x08)
	struct FGameplayTag StartCruiseEventTag; // 0x3e0(0x08)
	struct FGameplayTag IntoParachuteZoneEventTag; // 0x3e8(0x08)
	struct FGameplayTag ForceParachuteEventTag; // 0x3f0(0x08)
	struct FGameplayTag FinishCruiseEventTag; // 0x3f8(0x08)
	struct FGameplayTag LaunchEventTag; // 0x400(0x08)
	struct FGameplayTag VaultEventTag; // 0x408(0x08)
	struct FGameplayTag StepEventTag; // 0x410(0x08)
	struct FGameplayTag WallRunEventTag; // 0x418(0x08)
	struct FGameplayTag WallRunJumpEventTag; // 0x420(0x08)
	struct FGameplayTag HitRecoverEventTag; // 0x428(0x08)
	struct FGameplayTag MeleeAttackEventTag; // 0x430(0x08)
	struct FGameplayTag FireEventTag; // 0x438(0x08)
	struct FGameplayTag BoltEventTag; // 0x440(0x08)
	struct FGameplayTag EquipEventTag; // 0x448(0x08)
	struct FGameplayTag SwapEventTag; // 0x450(0x08)
	struct FGameplayTag ReloadEventTag; // 0x458(0x08)
	struct FGameplayTag VehicleReloadEventTag; // 0x460(0x08)
	struct FGameplayTag VehicleFireEventTag; // 0x468(0x08)
	struct FGameplayTag PickUpEventTag; // 0x470(0x08)
	struct FGameplayTag AutoPickUpEventTag; // 0x478(0x08)
	struct FGameplayTag RepairVehicleEventTag; // 0x480(0x08)
	struct FGameplayTag SpawnRadarEventTag; // 0x488(0x08)
	struct FGameplayTag DyingEventTag; // 0x490(0x08)
	struct FGameplayTag KillOrAssistEventTag; // 0x498(0x08)
	struct FGameplayTag GottenOnVehicleEventTag; // 0x4a0(0x08)
	struct FGameplayTag GottenOffVehicleEventTag; // 0x4a8(0x08)
	struct FGameplayTag VehicleForJetEventTag; // 0x4b0(0x08)
	struct FGameplayTag SideLeavingEventTag; // 0x4b8(0x08)
	struct FGameplayTag SideJoiningEventTag; // 0x4c0(0x08)
	struct FGameplayTag UltimateForbidenEventTag; // 0x4c8(0x08)
	struct FGameplayTag UltimateBlockEventTag; // 0x4d0(0x08)
	struct FGameplayTag UltimateForbidenStatusTag; // 0x4d8(0x08)
	struct FGameplayTag UltimateSkillBlockStatusTag; // 0x4e0(0x08)
	struct FGameplayTag SuperSkillCDReducedStatusTag; // 0x4e8(0x08)
	struct FGameplayTag TacticalForbidenEventTag; // 0x4f0(0x08)
	struct FGameplayTag TacticalBlockEventTag; // 0x4f8(0x08)
	struct FGameplayTag TacticalForbidenStatusTag; // 0x500(0x08)
	struct FGameplayTag TacticalSkillCDReducedStatusTag; // 0x508(0x08)
	struct FGameplayTag TacticalSkillBlockStatusTag; // 0x510(0x08)
	struct FGameplayTag BigWaterGunActivatingTag; // 0x518(0x08)
	struct FGameplayTag AirDropTag; // 0x520(0x08)
	struct FGameplayTag NightComesBuff; // 0x528(0x08)
	struct FGameplayTag NightComesActorContinous; // 0x530(0x08)
	struct FGameplayTag SuperRadarScanTag; // 0x538(0x08)
	struct FGameplayTag RadarScanningTag; // 0x540(0x08)
	struct FGameplayTag RoleAbilityRootTag; // 0x548(0x08)
	struct FGameplayTag RoleAbilityRootTypeTag; // 0x550(0x08)
	struct FGameplayTag SkillTypeTag; // 0x558(0x08)
	struct FGameplayTag SummonTypeTag; // 0x560(0x08)
	struct FGameplayTag ProjectileTypeTag; // 0x568(0x08)
	struct FGameplayTag SummonedJumpPadLaunchCooldownTag; // 0x570(0x08)
	struct FGameplayTag ShieldMultiRecoverCoolDownTag; // 0x578(0x08)
	struct FGameplayTag GenericTalentCooldownTag; // 0x580(0x08)
	struct FGameplayTag VJetCooldownTag; // 0x588(0x08)
	struct FGameplayTag HJetCooldownTag; // 0x590(0x08)
};

// Class Solarland.MaterialChangePriorityTags
// Size: 0x58 (Inherited: 0x30)
struct UMaterialChangePriorityTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Radar; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag WholeShield; // 0x48(0x08)
	struct FGameplayTag ThermalImaging; // 0x50(0x08)
};

// Class Solarland.VisibilityFlagTags
// Size: 0x70 (Inherited: 0x30)
struct UVisibilityFlagTags : UDataAsset {
	struct FGameplayTag Default; // 0x30(0x08)
	struct FGameplayTag Cruise; // 0x38(0x08)
	struct FGameplayTag Stealth; // 0x40(0x08)
	struct FGameplayTag CameraOverlap; // 0x48(0x08)
	struct FGameplayTag DissolvedDeath; // 0x50(0x08)
	struct FGameplayTag WholeShield; // 0x58(0x08)
	struct FGameplayTag MassInvisibility; // 0x60(0x08)
	struct FGameplayTag MassInvisibilityWarning; // 0x68(0x08)
};

// Class Solarland.CharacterMontageTags
// Size: 0x48 (Inherited: 0x30)
struct UCharacterMontageTags : UDataAsset {
	struct FGameplayTag TeamRescueMontageTag; // 0x30(0x08)
	struct FGameplayTag RechargeShieldTag; // 0x38(0x08)
	struct FGameplayTag UpgradeShieldTag; // 0x40(0x08)
};

// Class Solarland.CharacterGlobalConfig
// Size: 0x50 (Inherited: 0x30)
struct UCharacterGlobalConfig : UDataAsset {
	struct FGameplayCueTag TeamPerspectiveCueTag_LocalPlayer; // 0x30(0x08)
	struct FGameplayCueTag TeamPerspectiveCueTag_Teammate; // 0x38(0x08)
	struct TArray<struct UActorEffect*> PersistentActorEffectClasses; // 0x40(0x10)
};

// Class Solarland.CharacterMVPConfig
// Size: 0x60 (Inherited: 0x30)
struct UCharacterMVPConfig : UDataAsset {
	struct FSoftObjectPath AnimPath; // 0x30(0x18)
	struct FSoftObjectPath LevelPath; // 0x48(0x18)
};

// Class Solarland.CharacterSkillAttributeSet
// Size: 0xd0 (Inherited: 0x30)
struct UCharacterSkillAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData TacticalSkillCD; // 0x30(0x10)
	struct FGameplayAttributeData TacticalSkillCDBase; // 0x40(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamA; // 0x50(0x10)
	struct FGameplayAttributeData TacticalSkillCDParamB; // 0x60(0x10)
	struct FGameplayAttributeData TacticalSkillCDFixedValue; // 0x70(0x10)
	struct FGameplayAttributeData SuperSkillCD; // 0x80(0x10)
	struct FGameplayAttributeData SuperSkillCDBase; // 0x90(0x10)
	struct FGameplayAttributeData SuperSkillCDParamA; // 0xa0(0x10)
	struct FGameplayAttributeData SuperSkillCDParamB; // 0xb0(0x10)
	struct FGameplayAttributeData SuperSkillCDFixedValue; // 0xc0(0x10)

	void OnRep_TacticalSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x1c5b480
	void OnRep_TacticalSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x1c3c9c0
	void OnRep_TacticalSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x1c5b280
	void OnRep_TacticalSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_TacticalSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x1c3ca70
	void OnRep_SuperSkillCDParamB(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamB // (Native|Protected|HasOutParms) // @ game+0x1c60450
	void OnRep_SuperSkillCDParamA(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDParamA // (Native|Protected|HasOutParms) // @ game+0x1c5b3d0
	void OnRep_SuperSkillCDFixedValue(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDFixedValue // (Native|Protected|HasOutParms) // @ game+0x1c603a0
	void OnRep_SuperSkillCDBase(struct FGameplayAttributeData& OldValue); // Function Solarland.CharacterSkillAttributeSet.OnRep_SuperSkillCDBase // (Native|Protected|HasOutParms) // @ game+0x1c5af50
};

// Class Solarland.CharacterSkinConfig
// Size: 0x1e0 (Inherited: 0x30)
struct UCharacterSkinConfig : UDataAsset {
	struct FSoftObjectPath SkinIcon; // 0x30(0x18)
	struct FSoftObjectPath DefaultIcon; // 0x48(0x18)
	struct FSoftObjectPath SkinRes; // 0x60(0x18)
	struct FSoftObjectPath CharaSkinRes; // 0x78(0x18)
	struct FSoftObjectPath ShieldRes; // 0x90(0x18)
	struct FSoftObjectPath InvincibleMAT; // 0xa8(0x18)
	struct FSoftClassPath AnimBPRes; // 0xc0(0x18)
	struct FSoftObjectPath OrnamentRes; // 0xd8(0x18)
	struct FSoftClassPath OrnamentABPRes; // 0xf0(0x18)
	struct FName OrnamentAttachSocket; // 0x108(0x08)
	struct FTransform OrnamentRelativeTransform; // 0x110(0x30)
	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> StaticMeshOrnamentsConfig; // 0x140(0x50)
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> SkeletalMeshOrnamentsConfig; // 0x190(0x50)

	struct TMap<struct FGameplayTag, struct FStaticMeshOrnamentConfig> GetStaticMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetStaticMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c60160
	struct FSoftObjectPath GetSkinRes(); // Function Solarland.CharacterSkinConfig.GetSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c60130
	struct FSoftObjectPath GetSkinIcon(); // Function Solarland.CharacterSkinConfig.GetSkinIcon // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c60100
	struct TMap<struct FGameplayTag, struct FSkeletalMeshOrnamentConfig> GetSkeletalMeshOrnamentsConfig(); // Function Solarland.CharacterSkinConfig.GetSkeletalMeshOrnamentsConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c60060
	struct FSoftObjectPath GetInvincibleMAT(); // Function Solarland.CharacterSkinConfig.GetInvincibleMAT // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c60000
	struct FSoftObjectPath GetCharaSkinRes(); // Function Solarland.CharacterSkinConfig.GetCharaSkinRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c5ffd0
	struct FSoftObjectPath GetAnimBPRes(); // Function Solarland.CharacterSkinConfig.GetAnimBPRes // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1c5ffa0
};

// Class Solarland.SoundGroupBase
// Size: 0x28 (Inherited: 0x28)
struct USoundGroupBase : UObject {
};

// Class Solarland.SoundGroupSimple
// Size: 0x38 (Inherited: 0x28)
struct USoundGroupSimple : USoundGroupBase {
	struct FString SoundEvent; // 0x28(0x10)
};

// Class Solarland.SoundGroupByTeammate
// Size: 0x58 (Inherited: 0x28)
struct USoundGroupByTeammate : USoundGroupBase {
	struct FString SelfEvent; // 0x28(0x10)
	struct FString TeammateEvent; // 0x38(0x10)
	struct FString OtherEvent; // 0x48(0x10)
};

// Class Solarland.SoundGroupByBattle
// Size: 0x58 (Inherited: 0x28)
struct USoundGroupByBattle : USoundGroupBase {
	struct FString IAttackOtherEvent; // 0x28(0x10)
	struct FString OtherAttackMeEvent; // 0x38(0x10)
	struct FString OtherEvent; // 0x48(0x10)
};

// Class Solarland.CharacterSoundConfig
// Size: 0x100 (Inherited: 0x30)
struct UCharacterSoundConfig : UDataAsset {
	struct TMap<enum class ECharacterSoundOpt, struct FString> SoundEventTable; // 0x30(0x50)
	struct TMap<struct FName, struct USoundGroupBase*> SoundGroupTable; // 0x80(0x50)
	struct FTransform DefaultTransform; // 0xd0(0x30)
};

// Class Solarland.CheckBoxGroup
// Size: 0x1c0 (Inherited: 0x160)
struct UCheckBoxGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	struct FMulticastInlineDelegate OnStateChangedEventEx; // 0x170(0x10)
	struct UCheckBox* RevertToCachedChild; // 0x180(0x08)
	struct UCheckBox* LastCheckedChild; // 0x188(0x08)
	struct UPanelWidget* GroupRoot; // 0x190(0x08)
	bool bAllowSwitchOff; // 0x198(0x01)
	enum class EUseType UseType; // 0x199(0x01)
	char pad_19A[0x6]; // 0x19a(0x06)
	struct TArray<struct UCheckBox*> CheckBoxList; // 0x1a0(0x10)
	char pad_1B0[0x10]; // 0x1b0(0x10)

	void SetSelectIndex(int32_t Index); // Function Solarland.CheckBoxGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1c60760
	void RevertLastCheck(); // Function Solarland.CheckBoxGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x1c60740
	bool RemoveGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.RemoveGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x1c60590
	void OnStateChanged(bool bIsChecked); // Function Solarland.CheckBoxGroup.OnStateChanged // (Final|Native|Protected) // @ game+0x1c60500
	int32_t GetSelectedIndex(); // Function Solarland.CheckBoxGroup.GetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1c60030
	void CleanCheckedState(); // Function Solarland.CheckBoxGroup.CleanCheckedState // (Final|Native|Public|BlueprintCallable) // @ game+0x1c5ff80
	struct TArray<struct UCheckBox*> CheckChildrenState(int32_t& CheckedChildIndex); // Function Solarland.CheckBoxGroup.CheckChildrenState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c5fea0
	bool AddGroupChild(struct UCheckBox* Child); // Function Solarland.CheckBoxGroup.AddGroupChild // (Final|Native|Public|BlueprintCallable) // @ game+0x1c5fe10
};

// Class Solarland.CommonTwiceConfirmBaseWidget
// Size: 0x340 (Inherited: 0x340)
struct UCommonTwiceConfirmBaseWidget : USolarUserWidget {
};

// Class Solarland.ComponentButtonBaseWidget
// Size: 0x348 (Inherited: 0x340)
struct UComponentButtonBaseWidget : USolarUserWidget {
	struct USolarButton* OperateArea; // 0x340(0x08)
};

// Class Solarland.CrashReportManager
// Size: 0x30 (Inherited: 0x28)
struct UCrashReportManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void SetUserId(struct FString& UserId); // Function Solarland.CrashReportManager.SetUserId // (Final|Native|Public|HasOutParms) // @ game+0xae7770
	void ReportLuaException(struct FString ErrorMsg, struct FString Traceback, bool bHandled); // Function Solarland.CrashReportManager.ReportLuaException // (Final|Native|Static|Public) // @ game+0x1c60620
};

// Class Solarland.CrosshairCanvasPanel
// Size: 0x228 (Inherited: 0x168)
struct UCrosshairCanvasPanel : UCanvasPanel {
	struct TMap<enum class ECrossHairState, struct FStateMapItemStruct> CrosshairStateConfigList; // 0x168(0x50)
	struct TArray<struct UWidget*> IgonreWidgetToStateMap; // 0x1b8(0x10)
	struct TArray<struct FUICrossHairSpreadStruct> SpreadItemList; // 0x1c8(0x10)
	struct TArray<struct FUICrossHairAimColorStruct> AimColorItemList; // 0x1d8(0x10)
	struct UTweenImage* ReloadingTween; // 0x1e8(0x08)
	struct UGaugeImage* BulletGauge; // 0x1f0(0x08)
	struct UTweenImage* OverloadingTween; // 0x1f8(0x08)
	struct UProgressBar* OverloadBar_Normal; // 0x200(0x08)
	struct UProgressBar* OverloadBar_Warn; // 0x208(0x08)
	struct UTweenWidget* OverloadNormalPanelTween; // 0x210(0x08)
	struct TArray<struct UProgressBar*> CoolDownBars; // 0x218(0x10)
};

// Class Solarland.CrossHairWidget
// Size: 0x300 (Inherited: 0x260)
struct UCrossHairWidget : UUserWidget {
	struct TMap<enum class EWeaponType, struct FCrosshairLayout> CrosshairStorageLayout; // 0x260(0x50)
	struct FCrosshairSprite CrosshairSprites; // 0x2b0(0x30)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct UCrosshairCanvasPanel* RootPanel; // 0x2e8(0x08)
	float MinSpread; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct FCrosshairLayout CurrentLayout; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void SetCrosshairSprite(struct UPaperSprite* InSprite); // Function Solarland.CrossHairWidget.SetCrosshairSprite // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponFired(); // Function Solarland.CrossHairWidget.OnWeaponFired // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateReloadProgress(float InReloadProgress, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnUpdateReloadProgress // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateGatlingRoll(float DeltaTmie, float InRollSpeedInterp, bool bWantFire); // Function Solarland.CrossHairWidget.OnUpdateGatlingRoll // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateCoolDownProgress(float InCoolDownProgress); // Function Solarland.CrossHairWidget.OnUpdateCoolDownProgress // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress, int32_t InChargeBurstCount); // Function Solarland.CrossHairWidget.OnUpdateChargeProgress // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateAimState(bool InbLockEnemy); // Function Solarland.CrossHairWidget.OnUpdateAimState // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReloadStarted(float InReloadTime); // Function Solarland.CrossHairWidget.OnReloadStarted // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReloadFinished(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo); // Function Solarland.CrossHairWidget.OnReloadFinished // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayWeaponSpecialFire(enum class ECrossHairSpecialFireState InState, float PlayRate); // Function Solarland.CrossHairWidget.OnPlayWeaponSpecialFire // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnOverloadStateChanged(bool bEnter); // Function Solarland.CrossHairWidget.OnOverloadStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnCrosshairInNormalState(); // Function Solarland.CrossHairWidget.OnCrosshairInNormalState // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnAmmoChanged(int32_t InReservedAmmo, int32_t InMaxAmmo, bool InbFirst); // Function Solarland.CrossHairWidget.OnAmmoChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitializeCrosshairSpread(float Spread); // Function Solarland.CrossHairWidget.InitializeCrosshairSpread // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitializeCrosshair(enum class EWeaponType WeaponType, bool bIsWeaponEnergy); // Function Solarland.CrossHairWidget.InitializeCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x1c64130
	void HandleCrosshairState(enum class ECrossHairState InCrosshairState, bool InbQuitState); // Function Solarland.CrossHairWidget.HandleCrosshairState // (Final|Native|Protected) // @ game+0x1c63f10
	struct UWidget* GetSpreadCanvasWidget(); // Function Solarland.CrossHairWidget.GetSpreadCanvasWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UUserWidget* GetReloadWidget(); // Function Solarland.CrossHairWidget.GetReloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UUserWidget* GetOverloadWidget(); // Function Solarland.CrossHairWidget.GetOverloadWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UUserWidget* GetCoolDownWidget(); // Function Solarland.CrossHairWidget.GetCoolDownWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UUserWidget* GetChargeWidget(); // Function Solarland.CrossHairWidget.GetChargeWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UUserWidget* GetAmmoWidget(); // Function Solarland.CrossHairWidget.GetAmmoWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct FVector2D CalcDeltaScaleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaScaleBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1c63d50
	struct FVector2D CalcDeltaPosBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaPosBySpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x1c63cb0
	float CalcDeltaAngleBySpread(float Spread); // Function Solarland.CrossHairWidget.CalcDeltaAngleBySpread // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c63c20
};

// Class Solarland.CruiseAssetSet
// Size: 0x58 (Inherited: 0x30)
struct UCruiseAssetSet : UDataAsset {
	struct FSoftClassPath CapsuleActorClass; // 0x30(0x18)
	struct TArray<struct FSoftClassPath> CruiseAbilityClasses; // 0x48(0x10)
};

// Class Solarland.CustomConsoleCommandsComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UCustomConsoleCommandsComponent : UActorComponent {

	void ExecGMCommand(struct FString CommandParameters, struct TArray<struct FString>& ArgsStr); // Function Solarland.CustomConsoleCommandsComponent.ExecGMCommand // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.CustomGameModeHUD
// Size: 0x380 (Inherited: 0x380)
struct ACustomGameModeHUD : ABattleHUDBase {

	struct TSoftObjectPtr<USolarUserWidget> ShowPanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ShowPanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1c64cd0
	void ClosePanelUI(enum class EUIPanelName PanelName); // Function Solarland.CustomGameModeHUD.ClosePanelUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1c63e90
};

// Class Solarland.CustomNoticeTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeTable : UDataTable {
};

// Class Solarland.CustomNoticeImageTable
// Size: 0xc8 (Inherited: 0xc8)
struct UCustomNoticeImageTable : UDataTable {
};

// Class Solarland.GameManagerBase
// Size: 0x228 (Inherited: 0x228)
struct AGameManagerBase : AInfo {
};

// Class Solarland.CustomRoomManager
// Size: 0x310 (Inherited: 0x228)
struct ACustomRoomManager : AGameManagerBase {
	int32_t RoomTeamMemberLimit; // 0x228(0x04)
	int32_t RoomLeftTime; // 0x22c(0x04)
	bool bIsGameStarted; // 0x230(0x01)
	char pad_231[0xdf]; // 0x231(0xdf)

	void ReceiveTournamentDealy(); // Function Solarland.CustomRoomManager.ReceiveTournamentDealy // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x7e17a0
	void ReceivePlayerRemoved(struct ASCMPlayerState* Player, enum class ERemovedReasonType Reason); // Function Solarland.CustomRoomManager.ReceivePlayerRemoved // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1c64b80
	void OnTournamentDealy(); // Function Solarland.CustomRoomManager.OnTournamentDealy // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRoomOwnerLeftRoom(); // Function Solarland.CustomRoomManager.OnRoomOwnerLeftRoom // (Final|Native|Public|BlueprintCallable) // @ game+0x1c645e0
	void OnPlayerRemovedFromRoom(struct ASCMPlayerState* Player, enum class ERemovedReasonType Reason); // Function Solarland.CustomRoomManager.OnPlayerRemovedFromRoom // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool OnGameStart(); // Function Solarland.CustomRoomManager.OnGameStart // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnClientRoomDataReady(); // Function Solarland.CustomRoomManager.OnClientRoomDataReady // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsRoomOwner(struct ASCMPlayerState* Player); // Function Solarland.CustomRoomManager.IsRoomOwner // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1c64340
	bool IsRoomHasMinimalSides(); // Function Solarland.CustomRoomManager.IsRoomHasMinimalSides // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c64310
	bool IsRoomHasEnoughPlayers(); // Function Solarland.CustomRoomManager.IsRoomHasEnoughPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c642e0
	void ExecuteGameStart(); // Function Solarland.CustomRoomManager.ExecuteGameStart // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1257850
};

// Class Solarland.DeathTreasureBox
// Size: 0x6e0 (Inherited: 0x598)
struct ADeathTreasureBox : ASolarTreasureBoxActor {
	float CharacterPickupRange; // 0x598(0x04)
	float CurrEnergyValue; // 0x59c(0x04)
	float CurrExtraEnergyValue; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct FString PlayerId; // 0x5a8(0x10)
	struct FString NickName; // 0x5b8(0x10)
	bool IsPickuped; // 0x5c8(0x01)
	char pad_5C9[0x7]; // 0x5c9(0x07)
	struct TArray<struct ASolarPlayerWeapon*> WeaponList; // 0x5d0(0x10)
	struct TArray<struct FBoxChargingInfo> ChargingChars; // 0x5e0(0x10)
	float ResurrectDistance; // 0x5f0(0x04)
	enum class EBResurrectionState CurrResurrectionState; // 0x5f4(0x01)
	char pad_5F5[0x3]; // 0x5f5(0x03)
	float ReviveTotalTime; // 0x5f8(0x04)
	float ReviveStartTime; // 0x5fc(0x04)
	struct USkeletalMeshComponent* PreViewMesh; // 0x600(0x08)
	struct FName ReviveStartSound; // 0x608(0x08)
	struct FName ReviveBeforeCompleteSound; // 0x610(0x08)
	struct FName ReviveCompleteSound; // 0x618(0x08)
	struct FName ReviveFailedSound; // 0x620(0x08)
	float ResurrectionBeforeSoundTime; // 0x628(0x04)
	char pad_62C[0x4]; // 0x62c(0x04)
	struct UParticleSystem* ReviveCompletePS; // 0x630(0x08)
	struct FName ReviveCompletePSAttachedSocket; // 0x638(0x08)
	float PreviewMeshZOffset; // 0x640(0x04)
	float PreviewMeshZRotation; // 0x644(0x04)
	char pad_648[0x10]; // 0x648(0x10)
	struct USceneComponent* FXPosComponent; // 0x658(0x08)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> QualityPS; // 0x660(0x10)
	char pad_670[0x10]; // 0x670(0x10)
	struct UActorEffect* RevivePreviewEffectClass; // 0x680(0x08)
	char pad_688[0x8]; // 0x688(0x08)
	struct TMap<enum class ECharacterBodyScaleType, struct FSoftObjectPath> PreviewAnim; // 0x690(0x50)

	void ReceiveSetUIEnable(bool IsShow); // Function Solarland.DeathTreasureBox.ReceiveSetUIEnable // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveRemoveEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveRemoveEffect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveRefreshExtraEnergy(struct FString Message); // Function Solarland.DeathTreasureBox.ReceiveRefreshExtraEnergy // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveAddEffect(struct ASolarCharacter* SolarChar); // Function Solarland.DeathTreasureBox.ReceiveAddEffect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.DeathTreasureBox.OnUntrigger // (Final|Native|Protected) // @ game+0x1c64a40
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.DeathTreasureBox.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x1c64830
	void OnRep_ReviveStartTime(); // Function Solarland.DeathTreasureBox.OnRep_ReviveStartTime // (Final|Native|Protected) // @ game+0x1c645c0
	void OnRep_PickupedChanged(); // Function Solarland.DeathTreasureBox.OnRep_PickupedChanged // (Final|Native|Public) // @ game+0x1c645a0
	void OnRep_CurrExtraEnergyValueChanged(); // Function Solarland.DeathTreasureBox.OnRep_CurrExtraEnergyValueChanged // (Final|Native|Public) // @ game+0x1c64580
	void OnRep_BResurrectionStateChanged(); // Function Solarland.DeathTreasureBox.OnRep_BResurrectionStateChanged // (Final|Native|Public) // @ game+0x1c64560
	void OnRefreshPickupStatusEffect(bool IsShow); // Function Solarland.DeathTreasureBox.OnRefreshPickupStatusEffect // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsInResurrectRange(struct ASolarCharacter* InReqCharacter, float& RealDistance); // Function Solarland.DeathTreasureBox.IsInResurrectRange // (Final|Native|Public|HasOutParms) // @ game+0x1c64200
	bool CanBuyResurrect(struct ASolarCharacter* InReqCharacter); // Function Solarland.DeathTreasureBox.CanBuyResurrect // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1c63df0
};

// Class Solarland.DeathViewGoodsSlotWidget
// Size: 0x3f0 (Inherited: 0x340)
struct UDeathViewGoodsSlotWidget : USolarUserWidget {
	struct UImage* Img_Icon; // 0x340(0x08)
	struct UTextBlock* Txt_Num; // 0x348(0x08)
	struct FSlateBrush ImageOuter; // 0x350(0x98)
	int32_t ItemID; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)

	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.DeathViewGoodsSlotWidget.OnSpectateTargetItemsChanged // (Final|Native|Protected) // @ game+0x1c64740
};

// Class Solarland.DeathViewHPWidget
// Size: 0x3e0 (Inherited: 0x340)
struct UDeathViewHPWidget : USolarUserWidget {
	char pad_340[0x38]; // 0x340(0x38)
	bool bSplitHPBar; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)
	struct USolarShieldProgressBoard* AdvBar_Shield; // 0x380(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x388(0x08)
	char pad_390[0x20]; // 0x390(0x20)
	struct FLinearColor HPColorNormal; // 0x3b0(0x10)
	struct FLinearColor HPColorDying; // 0x3c0(0x10)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void UpdateShieldValue(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.DeathViewHPWidget.UpdateShieldValue // (Final|Native|Public) // @ game+0x1c64f80
	void UpdateHPColor(enum class ERescueState InRescueState); // Function Solarland.DeathViewHPWidget.UpdateHPColor // (Final|Native|Public) // @ game+0x1c64f00
	void UpdateHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.DeathViewHPWidget.UpdateHPBar // (Final|Native|Public) // @ game+0x1c64e40
	void ShowShieldUI(bool bIsShow); // Function Solarland.DeathViewHPWidget.ShowShieldUI // (Final|Native|Public) // @ game+0x1c64d90
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.DeathViewHPWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x1c64680
	void OnCharacterEndPlay(struct ASolarCharacter* Character); // Function Solarland.DeathViewHPWidget.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x1c643e0
	void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.DeathViewHPWidget.InitShieldHUD // (Final|Native|Public) // @ game+0x1c63fe0
};

// Class Solarland.DeathViewTeammateWidget
// Size: 0x3b0 (Inherited: 0x340)
struct UDeathViewTeammateWidget : USolarUserWidget {
	float SwitchCDTime; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x348(0x08)
	struct UTextBlock* Txt_PlayerName; // 0x350(0x08)
	struct UImage* Img_View_Name_Bg; // 0x358(0x08)
	struct UImage* Img_TeamPos; // 0x360(0x08)
	struct UImage* Img_View_TeamPos_Bg; // 0x368(0x08)
	struct USizeBox* Panel_TeamPos; // 0x370(0x08)
	struct UOverlay* Panel_Death; // 0x378(0x08)
	struct UOverlay* Panel_Selected; // 0x380(0x08)
	struct UImage* Img_Loading; // 0x388(0x08)
	struct UWidget* ScaleBox_1; // 0x390(0x08)
	struct UWidgetAnimation* Sel_Anim; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct ASolarPlayerState* CurrentPlayerState; // 0x3a8(0x08)

	void TrySelect(); // Function Solarland.DeathViewTeammateWidget.TrySelect // (Final|Native|Private) // @ game+0x1c64e20
	void SetTeamPos(int32_t PosInTeam); // Function Solarland.DeathViewTeammateWidget.SetTeamPos // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetPlayerState(struct ASolarPlayerState* TargetPS); // Function Solarland.DeathViewTeammateWidget.SetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x1c64c50
	void OnSelectedPlayerChanged(struct ASolarPlayerState* SelectedPS); // Function Solarland.DeathViewTeammateWidget.OnSelectedPlayerChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1c64600
	void OnHPChanged(char PosInTeam, float CurHP, float MaxHP); // Function Solarland.DeathViewTeammateWidget.OnHPChanged // (Final|Native|Private) // @ game+0x1c64460
};

// Class Solarland.DeathViewWidget
// Size: 0x378 (Inherited: 0x340)
struct UDeathViewWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UDeathViewHPWidget* DeathViewHP; // 0x348(0x08)
	struct UCanvasPanel* Panel_ScopeUI; // 0x350(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x358(0x08)
	struct USolarTextBlock* Txt_Lv_Head; // 0x360(0x08)
	struct UImage* Img_Lv_Bg_2; // 0x368(0x08)
	struct UImage* Img_Lv_Border_2; // 0x370(0x08)

	void OnSpecTargetChanged(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.DeathViewWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x1c685b0
	void OnLocalSpecInfoReady(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.DeathViewWidget.OnLocalSpecInfoReady // (Final|Native|Private) // @ game+0x1c68510
	void OnCharacterLevelUp(int32_t InLevel, int32_t InOldLevel, struct FString DynamicTip); // Function Solarland.DeathViewWidget.OnCharacterLevelUp // (Final|Native|Private) // @ game+0x1c683e0
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.DeathViewWidget.AddScopeToPanel // (Final|Native|Private) // @ game+0x1c67c20
};

// Class Solarland.DebugReplicator
// Size: 0x228 (Inherited: 0x228)
struct ADebugReplicator : AActor {
};

// Class Solarland.DebugReplicatorCharacter
// Size: 0x240 (Inherited: 0x228)
struct ADebugReplicatorCharacter : ADebugReplicator {
	int32_t aiCharacterID; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct FString BotAIDebugInfo; // 0x230(0x10)
};

// Class Solarland.DefenderManager
// Size: 0x2b8 (Inherited: 0x228)
struct ADefenderManager : AGameManagerBase {
	struct FMulticastInlineDelegate OnRepDefenderListNotify; // 0x228(0x10)
	struct FTerminatorNotifyUIConfig TerminatorNotifyUIConfig; // 0x238(0x28)
	struct ASolarTrailEffect* TrailEffect; // 0x260(0x08)
	struct FString DefenderSide; // 0x268(0x10)
	struct TArray<struct ASCMPlayerState*> DefenderList; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)
	struct FString TerminatorPlayerId; // 0x290(0x10)
	char pad_2A0[0x18]; // 0x2a0(0x18)

	bool UpdateCheckTerminator(struct ASCMPlayerState* InKiller, struct ASCMPlayerState* InKilled); // Function Solarland.DefenderManager.UpdateCheckTerminator // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c68f30
	void StartConfirmDefender(); // Function Solarland.DefenderManager.StartConfirmDefender // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c68f10
	void ShowDefenderUIForReplay(); // Function Solarland.DefenderManager.ShowDefenderUIForReplay // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_DefenderList(); // Function Solarland.DefenderManager.OnRep_DefenderList // (Final|Native|Public) // @ game+0x1c68590
	bool IsTerminator(struct FString InSolarPlayerID); // Function Solarland.DefenderManager.IsTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x1c68330
	bool IsDefender(struct FString InPlayerSide); // Function Solarland.DefenderManager.IsDefender // (Final|Native|Public|BlueprintCallable) // @ game+0x1c68280
	struct TArray<struct ASCMPlayerState*> GetDefenderList(); // Function Solarland.DefenderManager.GetDefenderList // (Final|Native|Public|BlueprintCallable) // @ game+0x1c67d90
};

// Class Solarland.DelayNode
// Size: 0x80 (Inherited: 0x70)
struct UDelayNode : UActionNode {
	float DelayTime; // 0x70(0x04)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Solarland.DrawLinePanel
// Size: 0x448 (Inherited: 0x340)
struct UDrawLinePanel : USolarUserWidget {
	float MapSize; // 0x340(0x04)
	float CurrentFOV; // 0x344(0x04)
	struct FLinearColor SafeAreaColor; // 0x348(0x10)
	struct FLinearColor PosionCircleColor; // 0x358(0x10)
	struct FLinearColor DotLineColor; // 0x368(0x10)
	struct FLinearColor AirlineProgressColor; // 0x378(0x10)
	struct FLinearColor CapsuleBackgroundColor; // 0x388(0x10)
	struct FLinearColor AirdropBackgroundColor; // 0x398(0x10)
	float AirdropAirlineSizeY; // 0x3a8(0x04)
	float MaterialCircleSize; // 0x3ac(0x04)
	float DotLineDottedLength; // 0x3b0(0x04)
	float DotLineDottedInterval; // 0x3b4(0x04)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct TArray<struct FDotLineData> DotLineDataList; // 0x3c0(0x10)
	struct TArray<struct FCircleData> CircleDataList; // 0x3d0(0x10)
	struct USolarMapManager* MapManager; // 0x3e0(0x08)
	struct TWeakObjectPtr<struct ASolarCapsuleRoot> CapsuleRoot; // 0x3e8(0x08)
	struct FSoftObjectPath CircleMaterialPath; // 0x3f0(0x18)
	struct FSoftObjectPath DottedLineMaterialPath; // 0x408(0x18)
	struct TArray<struct UMaterialInstanceDynamic*> CircleMaterialInstanceArray; // 0x420(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> DottedLineMaterialInstanceArray; // 0x430(0x10)
	float InitFOV; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)

	void RemoveDotLine(int32_t DotLineID); // Function Solarland.DrawLinePanel.RemoveDotLine // (Final|Native|Public|BlueprintCallable) // @ game+0x1c689f0
	void RemoveCircle(int32_t CircleID); // Function Solarland.DrawLinePanel.RemoveCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x1c68970
	void InitializePanelFOV(float InFOV); // Function Solarland.DrawLinePanel.InitializePanelFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x1c681f0
	int32_t AddDotLine(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddDotLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c67b10
	int32_t AddCircle(struct FVector2D Center, float Radius, struct FLinearColor Color); // Function Solarland.DrawLinePanel.AddCircle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1c67a00
};

// Class Solarland.DurationTalent
// Size: 0x450 (Inherited: 0x420)
struct UDurationTalent : UCharacterTalent {
	struct UGameplayEffect* DurationEffectClass; // 0x420(0x08)
	struct TArray<struct UGameplayEffect*> DurationSubEffectClasses; // 0x428(0x10)
	char pad_438[0x18]; // 0x438(0x18)

	void StartDurationEffectFailed(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.StartDurationEffectFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1c515e0
	void ReceiveDurationEffectFinished(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo); // Function Solarland.DurationTalent.ReceiveDurationEffectFinished // (Final|Native|Protected|HasOutParms) // @ game+0x1c68810
};

// Class Solarland.ElectricShop_Weapon
// Size: 0x4d8 (Inherited: 0x340)
struct UElectricShop_Weapon : USolarUserWidget {
	struct FMulticastInlineDelegate OnWeaponUpdateRequested; // 0x340(0x10)
	struct FMulticastInlineDelegate OnShieldUpdateRequested; // 0x350(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_weapon; // 0x360(0x08)
	struct UCanvasPanel* Weapon; // 0x368(0x08)
	struct UImage* Img_Level_Bg; // 0x370(0x08)
	struct UOverlay* Level_Indicator; // 0x378(0x08)
	struct UHorizontalBox* Panel_Level; // 0x380(0x08)
	struct UTextBlock* Txt_Level; // 0x388(0x08)
	struct UImage* Img_Arrow; // 0x390(0x08)
	struct USolarTextBlock* Txt_Max; // 0x398(0x08)
	struct USolarImage* Img_Weapon; // 0x3a0(0x08)
	struct UImage* Img_Shield; // 0x3a8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Upgrade; // 0x3b0(0x08)
	struct USolarImage* Upgrade_BG; // 0x3b8(0x08)
	struct USolarTextBlock* Txt_UpgradeState; // 0x3c0(0x08)
	struct UHorizontalBox* Panel_ElectricCost; // 0x3c8(0x08)
	struct UOverlay* Overlay_Discount; // 0x3d0(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x3d8(0x08)
	struct UTextBlock* Txt_ElectricityNum; // 0x3e0(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable; // 0x3e8(0x08)
	struct UHorizontalBox* Panel_ElectricCost_Disable; // 0x3f0(0x08)
	struct UOverlay* Overlay_Discount_2; // 0x3f8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_2; // 0x400(0x08)
	struct UTextBlock* Txt_ElectricityNum_Disable; // 0x408(0x08)
	struct USolarTextBlock* Txt_UpgradeState_Disable_2; // 0x410(0x08)
	struct UCanvasPanel* Weapon_UpgradeSuccess; // 0x418(0x08)
	struct UImage* Image_BG2_3; // 0x420(0x08)
	struct USolarTextBlock* Txt_Upgrade2; // 0x428(0x08)
	struct UCanvasPanel* Weapon_None; // 0x430(0x08)
	struct UImage* Image_BG2; // 0x438(0x08)
	struct UImage* Image_BG2_2; // 0x440(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x448(0x08)
	bool bIsWeapon; // 0x450(0x01)
	char pad_451[0x17]; // 0x451(0x17)
	int32_t MaxWeaponLevel; // 0x468(0x04)
	char pad_46C[0x34]; // 0x46c(0x34)
	struct TArray<struct FString> WeaponLevelBGNames; // 0x4a0(0x10)
	struct FString WeaponLevelBGPrefix; // 0x4b0(0x10)
	struct FString ShieldIconPrefix; // 0x4c0(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentWeapon; // 0x4d0(0x08)

	void UpdateUpgradeData(struct ASolarPlayerWeapon* InWeapon, float Discount); // Function Solarland.ElectricShop_Weapon.UpdateUpgradeData // (Final|Native|Public) // @ game+0x1c691e0
	void UpdateShieldUpgradeData(float Discount); // Function Solarland.ElectricShop_Weapon.UpdateShieldUpgradeData // (Final|Native|Public) // @ game+0x1c69160
	void ShowUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.ShowUpgradeEffect // (Final|Native|Protected) // @ game+0x1c68ef0
	void SetWeaponWidgetSwitcherIndex(int32_t InNewIndex); // Function Solarland.ElectricShop_Weapon.SetWeaponWidgetSwitcherIndex // (Final|Native|Public) // @ game+0x1c68ca0
	void SetUpgradeState(); // Function Solarland.ElectricShop_Weapon.SetUpgradeState // (Final|Native|Protected) // @ game+0x1c68c80
	void SetUpgradeIndicator(); // Function Solarland.ElectricShop_Weapon.SetUpgradeIndicator // (Final|Native|Protected) // @ game+0x1c68c60
	void SetIndicatorVisibility(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetIndicatorVisibility // (Final|Native|Protected) // @ game+0x1c68b50
	void SetElectricCostState(enum class EShopWeaponUpgradeState InState); // Function Solarland.ElectricShop_Weapon.SetElectricCostState // (Final|Native|Protected) // @ game+0x1c68ad0
	void RequestUpgradeWeapon(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x1c68a90
	void RequestUpgradeShield(); // Function Solarland.ElectricShop_Weapon.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x1c68a70
	void RefreshCurrentShieldProperty(int32_t InShieldID); // Function Solarland.ElectricShop_Weapon.RefreshCurrentShieldProperty // (Final|Native|Protected) // @ game+0x1c688f0
	void OnWeaponUpdateRequested__DelegateSignature(struct ASolarPlayerWeapon* Weapon); // DelegateFunction Solarland.ElectricShop_Weapon.OnWeaponUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x1c686d0
	void OnUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.ElectricShop_Weapon.OnUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x1c68650
	void OnUpgradeCooldown(); // Function Solarland.ElectricShop_Weapon.OnUpgradeCooldown // (Final|Native|Protected) // @ game+0x1c68630
	void OnShieldUpdateRequested__DelegateSignature(struct ASolarCharacter* ShieldCharacter); // DelegateFunction Solarland.ElectricShop_Weapon.OnShieldUpdateRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void InitWeaponUpgradeCost(); // Function Solarland.ElectricShop_Weapon.InitWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x8ba190
	void HideUpgradeEffect(); // Function Solarland.ElectricShop_Weapon.HideUpgradeEffect // (Final|Native|Protected) // @ game+0x1c681d0
	float GetWeaponUpgradeCost(int32_t InWeaponLevel); // Function Solarland.ElectricShop_Weapon.GetWeaponUpgradeCost // (Final|Native|Protected) // @ game+0x1c68140
	struct FString GetWeaponLvBgFullPath(int32_t WeaponLv); // Function Solarland.ElectricShop_Weapon.GetWeaponLvBgFullPath // (Final|Native|Protected) // @ game+0x1c68070
	struct FString GetShieldLvBgFullPath(int32_t ShieldLv); // Function Solarland.ElectricShop_Weapon.GetShieldLvBgFullPath // (Final|Native|Protected) // @ game+0x1c68070
	float GetDiscountedCost(float Cost); // Function Solarland.ElectricShop_Weapon.GetDiscountedCost // (Final|Native|Protected) // @ game+0x1c67e20
	void CheckEnergyAvaliable(float InValue); // Function Solarland.ElectricShop_Weapon.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0x1c67d10
	void BindDelegates(); // Function Solarland.ElectricShop_Weapon.BindDelegates // (Final|Native|Protected) // @ game+0x1c67cf0
};

// Class Solarland.ElectronicTreasureBox
// Size: 0x5d8 (Inherited: 0x598)
struct AElectronicTreasureBox : ASolarTreasureBoxActor {
	struct FString OnFinishSpawnLoopAudio; // 0x598(0x10)
	struct FString OnStopLoopAudio; // 0x5a8(0x10)
	struct FString OnOpenAudio; // 0x5b8(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x5c8(0x04)
	char pad_5CC[0xc]; // 0x5cc(0x0c)
};

// Class Solarland.EmojiBubbleSubsystem
// Size: 0x48 (Inherited: 0x30)
struct UEmojiBubbleSubsystem : UGameInstanceSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
	struct UDataTable* EmojiTable; // 0x40(0x08)

	void ShowEmojiBubbleToContainerInLobby(int32_t EmojiID, struct ASolarLobbyCharacter* InLobbyCharacter, struct FString PlayerId); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainerInLobby // (Final|Native|Public) // @ game+0x1c68de0
	void ShowEmojiBubbleToContainer(int32_t EmojiID, struct ASolarCharacter* InCharacter); // Function Solarland.EmojiBubbleSubsystem.ShowEmojiBubbleToContainer // (Final|Native|Public) // @ game+0x1c68d20
	void ResetAllEmojiBubble(); // Function Solarland.EmojiBubbleSubsystem.ResetAllEmojiBubble // (Final|Native|Public) // @ game+0x1c68ab0
	bool GetEmojiConfigByID(int32_t EmojiID, struct FEmojiBubbleConfig& OutConfig); // Function Solarland.EmojiBubbleSubsystem.GetEmojiConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x1c67eb0
};

// Class Solarland.EmojiBubbleWidget
// Size: 0x588 (Inherited: 0x340)
struct UEmojiBubbleWidget : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	float ShowTime; // 0x350(0x04)
	char pad_354[0x34]; // 0x354(0x34)
	struct UWidgetAnimation* EmojiBegin_Anim; // 0x388(0x08)
	struct UWidgetAnimation* EmojiEnd_Anim; // 0x390(0x08)
	struct UImage* Img_Emoji; // 0x398(0x08)
	bool IsSpecialEmoji; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	int32_t EmojiOffsetInLobby; // 0x3a4(0x04)
	struct FVector2D LobbyEmojiSize; // 0x3a8(0x08)
	struct FRuntimeFloatCurve EmojiSizeCurve; // 0x3b0(0x88)
	struct FRuntimeFloatCurve EnemyEmojiSizeCurve; // 0x438(0x88)
	int32_t TeamMateEmojiOffset; // 0x4c0(0x04)
	int32_t SelfEmojiOffset; // 0x4c4(0x04)
	struct TArray<enum class EUsePlayerType> EmoteAppearSoundConfig; // 0x4c8(0x10)
	struct TArray<enum class EUsePlayerType> EmoteSoundConfig; // 0x4d8(0x10)
	char pad_4E8[0xa0]; // 0x4e8(0xa0)

	void UpdateEmojiContent(int32_t EmojiID); // Function Solarland.EmojiBubbleWidget.UpdateEmojiContent // (Final|Native|Public) // @ game+0x1c690e0
	void SetIsInLobbyTeam(bool IsInLobbyTeam); // Function Solarland.EmojiBubbleWidget.SetIsInLobbyTeam // (Final|Native|Public) // @ game+0x1c68bd0
	void OnEndAnimationFinished(); // Function Solarland.EmojiBubbleWidget.OnEndAnimationFinished // (Final|Native|Public) // @ game+0x1c684f0
};

// Class Solarland.EShopGoodsObject
// Size: 0x50 (Inherited: 0x28)
struct UEShopGoodsObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t ProductID; // 0x30(0x04)
	int32_t ItemID; // 0x34(0x04)
	int32_t Price; // 0x38(0x04)
	int32_t Num; // 0x3c(0x04)
	float CoolDown; // 0x40(0x04)
	int32_t Generation; // 0x44(0x04)
	bool bIsRecommend; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	void UpdateData(struct FElectricShopItem& InItemData, bool InRecommend); // Function Solarland.EShopGoodsObject.UpdateData // (Final|Native|Public|HasOutParms) // @ game+0x1c68ff0
};

// Class Solarland.EventAction
// Size: 0x80 (Inherited: 0x70)
struct UEventAction : UActionNode {
	char pad_70[0x10]; // 0x70(0x10)
};

// Class Solarland.ExpWidget
// Size: 0x358 (Inherited: 0x340)
struct UExpWidget : USolarUserWidget {
	int32_t LocalTextIndex; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct USolarTextBlock* SolarText_WP_Exp; // 0x348(0x08)
	struct UWidgetAnimation* Exp_Anim; // 0x350(0x08)

	void PlayGetEXPAnimation(int32_t InExp); // Function Solarland.ExpWidget.PlayGetEXPAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1c68790
	struct FString GetExpDisplayStringWithValue(int32_t Value); // Function Solarland.ExpWidget.GetExpDisplayStringWithValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1c67fa0
};

// Class Solarland.FeedbackCanvasPanel
// Size: 0x1b8 (Inherited: 0x168)
struct UFeedbackCanvasPanel : UCanvasPanel {
	struct TMap<struct FString, struct FFeedbackSingleData> FeedbackMap; // 0x168(0x50)
};

// Class Solarland.FeedbackWidget
// Size: 0x2a0 (Inherited: 0x260)
struct UFeedbackWidget : UUserWidget {
	struct UFeedbackCanvasPanel* FeedbackPanel; // 0x260(0x08)
	float VisibilityTime; // 0x268(0x04)
	float VisibilityTimer; // 0x26c(0x04)
	struct FFeedbackSingleData CurrentFeedbackSingleData; // 0x270(0x30)
};

// Class Solarland.FireInputWidget
// Size: 0x370 (Inherited: 0x138)
struct UFireInputWidget : UWidget {
	struct FSlateBrush JoyStickThumb; // 0x138(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x1d0(0x98)
	struct FSlateBrush JoyStickIcon; // 0x268(0x98)
	struct FVector2D VisualSize; // 0x300(0x08)
	struct FVector2D ThumbSize; // 0x308(0x08)
	struct FVector2D InputScale; // 0x310(0x08)
	struct FVector2D IconSize; // 0x318(0x08)
	float ActiveOpacity; // 0x320(0x04)
	float InactiveOpacity; // 0x324(0x04)
	float TimeUntilDeactive; // 0x328(0x04)
	bool bPreventReCenter; // 0x32c(0x01)
	char pad_32D[0x13]; // 0x32d(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x340(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x350(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x360(0x10)

	void SetJoyStickThumbBrush(struct FButtonStyle& ButtonStyle); // Function Solarland.FireInputWidget.SetJoyStickThumbBrush // (Final|Native|Public|HasOutParms) // @ game+0x1c6d970
	void SetJoyStickIcon(struct FSlateBrush& Icon); // Function Solarland.FireInputWidget.SetJoyStickIcon // (Final|Native|Public|HasOutParms) // @ game+0x1c6d7e0
	void SetInputScale(struct FVector2D Scale); // Function Solarland.FireInputWidget.SetInputScale // (Final|Native|Public|HasDefaults) // @ game+0x1c6d760
	void ResetControlInput(); // Function Solarland.FireInputWidget.ResetControlInput // (Final|Native|Public) // @ game+0x1c6d6a0
};

// Class Solarland.GameArgs
// Size: 0x48 (Inherited: 0x28)
struct UGameArgs : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FString> CommandLineArgs; // 0x30(0x10)
	bool SkipTutorial; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	bool ExecGameArgs(struct FString Args, struct FString& FailReason); // Function Solarland.GameArgs.ExecGameArgs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.GameDataManager
// Size: 0x11b0 (Inherited: 0x228)
struct AGameDataManager : AGameManagerBase {
	struct TArray<int32_t> IntegerValues; // 0x228(0x10)
	struct TArray<float> FloatValues; // 0x238(0x10)
	struct TArray<char> ByteValues; // 0x248(0x10)
	struct TArray<bool> BoolValues; // 0x258(0x10)
	struct TArray<struct FVector> FVectorValues; // 0x268(0x10)
	struct TArray<struct FString> FStringValues; // 0x278(0x10)
	char pad_288[0x60]; // 0x288(0x60)
	struct FSCMHostData GlobalDataMap; // 0x2e8(0x488)
	struct TMap<struct FString, struct FSCMHostData> SideDataMap; // 0x770(0x50)
	struct TMap<struct FString, struct FSCMHostData> PlayerDataMap; // 0x7c0(0x50)
	struct FSCMHostData SideDataDefaultTemplate; // 0x810(0x488)
	struct FSCMHostData PlayerDataDefaultTemplate; // 0xc98(0x488)
	struct TMap<struct FString, struct URank*> RanKMap; // 0x1120(0x50)
	char pad_1170[0x20]; // 0x1170(0x20)
	struct UDataTable* DataTable; // 0x1190(0x08)
	struct UDataTable* GeneralDataTable; // 0x1198(0x08)
	char pad_11A0[0x10]; // 0x11a0(0x10)

	void RemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.RemoveHost // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6d5a0
	void RemoveData(enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, enum class ESCMDataSetType DataSetType); // Function Solarland.GameDataManager.RemoveData // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6d430
	void NotifyRemoveHost(enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.GameDataManager.NotifyRemoveHost // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1c6cfd0
	void AddDataByTableRow(struct FName RowName, struct FSCMDataBoardRow& InTableRow); // Function Solarland.GameDataManager.AddDataByTableRow // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1c6b820
};

// Class Solarland.GameEventComponent
// Size: 0xd8 (Inherited: 0xd0)
struct UGameEventComponent : UGameModeCompBase {
	float WorldTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void ReceiveInit(); // Function Solarland.GameEventComponent.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitializeEventList(); // Function Solarland.GameEventComponent.InitializeEventList // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetAliveCount(); // Function Solarland.GameEventComponent.GetAliveCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c6bf90
	void CheckEventList(float DeltaTime); // Function Solarland.GameEventComponent.CheckEventList // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.GameJobManager
// Size: 0x450 (Inherited: 0x228)
struct AGameJobManager : AGameManagerBase {
	struct FMulticastInlineDelegate SideListChangeEvent; // 0x228(0x10)
	struct TArray<struct FSCMSideData> SideData; // 0x238(0x10)
	struct TArray<struct FSCMSideData> AttrData; // 0x248(0x10)
	struct TMap<struct FString, uint32_t> SideIndexMap; // 0x258(0x50)
	struct TMap<struct FString, struct ASCMPlayerState*> PlayerIndexMap; // 0x2a8(0x50)
	struct TArray<struct ASCMPlayerState*> OBPlayerList; // 0x2f8(0x10)
	char pad_308[0x20]; // 0x308(0x20)
	struct UDataTable* JobDataTable; // 0x328(0x08)
	struct FSideAttributeSetArray SideAttributeSets; // 0x330(0x120)

	bool UnBindPlayerQuitSideEvent(struct FString TargetSide, struct FDelegate& InEvent); // Function Solarland.GameJobManager.UnBindPlayerQuitSideEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6de80
	bool UnBindPlayerJoinSideEvent(struct FString TargetSide, struct FDelegate& InEvent); // Function Solarland.GameJobManager.UnBindPlayerJoinSideEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6dd70
	bool SwitchPlayerSideAndJob(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayerSideAndJob // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6dbf0
	bool SwitchPlayers(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayers // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6dcb0
	bool SwitchPlayerPosInTeam(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.GameJobManager.SwitchPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6db30
	bool SwitchOBPlayerAndPlayer(struct ASCMPlayerState* OBPlayer, struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.SwitchOBPlayerAndPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6da70
	void SideListChangeEvent__DelegateSignature(struct TArray<struct FSCMSideData>& SideList); // DelegateFunction Solarland.GameJobManager.SideListChangeEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void SetTimerToNoticeSideDataChanged(); // Function Solarland.GameJobManager.SetTimerToNoticeSideDataChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6da50
	void ServerSidePosInTeamChange(struct FString SideName); // Function Solarland.GameJobManager.ServerSidePosInTeamChange // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1c6d6c0
	void RenumberAllPlayerPosInTeam(); // Function Solarland.GameJobManager.RenumberAllPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6d680
	bool PreAssignOBToPlayer(struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.PreAssignOBToPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6d3a0
	bool PreAssignJobToPlayer(struct ASCMPlayerState* Player, struct FString Side, struct FString Job, int32_t PosInTeam); // Function Solarland.GameJobManager.PreAssignJobToPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6d230
	void OnRep_SideDataList(); // Function Solarland.GameJobManager.OnRep_SideDataList // (Final|Native|Private) // @ game+0x1c6d210
	void OnRep_OBPlayerList(); // Function Solarland.GameJobManager.OnRep_OBPlayerList // (Final|Native|Private) // @ game+0x1c6d1f0
	void OnPlayerStateEndPlay(struct AActor* PlayerState, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameJobManager.OnPlayerStateEndPlay // (Final|Native|Private) // @ game+0x1c6d130
	void OnOBPlayerListChanged(struct ASCMPlayerState* ChangedPlayer); // Function Solarland.GameJobManager.OnOBPlayerListChanged // (Final|Native|Private) // @ game+0x1c6d0b0
	bool IsPlayerSameTeam(struct ASCMPlayerState* TargetPlayer, struct FString TargetPlayerID); // Function Solarland.GameJobManager.IsPlayerSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6cee0
	bool IsExistSideJob(struct FString NewSide, struct FString JobName); // Function Solarland.GameJobManager.IsExistSideJob // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6cde0
	bool IsExistSide(struct FString NewSide); // Function Solarland.GameJobManager.IsExistSide // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6cd30
	bool IsEmptyPosInTeam(struct FString SideName, int32_t PosInTeam); // Function Solarland.GameJobManager.IsEmptyPosInTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6cc40
	struct TArray<int32_t> GetTeamAssignableNumArray(); // Function Solarland.GameJobManager.GetTeamAssignableNumArray // (Final|Native|Public) // @ game+0x1c6cbc0
	bool GetSidePreJoinPlayerList(struct FString SideName, struct TArray<struct ASCMPlayerState*>& OutPreJoinPlayerList); // Function Solarland.GameJobManager.GetSidePreJoinPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c6cab0
	bool GetSidePlayerList(struct FString SideName, struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetSidePlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c6c9a0
	bool GetSideJobPlayerList(struct FString SideName, struct FString JobName, struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetSideJobPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c6c840
	bool GetSideData(struct FString InSideName, struct FSCMSideData& outData); // Function Solarland.GameJobManager.GetSideData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6c6a0
	bool GetSideAttributeSet(struct FSideAttributeSet& OutSet, struct FString InSideName); // Function Solarland.GameJobManager.GetSideAttributeSet // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c6c500
	bool GetPreOBPlayerIDList(struct TArray<struct FString>& OutPlayerIDList); // Function Solarland.GameJobManager.GetPreOBPlayerIDList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c6c420
	struct ASCMPlayerState* GetPlayerByPosInTeam(struct FString Side, char PosInTeam); // Function Solarland.GameJobManager.GetPlayerByPosInTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6c330
	struct ASCMPlayerState* GetPlayerByPlayerID(struct FString InPlayerID); // Function Solarland.GameJobManager.GetPlayerByPlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6c280
	bool GetOBPlayerList(struct TArray<struct ASCMPlayerState*>& OutPlayerList); // Function Solarland.GameJobManager.GetOBPlayerList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1c6c1c0
	bool GetJobDataBySideAndJob(struct FString NewSide, struct FString NewJob, struct FSCMJobData& outData); // Function Solarland.GameJobManager.GetJobDataBySideAndJob // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6c050
	int32_t GetAssignedSideCount(); // Function Solarland.GameJobManager.GetAssignedSideCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1c6c020
	int32_t GetAllSidePlayerNumber(); // Function Solarland.GameJobManager.GetAllSidePlayerNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c6bff0
	struct TArray<struct FSCMSideData> GetAllSideData(); // Function Solarland.GameJobManager.GetAllSideData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c6bfc0
	bool FindEmptyPosInTeam(struct FString SideName, int32_t& OutPosInTeam); // Function Solarland.GameJobManager.FindEmptyPosInTeam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6bea0
	bool ChangePlayerToOB(struct ASCMPlayerState* Player); // Function Solarland.GameJobManager.ChangePlayerToOB // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6be10
	bool ChangePlayerPosInTeam(struct ASCMPlayerState* Player, int32_t PosInTeam); // Function Solarland.GameJobManager.ChangePlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6bd50
	bool ChangePlayerJob(struct ASCMPlayerState* Player, struct FString NewSide, struct FString NewJob, int32_t PosInTeam); // Function Solarland.GameJobManager.ChangePlayerJob // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c6bbe0
	bool BindPlayerQuitSideEvent(struct FString TargetSide, struct FDelegate& InEvent); // Function Solarland.GameJobManager.BindPlayerQuitSideEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6bad0
	bool BindPlayerJoinSideEvent(struct FString TargetSide, struct FDelegate& InEvent); // Function Solarland.GameJobManager.BindPlayerJoinSideEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c6b9c0
};

// Class Solarland.LevelWorldCompositionSetting
// Size: 0x88 (Inherited: 0x38)
struct ULevelWorldCompositionSetting : UDeveloperSettings {
	struct TMap<struct FSoftObjectPath, struct FVector> BackupLevelStreamingLocationMap; // 0x38(0x50)
};

// Class Solarland.GameLevelManager
// Size: 0x478 (Inherited: 0x228)
struct AGameLevelManager : AGameManagerBase {
	char pad_228[0x20]; // 0x228(0x20)
	struct FString DesiredLoadLevel; // 0x248(0x10)
	char pad_258[0x10]; // 0x258(0x10)
	struct TArray<struct FString> DesiredLoadElementLevels; // 0x268(0x10)
	struct TArray<struct FString> DesiredUnLoadElementLevels; // 0x278(0x10)
	char pad_288[0xa8]; // 0x288(0xa8)
	struct TMap<struct FString, struct ULevelStreamingDynamic*> LevelKeyToObject; // 0x330(0x50)
	struct TSet<struct ASolarCharacter*> MovementDisabledCharacters; // 0x380(0x50)
	char pad_3D0[0x60]; // 0x3d0(0x60)
	struct TArray<struct FString> LoadingElementLevelNames; // 0x430(0x10)
	struct TArray<struct FString> UnLoadingElementLevelNames; // 0x440(0x10)
	char pad_450[0x18]; // 0x450(0x18)
	struct AGameMapElementManager* MapElementManager; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void SetMinimapFootprintVisible(bool bVisible); // Function Solarland.GameLevelManager.SetMinimapFootprintVisible // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnStreamingLevelLoaded // (Final|Native|Private) // @ game+0x1c71ad0
	void OnScoutPlayerDepart(); // Function Solarland.GameLevelManager.OnScoutPlayerDepart // (Final|Native|Public) // @ game+0x1c71ab0
	void OnRep_DesiredUnLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredUnLoadElementLevels // (Final|Native|Private) // @ game+0x1c71a90
	void OnRep_DesiredLoadLevel(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadLevel // (Final|Native|Private) // @ game+0x1c71a70
	void OnRep_DesiredLoadElementLevels(); // Function Solarland.GameLevelManager.OnRep_DesiredLoadElementLevels // (Final|Native|Private) // @ game+0x1c71a50
	void OnLevelLoaded(); // Function Solarland.GameLevelManager.OnLevelLoaded // (Final|Native|Private) // @ game+0x1c71a30
	void OnElementStreamingLevelUnLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelUnLoaded // (Final|Native|Private) // @ game+0x1c71560
	void OnElementStreamingLevelLoaded(); // Function Solarland.GameLevelManager.OnElementStreamingLevelLoaded // (Final|Native|Private) // @ game+0x1c71540
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.GameLevelManager.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x1c71480
	void LevelManagerTick(); // Function Solarland.GameLevelManager.LevelManagerTick // (Final|Native|Private) // @ game+0x1c713e0
	int32_t GetCurrentMapID(); // Function Solarland.GameLevelManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c70f50
	struct FString GetCurrentLevel(); // Function Solarland.GameLevelManager.GetCurrentLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c70e90
};

// Class Solarland.GameMapElementManager
// Size: 0x2e8 (Inherited: 0x228)
struct AGameMapElementManager : AGameManagerBase {
	struct TMap<struct FString, struct ASCMMapElementBase*> MapElementListWithID; // 0x228(0x50)
	struct TArray<struct ASCMMapElementBase*> MapElementList; // 0x278(0x10)
	struct TArray<struct ASCMPlayerStart*> PlayerStartList; // 0x288(0x10)
	char pad_298[0x50]; // 0x298(0x50)

	void OnAddNewMapElement(struct AActor* InNewActor); // Function Solarland.GameMapElementManager.OnAddNewMapElement // (Final|Native|Public) // @ game+0x1c71400
};

// Class Solarland.GameModeGlobalSetting
// Size: 0x90 (Inherited: 0x28)
struct UGameModeGlobalSetting : UObject {
	struct FMulticastInlineDelegate OnGlobalSettingChanged; // 0x28(0x10)
	bool bCanVJetInWater; // 0x38(0x01)
	bool bCanHJetInWater; // 0x39(0x01)
	bool bOverrideVJetCD; // 0x3a(0x01)
	char pad_3B[0x1]; // 0x3b(0x01)
	float OverridenVJetCD; // 0x3c(0x04)
	bool bOverrideHJetCD; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float OverridenHJetCD; // 0x44(0x04)
	bool bEnableJetCost; // 0x48(0x01)
	enum class EJetAltitudeLimitationMode JetAltitudeLimitationMode; // 0x49(0x01)
	bool bEnableEnergyCost; // 0x4a(0x01)
	bool bEnableDamage; // 0x4b(0x01)
	bool bEnableTeamDamage; // 0x4c(0x01)
	bool bEnableMinHPLock; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	float MinHPToLock; // 0x50(0x04)
	bool bEnableSkydiveFollowMovement; // 0x54(0x01)
	bool bEnableBigMap; // 0x55(0x01)
	bool bShowVehicleOnMap; // 0x56(0x01)
	bool bShowMapVoiceStep; // 0x57(0x01)
	bool bShowMapVoiceFight; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	int32_t KillStreakEndNoticeNumber; // 0x5c(0x04)
	int32_t KillLeaderMinKillNumber; // 0x60(0x04)
	bool bShowRevengeNotice; // 0x64(0x01)
	bool bShowKillStreakEndNotice; // 0x65(0x01)
	bool bShowTotalKillNotice; // 0x66(0x01)
	bool bShowKillDownNotice; // 0x67(0x01)
	bool bShowKillLeaderNotice; // 0x68(0x01)
	bool bShowKillLeaderShutDownNotice; // 0x69(0x01)
	bool bShowClearTeamNotice; // 0x6a(0x01)
	enum class EWeaponInfiniteAmmoMode WeaponInfiniteAmmoMode; // 0x6b(0x01)
	enum class ESolarAssistAimSwitchFlag AssistAimSwitchFlag; // 0x6c(0x01)
	bool bEnableWeaponPartEffectTip; // 0x6d(0x01)
	char pad_6E[0x2]; // 0x6e(0x02)
	struct TArray<float> WeaponLevelDamageFactorArray; // 0x70(0x10)
	bool bDestroyItemOnDiscard; // 0x80(0x01)
	bool bDestroyWeaponOnDiscard; // 0x81(0x01)
	bool bCanRebirth; // 0x82(0x01)
	bool bCanLoginBattle; // 0x83(0x01)
	bool bEnableBattlePrompt; // 0x84(0x01)
	bool bEnableBattlePrompt_BeginPlay; // 0x85(0x01)
	bool bKillPlayerWhenOut; // 0x86(0x01)
	char pad_87[0x1]; // 0x87(0x01)
	int32_t ConfigGameModeId; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)

	void SetWeaponInfiniteAmmoMode(enum class EWeaponInfiniteAmmoMode NewValue); // Function Solarland.GameModeGlobalSetting.SetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73690
	void SetTeamDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetTeamDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73600
	void SetSkydiveFollowMovementEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73570
	void SetShowVehicleOnMap(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetShowVehicleOnMap // (Final|Native|Public|BlueprintCallable) // @ game+0x1c734e0
	void SetShowTotalKillNotice(bool InShowTotalKillNotice); // Function Solarland.GameModeGlobalSetting.SetShowTotalKillNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73460
	void SetShowShowClearTeamNotice(bool InShowClearTeamNotice); // Function Solarland.GameModeGlobalSetting.SetShowShowClearTeamNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c733e0
	void SetShowRevengeNotice(bool InShowRevengeNotice); // Function Solarland.GameModeGlobalSetting.SetShowRevengeNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73360
	void SetShowMapVoiceStep(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetShowMapVoiceStep // (Final|Native|Public|BlueprintCallable) // @ game+0x1c732d0
	void SetShowMapVoiceFight(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetShowMapVoiceFight // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73240
	void SetShowKillStreakEndNotice(bool InShowKillStreakEndNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c731c0
	void SetShowKillLeaderShutDownNotice(bool InShowKillLeaderShutDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73140
	void SetShowKillLeaderNotice(bool InShowKillLeaderNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c730c0
	void SetShowKillDownNotice(bool InShowKillDownNotice); // Function Solarland.GameModeGlobalSetting.SetShowKillDownNotice // (Final|Native|Public|BlueprintCallable) // @ game+0x1c73040
	void SetMinHPToLock(float NewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPToLock // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72fc0
	void SetMinHPLockEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetMinHPLockEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72f30
	void SetKillStreakEndNoticeNumber(int32_t InKillStreakEndNoticeNumber); // Function Solarland.GameModeGlobalSetting.SetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72eb0
	void SetKillPlayerWhenOut(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72e30
	void SetKillLeaderMinKillNumber(int32_t InKillLeaderMinKillNumber); // Function Solarland.GameModeGlobalSetting.SetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72db0
	void SetJetCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetJetCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72d20
	void SetJetAltitudeLimitationMode(enum class EJetAltitudeLimitationMode NewValue); // Function Solarland.GameModeGlobalSetting.SetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72ca0
	void SetGameCanRebirth(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetGameCanRebirth // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72c20
	void SetEnergyCostEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetEnergyCostEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72b90
	void SetDamageEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetDamageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72b00
	void SetCanVJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanVJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72a70
	void SetCanLoginBattle(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanLoginBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x1c729f0
	void SetCanHJetInWater(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetCanHJetInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72960
	void SetBigMapEnabled(bool bNewValue); // Function Solarland.GameModeGlobalSetting.SetBigMapEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1c728d0
	void SetAssistAimSwitchFlag(enum class ESolarAssistAimSwitchFlag InFlag); // Function Solarland.GameModeGlobalSetting.SetAssistAimSwitchFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1c72850
	void ReceiveSettingChanged(); // Function Solarland.GameModeGlobalSetting.ReceiveSettingChanged // (Final|Native|Protected) // @ game+0x1c72830
	bool IsVJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsVJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c713c0
	bool IsTeamDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsTeamDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c713a0
	bool IsSkydiveFollowMovementEnabled(); // Function Solarland.GameModeGlobalSetting.IsSkydiveFollowMovementEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71380
	bool IsShowVehicleOnMap(); // Function Solarland.GameModeGlobalSetting.IsShowVehicleOnMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71360
	bool IsShowTotalKillNotice(); // Function Solarland.GameModeGlobalSetting.IsShowTotalKillNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71340
	bool IsShowRevengeNotice(); // Function Solarland.GameModeGlobalSetting.IsShowRevengeNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71320
	bool IsShowMapVoiceStep(); // Function Solarland.GameModeGlobalSetting.IsShowMapVoiceStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71300
	bool IsShowMapVoiceFight(); // Function Solarland.GameModeGlobalSetting.IsShowMapVoiceFight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c712e0
	bool IsShowKillStreakEndNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillStreakEndNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c712c0
	bool IsShowKillLeaderShutDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderShutDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28bc0
	bool IsShowKillLeaderNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillLeaderNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28a60
	bool IsShowKillDownNotice(); // Function Solarland.GameModeGlobalSetting.IsShowKillDownNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c712a0
	bool IsShowClearTeamNotice(); // Function Solarland.GameModeGlobalSetting.IsShowClearTeamNotice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71280
	bool IsMinHPLockEnabled(); // Function Solarland.GameModeGlobalSetting.IsMinHPLockEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71260
	bool IsKillPlayerWhenOut(); // Function Solarland.GameModeGlobalSetting.IsKillPlayerWhenOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71240
	bool IsJetCostEnabledEnabled(); // Function Solarland.GameModeGlobalSetting.IsJetCostEnabledEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71220
	bool IsHJetCDOverriden(); // Function Solarland.GameModeGlobalSetting.IsHJetCDOverriden // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71200
	bool IsGameCanRebirth(); // Function Solarland.GameModeGlobalSetting.IsGameCanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c711e0
	bool IsGameCanLoginBattle(); // Function Solarland.GameModeGlobalSetting.IsGameCanLoginBattle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c711c0
	bool IsEnergyCostEnabled(); // Function Solarland.GameModeGlobalSetting.IsEnergyCostEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71190
	bool IsEnableWeaponPartEffectTip(); // Function Solarland.GameModeGlobalSetting.IsEnableWeaponPartEffectTip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71170
	bool IsDestroyWeaponOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyWeaponOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71150
	bool IsDestroyItemOnDiscard(); // Function Solarland.GameModeGlobalSetting.IsDestroyItemOnDiscard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71130
	bool IsDamageEnabled(); // Function Solarland.GameModeGlobalSetting.IsDamageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71110
	bool IsBigMapEnabled(); // Function Solarland.GameModeGlobalSetting.IsBigMapEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c710f0
	enum class EWeaponInfiniteAmmoMode GetWeaponInfiniteAmmoMode(); // Function Solarland.GameModeGlobalSetting.GetWeaponInfiniteAmmoMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c710d0
	float GetOverridenVJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenVJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c710b0
	float GetOverridenHJetCD(); // Function Solarland.GameModeGlobalSetting.GetOverridenHJetCD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71090
	float GetMinHPToLock(); // Function Solarland.GameModeGlobalSetting.GetMinHPToLock // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x846ee0
	int32_t GetKillStreakEndNoticeNumber(); // Function Solarland.GameModeGlobalSetting.GetKillStreakEndNoticeNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71070
	int32_t GetKillLeaderMinKillNumber(); // Function Solarland.GameModeGlobalSetting.GetKillLeaderMinKillNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71050
	enum class EJetAltitudeLimitationMode GetJetAltitudeLimitationMode(); // Function Solarland.GameModeGlobalSetting.GetJetAltitudeLimitationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71030
	float GetDamageFactorByWeaponLevel(int32_t InWeaponLevel); // Function Solarland.GameModeGlobalSetting.GetDamageFactorByWeaponLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c70f80
	int32_t GetConfigGameModeId(); // Function Solarland.GameModeGlobalSetting.GetConfigGameModeId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c70e70
	enum class ESolarAssistAimSwitchFlag GetAssistAimSwitchFlag(); // Function Solarland.GameModeGlobalSetting.GetAssistAimSwitchFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c70e50
	bool CanVJetInWater(); // Function Solarland.GameModeGlobalSetting.CanVJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c70e30
	bool CanHJetInWater(); // Function Solarland.GameModeGlobalSetting.CanHJetInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c70e10
};

// Class Solarland.GameModeSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UGameModeSettingInterface : UInterface {

	struct UGameModeGlobalSetting* GetGameModeSetting(); // Function Solarland.GameModeSettingInterface.GetGameModeSetting // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c2f2f0
};

// Class Solarland.GameplayTagReflectorSetting
// Size: 0x78 (Inherited: 0x28)
struct UGameplayTagReflectorSetting : UObject {
	struct TMap<struct FName, struct FSoftObjectPath> ReflectedTagsSet; // 0x28(0x50)
};

// Class Solarland.GameplayVibrateDataAsset
// Size: 0x80 (Inherited: 0x30)
struct UGameplayVibrateDataAsset : UDataAsset {
	struct TMap<enum class EGameplayVibrateCategory, struct FVibrateIntensityPlayParams> CategoryIntensityMap; // 0x30(0x50)
};

// Class Solarland.GameplayVibrateSettings
// Size: 0x60 (Inherited: 0x38)
struct UGameplayVibrateSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UGameplayVibrateDataAsset> GameplayVibrateConfig; // 0x38(0x28)
};

// Class Solarland.GameReviveItemManager
// Size: 0x248 (Inherited: 0x228)
struct AGameReviveItemManager : AGameManagerBase {
	int32_t MaxReviveUsage; // 0x228(0x04)
	float ReviveItemRepoTime; // 0x22c(0x04)
	float ReviveProximityRadius; // 0x230(0x04)
	float ReviveHeight; // 0x234(0x04)
	float ReviveWaitTime; // 0x238(0x04)
	bool bGlobalUseRevieItem; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float DownedReviveButtonDelayTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)

	void SetGlobalUseReviveItem(bool InCanUseItem); // Function Solarland.GameReviveItemManager.SetGlobalUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c78980
	bool PlayerTryUseReviveItem(struct ASolarPlayerState* InPlayerState, int32_t InUseNum); // Function Solarland.GameReviveItemManager.PlayerTryUseReviveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c788c0
	void OnTeammateReviveManagerRefresh(); // Function Solarland.GameReviveItemManager.OnTeammateReviveManagerRefresh // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c788a0
	void OnRep_GlobalUseRevieItem(); // Function Solarland.GameReviveItemManager.OnRep_GlobalUseRevieItem // (Final|Native|Protected) // @ game+0x1c788a0
	bool IsPlayerReviving(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.IsPlayerReviving // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	float GetReviveWaitTime(); // Function Solarland.GameReviveItemManager.GetReviveWaitTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78870
	float GetReviveProximityRadius(); // Function Solarland.GameReviveItemManager.GetReviveProximityRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78840
	float GetReviveItemRepoTime(); // Function Solarland.GameReviveItemManager.GetReviveItemRepoTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78810
	int32_t GetReviveItemID(); // Function Solarland.GameReviveItemManager.GetReviveItemID // (Final|Native|Public|BlueprintCallable) // @ game+0x1c787e0
	float GetReviveHeight(); // Function Solarland.GameReviveItemManager.GetReviveHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x1c787b0
	int32_t GetPlayerReviveItemNum(struct ASolarPlayerState* InPlayerState); // Function Solarland.GameReviveItemManager.GetPlayerReviveItemNum // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78720
	int32_t GetMaxReviveUsage(); // Function Solarland.GameReviveItemManager.GetMaxReviveUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x1c786f0
	float GetDownedReviveButtonDelayTime(); // Function Solarland.GameReviveItemManager.GetDownedReviveButtonDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1c786a0
	void ClearAllPlayersReviveItem(); // Function Solarland.GameReviveItemManager.ClearAllPlayersReviveItem // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool CanPlayerUseReviveItem(struct ASolarPlayerState* InPlayerState, bool bCheckItemNum); // Function Solarland.GameReviveItemManager.CanPlayerUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1c785d0
	bool CanGlobalUseReviveItem(); // Function Solarland.GameReviveItemManager.CanGlobalUseReviveItem // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1c785a0
};

// Class Solarland.Rank
// Size: 0xb0 (Inherited: 0x28)
struct URank : UObject {
	struct TMap<uint32_t, struct FMulticastInlineDelegate> SpecificRankChangeEventMap; // 0x28(0x50)
	struct TArray<struct FSCMRankListMulticast> RankListChangeMulticasts; // 0x78(0x10)
	char pad_88[0x20]; // 0x88(0x20)
	enum class ESCMDataRankType RankType; // 0xa8(0x01)
	enum class ESCMHostType HostType; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
};

// Class Solarland.GaugeImage
// Size: 0x2c8 (Inherited: 0x260)
struct UGaugeImage : UUserWidget {
	enum class EGaugeType GaugeType; // 0x260(0x01)
	bool bInvert; // 0x261(0x01)
	char pad_262[0x2]; // 0x262(0x02)
	struct FVector2D ImageSize; // 0x264(0x08)
	float InitialDegree; // 0x26c(0x04)
	bool bSymmetric; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	struct FVector2D CenterOffset; // 0x274(0x08)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct UObject* ResourceObject; // 0x280(0x08)
	float Progress; // 0x288(0x04)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct UMaterialInterface* MaterialDegree360; // 0x290(0x08)
	struct UMaterialInterface* MaterialDegree180; // 0x298(0x08)
	struct UMaterialInterface* MaterialDegree90; // 0x2a0(0x08)
	struct UMaterialInterface* MaterialDegreeLR; // 0x2a8(0x08)
	struct UMaterialInterface* MaterialDegreeUD; // 0x2b0(0x08)
	struct UImage* TargetImage; // 0x2b8(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2c0(0x08)

	void UpdateProgress(float InProgress); // Function Solarland.GaugeImage.UpdateProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78a90
	void SetProgress(float InProgress); // Function Solarland.GaugeImage.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78a90
	void SetImage(struct UObject* RO); // Function Solarland.GaugeImage.SetImage // (Final|Native|Public|BlueprintCallable) // @ game+0x1c78a10
	struct UImage* GetInternalImage(); // Function Solarland.GaugeImage.GetInternalImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c786d0
};

// Class Solarland.SolarDataAsset
// Size: 0x38 (Inherited: 0x30)
struct USolarDataAsset : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromAsset(); // Function Solarland.SolarDataAsset.InitFromAsset // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.GlobalVehicleWeaponConfig
// Size: 0xf8 (Inherited: 0x38)
struct UGlobalVehicleWeaponConfig : USolarDataAsset {
	struct TArray<struct FAssitLockBoneWeight> AssistLockBoneWeight; // 0x38(0x10)
	struct TArray<struct FAssitLockBoneWeight> SortAssistLockBoneWeight; // 0x48(0x10)
	float CoefficientHUD; // 0x58(0x04)
	float CoefficientWorld; // 0x5c(0x04)
	float CoefficientHUDUnlock; // 0x60(0x04)
	float CoefficientWorldUnlock; // 0x64(0x04)
	float HudDistFromAssistLockPawnToSecondReticle; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FRuntimeFloatCurve AssistLockUIScaleCurve; // 0x70(0x88)
};

// Class Solarland.GlobalWeaponConfig
// Size: 0x4d0 (Inherited: 0x38)
struct UGlobalWeaponConfig : USolarDataAsset {
	struct FVector2D StandardViewportSize; // 0x38(0x08)
	float StandardDPIScale; // 0x40(0x04)
	bool bWeaponReceiveShadow; // 0x44(0x01)
	enum class EAimOffsetAdjustType AimOffsetAdjustType; // 0x45(0x01)
	enum class EAimTraceOriginType AimTraceOriginType; // 0x46(0x01)
	bool bEnableNewShootAlgorithm; // 0x47(0x01)
	struct FWeaponAttributeGameplayTags WeaponAttributeTags; // 0x48(0x18)
	struct UDataTable* WeaponScopeSensitivityTable; // 0x60(0x08)
	bool bSecondLimitFullForGameDrop; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	float DoScopeInterval; // 0x6c(0x04)
	float DoScopeMixedTimeThreshold; // 0x70(0x04)
	float SprintingFireDelay; // 0x74(0x04)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseClassMap; // 0x78(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseTagMap; // 0xc8(0x50)
	struct TMap<struct AActor*, struct FWeaponHitResponse> WeaponHitResponseSameTeamClassMap; // 0x118(0x50)
	struct TMap<struct FName, struct FWeaponHitResponse> WeaponHitResponseSameTeamTagMap; // 0x168(0x50)
	float MuzzleInWallCheckDistance; // 0x1b8(0x04)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct FRuntimeFloatCurve HitEffectScaleRuntimeCurve; // 0x1c0(0x88)
	bool bCanOperateWhenOverload; // 0x248(0x01)
	char pad_249[0x7]; // 0x249(0x07)
	struct FRuntimeFloatCurve WeaponCrosshairSpreadSpeedRuntimeCurve; // 0x250(0x88)
	struct FRuntimeFloatCurve WeaponCrosshairBackSpeedRuntimeCurve; // 0x2d8(0x88)
	float WeaponSkillDataUIDisplayDistance; // 0x360(0x04)
	float PriamayFireIgnoreInterval; // 0x364(0x04)
	float AssistAimAutoFireRadius; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct TArray<enum class ECollisionChannel> AssistAimAutoFireBlockTypes; // 0x370(0x10)
	struct UWeaponAssistAimConfig* AssistAimConfig; // 0x380(0x08)
	struct FSoftObjectPath PartUpgradeMaterial; // 0x388(0x18)
	float PartUpgradeFadeInterval; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct TMap<enum class EPosture, struct FString> CharaterPostureMap; // 0x3a8(0x50)
	struct FGameplayTagContainer BlockCharacterSprintTags; // 0x3f8(0x20)
	struct UDataTable* WeaponPartEffectDescTable; // 0x418(0x08)
	int32_t WeaponPartEffectTipMaxinum; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct TMap<enum class ESolarHitType, struct FString> HitFeedbackMapForUI; // 0x428(0x50)
	struct TMap<int32_t, enum class EPassiveTriggeredVoice> AudioPromptForNoAmmoTable; // 0x478(0x50)
	int32_t WeaponSummonBlockNoticeID; // 0x4c8(0x04)
	int32_t WeaponSummonOverRangeNoticeID; // 0x4cc(0x04)

	struct FString GetStateByPosture(enum class EPosture posture); // Function Solarland.GlobalWeaponConfig.GetStateByPosture // (Final|Native|Public|Const) // @ game+0x1c7c660
	struct FString GetStateByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalWeaponConfig.GetStateByAnimState // (Final|Native|Public|Const) // @ game+0x1c7c590
	bool GetIsGroundByAnimState(enum class ECharacterStateForWeapon CharacterState); // Function Solarland.GlobalWeaponConfig.GetIsGroundByAnimState // (Final|Native|Public) // @ game+0x1c7c500
};

// Class Solarland.SolarWeaponBulletContainerWidget
// Size: 0x3b0 (Inherited: 0x340)
struct USolarWeaponBulletContainerWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct TMap<enum class EWeaponType, struct FSolarBulletContainerLayout> BulletContainerStorageLayout; // 0x348(0x50)
	struct FBulletContainerColor BulletColor; // 0x398(0x08)
	struct UCanvasPanel* RootPanel; // 0x3a0(0x08)
	int32_t CurrentMaxAmmo; // 0x3a8(0x04)
	enum class EWeaponType CurrentWeaponType; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
};

// Class Solarland.GridBulletContainer
// Size: 0x408 (Inherited: 0x3b0)
struct UGridBulletContainer : USolarWeaponBulletContainerWidget {
	struct UProgressBar* BulletContainer; // 0x3b0(0x08)
	struct UOverlay* LightOverlay; // 0x3b8(0x08)
	struct UOverlay* LightAllOverlay; // 0x3c0(0x08)
	struct UImage* Img_FakeBullet; // 0x3c8(0x08)
	struct UImage* Img_BulletGrid; // 0x3d0(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x3d8(0x08)
	struct UImage* Img_BulletEmpty; // 0x3e0(0x08)
	struct UWidgetAnimation* Light_Anim; // 0x3e8(0x08)
	struct UWidgetAnimation* LightAll_Anim; // 0x3f0(0x08)
	char pad_3F8[0x10]; // 0x3f8(0x10)

	bool RequestUpdateMaxAmmoCount(int32_t InMaxAmmo, bool bIgnoreAmmoCount); // Function Solarland.GridBulletContainer.RequestUpdateMaxAmmoCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1c7ca50
	void ReceiveUpdateMaxAmmoEvent(int32_t InMaxAmmo); // Function Solarland.GridBulletContainer.ReceiveUpdateMaxAmmoEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1c7c9c0
	void ReceiveUpdateBulletEvent(int32_t ReservedAmmo, bool bIsReloading, bool bIsFirstIn); // Function Solarland.GridBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1c7c8b0
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.GridBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1257b70
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.GridBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1c7c820
};

// Class Solarland.GyroscopeConfig
// Size: 0xf8 (Inherited: 0x30)
struct UGyroscopeConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct UDataTable* gyroscopeSensitivityDataTab; // 0x38(0x08)
	struct UDataTable* GyroscopeDeviceModelDataTab; // 0x40(0x08)
	char pad_48[0xb0]; // 0x48(0xb0)
};

// Class Solarland.HeroPickCharacterData
// Size: 0x68 (Inherited: 0x28)
struct UHeroPickCharacterData : UObject {
	int32_t CharacterId; // 0x28(0x04)
	int32_t SkinId; // 0x2c(0x04)
	int32_t CharacterProficiencyLevel; // 0x30(0x04)
	enum class EHeroOwnedType OwnType; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	int32_t ConfigSortNum; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FString HeroName; // 0x40(0x10)
	struct TArray<int32_t> SelectedPlayerPos; // 0x50(0x10)
	int32_t ConfirmPos; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Solarland.HeroPickCharacterCell
// Size: 0x358 (Inherited: 0x340)
struct UHeroPickCharacterCell : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UHeroPickCharacterData* DataObj; // 0x348(0x08)
	char pad_350[0x8]; // 0x350(0x08)

	void UpdateHeroIconAndName(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.UpdateHeroIconAndName // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowSelecting(bool bShow); // Function Solarland.HeroPickCharacterCell.ShowSelecting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowConfirm(); // Function Solarland.HeroPickCharacterCell.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetSelect(int32_t PosInTeam); // Function Solarland.HeroPickCharacterCell.SetSelect // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetProficiencyTypeIcon(int32_t ProficiencyLevel); // Function Solarland.HeroPickCharacterCell.SetProficiencyTypeIcon // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetClassTypeIcon(struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickCharacterCell.SetClassTypeIcon // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ClearSelect(); // Function Solarland.HeroPickCharacterCell.ClearSelect // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void BP_ShowLockState(enum class EUIHeroPickListCellState UiState); // Function Solarland.HeroPickCharacterCell.BP_ShowLockState // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HeroPickDetail
// Size: 0x340 (Inherited: 0x340)
struct UHeroPickDetail : USolarUserWidget {

	void UpdateCharacterDetails(int32_t CharacterId); // Function Solarland.HeroPickDetail.UpdateCharacterDetails // (Final|Native|Public|BlueprintCallable) // @ game+0x1c7ccc0
	void RefreshSkillInfo(int32_t SkillType, struct FString Attribute, struct FString SkillName, struct FString SkillDescription, struct TSoftObjectPtr<UTexture2D>& SkillIcon); // Function Solarland.HeroPickDetail.RefreshSkillInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HeroPickInfo
// Size: 0x278 (Inherited: 0x228)
struct AHeroPickInfo : AInfo {
	struct FString SideName; // 0x228(0x10)
	enum class EHeroPickType HeroPickType; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct UHeroPickWidget* HeroPickWidget; // 0x240(0x08)
	struct TArray<struct FPlayerSelectInfo> PlayerSelectInfos; // 0x248(0x10)
	float HeroPickTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	float WaitingToStartTime; // 0x260(0x04)
	int32_t CurrentPickPlayerIndex; // 0x264(0x04)
	float Duration; // 0x268(0x04)
	char pad_26C[0xc]; // 0x26c(0x0c)

	void OnRep_WaitingToStartTime(); // Function Solarland.HeroPickInfo.OnRep_WaitingToStartTime // (Final|Native|Private) // @ game+0x8ba190
	void OnRep_SelectPlayerChange(); // Function Solarland.HeroPickInfo.OnRep_SelectPlayerChange // (Final|Native|Private) // @ game+0x1c7c750
	void OnRep_PlayerSelectInfos(); // Function Solarland.HeroPickInfo.OnRep_PlayerSelectInfos // (Final|Native|Private) // @ game+0x1c7c730
	void OnRep_HeroPickTime(); // Function Solarland.HeroPickInfo.OnRep_HeroPickTime // (Final|Native|Private) // @ game+0x8ba190
};

// Class Solarland.HeroPickManager
// Size: 0x258 (Inherited: 0x228)
struct AHeroPickManager : AGameManagerBase {
	struct TArray<struct AHeroPickInfo*> HeroPickArray; // 0x228(0x10)
	float HeroPickTime; // 0x238(0x04)
	float TransitionAnimTime; // 0x23c(0x04)
	float WaitingToStartTime; // 0x240(0x04)
	float WaitingForEndTime; // 0x244(0x04)
	struct UHeroPickRuleBase* AIPickRule; // 0x248(0x08)
	bool bIsAllPlayerSelecting; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	bool SideBeginHeroPick(struct FString SideName); // Function Solarland.HeroPickManager.SideBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c7cc10
	void SetHeroPickTime(float InHeroPickTime); // Function Solarland.HeroPickManager.SetHeroPickTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1c7cb10
	void ReceiveSidePickHeroEnd(struct FString SideName); // Function Solarland.HeroPickManager.ReceiveSidePickHeroEnd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveAllHeroPickEnd(); // Function Solarland.HeroPickManager.ReceiveAllHeroPickEnd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool PlayerBeginHeroPick(struct ASCMPlayerState* Player); // Function Solarland.HeroPickManager.PlayerBeginHeroPick // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c7c790
	void On_RepAllPlayerSelectEnd(); // Function Solarland.HeroPickManager.On_RepAllPlayerSelectEnd // (Final|Native|Protected) // @ game+0x1c7c770
	void AllPlayersGotoPickHero(); // Function Solarland.HeroPickManager.AllPlayersGotoPickHero // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1c7c4c0
};

// Class Solarland.HeroPickPlayerSlot
// Size: 0x350 (Inherited: 0x340)
struct UHeroPickPlayerSlot : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	enum class EUIHeroPickPlayerState UiState; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)

	void UpdateSelectPercent(float Percent); // Function Solarland.HeroPickPlayerSlot.UpdateSelectPercent // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void UpdateIconAndName(struct FString HeroName, int32_t HeroExpLevel, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.HeroPickPlayerSlot.UpdateIconAndName // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowConfirm(); // Function Solarland.HeroPickPlayerSlot.ShowConfirm // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetPlayerPos(struct FString playerName, char InPosInTeam); // Function Solarland.HeroPickPlayerSlot.SetPlayerPos // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ChangeUIStage(enum class EUIHeroPickPlayerState State); // Function Solarland.HeroPickPlayerSlot.ChangeUIStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HeroPickRuleBase
// Size: 0x28 (Inherited: 0x28)
struct UHeroPickRuleBase : UObject {
};

// Class Solarland.HeroPickWidget
// Size: 0x3e0 (Inherited: 0x340)
struct UHeroPickWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct AHeroPickInfo* PickInfo; // 0x348(0x08)
	struct UTileView* CharacterList; // 0x350(0x08)
	struct TArray<struct UHeroPickPlayerSlot*> PlayerSlots; // 0x358(0x10)
	struct TMap<int32_t, struct UHeroPickCharacterData*> SelectDataMap; // 0x368(0x50)
	char pad_3B8[0x18]; // 0x3b8(0x18)
	struct UHeroPickDetail* UI_HeroPick_Detail; // 0x3d0(0x08)
	int32_t CurrentSelectCharacterID; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)

	void ShowPlayerConfirm(int32_t Pos); // Function Solarland.HeroPickWidget.ShowPlayerConfirm // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c7cb90
	void ShowMyTurn(bool bShow); // Function Solarland.HeroPickWidget.ShowMyTurn // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowMainUICharacter(bool bShow); // Function Solarland.HeroPickWidget.ShowMainUICharacter // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetHeroHPAndSpeed(int32_t HP, int32_t Speed); // Function Solarland.HeroPickWidget.SetHeroHPAndSpeed // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SetCountDowText(struct FString Text); // Function Solarland.HeroPickWidget.SetCountDowText // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetClassNameAndIcon(struct FString ClassName, struct TSoftObjectPtr<UTexture2D>& ClassIcon); // Function Solarland.HeroPickWidget.SetClassNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SetCharacterNameAndIcon(struct FString Name, struct FString SkinName, struct TSoftObjectPtr<UTexture2D>& CharacterIcon); // Function Solarland.HeroPickWidget.SetCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void RefreshTacticalSkillIcon(struct TSoftObjectPtr<UTexture2D>& TacticalSkillIcon); // Function Solarland.HeroPickWidget.RefreshTacticalSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void RefreshSuperSkillIcon(struct TSoftObjectPtr<UTexture2D>& SuperSkillIcon); // Function Solarland.HeroPickWidget.RefreshSuperSkillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void RefreshPassiveSKillIcon(struct TSoftObjectPtr<UTexture2D>& PassiveSkillIcon); // Function Solarland.HeroPickWidget.RefreshPassiveSKillIcon // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void PlayCharacterConfirmVoice(int32_t SkinId); // Function Solarland.HeroPickWidget.PlayCharacterConfirmVoice // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ConfirmSelect(); // Function Solarland.HeroPickWidget.ConfirmSelect // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c7c4e0
};

// Class Solarland.HitTracesWidget
// Size: 0x330 (Inherited: 0x260)
struct UHitTracesWidget : UUserWidget {
	struct UCanvasPanel* DefaultHitTraceRoot; // 0x260(0x08)
	struct UCanvasPanel* MeleeHitTraceRoot; // 0x268(0x08)
	struct UCanvasPanel* SniperHitTraceRoot; // 0x270(0x08)
	struct UCanvasPanel* VehicleHitTraceRoot; // 0x278(0x08)
	float GaugeImageProgressMin; // 0x280(0x04)
	float GaugeImageProgressMax; // 0x284(0x04)
	char pad_288[0xa8]; // 0x288(0xa8)

	int32_t UpdateHitTrace(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale); // Function Solarland.HitTracesWidget.UpdateHitTrace // (Final|Native|Public) // @ game+0x1c80690
	void RemoveHitTrace(int32_t HitTraceID); // Function Solarland.HitTracesWidget.RemoveHitTrace // (Final|Native|Public) // @ game+0x1c7fe40
	void ClearAllHitTraces(); // Function Solarland.HitTracesWidget.ClearAllHitTraces // (Final|Native|Public) // @ game+0x1c7ee60
	int32_t AddHitTrace(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float WidgetAngle, float WidgetScale); // Function Solarland.HitTracesWidget.AddHitTrace // (Final|Native|Public) // @ game+0x1c7ec60
};

// Class Solarland.SolarCharacterMovementCompBase
// Size: 0x6a0 (Inherited: 0x620)
struct USolarCharacterMovementCompBase : UCharacterMovementComponent {
	float SimStepOptimizedDist; // 0x618(0x04)
	char pad_624[0x2c]; // 0x624(0x2c)
	int32_t TimeDiscrepancyUploadThres; // 0x650(0x04)
	char pad_654[0x4]; // 0x654(0x04)
	struct FSolarClientAdjustPositionInfo CachedClientAdjustPositionInfo; // 0x658(0x38)
	char pad_690[0x10]; // 0x690(0x10)
};

// Class Solarland.SolarCharacterMovementComponent
// Size: 0x800 (Inherited: 0x6a0)
struct USolarCharacterMovementComponent : USolarCharacterMovementCompBase {
	char pad_6A0[0x8]; // 0x6a0(0x08)
	struct ASolarCharacter* SolarCharacterOwner; // 0x6a8(0x08)
	float DefaultUnscaledCapsuleHalfHeight; // 0x6b0(0x04)
	char pad_6B4[0x18]; // 0x6b4(0x18)
	bool bKeepWalkSpeedOnTurning; // 0x6cc(0x01)
	char pad_6CD[0x3]; // 0x6cd(0x03)
	float MinJogSpeedScaleOnBlocked; // 0x6d0(0x04)
	float MinRunSpeedScaleOnBlocked; // 0x6d4(0x04)
	float MinSprintSpeedScaleOnBlocked; // 0x6d8(0x04)
	float MinCrawlSpeedScaleOnBlocked; // 0x6dc(0x04)
	float MinSwimSpeedScaleOnBlocked; // 0x6e0(0x04)
	bool bOverrideFallingGravity; // 0x6e4(0x01)
	char pad_6E5[0x3]; // 0x6e5(0x03)
	float OverriddenFallingGravity; // 0x6e8(0x04)
	float FallingHorizontalSpeedUpperLimit; // 0x6ec(0x04)
	float MaxLocationDifferenceToTrustClientMove; // 0x6f0(0x04)
	enum class EClientMoveTrustType ClientMoveTrustType; // 0x6f4(0x01)
	char pad_6F5[0x19]; // 0x6f5(0x19)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x70e(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x70f(0x01)
	struct FCustomJumpParams CustomJumpParams; // 0x710(0x0c)
	struct FCustomJumpParams CustomLaunchParams; // 0x71c(0x0c)
	char pad_728[0x10]; // 0x728(0x10)
	struct UJetPackConfig* JetPackConfig; // 0x738(0x08)
	char pad_740[0x18]; // 0x740(0x18)
	struct USkydiveConfig* SkydiveConfig; // 0x758(0x08)
	char pad_760[0x34]; // 0x760(0x34)
	float HinderAngel; // 0x794(0x04)
	float HinderPercent; // 0x798(0x04)
	float HinderZ; // 0x79c(0x04)
	float SwimSpeedWhenSprintLockConfig; // 0x7a0(0x04)
	float SwimSpeedConfig; // 0x7a4(0x04)
	float SwimSpeedSmoothSpeed; // 0x7a8(0x04)
	float SwimMaxFloatingUpSpeed; // 0x7ac(0x04)
	float SwimMaxSinkingSpeed; // 0x7b0(0x04)
	struct TWeakObjectPtr<struct APhysicsVolume> NextPhysicsVolume; // 0x7b4(0x08)
	char pad_7BC[0x2c]; // 0x7bc(0x2c)
	bool bWantDeathVerge; // 0x7e8(0x01)
	char pad_7E9[0x3]; // 0x7e9(0x03)
	float DeathVergeBodyRadius; // 0x7ec(0x04)
	float DeathVergeHalfHeight; // 0x7f0(0x04)
	char pad_7F4[0xc]; // 0x7f4(0x0c)

	void SetHinderZ(float InHinderZ); // Function Solarland.SolarCharacterMovementComponent.SetHinderZ // (Final|Native|Public|BlueprintCallable) // @ game+0x1d2b150
	void SetHinderAngel(float InHinderAngel); // Function Solarland.SolarCharacterMovementComponent.SetHinderAngel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d2b0d0
	void OnMovementBaseChanged(struct ACharacter* Character, struct UPrimitiveComponent* OldBase, struct UPrimitiveComponent* NewBase); // Function Solarland.SolarCharacterMovementComponent.OnMovementBaseChanged // (Final|Native|Protected) // @ game+0x1d2afd0
	void HinderUphill(struct FVector& SlopeNormal, struct FVector& MoveVelocity); // Function Solarland.SolarCharacterMovementComponent.HinderUphill // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1d2ae00
	enum class EPhysicalSurface GetSteppedSurfaceType(); // Function Solarland.SolarCharacterMovementComponent.GetSteppedSurfaceType // (Final|Native|Public|BlueprintCallable) // @ game+0x1d2ad40
	enum class EWalkMode GetLastWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetLastWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d2ac70
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacterMovementComponent.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d2ac50
};

// Class Solarland.HomeCharacterMovementComponent
// Size: 0x870 (Inherited: 0x800)
struct UHomeCharacterMovementComponent : USolarCharacterMovementComponent {
	char pad_800[0x20]; // 0x800(0x20)
	struct TArray<struct FServerMoveData> ServerMoves; // 0x820(0x10)
	float NetSyncDeltaTime; // 0x830(0x04)
	float VerifyDeltaTime; // 0x834(0x04)
	float MaxDelayTime; // 0x838(0x04)
	bool bEnableMove; // 0x83c(0x01)
	char pad_83D[0x13]; // 0x83d(0x13)
	int64_t CurrentServerTime; // 0x850(0x08)
	char pad_858[0x4]; // 0x858(0x04)
	float ConfigSyncDeltaTime; // 0x85c(0x04)
	float ConfigVerifyStepTime; // 0x860(0x04)
	int32_t ConfigMaxDelay; // 0x864(0x04)
	float ConfigVerifyDistanceSquared; // 0x868(0x04)
	char pad_86C[0x4]; // 0x86c(0x04)

	void SetVerifyRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetVerifyRate // (Final|Native|Public|BlueprintCallable) // @ game+0x1c80410
	void SetNetSyncRate(float InDeltaTime); // Function Solarland.HomeCharacterMovementComponent.SetNetSyncRate // (Final|Native|Public|BlueprintCallable) // @ game+0x1c80190
	void SetMoveEnable(bool InMoveEnable); // Function Solarland.HomeCharacterMovementComponent.SetMoveEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x1c80100
	void SetMaxDelayTime(int32_t InMaxDelayTime); // Function Solarland.HomeCharacterMovementComponent.SetMaxDelayTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1c80080
	void GetServerTimeNow(); // Function Solarland.HomeCharacterMovementComponent.GetServerTimeNow // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HomeSyncActorSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UHomeSyncActorSubsystem : UWorldSubsystem {
	struct UDataTable* HomeObjectTable; // 0x30(0x08)

	struct UHomeSyncActorSubsystem* Get(struct UObject* WorldContextObject); // Function Solarland.HomeSyncActorSubsystem.Get // (Final|Native|Static|Public) // @ game+0x1c7f060
	void CreateHomeActor_Server(struct FHomeActorServerData& CreateData); // Function Solarland.HomeSyncActorSubsystem.CreateHomeActor_Server // (Final|Native|Public|HasOutParms) // @ game+0x1c7ee80
};

// Class Solarland.HUD_ElectricShop
// Size: 0x470 (Inherited: 0x340)
struct UHUD_ElectricShop : USolarUserWidget {
	struct USolarButton* Btn_Close; // 0x340(0x08)
	struct UHorizontalBox* Panel_RefreshTime; // 0x348(0x08)
	struct UImage* Img_BG_02; // 0x350(0x08)
	struct USolarTextBlock* Txt_Time; // 0x358(0x08)
	struct UHorizontalBox* HorizontalBox_Title; // 0x360(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_2; // 0x368(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Weapon_3; // 0x370(0x08)
	struct UElectricShop_Weapon* UI_ElectricityShop_Shield; // 0x378(0x08)
	struct USolarListView* ListView_Goods; // 0x380(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x388(0x08)
	struct UWidgetAnimation* Text_Loop_Anim; // 0x390(0x08)
	struct UCanvasPanel* Panel_Passive; // 0x398(0x08)
	struct UCanvasPanel* Panel_VIP; // 0x3a0(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x3a8(0x08)
	struct UCanvasPanel* Panel_Bullet; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_Passive; // 0x3b8(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head_2; // 0x3c0(0x08)
	char pad_3C8[0x18]; // 0x3c8(0x18)
	struct FLinearColor TimeTextDefaultColor; // 0x3e0(0x10)
	struct FLinearColor TimeTextAlertColor; // 0x3f0(0x10)
	struct FString AkSoundShopShow; // 0x400(0x10)
	struct FString AkSoundShopHide; // 0x410(0x10)
	char PreloadListItemNum; // 0x420(0x01)
	char pad_421[0xf]; // 0x421(0x0f)
	struct TArray<struct UObject*> ShopItems; // 0x430(0x10)
	struct TArray<struct UElectricShop_Weapon*> WeaponUpgradePanels; // 0x440(0x10)
	char pad_450[0x20]; // 0x450(0x20)

	void UpdateItemIsRecommend(); // Function Solarland.HUD_ElectricShop.UpdateItemIsRecommend // (Final|Native|Protected) // @ game+0x1c807e0
	void UpdateCountdownTime(); // Function Solarland.HUD_ElectricShop.UpdateCountdownTime // (Final|Native|Protected) // @ game+0x1c80670
	void UpdateCharacterEnergy(float CurEnergy, float ChangeValue); // Function Solarland.HUD_ElectricShop.UpdateCharacterEnergy // (Final|Native|Protected) // @ game+0x1c805b0
	void UnBindDelegate(); // Function Solarland.HUD_ElectricShop.UnBindDelegate // (Final|Native|Protected) // @ game+0x1c804d0
	void SetSelfVisibility(bool bVisible); // Function Solarland.HUD_ElectricShop.SetSelfVisibility // (Final|Native|Protected) // @ game+0x1c80210
	void RequestUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.HUD_ElectricShop.RequestUpgradeWeapon // (Final|Native|Protected) // @ game+0x1c80000
	void RequestUpgradeShield(struct ASolarCharacter* InChara); // Function Solarland.HUD_ElectricShop.RequestUpgradeShield // (Final|Native|Protected) // @ game+0x1c7ff80
	void RequestPurchaseEShopItems(int32_t ProductID, bool IsRecommend); // Function Solarland.HUD_ElectricShop.RequestPurchaseEShopItems // (Final|Native|Protected) // @ game+0x1c7fec0
	void ReceiveWeaponUpgrade(int32_t InWeaponSlot); // Function Solarland.HUD_ElectricShop.ReceiveWeaponUpgrade // (Final|Native|Protected) // @ game+0x1c7fdc0
	void ReceiveShieldUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.ReceiveShieldUpgrade // (Final|Native|Protected) // @ game+0x1c7fd40
	void PlayHUDSound(bool InVisibile); // Function Solarland.HUD_ElectricShop.PlayHUDSound // (Final|Native|Protected) // @ game+0x1c7fcb0
	void OnShopGoodsCreated(struct UUserWidget* InWidget); // Function Solarland.HUD_ElectricShop.OnShopGoodsCreated // (Final|Native|Protected) // @ game+0x1c7fb10
	void OnInitElectricShop(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.OnInitElectricShop // (Final|Native|Protected) // @ game+0x1c7f930
	void OnElectricShopVisibilitySet(bool bVisible); // Function Solarland.HUD_ElectricShop.OnElectricShopVisibilitySet // (Final|Native|Protected) // @ game+0x1c7f530
	void OnClosePanel(); // Function Solarland.HUD_ElectricShop.OnClosePanel // (Final|Native|Protected) // @ game+0x1c7f510
	void InitWeaponUpgrade(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitWeaponUpgrade // (Final|Native|Protected) // @ game+0x1c7f390
	void InitShopItems(struct ASolarElectricShop* InShop); // Function Solarland.HUD_ElectricShop.InitShopItems // (Final|Native|Protected) // @ game+0x1c7f310
	void InitShieldUpgrade(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUD_ElectricShop.InitShieldUpgrade // (Final|Native|Protected) // @ game+0x1c7f1c0
	void InitElectricShopHUD(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_ElectricShop.InitElectricShopHUD // (Final|Native|Protected) // @ game+0x1c7f140
	float GetSolarCharacterEnergy(); // Function Solarland.HUD_ElectricShop.GetSolarCharacterEnergy // (Final|Native|Protected) // @ game+0x1c7f110
	struct ASolarCharacter* GetBuyerSolarCharacter(); // Function Solarland.HUD_ElectricShop.GetBuyerSolarCharacter // (Final|Native|Protected) // @ game+0x1c7f0e0
	void DelayReportStatistic(); // Function Solarland.HUD_ElectricShop.DelayReportStatistic // (Final|Native|Protected) // @ game+0x1c7f040
	void DelayInitWeaponUpgrade(); // Function Solarland.HUD_ElectricShop.DelayInitWeaponUpgrade // (Final|Native|Protected) // @ game+0x1c7f020
	void DelayInitShopItems(); // Function Solarland.HUD_ElectricShop.DelayInitShopItems // (Final|Native|Protected) // @ game+0x1c7f000
	bool CheckItemIsRecommendByID(int32_t ItemID); // Function Solarland.HUD_ElectricShop.CheckItemIsRecommendByID // (Final|Native|Protected) // @ game+0x1c7edd0
	void BindDelegate(); // Function Solarland.HUD_ElectricShop.BindDelegate // (Final|Native|Protected) // @ game+0x1c7edb0
};

// Class Solarland.HUD_MarkEnemyInfo
// Size: 0x3e8 (Inherited: 0x340)
struct UHUD_MarkEnemyInfo : USolarUserWidget {
	struct USolarTextBlock* Txt_Lvl; // 0x340(0x08)
	struct UDeathViewHPWidget* HPAndShield; // 0x348(0x08)
	struct UCanvasPanel* CanvasPanel_1; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x360(0x08)
	float UpdateVisibleInterval; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct UCurveFloat* DistaceToScaleCurve; // 0x370(0x08)
	struct TSet<struct AActor*> OcculusionIgnoreClasses; // 0x378(0x50)
	float MinDisplayHpValue; // 0x3c8(0x04)
	bool bShowDebug; // 0x3cc(0x01)
	char pad_3CD[0x13]; // 0x3cd(0x13)
	float ZOffset; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)

	void OnEnemyShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUD_MarkEnemyInfo.OnEnemyShieldValueChanged // (Final|Native|Private) // @ game+0x1c7f760
	void OnEnemyShieldChanged(struct FString InSolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUD_MarkEnemyInfo.OnEnemyShieldChanged // (Final|Native|Private) // @ game+0x1c7f5c0
};

// Class Solarland.HUD_PassiveHead
// Size: 0x348 (Inherited: 0x340)
struct UHUD_PassiveHead : USolarUserWidget {
	struct UImage* img_Hero; // 0x340(0x08)
};

// Class Solarland.HUD_PickupPassive
// Size: 0x358 (Inherited: 0x340)
struct UHUD_PickupPassive : USolarUserWidget {
	struct USolarTextBlock* Txt_Bullet; // 0x340(0x08)
	struct UHUD_PassiveHead* UI_Passive_Head; // 0x348(0x08)
	char pad_350[0x8]; // 0x350(0x08)

	void OnTogglePickupList(bool bShow); // Function Solarland.HUD_PickupPassive.OnTogglePickupList // (Final|Native|Public) // @ game+0x1c7fc20
};

// Class Solarland.HUD_SkydiveScale
// Size: 0x2c0 (Inherited: 0x260)
struct UHUD_SkydiveScale : UUserWidget {
	struct UProgressBar* ProgressBar_Speed; // 0x260(0x08)
	struct UCanvasPanel* AltitudeDisplayAxis; // 0x268(0x08)
	struct UHorizontalBox* AltitudeDisplayBox; // 0x270(0x08)
	struct UCanvasPanel* SpeedDisplayAxis; // 0x278(0x08)
	struct UHorizontalBox* SpeedDisplayBox; // 0x280(0x08)
	struct UCanvasPanel* GroundDisplayAxis; // 0x288(0x08)
	struct UImage* GroundAltitudeScale; // 0x290(0x08)
	struct FVector2D AltitudeWidgetAngleRange; // 0x298(0x08)
	struct FVector2D SpeedWidgetAngleRange; // 0x2a0(0x08)
	float MinSpeed; // 0x2a8(0x04)
	float MaxSpeed; // 0x2ac(0x04)
	struct FWrappedLocalTextID AltitudeLocalTextID; // 0x2b0(0x04)
	struct FWrappedLocalTextID SpeedLocalTextID; // 0x2b4(0x04)
	char pad_2B8[0x8]; // 0x2b8(0x08)

	void UpdateSpeedScale(float InSpeed); // Function Solarland.HUD_SkydiveScale.UpdateSpeedScale // (Final|Native|Protected) // @ game+0x1c80820
	void UpdateSpeedDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateSpeedDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void UpdateAltitudeScale(float InHeight, float InZValue); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeScale // (Final|Native|Protected) // @ game+0x1c804f0
	void UpdateAltitudeDisplayContent(struct FText& Content); // Function Solarland.HUD_SkydiveScale.UpdateAltitudeDisplayContent // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnSkydiveStateChanged(bool bFlying); // Function Solarland.HUD_SkydiveScale.OnSkydiveStateChanged // (Final|Native|Protected) // @ game+0x1c7fb90
	void OnCharacterDied(struct ASolarCharacter* InCharacter); // Function Solarland.HUD_SkydiveScale.OnCharacterDied // (Final|Native|Protected) // @ game+0x1c7f490
	void OnAirlineHeightSet(float NewHeight); // Function Solarland.HUD_SkydiveScale.OnAirlineHeightSet // (Final|Native|Protected) // @ game+0x1c7f410
};

// Class Solarland.HUD_Teammate_Profession
// Size: 0x278 (Inherited: 0x260)
struct UHUD_Teammate_Profession : UUserWidget {
	struct USizeBox* SizeBox_Profession; // 0x260(0x08)
	struct UImage* Image_216; // 0x268(0x08)
	struct UImage* Icon; // 0x270(0x08)

	void SetState(enum class ESkillStateType InState); // Function Solarland.HUD_Teammate_Profession.SetState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HUD_Teammate_State
// Size: 0x720 (Inherited: 0x340)
struct UHUD_Teammate_State : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct USizeBox* SizeBox_Relive; // 0x348(0x08)
	struct UImage* img_Relive; // 0x350(0x08)
	struct USizeBox* SizeBox_Container; // 0x358(0x08)
	struct UCanvasPanel* CanvasPanel_Container; // 0x360(0x08)
	struct UImage* Img_PosInTeamBG; // 0x368(0x08)
	struct UImage* Img_TeamPos; // 0x370(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x378(0x08)
	struct UImage* Img_Loading; // 0x380(0x08)
	struct UTextBlock* Text_PosInTeam; // 0x388(0x08)
	struct UImage* Img_PlayerBG; // 0x390(0x08)
	struct UImage* Img_BG; // 0x398(0x08)
	struct UImage* Img_BG_2; // 0x3a0(0x08)
	struct UOverlay* HP; // 0x3a8(0x08)
	struct UOverlay* Armor; // 0x3b0(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield_A; // 0x3b8(0x08)
	char pad_3C0[0x8]; // 0x3c0(0x08)
	struct USolarHPProgressBoard* AdvBar_HP; // 0x3c8(0x08)
	struct UHorizontalBox* Panel_Lv; // 0x3d0(0x08)
	struct USolarTextBlock* Txt_Lvl_Head; // 0x3d8(0x08)
	struct UTextBlock* Txt_PlayerLevel; // 0x3e0(0x08)
	struct USolarTextBlock* Txt_Lvl; // 0x3e8(0x08)
	struct UImage* Img_Lv_Bg; // 0x3f0(0x08)
	struct UImage* Img_Lv_Border; // 0x3f8(0x08)
	struct UImage* Img_Head; // 0x400(0x08)
	struct USolarTextBlock* Txt_Lvl_Tail; // 0x408(0x08)
	struct UOverlay* Overlay_PosInTeam; // 0x410(0x08)
	struct UImage* Img_ColorMark_Bg; // 0x418(0x08)
	struct UImage* Img_ColorMark_Line_LeftBottom; // 0x420(0x08)
	struct UImage* Img_ColorMark_Line_RightTop; // 0x428(0x08)
	struct UImage* Img_ColorMark_Line_RightBottom; // 0x430(0x08)
	struct UImage* Img_ColorMark_Line_LeftTop; // 0x438(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x440(0x08)
	struct UTextBlock* Text_NickName; // 0x448(0x08)
	struct UImage* Img_Tip_MarkedPoint; // 0x450(0x08)
	struct UHorizontalBox* HorizontalBox_States; // 0x458(0x08)
	struct USizeBox* SizeBox_AppDeactivated; // 0x460(0x08)
	struct UImage* Img_Icon_AppDeactivated; // 0x468(0x08)
	struct UImage* Img_OffLine; // 0x470(0x08)
	struct UImage* Img_Empty; // 0x478(0x08)
	struct USizeBox* SizeBox_Vehicle; // 0x480(0x08)
	struct UImage* Img_Icon_Vehicle; // 0x488(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveState; // 0x490(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_SkydiveLeaderPos; // 0x498(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_FlyLeaderPos; // 0x4a0(0x08)
	struct UCanvasPanel* CanvasPanel_Skydive; // 0x4a8(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Follow; // 0x4b0(0x08)
	struct USolarButton* Skydive_Btn_Follow; // 0x4b8(0x08)
	struct USolarTextBlock* Skydive_Txt_Follow; // 0x4c0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Invite; // 0x4c8(0x08)
	struct USolarButton* Skydive_Btn_Invite; // 0x4d0(0x08)
	struct USolarTextBlock* SolarTextBlock; // 0x4d8(0x08)
	struct UImage* Img_PlayerCover; // 0x4e0(0x08)
	struct USizeBox* SizeBox_ResurrectionCountdown; // 0x4e8(0x08)
	struct UCanvasPanel* CanvasPanel_Container_2; // 0x4f0(0x08)
	struct UProgressBar* SolarProgress_ResurrectionCountdown; // 0x4f8(0x08)
	struct USolarButton* ApplyResurrection_Btn; // 0x500(0x08)
	struct UCanvasPanel* CanvasPanel_Respond; // 0x508(0x08)
	struct UImage* ImgRespondBorder; // 0x510(0x08)
	struct UImage* ImgRespondBorder1; // 0x518(0x08)
	struct UProgressBar* ProgressBarRespond; // 0x520(0x08)
	struct USolarButton* BtnRespond; // 0x528(0x08)
	struct UImage* ImgRespondedGlow; // 0x530(0x08)
	struct UUIComponentNationalFlag* UI_Component_NationalFlag; // 0x538(0x08)
	struct UImage* IconRespond; // 0x540(0x08)
	struct UWidgetAnimation* Waiting_Invite_Anim; // 0x548(0x08)
	struct UWidgetAnimation* Waiting_Follow_Anim; // 0x550(0x08)
	struct UWidgetAnimation* ResurrectionCountdown_Anim; // 0x558(0x08)
	struct UWidgetAnimation* RespondLoopAnim; // 0x560(0x08)
	struct UWidgetAnimation* RespondedAnim; // 0x568(0x08)
	struct UWidgetAnimation* Enter_Relive_Anim; // 0x570(0x08)
	struct UWidgetAnimation* Loop_Relive_Anim; // 0x578(0x08)
	struct UWidgetAnimation* CD_Relive_Anim; // 0x580(0x08)
	struct UOverlay* Overlay_Countdown; // 0x588(0x08)
	struct UTextBlock* Txt_CD; // 0x590(0x08)
	struct UImage* Progress_ResurrectionCD; // 0x598(0x08)
	struct UImage* Progress_RecyclingResurrection; // 0x5a0(0x08)
	char IndexInTeam; // 0x5a8(0x01)
	char ReliveState; // 0x5a9(0x01)
	char pad_5AA[0x2]; // 0x5aa(0x02)
	int32_t Profession; // 0x5ac(0x04)
	float MinDisplayHpValue; // 0x5b0(0x04)
	char pad_5B4[0x4]; // 0x5b4(0x04)
	struct TArray<struct FSlateBrush> ReliveStateImages; // 0x5b8(0x10)
	struct TMap<char, struct FLinearColor> PosInTeamColor; // 0x5c8(0x50)
	struct TMap<char, struct UObject*> PosInTeamIndexIcon; // 0x618(0x50)
	char pad_668[0xb8]; // 0x668(0xb8)

	void UpdateRepliableState(); // Function Solarland.HUD_Teammate_State.UpdateRepliableState // (Final|Native|Protected) // @ game+0x1c80800
	void Skydive_OnBtnInviteClicked(); // Function Solarland.HUD_Teammate_State.Skydive_OnBtnInviteClicked // (Final|Native|Public) // @ game+0x1c804b0
	void Skydive_OnBtnFollowClicked(); // Function Solarland.HUD_Teammate_State.Skydive_OnBtnFollowClicked // (Final|Native|Protected) // @ game+0x1c80490
	void SetTextNickName(struct FString InNickname); // Function Solarland.HUD_Teammate_State.SetTextNickName // (Final|Native|Public|BlueprintCallable) // @ game+0x1c80370
	void SetTeammatePosAndColor(char InPosInTeam, bool bNormalState); // Function Solarland.HUD_Teammate_State.SetTeammatePosAndColor // (Final|Native|Public|BlueprintCallable) // @ game+0x1c802a0
	void SetProfession(int32_t InProfession); // Function Solarland.HUD_Teammate_State.SetProfession // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReviveItemRecycleCountDownBegin(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUD_Teammate_State.OnReviveItemRecycleCountDownBegin // (Final|Native|Public|BlueprintCallable) // @ game+0x1c7fa50
	void OnReviveDisableHint(int32_t CountDownDuration); // Function Solarland.HUD_Teammate_State.OnReviveDisableHint // (Final|Native|Public|BlueprintCallable) // @ game+0x1c7f9d0
	void OnReplyClick(); // Function Solarland.HUD_Teammate_State.OnReplyClick // (Final|Native|Public) // @ game+0x1c7f9b0
	void OnPlayerStateSet(struct ASolarPlayerState* InSolarPS, bool bNormalState); // Function Solarland.HUD_Teammate_State.OnPlayerStateSet // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaImplementedInitLvlTextWidget(); // Function Solarland.HUD_Teammate_State.LuaImplementedInitLvlTextWidget // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	float LuaImplementedGetSkydivingRequestCooldownTime(); // Function Solarland.HUD_Teammate_State.LuaImplementedGetSkydivingRequestCooldownTime // (Event|Protected|BlueprintEvent|Const) // @ game+0x224bbb0
	bool LuaImplementedCheckIsSupportRoleClass(); // Function Solarland.HUD_Teammate_State.LuaImplementedCheckIsSupportRoleClass // (Event|Protected|BlueprintEvent|Const) // @ game+0x224bbb0
};

// Class Solarland.HUD_TeammateStates_Panel
// Size: 0x3f8 (Inherited: 0x340)
struct UHUD_TeammateStates_Panel : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UHUD_Teammate_State* Teammate_State_2; // 0x348(0x08)
	struct UHUD_Teammate_State* Teammate_State_3; // 0x350(0x08)
	struct UHUD_Teammate_State* Teammate_State_4; // 0x358(0x08)
	struct UHUD_Teammate_State* Teammate_State_5; // 0x360(0x08)
	struct UHorizontalBox* HorizontalBox_Skydive; // 0x368(0x08)
	struct UImage* img_Padding; // 0x370(0x08)
	struct USolarButton* Skydive_Btn_Open; // 0x378(0x08)
	struct USolarButton* Skydive_Btn_InviteAll; // 0x380(0x08)
	struct UImage* Skydive_Img_BG; // 0x388(0x08)
	struct USolarButton* Skydive_Btn_Close; // 0x390(0x08)
	struct UWidgetAnimation* Anim_Change; // 0x398(0x08)
	struct TMap<char, struct UHUD_Teammate_State*> TeammateStateWidgets; // 0x3a0(0x50)
	char pad_3F0[0x6]; // 0x3f0(0x06)
	bool bHideSkydivingFollowWidgets; // 0x3f6(0x01)
	bool Skydive_IsActionsEnabled; // 0x3f7(0x01)

	void UpdateReviveIconVisibility(); // Function Solarland.HUD_TeammateStates_Panel.UpdateReviveIconVisibility // (Final|Native|Protected) // @ game+0x1c84d40
	void Skydive_OnToggleSkydivingFollow(); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnToggleSkydivingFollow // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c847f0
	void Skydive_OnSkydivingMemberDataReplicated(struct ASolarPlayerState* MemberPS); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnSkydivingMemberDataReplicated // (Final|Native|Protected) // @ game+0x1c84770
	void Skydive_OnReceivedLeaderTransferResponse(struct ASolarPlayerState* DesiredLeaderPS, bool bAgreed); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnReceivedLeaderTransferResponse // (Final|Native|Protected) // @ game+0x1c846a0
	void Skydive_OnReceivedFollowInvitationResponse(struct ASolarPlayerState* FollowerPS, bool bAgreed); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnReceivedFollowInvitationResponse // (Final|Native|Protected) // @ game+0x1c845d0
	void Skydive_OnPanelVisibilitySet(enum class ESlateVisibility InVisibility); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnPanelVisibilitySet // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void Skydive_OnBtnInviteAllClicked(); // Function Solarland.HUD_TeammateStates_Panel.Skydive_OnBtnInviteAllClicked // (Final|Native|Protected) // @ game+0x1c845b0
	bool Skydive_IsFollowPanelVisible(); // Function Solarland.HUD_TeammateStates_Panel.Skydive_IsFollowPanelVisible // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c84580
	void Skydive_EnableSkydivingFollow(bool bEnabled); // Function Solarland.HUD_TeammateStates_Panel.Skydive_EnableSkydivingFollow // (Native|Event|Protected|BlueprintEvent) // @ game+0x1c844f0
	void SetTalentActiveInPos(enum class ETalentState TalentState, char InPosInTeam, float AdditionalParam); // Function Solarland.HUD_TeammateStates_Panel.SetTalentActiveInPos // (Final|Native|Protected) // @ game+0x1c84340
	void SetCharacterInfoInPos(int32_t InCharacterId, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetCharacterInfoInPos // (Final|Native|Protected) // @ game+0x1c84160
	void SetAvatarInPos(int32_t InSkinID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.SetAvatarInPos // (Final|Native|Protected) // @ game+0x1c840a0
	void SetAllTeammatesState(); // Function Solarland.HUD_TeammateStates_Panel.SetAllTeammatesState // (Final|Native|Protected) // @ game+0x1c84080
	void RefreshAllTeammatesStateWithoutReset(); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesStateWithoutReset // (Final|Native|Protected) // @ game+0x1c836d0
	void RefreshAllTeammatesState(bool bNeedReset); // Function Solarland.HUD_TeammateStates_Panel.RefreshAllTeammatesState // (Final|Native|Protected) // @ game+0x1c83f60
	void OnTeammateStateWidgetRemoved(); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateStateWidgetRemoved // (Final|Native|Protected) // @ game+0x1c83f40
	void OnTeammateRepliableMsgChanged(); // Function Solarland.HUD_TeammateStates_Panel.OnTeammateRepliableMsgChanged // (Final|Native|Protected) // @ game+0x1c83f20
	void OnTeammatePlayerStateReplicated(struct ASolarPlayerState* InTeammatePS); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateReplicated // (Final|Native|Protected) // @ game+0x1c83ea0
	void OnTeammatePlayerStateRemovedInPreparatoryPhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInPreparatoryPhase // (Final|Native|Protected) // @ game+0x1c83dd0
	void OnTeammatePlayerStateRemovedInBattlePhase(char InPosInTeam, bool bInLastOne); // Function Solarland.HUD_TeammateStates_Panel.OnTeammatePlayerStateRemovedInBattlePhase // (Final|Native|Protected) // @ game+0x1c83d00
	void OnSpectateReferToChanged(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // Function Solarland.HUD_TeammateStates_Panel.OnSpectateReferToChanged // (Final|Native|Protected) // @ game+0x1c839d0
	void OnShieldReplicated(char InPosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // Function Solarland.HUD_TeammateStates_Panel.OnShieldReplicated // (Final|Native|Protected|HasOutParms) // @ game+0x1c83890
	void OnSelectingJobEffectFinish(int32_t SelectedIndex); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectFinish // (Final|Native|Protected) // @ game+0x1c83810
	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUD_TeammateStates_Panel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x1c836f0
	void OnReviveManagerReplicated(); // Function Solarland.HUD_TeammateStates_Panel.OnReviveManagerReplicated // (Final|Native|Protected) // @ game+0x1c836d0
	void OnReviveItemReplicated(char InPosInTeam, char InItemNum, bool bInCanRebirth); // Function Solarland.HUD_TeammateStates_Panel.OnReviveItemReplicated // (Final|Native|Protected) // @ game+0x1c835c0
	void OnPlayerOperationInGameReplicated(struct ASolarPlayerState* InSolarPS); // Function Solarland.HUD_TeammateStates_Panel.OnPlayerOperationInGameReplicated // (Final|Native|Protected) // @ game+0x1c83250
	void OnMarkedPointInNavMapReplicated(char InPosInTeam, struct FVector2D& InMarkPosition); // Function Solarland.HUD_TeammateStates_Panel.OnMarkedPointInNavMapReplicated // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1c830f0
	void OnHealthReplicated(char InPosInTeam, float CurrentHP, float MaxHP); // Function Solarland.HUD_TeammateStates_Panel.OnHealthReplicated // (Final|Native|Protected) // @ game+0x1c82dc0
	void OnClearMarkedPointInNavMap(char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.OnClearMarkedPointInNavMap // (Final|Native|Protected) // @ game+0x1c82c40
	void OnCharacterStateInGameReplicated(struct ASolarPlayerState* InCharacterPS); // Function Solarland.HUD_TeammateStates_Panel.OnCharacterStateInGameReplicated // (Final|Native|Protected) // @ game+0x1c82bc0
	void LuaImplementedTeammatesBaseInfo(int32_t CurTeamId, char InIndex, bool bBattlePhase, struct UHUD_Teammate_State* StateWidget); // Function Solarland.HUD_TeammateStates_Panel.LuaImplementedTeammatesBaseInfo // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsSelfVisible(); // Function Solarland.HUD_TeammateStates_Panel.IsSelfVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c82a50
	void InitTalentIconInPos(int32_t InTalentID, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitTalentIconInPos // (Final|Native|Protected) // @ game+0x1c82990
	void InitSkillCDStateInPos(int32_t InCDState, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitSkillCDStateInPos // (Final|Native|Protected) // @ game+0x1c828d0
	void InitPlayerLevelInPos(int32_t InPlayerLv, char InPosInTeam); // Function Solarland.HUD_TeammateStates_Panel.InitPlayerLevelInPos // (Final|Native|Protected) // @ game+0x1c826c0
	void HideSkydivingFollowWidgets(); // Function Solarland.HUD_TeammateStates_Panel.HideSkydivingFollowWidgets // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c82620
	void CancelHideSkydivingFollowWidgets(); // Function Solarland.HUD_TeammateStates_Panel.CancelHideSkydivingFollowWidgets // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c82540
};

// Class Solarland.HUD_WorldMark
// Size: 0x3b8 (Inherited: 0x340)
struct UHUD_WorldMark : USolarUserWidget {
	float LiveTime; // 0x340(0x04)
	float RefreshTime; // 0x344(0x04)
	struct FVector WorldPos; // 0x348(0x0c)
	struct FVector2D ScreenSize; // 0x354(0x08)
	struct FVector2D IconSize; // 0x35c(0x08)
	bool bIsOutOfRangeLastTime; // 0x364(0x01)
	bool bHasBeenAnsweredByMe; // 0x365(0x01)
	bool bIfWasChosen; // 0x366(0x01)
	bool bIsCreateBySelf; // 0x367(0x01)
	struct UImage* ImgMarkArrow; // 0x368(0x08)
	struct UImage* ImgItemMarkArrow; // 0x370(0x08)
	struct UTextBlock* Distance; // 0x378(0x08)
	int32_t PosInTeam; // 0x380(0x04)
	enum class EWorldMarkType Type; // 0x384(0x01)
	char pad_385[0x3]; // 0x385(0x03)
	float MaxWorldDistance; // 0x388(0x04)
	float MinWorldDistance; // 0x38c(0x04)
	struct UCurveFloat* OpacityCurve; // 0x390(0x08)
	bool bAttachToObject; // 0x398(0x01)
	char pad_399[0x1f]; // 0x399(0x1f)

	void UpdateDistance(struct FVector& TargetPos); // Function Solarland.HUD_WorldMark.UpdateDistance // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1c84a50
	void SwitchWidget(bool bOutOfRange); // Function Solarland.HUD_WorldMark.SwitchWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetIfBeChosen(bool bIfChosen); // Function Solarland.HUD_WorldMark.SetIfBeChosen // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LogMarkResponse(); // Function Solarland.HUD_WorldMark.LogMarkResponse // (Final|Native|Public) // @ game+0x1c82a80
	void InitAttachedWidget(struct AActor* ActorAttachedTo); // Function Solarland.HUD_WorldMark.InitAttachedWidget // (Final|Native|Public) // @ game+0x1c82640
	void DestroySelf(); // Function Solarland.HUD_WorldMark.DestroySelf // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HUD_WorldMarkPanel
// Size: 0x380 (Inherited: 0x340)
struct UHUD_WorldMarkPanel : USolarUserWidget {
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkdEnemyWidgets; // 0x340(0x10)
	struct UCanvasPanel* MarkPanel; // 0x350(0x08)
	struct UHUD_MarkEnemyInfo* MarkEnemyInfoWidgetClass; // 0x358(0x08)
	struct TArray<struct UHUD_MarkEnemyInfo*> MarkEnemyWidgets; // 0x360(0x10)
	char pad_370[0x10]; // 0x370(0x10)

	void OnSuperRadarStart(struct TArray<struct FString>& InPlayers); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarStart // (Final|Native|Public|HasOutParms) // @ game+0x1c83c30
	void OnSuperRadarRemovePlayer(struct FString InPlayer); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarRemovePlayer // (Final|Native|Public) // @ game+0x1c83b90
	void OnSuperRadarEnd(); // Function Solarland.HUD_WorldMarkPanel.OnSuperRadarEnd // (Final|Native|Public) // @ game+0x1c83b70
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUD_WorldMarkPanel.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x1c83a90
	struct FString OnRegisterPositionMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct FVector& InPosition); // Function Solarland.HUD_WorldMarkPanel.OnRegisterPositionMarkRequested // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1c83440
	struct FString OnRegisterActorMarkRequested(struct UActorMarkBase*& OutResult, struct UActorMarkBase* InMarkClass, struct AActor* FollowActor); // Function Solarland.HUD_WorldMarkPanel.OnRegisterActorMarkRequested // (Final|Native|Protected|HasOutParms) // @ game+0x1c832d0
	void OnDamagingActorsChange(); // Function Solarland.HUD_WorldMarkPanel.OnDamagingActorsChange // (Final|Native|Public) // @ game+0x1c82d00
};

// Class Solarland.HUDBattleHPPanel
// Size: 0x460 (Inherited: 0x340)
struct UHUDBattleHPPanel : USolarUserWidget {
	char pad_340[0x28]; // 0x340(0x28)
	struct USolarHPProgressBoard* HP_Bar; // 0x368(0x08)
	struct UTextBlock* Txt_HPNumber; // 0x370(0x08)
	struct USolarShieldProgressBoard* AdvBar_Shield_A; // 0x378(0x08)
	char pad_380[0x8]; // 0x380(0x08)
	struct UTextBlock* Txt_ArmorNum; // 0x388(0x08)
	struct UCanvasPanel* Panel_VX; // 0x390(0x08)
	struct UCanvasPanel* Panel_SP; // 0x398(0x08)
	struct UImage* HP_Bar_ICON; // 0x3a0(0x08)
	struct UImage* HP_Shield_ICON; // 0x3a8(0x08)
	struct UCanvasPanel* FX_Shield; // 0x3b0(0x08)
	struct UWidgetAnimation* Armor_Light_Anim; // 0x3b8(0x08)
	struct UWidgetAnimation* FX_ShieldLvUp; // 0x3c0(0x08)
	struct FLinearColor HPBarColorNormal; // 0x3c8(0x10)
	struct FLinearColor HPBarColorDying; // 0x3d8(0x10)
	struct TMap<int32_t, struct FLinearColor> ShieldNumColorByQuality; // 0x3e8(0x50)
	char pad_438[0x28]; // 0x438(0x28)

	void UpdateShieldValue(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDBattleHPPanel.UpdateShieldValue // (Final|Native|Public) // @ game+0x1c84de0
	void UpdateShieldMaxValue(float MaxShieldValue); // Function Solarland.HUDBattleHPPanel.UpdateShieldMaxValue // (Final|Native|Public) // @ game+0x1c84d60
	void UpdateHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.UpdateHPBar // (Final|Native|Public) // @ game+0x1c84c80
	void UnBindDelegates(); // Function Solarland.HUDBattleHPPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x8ba190
	void ShowShieldUpFX(); // Function Solarland.HUDBattleHPPanel.ShowShieldUpFX // (Final|Native|Public) // @ game+0x1c844d0
	void ShowShieldUI(bool bIsShow); // Function Solarland.HUDBattleHPPanel.ShowShieldUI // (Final|Native|Public) // @ game+0x1c84440
	void ShowLevelUp(int32_t NewLevel, struct TArray<struct FString>& DynamicTips); // Function Solarland.HUDBattleHPPanel.ShowLevelUp // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.ShowGainExp // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetHPColor(struct FLinearColor& InHPBarColor); // Function Solarland.HUDBattleHPPanel.SetHPColor // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1c842b0
	void SetHPBarAlternateColor(bool bFlag); // Function Solarland.HUDBattleHPPanel.SetHPBarAlternateColor // (Final|Native|Public) // @ game+0x1c84220
	void OnShieldUpgradeAnimFinished(); // Function Solarland.HUDBattleHPPanel.OnShieldUpgradeAnimFinished // (Final|Native|Private) // @ game+0x1c839b0
	void OnLevelUpInternal(int32_t NewLevel, int32_t OldLevel, struct FString DynamicTip); // Function Solarland.HUDBattleHPPanel.OnLevelUpInternal // (Final|Native|Private) // @ game+0x1c82ec0
	void OnLevelUp(int32_t NewLevel, struct FString DynamicTip); // Function Solarland.HUDBattleHPPanel.OnLevelUp // (Final|Native|Public|BlueprintCallable) // @ game+0x1c82fd0
	void OnGainExp(int32_t ExpAdded); // Function Solarland.HUDBattleHPPanel.OnGainExp // (Final|Native|Private) // @ game+0x1c82d40
	void OnEnterParachuting(); // Function Solarland.HUDBattleHPPanel.OnEnterParachuting // (Final|Native|Public) // @ game+0x8ba190
	void OnEnterLanding(); // Function Solarland.HUDBattleHPPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x1c82d20
	void OnEnterCruising(); // Function Solarland.HUDBattleHPPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x1c3c770
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDBattleHPPanel.OnCharacterRescueStateChanged // (Final|Native|Public) // @ game+0x1c82b40
	void OnCharacterRebirth(struct ASolarCharacter* InSolarChar); // Function Solarland.HUDBattleHPPanel.OnCharacterRebirth // (Final|Native|Public) // @ game+0x1c82ac0
	void OnCharacterReady(); // Function Solarland.HUDBattleHPPanel.OnCharacterReady // (Final|Native|Private) // @ game+0x1c82aa0
	void InitShieldHUD(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.HUDBattleHPPanel.InitShieldHUD // (Final|Native|Public) // @ game+0x1c82780
	struct FString GeneralHPText(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.GeneralHPText // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ForceInitHPBar(float InCurHealth, float InMaxHealth); // Function Solarland.HUDBattleHPPanel.ForceInitHPBar // (Final|Native|Public) // @ game+0x1c82560
	void BindDelegates(); // Function Solarland.HUDBattleHPPanel.BindDelegates // (Final|Native|Public) // @ game+0x1c82520
};

// Class Solarland.HUDCountdownWidget
// Size: 0x3b0 (Inherited: 0x340)
struct UHUDCountdownWidget : USolarUserWidget {
	char pad_340[0x40]; // 0x340(0x40)
	struct UGaugeImage* Image_GameProgressBar; // 0x380(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x388(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x390(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x398(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x3a0(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x3a8(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.HUDCountdownWidget.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x1c84c00
	void UpdateGameProgressText(); // Function Solarland.HUDCountdownWidget.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x1c84be0
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.HUDCountdownWidget.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x1c84b60
	void UpdateGameProgress(float InAddition); // Function Solarland.HUDCountdownWidget.UpdateGameProgress // (Final|Native|Protected) // @ game+0x1c84ae0
	void StopGameProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopGameProgress // (Final|Native|Protected) // @ game+0x1c849d0
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.HUDCountdownWidget.StopCountDownProgress // (Final|Native|Protected) // @ game+0x1c84950
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDCountdownWidget.StartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x1c84810
	void SetActiveGameProgressBar(bool Inactive); // Function Solarland.HUDCountdownWidget.SetActiveGameProgressBar // (Final|Native|Public) // @ game+0x1c83ff0
	void OnSteamCancelCountDown(); // Function Solarland.HUDCountdownWidget.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x1c83b50
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.HUDCountdownWidget.OnParentVisibilityChanged // (Final|Native|Protected) // @ game+0x1c831c0
	void OnCompleteInternal(); // Function Solarland.HUDCountdownWidget.OnCompleteInternal // (Final|Native|Protected) // @ game+0x1c82ce0
	void OnClickButtonCancel(); // Function Solarland.HUDCountdownWidget.OnClickButtonCancel // (Final|Native|Protected) // @ game+0x1c82cc0
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.HUDCountdownWidget.BP_UpdateStateView // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HUDItemPanel
// Size: 0x510 (Inherited: 0x340)
struct UHUDItemPanel : USolarUserWidget {
	struct UCanvasPanel* Panel_ShieldAutoRE; // 0x340(0x08)
	struct UButton* Btn_Restore; // 0x348(0x08)
	struct UImage* Img_Restore; // 0x350(0x08)
	struct UTextBlock* Txt_Restore_Num; // 0x358(0x08)
	struct UButton* Btn_Change; // 0x360(0x08)
	struct UImage* Img_Shield_FX; // 0x368(0x08)
	struct UCanvasPanel* Panel_DoubleShiel_VX; // 0x370(0x08)
	struct UOverlay* Unavailable_Restore; // 0x378(0x08)
	struct UWidgetAnimation* Anim_Double; // 0x380(0x08)
	struct UButton* Btn_Medkit; // 0x388(0x08)
	struct UTextBlock* Txt_MedkitNum; // 0x390(0x08)
	struct UImage* Img_Line; // 0x398(0x08)
	struct UImage* Img_Medicine_FX; // 0x3a0(0x08)
	struct UButton* Btn_BigShieldRecharger; // 0x3a8(0x08)
	struct UTextBlock* Txt_BigShieldRechargerNum; // 0x3b0(0x08)
	struct UImage* Img_BigShield_FX; // 0x3b8(0x08)
	struct UOverlay* Unavailable_BigRecharger; // 0x3c0(0x08)
	struct UCanvasPanel* Panel_Backpack; // 0x3c8(0x08)
	struct UButton* Btn_Backpack; // 0x3d0(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x3d8(0x08)
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x3e0(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x3e8(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x3f0(0x08)
	struct TMap<enum class ESpecialItemID, struct TSoftObjectPtr<UTexture2D>> RestoreIcons; // 0x3f8(0x50)
	char pad_448[0x18]; // 0x448(0x18)
	struct TMap<enum class ESpecialItemID, int32_t> RestoreItemMap; // 0x460(0x50)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	float RestoreRecommendDuration; // 0x4b8(0x04)
	char pad_4BC[0x4]; // 0x4bc(0x04)
	struct USolarButton* Btn_Recommend; // 0x4c0(0x08)
	struct UImage* Img_Recom; // 0x4c8(0x08)
	struct UGaugeImage* Recom_Countdown; // 0x4d0(0x08)
	struct UWidgetAnimation* Anim_Recommend_Enter; // 0x4d8(0x08)
	struct UWidgetAnimation* Anim_Recommend_Click_Exit; // 0x4e0(0x08)
	struct UWidgetAnimation* Anim_Recommend_Unclick_Exit; // 0x4e8(0x08)
	char pad_4F0[0xc]; // 0x4f0(0x0c)
	int32_t PrevLevel; // 0x4fc(0x04)
	float PrevExpRatio; // 0x500(0x04)
	int32_t CurrentLevel; // 0x504(0x04)
	float CurrentExpRatio; // 0x508(0x04)
	bool bHiddenByGameplay; // 0x50c(0x01)
	char pad_50D[0x3]; // 0x50d(0x03)

	void WrappedOnLevelAndExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDItemPanel.WrappedOnLevelAndExpChanged // (Final|Native|Protected) // @ game+0x1c89730
	void UnBindDelegates(); // Function Solarland.HUDItemPanel.UnBindDelegates // (Final|Native|Public) // @ game+0x1c89710
	void SetShieldFXVisable(bool bIsVisible); // Function Solarland.HUDItemPanel.SetShieldFXVisable // (Final|Native|Public) // @ game+0x1c89660
	void SetMedicineFXVisable(bool bIsVisible); // Function Solarland.HUDItemPanel.SetMedicineFXVisable // (Final|Native|Public) // @ game+0x1c895d0
	void SetIsHiddenByGameplay(bool InNewValue); // Function Solarland.HUDItemPanel.SetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1c89540
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.HUDItemPanel.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x1c89360
	void ResetLevelAndExpDisplayToCurrent(); // Function Solarland.HUDItemPanel.ResetLevelAndExpDisplayToCurrent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RecommendRestoreItem(); // Function Solarland.HUDItemPanel.RecommendRestoreItem // (Final|Native|Private) // @ game+0x1c89340
	void OnShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState RechargeState, bool bFixPreAdd); // Function Solarland.HUDItemPanel.OnShieldValueChanged // (Final|Native|Private) // @ game+0x1c89030
	void OnRoleGEShieldMultiRecoverCoolDownChange(int32_t NewCount); // Function Solarland.HUDItemPanel.OnRoleGEShieldMultiRecoverCoolDownChange // (Final|Native|Private) // @ game+0x1c88e40
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.HUDItemPanel.OnRoleAbilityHideHUD // (Final|Native|Private) // @ game+0x1c88db0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.HUDItemPanel.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x1c88a60
	void OnLevelAndExpChanged(); // Function Solarland.HUDItemPanel.OnLevelAndExpChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnEnterLanding(); // Function Solarland.HUDItemPanel.OnEnterLanding // (Final|Native|Public) // @ game+0x1c82d20
	void OnEnterCruising(); // Function Solarland.HUDItemPanel.OnEnterCruising // (Final|Native|Public) // @ game+0x1c3c770
	void OnEMP(bool bInForbidden); // Function Solarland.HUDItemPanel.OnEMP // (Final|Native|Public) // @ game+0x1c887b0
	void OnConsumeItemUpdated(); // Function Solarland.HUDItemPanel.OnConsumeItemUpdated // (Final|Native|Public) // @ game+0x1c88790
	void OnCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDItemPanel.OnCharacterRescueStateChanged // (Final|Native|Private) // @ game+0x1c88710
	void OnCharacterHPChanged(float CurrentHP, float MaxHP); // Function Solarland.HUDItemPanel.OnCharacterHPChanged // (Final|Native|Private) // @ game+0x1c88650
	void OnBtnShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnShieldRechargerClicked // (Final|Native|Protected) // @ game+0x1c88630
	void OnBtnRestoreClicked(); // Function Solarland.HUDItemPanel.OnBtnRestoreClicked // (Final|Native|Protected) // @ game+0x1c88610
	void OnBtnRecommendClicked(); // Function Solarland.HUDItemPanel.OnBtnRecommendClicked // (Final|Native|Protected) // @ game+0x1c885f0
	void OnBtnMedkitClicked(); // Function Solarland.HUDItemPanel.OnBtnMedkitClicked // (Final|Native|Protected) // @ game+0x1c885d0
	void OnBtnChangeClicked(); // Function Solarland.HUDItemPanel.OnBtnChangeClicked // (Final|Native|Protected) // @ game+0x1c885b0
	void OnBtnBigShieldRechargerClicked(); // Function Solarland.HUDItemPanel.OnBtnBigShieldRechargerClicked // (Final|Native|Protected) // @ game+0x1c88590
	void OnBtnBackpackClicked(); // Function Solarland.HUDItemPanel.OnBtnBackpackClicked // (Final|Native|Protected) // @ game+0x1c88570
	bool IsBattleHUDInSpectateMode(); // Function Solarland.HUDItemPanel.IsBattleHUDInSpectateMode // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool GetIsHiddenByGameplay(); // Function Solarland.HUDItemPanel.GetIsHiddenByGameplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c88380
	void BindDelegates(); // Function Solarland.HUDItemPanel.BindDelegates // (Final|Native|Public) // @ game+0x1c88340
};

// Class Solarland.HUDJobEffectPanel
// Size: 0x360 (Inherited: 0x340)
struct UHUDJobEffectPanel : USolarUserWidget {
	struct UJobEffectItemWidget* ItemWidgetClass; // 0x340(0x08)
	char pad_348[0x10]; // 0x348(0x10)
	struct USolarButton* Btn_Detail; // 0x358(0x08)

	void ShowDetailPanel(); // Function Solarland.HUDJobEffectPanel.ShowDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c896f0
	void RefreshSplashEffectColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.HUDJobEffectPanel.RefreshSplashEffectColor // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDJobEffectPanel.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x1c89280
	void OnSpectateInfoRep(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDJobEffectPanel.OnSpectateInfoRep // (Final|Native|Protected) // @ game+0x1c89200
	void OnNewEffectAppear(struct UJobEffectItemWidget* Widget, int32_t Index, int32_t TotalCount); // Function Solarland.HUDJobEffectPanel.OnNewEffectAppear // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnEffectUpdate(struct UJobEffectItemWidget* Widget, int32_t Index, struct FText& LabelContent); // Function Solarland.HUDJobEffectPanel.OnEffectUpdate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDJobEffectPanel.OnBattleUpgradeEffect // (Final|Native|Protected) // @ game+0x1c884b0
	void CloseDetailPanel(); // Function Solarland.HUDJobEffectPanel.CloseDetailPanel // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c88360
	void AddItemWidgetToPanel(struct UJobEffectItemWidget* ItemWidget); // Function Solarland.HUDJobEffectPanel.AddItemWidgetToPanel // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HUDPassiveHeadWidget
// Size: 0x358 (Inherited: 0x340)
struct UHUDPassiveHeadWidget : USolarUserWidget {
	struct UImage* Img_Head; // 0x340(0x08)
	struct USolarTextBlock* Txt_Buff; // 0x348(0x08)
	char pad_350[0x8]; // 0x350(0x08)

	void SetData(int32_t InContributorCharacterId, int32_t InLocalTipsID); // Function Solarland.HUDPassiveHeadWidget.SetData // (Final|Native|Public|BlueprintCallable) // @ game+0x1c89480
};

// Class Solarland.HUDShieldMaterial
// Size: 0x360 (Inherited: 0x340)
struct UHUDShieldMaterial : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UWidgetAnimation* Anim_GetMT_3; // 0x348(0x08)
	struct UWidgetAnimation* Anim_GetMT; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Loop; // 0x358(0x08)

	void OnShieldUpgradeShopInteract(); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeShopInteract // (Final|Native|Protected) // @ game+0x1c89010
	void OnShieldUpgradeItemChanged(int32_t InNewCount, int32_t InLastCount); // Function Solarland.HUDShieldMaterial.OnShieldUpgradeItemChanged // (Final|Native|Protected) // @ game+0x1c88f50
	void OnShieldAvailableChanged(bool bAvailable); // Function Solarland.HUDShieldMaterial.OnShieldAvailableChanged // (Final|Native|Protected) // @ game+0x1c88ec0
};

// Class Solarland.SolarMapElementBase
// Size: 0x298 (Inherited: 0x228)
struct ASolarMapElementBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)
	struct FString Side; // 0x238(0x10)
	struct FString Job; // 0x248(0x10)
	struct FString ElementID; // 0x258(0x10)
	enum class ESGameMode_ElementType Type; // 0x268(0x01)
	enum class EElementStateType State; // 0x269(0x01)
	enum class EElementVisibilityType Visibility; // 0x26a(0x01)
	char pad_26B[0x5]; // 0x26b(0x05)
	struct USolarGameMode_HandleElementRPC* BP_HandleActorRPC; // 0x270(0x08)
	struct FName ElementTypeName; // 0x278(0x08)
	struct FString GroupKey; // 0x280(0x10)
	char bUseSceneActorOptimization; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x1dc7e10
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x1cb6bd0
	void OnRep_ElementVisibility(); // Function Solarland.SolarMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x1dc7a40
	void OnRep_ElementState(); // Function Solarland.SolarMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x1dc7a20
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HumanoidTarget
// Size: 0x2a8 (Inherited: 0x298)
struct AHumanoidTarget : ASolarMapElementBase {
	char pad_298[0x10]; // 0x298(0x10)

	void ServerOnTargetTakeDamage(float Damage, struct AActor* DamageCauser); // Function Solarland.HumanoidTarget.ServerOnTargetTakeDamage // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HuntTeammateStatesPanelWidget
// Size: 0x398 (Inherited: 0x340)
struct UHuntTeammateStatesPanelWidget : USolarUserWidget {
	char pad_340[0x4]; // 0x340(0x04)
	float DeltaTime; // 0x344(0x04)
	struct TMap<int32_t, struct UHuntTeammateStateWidget*> TeammateStatesMap; // 0x348(0x50)
};

// Class Solarland.HuntTeammateStateWidget
// Size: 0x358 (Inherited: 0x340)
struct UHuntTeammateStateWidget : USolarUserWidget {
	bool bHasInitTalent; // 0x340(0x01)
	bool bHasTalentStateSet; // 0x341(0x01)
	char pad_342[0x2]; // 0x342(0x02)
	int32_t PlayerPosInTeam; // 0x344(0x04)
	struct FString PlayerNickName; // 0x348(0x10)

	void UnBindPlayerCard(); // Function Solarland.HuntTeammateStateWidget.UnBindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetTextNickName(struct FString NickName); // Function Solarland.HuntTeammateStateWidget.SetTextNickName // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetTeammatePosAndColor(int32_t PosInTeam, bool IsNormalState); // Function Solarland.HuntTeammateStateWidget.SetTeammatePosAndColor // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetStateWidgetVisibility(enum class ESlateVisibility InVisibility); // Function Solarland.HuntTeammateStateWidget.SetStateWidgetVisibility // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetHealthPercent(float Percent); // Function Solarland.HuntTeammateStateWidget.SetHealthPercent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ResetToDefault(); // Function Solarland.HuntTeammateStateWidget.ResetToDefault // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RefreshTalent(struct ASolarPlayerState* PlayerState); // Function Solarland.HuntTeammateStateWidget.RefreshTalent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RefreshCurrentPlayerOperationInGame(bool IsVisible); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentPlayerOperationInGame // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RefreshCurrentCharacterStateInGame(bool IsInVehicle, bool IsDying, bool IsAbnormalState); // Function Solarland.HuntTeammateStateWidget.RefreshCurrentCharacterStateInGame // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool HasBindedPlayer(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.HasBindedPlayer // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void BindPlayerCard(struct ASCMPlayerState* Player); // Function Solarland.HuntTeammateStateWidget.BindPlayerCard // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.HyperlinkDecorator
// Size: 0x40 (Inherited: 0x28)
struct UHyperlinkDecorator : URichTextBlockDecorator {
	struct UDataTable* HlinkSet; // 0x28(0x08)
	struct FString HlContent; // 0x30(0x10)

	void ClickFunc(); // Function Solarland.HyperlinkDecorator.ClickFunc // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.IMChatObject
// Size: 0x38 (Inherited: 0x28)
struct UIMChatObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool IsInRoom; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void SendPlayerPosToIMServerEveryFrame(struct FVector& PlayerPosition); // Function Solarland.IMChatObject.SendPlayerPosToIMServerEveryFrame // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1c893f0
};

// Class Solarland.InteractionDetectionComponent
// Size: 0x560 (Inherited: 0x560)
struct UInteractionDetectionComponent : USphereComponent {
};

// Class Solarland.ItemAttributeSet
// Size: 0x110 (Inherited: 0x30)
struct UItemAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData MaxSMGAmmo; // 0x30(0x10)
	struct FGameplayAttributeData CurrentSMGAmmo; // 0x40(0x10)
	struct FGameplayAttributeData MaxARAmmo; // 0x50(0x10)
	struct FGameplayAttributeData CurrentARAmmo; // 0x60(0x10)
	struct FGameplayAttributeData MaxSRAmmo; // 0x70(0x10)
	struct FGameplayAttributeData CurrentSRAmmo; // 0x80(0x10)
	struct FGameplayAttributeData MaxSGAmmo; // 0x90(0x10)
	struct FGameplayAttributeData CurrentSGAmmo; // 0xa0(0x10)
	struct FGameplayAttributeData MaxEnergyAmmo; // 0xb0(0x10)
	struct FGameplayAttributeData CurrentEnergyAmmo; // 0xc0(0x10)
	struct FGameplayAttributeData ItemCutDownMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData TempSTGAmmoIncrement; // 0xe0(0x10)
	struct FGameplayAttributeData TempSMGAmmoIncrement; // 0xf0(0x10)
	struct FGameplayAttributeData TempShieldRechargerIncrement; // 0x100(0x10)

	void OnRep_MaxSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSRAmmo // (Native|Protected|HasOutParms) // @ game+0x1c5af50
	void OnRep_MaxSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x1c3ca70
	void OnRep_MaxSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxSGAmmo // (Native|Protected|HasOutParms) // @ game+0x1c60450
	void OnRep_MaxEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x1c88d00
	void OnRep_MaxARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_MaxARAmmo // (Native|Protected|HasOutParms) // @ game+0x1c5b480
	void OnRep_ItemCutDownMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_ItemCutDownMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1c88c60
	void OnRep_CurrentSRAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSRAmmo // (Native|Protected|HasOutParms) // @ game+0x1c5b3d0
	void OnRep_CurrentSMGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSMGAmmo // (Native|Protected|HasOutParms) // @ game+0x1c3c9c0
	void OnRep_CurrentSGAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentSGAmmo // (Native|Protected|HasOutParms) // @ game+0x1c603a0
	void OnRep_CurrentEnergyAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentEnergyAmmo // (Native|Protected|HasOutParms) // @ game+0x1c88bb0
	void OnRep_CurrentARAmmo(struct FGameplayAttributeData& OldValue); // Function Solarland.ItemAttributeSet.OnRep_CurrentARAmmo // (Native|Protected|HasOutParms) // @ game+0x1c5b280
};

// Class Solarland.WidgetControlGroup
// Size: 0x280 (Inherited: 0x260)
struct UWidgetControlGroup : UUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x260(0x08)
	struct TArray<struct UWidgetControlUnit*> WidgetControls; // 0x268(0x10)
	char pad_278[0x8]; // 0x278(0x08)

	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetControlGroup.SetControlledWidgetActive // (Native|Event|Protected|BlueprintEvent) // @ game+0x1f41d70
	bool IsControlledWidgetActive(bool bUpdateCache); // Function Solarland.WidgetControlGroup.IsControlledWidgetActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f41140
};

// Class Solarland.JetFlyControlGroup
// Size: 0x2a0 (Inherited: 0x280)
struct UJetFlyControlGroup : UWidgetControlGroup {
	struct UWidgetControlUnit* CDControl; // 0x280(0x08)
	struct UWidgetControlUnit* TimesControl; // 0x288(0x08)
	struct UWidgetControlUnit* ForceControl; // 0x290(0x08)
	bool bUsedForVertical; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
};

// Class Solarland.WidgetControlUnit
// Size: 0x278 (Inherited: 0x260)
struct UWidgetControlUnit : UUserWidget {
	char pad_260[0x18]; // 0x260(0x18)

	void SetControlActive(bool bActive); // Function Solarland.WidgetControlUnit.SetControlActive // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1f41d70
	void OnOtherActiveChanged(struct UWidgetControlUnit* OtherUnit); // Function Solarland.WidgetControlUnit.OnOtherActiveChanged // (Native|Event|Public|BlueprintEvent) // @ game+0xb5c300
	void OnGroupInitialized(struct UWidgetControlGroup* ControlGroup); // Function Solarland.WidgetControlUnit.OnGroupInitialized // (Native|Event|Public|BlueprintEvent) // @ game+0x1f412c0
	bool IsControlActive(); // Function Solarland.WidgetControlUnit.IsControlActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1f41110
};

// Class Solarland.JetFlyEMPControl
// Size: 0x280 (Inherited: 0x278)
struct UJetFlyEMPControl : UWidgetControlUnit {
	struct UWidgetAnimation* Anim_EMP; // 0x278(0x08)

	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyEMPControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x1c88840
	void InitializeWithCharacter(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyEMPControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x1c883b0
};

// Class Solarland.JetFlyForceControl
// Size: 0x2d0 (Inherited: 0x278)
struct UJetFlyForceControl : UWidgetControlUnit {
	char pad_278[0x58]; // 0x278(0x58)

	void SwitchForceControlWidget(bool bRapidBoost); // Function Solarland.JetFlyForceControl.SwitchForceControlWidget // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetContentVisibility(bool bShowContent); // Function Solarland.JetFlyForceControl.SetContentVisibility // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetContentColorAndOpacity(struct FLinearColor& Color); // Function Solarland.JetFlyForceControl.SetContentColorAndOpacity // (Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyForceControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x1c88b20
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyForceControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x1c889e0
	void OnForbiddenTypesChanged(enum class EJetFlyForbiddenType Type, bool bAdded); // Function Solarland.JetFlyForceControl.OnForbiddenTypesChanged // (Final|Native|Protected) // @ game+0x1c88910
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyForceControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x1c88430
};

// Class Solarland.JetFlyIcon
// Size: 0x348 (Inherited: 0x340)
struct UJetFlyIcon : USolarUserWidget {
	bool bUsedForVertical; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)

	void RefreshOnEMPStateChanged(bool bActive); // Function Solarland.JetFlyIcon.RefreshOnEMPStateChanged // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshColorForLevel(int32_t Level, struct FItemQualityData& Config); // Function Solarland.JetFlyIcon.RefreshColorForLevel // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnJetModuleLvChanged(int32_t NewLevel); // Function Solarland.JetFlyIcon.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x1c8da00
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyIcon.OnEMPEffected // (Final|Native|Protected) // @ game+0x1c8d760
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSet // (Final|Native|Protected) // @ game+0x1c8d590
	void OnCharacterSelfRebirth(struct ASolarCharacter* InCharacter); // Function Solarland.JetFlyIcon.OnCharacterSelfRebirth // (Final|Native|Protected) // @ game+0x1c8d590
};

// Class Solarland.JetFlyInnerCDControl
// Size: 0x2b0 (Inherited: 0x278)
struct UJetFlyInnerCDControl : UWidgetControlUnit {
	struct UGaugeImage* ImgCD; // 0x278(0x08)
	struct UTextBlock* TxtCD; // 0x280(0x08)
	struct TArray<struct UObject*> OtherInactiveControls; // 0x288(0x10)
	char pad_298[0x18]; // 0x298(0x18)

	void OnCDStateChanged(bool bStart); // Function Solarland.JetFlyInnerCDControl.OnCDStateChanged // (Final|Native|Protected) // @ game+0x1c8d500
	void OnCDProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyInnerCDControl.OnCDProgressSet // (Final|Native|Protected) // @ game+0x1c8d440
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyInnerCDControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x1c8d210
};

// Class Solarland.JetFlyTimesControl
// Size: 0x328 (Inherited: 0x278)
struct UJetFlyTimesControl : UWidgetControlUnit {
	struct UImage* ProgressGrid; // 0x278(0x08)
	struct UImage* FinishPrompt; // 0x280(0x08)
	struct UWidgetAnimation* Anim_CD_Prompt; // 0x288(0x08)
	struct UWidgetAnimation* Anim_EMP; // 0x290(0x08)
	struct UWidgetAnimation* Anim_Resume; // 0x298(0x08)
	struct UMaterialInterface* ProgressGridBase; // 0x2a0(0x08)
	struct TArray<struct FName> ProgressColor; // 0x2a8(0x10)
	struct FName GridName; // 0x2b8(0x08)
	struct FName ProgressName; // 0x2c0(0x08)
	char pad_2C8[0x28]; // 0x2c8(0x28)
	struct UWidget* FlushAngel; // 0x2f0(0x08)
	struct UWidgetAnimation* Anim_RapidBoostFlush; // 0x2f8(0x08)
	struct TArray<struct FVector2D> VisibleSegment_Vert; // 0x300(0x10)
	struct TArray<struct FVector2D> VisibleSegment_Hori; // 0x310(0x10)
	char pad_320[0x8]; // 0x320(0x08)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetFlyTimesControl.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x1c8dc00
	void OnJetTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetTimesChanged // (Final|Native|Protected) // @ game+0x1c8db00
	void OnJetModuleLvChanged(int32_t NewLv); // Function Solarland.JetFlyTimesControl.OnJetModuleLvChanged // (Final|Native|Protected) // @ game+0x1c8da80
	void OnJetMaxTimesChanged(int32_t NewTimes); // Function Solarland.JetFlyTimesControl.OnJetMaxTimesChanged // (Final|Native|Protected) // @ game+0x1c8d900
	void OnEMPEffected(struct ASolarCharacter* EffectedCharacter, bool bEMPActive); // Function Solarland.JetFlyTimesControl.OnEMPEffected // (Final|Native|Protected) // @ game+0x1c8d830
	void OnChargingProgressSet(float InValue, float InPercent); // Function Solarland.JetFlyTimesControl.OnChargingProgressSet // (Final|Native|Protected) // @ game+0x1c8d6a0
	void OnChargeStateChanged(bool bStart); // Function Solarland.JetFlyTimesControl.OnChargeStateChanged // (Final|Native|Protected) // @ game+0x1c8d610
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetFlyTimesControl.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x1c8d290
};

// Class Solarland.JetPackConfig
// Size: 0xb0 (Inherited: 0x30)
struct UJetPackConfig : UDataAsset {
	float CurrentSpeedResidueHorizontal; // 0x30(0x04)
	float CurrentSpeedResidueVertical; // 0x34(0x04)
	float AltitudeLimitation; // 0x38(0x04)
	float DashHeightForLimitedAltitude; // 0x3c(0x04)
	float SlantDashInputThreshold; // 0x40(0x04)
	float VerticalDashTime; // 0x44(0x04)
	float VerticalDashHeight; // 0x48(0x04)
	float VerticalDashAngle; // 0x4c(0x04)
	float VerticalDashMaxHorizontalEndSpeed; // 0x50(0x04)
	float VerticalDashBreakableTime; // 0x54(0x04)
	float VerticalDashCameraFadeOutTime; // 0x58(0x04)
	float SlantDashTime; // 0x5c(0x04)
	float SlantDashHeight; // 0x60(0x04)
	float SlantDashAngle; // 0x64(0x04)
	float SlantDashMaxHorizontalEndSpeed; // 0x68(0x04)
	float SlantDashBreakableTime; // 0x6c(0x04)
	float SlantDashCameraFadeOutTime; // 0x70(0x04)
	float HorizontalDashTime; // 0x74(0x04)
	float HorizontalDashDistance; // 0x78(0x04)
	float HorizontalDashAngle; // 0x7c(0x04)
	float HorizontalDashEndSpeed; // 0x80(0x04)
	float HorizontalDashBreakableTime; // 0x84(0x04)
	float HorizontalDashCameraFadeOutTime; // 0x88(0x04)
	float UnderWaterHorizontalDashTime; // 0x8c(0x04)
	float UnderWaterHorizontalDashDistance; // 0x90(0x04)
	float UnderWaterHorizontalDashBreakableTime; // 0x94(0x04)
	float UnderWaterHorizontalDashCameraFadeOutTime; // 0x98(0x04)
	struct FVehicleEjectParams DefaultVehicleEjectParams; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarMovablePad
// Size: 0x4d0 (Inherited: 0x260)
struct USolarMovablePad : UUserWidget {
	enum class EInputEventHandleType InputEventHandle; // 0x260(0x01)
	char pad_261[0x7]; // 0x261(0x07)
	struct FMulticastInlineDelegate OnPressed; // 0x268(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x278(0x10)
	struct FMulticastInlineDelegate OnMoving; // 0x288(0x10)
	struct UBorder* PadBase; // 0x298(0x08)
	struct UNamedSlot* MovableWidget; // 0x2a0(0x08)
	bool bWidgetStationary; // 0x2a8(0x01)
	char pad_2A9[0x3]; // 0x2a9(0x03)
	struct FMargin InnerPadding; // 0x2ac(0x10)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct FSlateBrush NormalBackground; // 0x2c0(0x98)
	struct FSlateBrush PressedBackground; // 0x358(0x98)
	struct FKey PointerAction; // 0x3f0(0x18)
	struct FKey MoveXAxis; // 0x408(0x18)
	struct FKey MoveYAxis; // 0x420(0x18)
	bool bOnlySimulateCapturedMove; // 0x438(0x01)
	bool bUsingTouchPriority; // 0x439(0x01)
	enum class ETouchMovePriority TouchMovePriority; // 0x43a(0x01)
	char pad_43B[0x95]; // 0x43b(0x95)

	void ForceReleasePad(); // Function Solarland.SolarMovablePad.ForceReleasePad // (Final|Native|Public|BlueprintCallable) // @ game+0x1dcb5e0
};

// Class Solarland.JetPad
// Size: 0x500 (Inherited: 0x4d0)
struct UJetPad : USolarMovablePad {
	struct UBorder* PadBaseUnder; // 0x4d0(0x08)
	struct UPanelWidget* RapidBoostEffects; // 0x4d8(0x08)
	struct UImage* RapidBoostEffect01; // 0x4e0(0x08)
	struct UImage* RapidBoostEffect02; // 0x4e8(0x08)
	struct UWidgetAnimation* Anim_RapidBoost_Loop; // 0x4f0(0x08)
	bool bJetVertical; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)

	void OnRapidBoostActivationChanged(bool bActivated); // Function Solarland.JetPad.OnRapidBoostActivationChanged // (Final|Native|Protected) // @ game+0x1c8dc90
	void OnJetModuleLevelChanged(int32_t NewLevel); // Function Solarland.JetPad.OnJetModuleLevelChanged // (Final|Native|Protected) // @ game+0x1c8d980
	void InitializeWithCharacter(struct ASolarCharacter* OwningCharacter); // Function Solarland.JetPad.InitializeWithCharacter // (Final|Native|Protected) // @ game+0x1c8d310
};

// Class Solarland.JobEffectDetailItemWidget
// Size: 0x360 (Inherited: 0x340)
struct UJobEffectDetailItemWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x340(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x348(0x08)
	struct USolarTextBlock* Text_Category; // 0x350(0x08)
	struct USolarTextBlock* Text_Name; // 0x358(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectDetailItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarPanelWidget
// Size: 0x390 (Inherited: 0x340)
struct USolarPanelWidget : USolarUserWidget {
	struct UCanvasPanel* CanvasPanel_Bg; // 0x340(0x08)
	struct UCanvasPanel* CanvasPanel_Content; // 0x348(0x08)
	struct FDelegate AnimationEnterStartedEvent; // 0x350(0x10)
	struct FDelegate AnimationEnterFinishedEvent; // 0x360(0x10)
	struct FDelegate AnimationExitStartedEvent; // 0x370(0x10)
	struct FDelegate AnimationExitFinishedEvent; // 0x380(0x10)

	void OnAnimationExitStarted(); // Function Solarland.SolarPanelWidget.OnAnimationExitStarted // (Final|Native|Protected) // @ game+0x1dd13c0
	void OnAnimationExitFinished(); // Function Solarland.SolarPanelWidget.OnAnimationExitFinished // (Final|Native|Protected) // @ game+0x1dd13e0
	void OnAnimationEnterStarted(); // Function Solarland.SolarPanelWidget.OnAnimationEnterStarted // (Final|Native|Protected) // @ game+0x1dd13c0
	void OnAnimationEnterFinished(); // Function Solarland.SolarPanelWidget.OnAnimationEnterFinished // (Final|Native|Protected) // @ game+0x1dd13a0
};

// Class Solarland.JobEffectDetailPanel
// Size: 0x390 (Inherited: 0x390)
struct UJobEffectDetailPanel : USolarPanelWidget {

	struct TArray<struct UJobEffectDetailItemWidget*> GetItemWidgets(); // Function Solarland.JobEffectDetailPanel.GetItemWidgets // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.JobEffectItemWidget
// Size: 0x350 (Inherited: 0x340)
struct UJobEffectItemWidget : USolarUserWidget {
	struct USolarTextBlock* Text_Number; // 0x340(0x08)
	struct UImage* Img_Icon; // 0x348(0x08)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectItemWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void PlayRefreshAnimation(); // Function Solarland.JobEffectItemWidget.PlayRefreshAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.JobEffectSelectOptionWidget
// Size: 0x378 (Inherited: 0x340)
struct UJobEffectSelectOptionWidget : USolarUserWidget {
	struct UImage* Image_Icon; // 0x340(0x08)
	struct USolarRichTextBlock* Text_Info; // 0x348(0x08)
	struct USolarTextBlock* Text_Category; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Select; // 0x358(0x08)
	struct UButton* Button_Select; // 0x360(0x08)
	struct FDelegate OnSelected; // 0x368(0x10)

	void RefreshColor(struct FBattleUpgradeEffectCategoryColorSet& ColorSet); // Function Solarland.JobEffectSelectOptionWidget.RefreshColor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnSelected__DelegateSignature(struct UJobEffectSelectOptionWidget* Widget); // DelegateFunction Solarland.JobEffectSelectOptionWidget.OnSelected__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnSelectButtonClicked(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectButtonClicked // (Final|Native|Protected) // @ game+0x1c8dd40
	void OnSelectAnimFinished(); // Function Solarland.JobEffectSelectOptionWidget.OnSelectAnimFinished // (Final|Native|Protected) // @ game+0x1c8dd20
};

// Class Solarland.JobEffectSelectPanel
// Size: 0x370 (Inherited: 0x340)
struct UJobEffectSelectPanel : USolarUserWidget {
	struct UWidgetAnimation* Anim_Enter; // 0x340(0x08)
	struct UWidgetAnimation* Anim_Quit; // 0x348(0x08)
	struct TArray<struct UJobEffectSelectOptionWidget*> OptionWidgets; // 0x350(0x10)
	char pad_360[0x10]; // 0x360(0x10)

	void OnSelectingJobEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.JobEffectSelectPanel.OnSelectingJobEffectBegin // (Final|Native|Protected|HasOutParms) // @ game+0x1c8dd60
	void OnOptionWidgetClicked(struct UJobEffectSelectOptionWidget* OptionWidget); // Function Solarland.JobEffectSelectPanel.OnOptionWidgetClicked // (Final|Native|Protected) // @ game+0x1c8db80
	void OnFadeOutFinished(); // Function Solarland.JobEffectSelectPanel.OnFadeOutFinished // (Final|Native|Protected) // @ game+0x1c3c770
};

// Class Solarland.KeyMappingFileMgr
// Size: 0xa8 (Inherited: 0x28)
struct UKeyMappingFileMgr : UObject {
	char pad_28[0x80]; // 0x28(0x80)
};

// Class Solarland.KeyMappingManager
// Size: 0x270 (Inherited: 0x28)
struct UKeyMappingManager : UObject {
	char pad_28[0xf8]; // 0x28(0xf8)
	struct FMulticastInlineDelegate OnKeyMappingUpdate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnKeyMappingConfirm; // 0x130(0x10)
	struct FMulticastInlineDelegate OnKeyboardUpdate; // 0x140(0x10)
	char pad_150[0x10]; // 0x150(0x10)
	struct TMap<struct FString, struct FString> OccupiedKeyMap; // 0x160(0x50)
	char pad_1B0[0xb0]; // 0x1b0(0xb0)
	struct UKeyMappingFileMgr* KeyMappingFileMgr; // 0x260(0x08)
	char pad_268[0x8]; // 0x268(0x08)

	void SwitchKeyMappingPlanIndex(int32_t PlanIndex); // Function Solarland.KeyMappingManager.SwitchKeyMappingPlanIndex // (Final|Native|Public) // @ game+0x1c8e140
	void SwitchKeyMapping(struct FString ActionName, int32_t SettingIndex, bool Enable, bool Force); // Function Solarland.KeyMappingManager.SwitchKeyMapping // (Final|Native|Public) // @ game+0x1c8dfd0
	void ResetKeyMapping(); // Function Solarland.KeyMappingManager.ResetKeyMapping // (Final|Native|Public) // @ game+0x1c8dfb0
	bool IsComboKey(struct FString KeyName); // Function Solarland.KeyMappingManager.IsComboKey // (Final|Native|Public|BlueprintCallable) // @ game+0x1c8d390
	void ImportKeyMappingSetting(); // Function Solarland.KeyMappingManager.ImportKeyMappingSetting // (Final|Native|Public) // @ game+0x1c8d1f0
	bool HasKeyModified(); // Function Solarland.KeyMappingManager.HasKeyModified // (Final|Native|Public|BlueprintCallable) // @ game+0x1c8d1c0
	struct TArray<struct FString> GetAllActionNames(int32_t PlanIndex); // Function Solarland.KeyMappingManager.GetAllActionNames // (Final|Native|Public|BlueprintCallable) // @ game+0x1c8d0e0
	struct TArray<struct FString> GetActionKeyMapping(struct FString ActionName, int32_t PlanIndex, int32_t SettingIndex); // Function Solarland.KeyMappingManager.GetActionKeyMapping // (Final|Native|Public|BlueprintCallable) // @ game+0x1c8cf70
	void ApplyResult(); // Function Solarland.KeyMappingManager.ApplyResult // (Final|Native|Public) // @ game+0x1c8cb80
};

// Class Solarland.KillInfoManager
// Size: 0x370 (Inherited: 0x228)
struct AKillInfoManager : AGameManagerBase {
	struct FString KillLeaderID; // 0x228(0x10)
	int32_t KillLeaderKillNum; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct FString AnnihilatorID; // 0x240(0x10)
	char pad_250[0x8]; // 0x250(0x08)
	struct TArray<enum class EKillNoticeType> KillEffectsOrder; // 0x258(0x10)
	struct TArray<enum class EKillNoticeType> GlobalInfoList; // 0x268(0x10)
	struct FString KillLeaderChangeVoiceName; // 0x278(0x10)
	struct FString KillLeaderShutDownVoiceName; // 0x288(0x10)
	struct FString BeKillLeaderVoiceName; // 0x298(0x10)
	struct FString ShutDownKillLeaderVoiceName; // 0x2a8(0x10)
	struct TMap<int32_t, struct FString> KillTotalVoiceMap; // 0x2b8(0x50)
	struct FString RevengeVoiceName; // 0x308(0x10)
	struct FString KillDownVoiceName; // 0x318(0x10)
	struct FString ClearTeamVoiceName; // 0x328(0x10)
	struct FString ShutDownVoiceName; // 0x338(0x10)
	struct FString KillDefenderVoiceName; // 0x348(0x10)
	char pad_358[0x18]; // 0x358(0x18)

	bool PlayKillInfoVoice(int32_t InNoticeID, int32_t InKillNum, struct FDelegate& InDelegate); // Function Solarland.KillInfoManager.PlayKillInfoVoice // (Final|Native|Protected|HasOutParms) // @ game+0x1c8de80
	void ClientShowPackedKillInfoNotify(struct FString KilledPlayerID, struct FString KillerPlayerID, int32_t KillNum, struct FString InKillLeaderID, enum class EKillParamsCompressInfo KillParamsCompressInfo); // Function Solarland.KillInfoManager.ClientShowPackedKillInfoNotify // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1c8cdc0
	bool CheckNoticeAndSend(enum class EKillNoticeType& InType, struct FString MyPlayereID, struct UGameModeGlobalSetting* Settings, struct FKillParams& InParams, struct UHUDDispatcherBase* HUDDispatcher); // Function Solarland.KillInfoManager.CheckNoticeAndSend // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1c8cba0
};

// Class Solarland.ListEntry_Goods
// Size: 0x538 (Inherited: 0x340)
struct UListEntry_Goods : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct FMulticastInlineDelegate OnItemPurchaseRequested; // 0x348(0x10)
	struct FDelegate RequestEnergyGetter; // 0x358(0x10)
	struct FDelegate RequestItemRecommendation; // 0x368(0x10)
	struct UWidgetSwitcher* WidgetSwitcher_State; // 0x378(0x08)
	struct UCanvasPanel* State_Normal; // 0x380(0x08)
	struct UCanvasPanel* Panel_Recommend; // 0x388(0x08)
	struct UImage* Img_Item1_BG; // 0x390(0x08)
	struct UImage* Img_Item1; // 0x398(0x08)
	struct USolarTextBlock* Txt_ItemCount; // 0x3a0(0x08)
	struct USolarTextBlock* Txt_ItemName; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_Introduce; // 0x3b0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Buy; // 0x3b8(0x08)
	struct USolarButton* Btn_Buy; // 0x3c0(0x08)
	struct UOverlay* Overlay_Discount; // 0x3c8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted; // 0x3d0(0x08)
	struct UTextBlock* Txt_ElectricityNeeded; // 0x3d8(0x08)
	struct USolarButton* Btn_CantBuy; // 0x3e0(0x08)
	struct UOverlay* Overlay_Discount_CantBuy; // 0x3e8(0x08)
	struct UTextBlock* Txt_ElectricityNum_Undiscounted_CantBuy; // 0x3f0(0x08)
	struct UTextBlock* Txt_ElectricityNeeded_CantBuy; // 0x3f8(0x08)
	struct UCanvasPanel* Panel_BuySucceed; // 0x400(0x08)
	struct UImage* Image_BG2_3; // 0x408(0x08)
	struct USolarTextBlock* Txt_BuySucceed; // 0x410(0x08)
	struct UCanvasPanel* Panel_NotAvailable; // 0x418(0x08)
	struct UImage* Image_BG2; // 0x420(0x08)
	struct USolarTextBlock* Txt_NotAvailable; // 0x428(0x08)
	struct UCanvasPanel* Panel_Refresh; // 0x430(0x08)
	struct UCanvasPanel* State_CD; // 0x438(0x08)
	struct UProgressBar* Progress_CD; // 0x440(0x08)
	struct USolarTextBlock* Txt_InPrepare; // 0x448(0x08)
	struct USolarTextBlock* Txt_CD; // 0x450(0x08)
	struct UWidgetAnimation* Succeed_Anim; // 0x458(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x460(0x08)
	struct UWidgetAnimation* Recommend_Anim; // 0x468(0x08)
	char pad_470[0x98]; // 0x470(0x98)
	struct FString AkNameGoodsRefresh; // 0x508(0x10)
	struct FString AkNameGoodsBuy; // 0x518(0x10)
	struct FString AkNameGoodsBuyFailed; // 0x528(0x10)

	void UpdateTexts(struct FString Name, struct FString Info, int32_t Num, int32_t Price, int32_t UndiscountedPrice); // Function Solarland.ListEntry_Goods.UpdateTexts // (Final|Native|Protected) // @ game+0x1c92780
	void UpdateIfNotAvailable(); // Function Solarland.ListEntry_Goods.UpdateIfNotAvailable // (Final|Native|Protected) // @ game+0x1c92760
	void UpdateCDText(); // Function Solarland.ListEntry_Goods.UpdateCDText // (Final|Native|Protected) // @ game+0x1c926c0
	void UpdateButtonBuy(); // Function Solarland.ListEntry_Goods.UpdateButtonBuy // (Final|Native|Protected) // @ game+0x1c926a0
	void ShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.ShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x1c92370
	void SetIsRecommendState(bool InIsRecommend); // Function Solarland.ListEntry_Goods.SetIsRecommendState // (Final|Native|Public) // @ game+0x1c91e60
	bool RequestItemRecommendation__DelegateSignature(int32_t ItemID); // DelegateFunction Solarland.ListEntry_Goods.RequestItemRecommendation__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	float RequestEnergyGetter__DelegateSignature(); // DelegateFunction Solarland.ListEntry_Goods.RequestEnergyGetter__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnSucceedAnimFinish(); // Function Solarland.ListEntry_Goods.OnSucceedAnimFinish // (Final|Native|Protected) // @ game+0x1c91a90
	void OnPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.ListEntry_Goods.OnPurchaseSuccess // (Final|Native|Protected) // @ game+0x1c919d0
	void OnListItemObjectSetInternal(struct UObject* InObject); // Function Solarland.ListEntry_Goods.OnListItemObjectSetInternal // (Final|Native|Public) // @ game+0x1c91950
	void OnItemRefreshEffectFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshEffectFinish // (Final|Native|Protected) // @ game+0x1c91930
	void OnItemRefreshAnimFinish(); // Function Solarland.ListEntry_Goods.OnItemRefreshAnimFinish // (Final|Native|Protected) // @ game+0x1c91910
	void OnItemRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemRefresh // (Final|Native|Protected) // @ game+0x1c91890
	void OnItemPurchaseRequested__DelegateSignature(int32_t ProductID, bool bRecommend); // DelegateFunction Solarland.ListEntry_Goods.OnItemPurchaseRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnItemCDRefresh(struct ASolarElectricShop* InElectricShop); // Function Solarland.ListEntry_Goods.OnItemCDRefresh // (Final|Native|Protected) // @ game+0x1c91810
	void OnClickBtnCantBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnCantBuy // (Final|Native|Protected) // @ game+0x1c917f0
	void OnClickBtnBuy(); // Function Solarland.ListEntry_Goods.OnClickBtnBuy // (Final|Native|Protected) // @ game+0x1c917d0
	void HidePurchaseEffect(); // Function Solarland.ListEntry_Goods.HidePurchaseEffect // (Final|Native|Protected) // @ game+0x1c91620
	float GetRemainningCD(); // Function Solarland.ListEntry_Goods.GetRemainningCD // (Final|Native|Public) // @ game+0x1c915d0
	int32_t GetItemID(); // Function Solarland.ListEntry_Goods.GetItemID // (Final|Native|Public) // @ game+0x1c915a0
	float GetDiscountedPrice(float Price); // Function Solarland.ListEntry_Goods.GetDiscountedPrice // (Final|Native|Protected) // @ game+0x1c67e20
	void CheckToShowItemRefreshEffect(); // Function Solarland.ListEntry_Goods.CheckToShowItemRefreshEffect // (Final|Native|Protected) // @ game+0x1c91500
	void CheckStartCD(bool InCheckBuyer); // Function Solarland.ListEntry_Goods.CheckStartCD // (Final|Native|Protected) // @ game+0x1c91470
	void CheckRecommendStateImmediately(); // Function Solarland.ListEntry_Goods.CheckRecommendStateImmediately // (Final|Native|Public) // @ game+0x1c91450
	void CheckEnergyAvaliableImmediately(); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliableImmediately // (Final|Native|Public) // @ game+0x1c91430
	void CheckEnergyAvaliable(float CurrentValue); // Function Solarland.ListEntry_Goods.CheckEnergyAvaliable // (Final|Native|Public) // @ game+0x1c913b0
	void CachedNewData(struct FElectricShopItem& InNewItemData); // Function Solarland.ListEntry_Goods.CachedNewData // (Final|Native|Protected|HasOutParms) // @ game+0x1c91310
	void BindDelegates(); // Function Solarland.ListEntry_Goods.BindDelegates // (Final|Native|Protected) // @ game+0x1c912f0
	void AsyncLoadTextutes(int32_t InQuality, struct FString Icon, enum class EItemType InType); // Function Solarland.ListEntry_Goods.AsyncLoadTextutes // (Final|Native|Protected) // @ game+0x1c911a0
};

// Class Solarland.LoadingAnim
// Size: 0x260 (Inherited: 0x260)
struct ULoadingAnim : UUserWidget {

	void StopLoadingAnimation(); // Function Solarland.LoadingAnim.StopLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void StartLoadingAnimation(); // Function Solarland.LoadingAnim.StartLoadingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.LoadingBgDataAsset
// Size: 0x40 (Inherited: 0x30)
struct ULoadingBgDataAsset : UDataAsset {
	struct TArray<struct FULoadingDataEntry> LoadingDataConfig; // 0x30(0x10)
};

// Class Solarland.SolarLoadingSetting
// Size: 0x60 (Inherited: 0x38)
struct USolarLoadingSetting : UDeveloperSettings {
	struct TArray<float> DataTraceTimeTrigger; // 0x38(0x10)
	bool bEnableLoadingReport; // 0x48(0x01)
	bool bEnableShowLoadingTasks; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct FString ReportMapMustHaveStr; // 0x50(0x10)
};

// Class Solarland.LoadingUIBase
// Size: 0x4a8 (Inherited: 0x260)
struct ULoadingUIBase : ULoadingWidgetBase {
	struct UImage* Img_BG; // 0x260(0x08)
	struct UProgressBar* LoadProgress; // 0x268(0x08)
	struct USolarTextBlock* Txt_Percent_Num; // 0x270(0x08)
	struct USolarTextBlock* Txt_Tips; // 0x278(0x08)
	struct USolarTextBlock* Txt_Tips_Title; // 0x280(0x08)
	struct USolarTextBlock* Txt_Tips_Left; // 0x288(0x08)
	struct USolarTextBlock* Txt_Tips_Mid; // 0x290(0x08)
	struct USolarTextBlock* Txt_Tips_Right; // 0x298(0x08)
	struct TMap<struct FString, struct UTexture2D*> BGImgMap; // 0x2a0(0x50)
	struct USolarTextBlock* Txt_Task_2; // 0x2f0(0x08)
	struct USolarTextBlock* Txt_Task_3; // 0x2f8(0x08)
	struct USolarTextBlock* Txt_Task_4; // 0x300(0x08)
	struct USolarTextBlock* Txt_Task_5; // 0x308(0x08)
	struct USolarTextBlock* Txt_Task_6; // 0x310(0x08)
	struct USolarTextBlock* Txt_Task_7; // 0x318(0x08)
	struct USolarTextBlock* Txt_Task_8; // 0x320(0x08)
	char pad_328[0x158]; // 0x328(0x158)
	struct TArray<struct FULoadingDataEntry> ShowBgLoadingArray; // 0x480(0x10)
	char pad_490[0x10]; // 0x490(0x10)
	float FakeProgress; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)

	void StartDisplayLoading(struct TArray<struct FULoadingDataEntry>& InLoadingBgArray, float InShowBgTime, bool bInOrder, float InShowTipsTime); // Function Solarland.LoadingUIBase.StartDisplayLoading // (Final|Native|Public|HasOutParms) // @ game+0x1c92390
	void SetTips(struct FText& InTips); // Function Solarland.LoadingUIBase.SetTips // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c92190
	void SetLoadingProgress(float InPercent); // Function Solarland.LoadingUIBase.SetLoadingProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91ef0
	void SetFakeProgress(float NewProgress); // Function Solarland.LoadingUIBase.SetFakeProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c91de0
	void SetBGImgFromPath(struct FSoftObjectPath& Path); // Function Solarland.LoadingUIBase.SetBGImgFromPath // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c91be0
	void SetBGImg(struct FString ImgName); // Function Solarland.LoadingUIBase.SetBGImg // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91b40
	void OnWidgetReleasedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetReleasedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnWidgetCreatedAsLoadingScreen(struct UObject* Outer); // Function Solarland.LoadingUIBase.OnWidgetCreatedAsLoadingScreen // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnLevelPreLoad(struct FString MapPackageName); // Function Solarland.LoadingUIBase.OnLevelPreLoad // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnAsyncLoadingFlushUpdate(); // Function Solarland.LoadingUIBase.OnAsyncLoadingFlushUpdate // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.MapMarkBase
// Size: 0x380 (Inherited: 0x340)
struct UMapMarkBase : USolarUserWidget {
	struct UMiniMapBase* MapOwner; // 0x340(0x08)
	struct FVector2D MarkIconRealLoc; // 0x348(0x08)
	struct FVector2D MarkIconAlignment; // 0x350(0x08)
	bool IsOnBigMap; // 0x358(0x01)
	enum class EMarkerType MarkerType; // 0x359(0x01)
	bool IsMapObject; // 0x35a(0x01)
	bool MoveAble; // 0x35b(0x01)
	bool SupportEdge; // 0x35c(0x01)
	bool SupportEdgeWithBigMap; // 0x35d(0x01)
	char pad_35E[0x2]; // 0x35e(0x02)
	struct AActor* TargetActorRef; // 0x360(0x08)
	char pad_368[0x18]; // 0x368(0x18)

	void UpdateIconWithActor(struct AActor* InTargetActor); // Function Solarland.MapMarkBase.UpdateIconWithActor // (Final|Native|Public) // @ game+0x1c926e0
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.MapMarkBase.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0x1c922e0
	void SetMarkPos(struct FVector& Loc); // Function Solarland.MapMarkBase.SetMarkPos // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c91f70
	void SetEdgeSupport(bool IsSupportEdge, bool WithBigMap); // Function Solarland.MapMarkBase.SetEdgeSupport // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91d10
	void SetColorOpacityIndex(char InColorOpacityIndex); // Function Solarland.MapMarkBase.SetColorOpacityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91c90
	void OnBigMapOpen(); // Function Solarland.MapMarkBase.OnBigMapOpen // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InitVehicleMarkIcon(int32_t VehicleID); // Function Solarland.MapMarkBase.InitVehicleMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InitStaticIcon(int32_t MarkID); // Function Solarland.MapMarkBase.InitStaticIcon // (Native|Public|BlueprintCallable) // @ game+0x1c91740
	void InitMarkIcon(int32_t MarkID, struct AActor* InTargetActor, bool InMoveable); // Function Solarland.MapMarkBase.InitMarkIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91640
	void EdgeFix(struct FVector2D Pos); // Function Solarland.MapMarkBase.EdgeFix // (Final|Native|Public|HasDefaults) // @ game+0x1c91520
	void CleanData(); // Function Solarland.MapMarkBase.CleanData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.MapSelectPointCellWidget
// Size: 0x388 (Inherited: 0x340)
struct UMapSelectPointCellWidget : USolarUserWidget {
	bool bCellSelectionState; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	enum class EMapCellSelectionAccess SelectionAccess; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
	struct FString CellAddress; // 0x350(0x10)
	char pad_360[0x20]; // 0x360(0x20)
	struct ASolarMapSelectPoint* SelectPointElement; // 0x380(0x08)

	void SetSelectionAccess(enum class EMapCellSelectionAccess InState); // Function Solarland.MapSelectPointCellWidget.SetSelectionAccess // (Final|Native|Public|BlueprintCallable) // @ game+0x1c92110
	void OnSelectionStateChanged(bool InState); // Function Solarland.MapSelectPointCellWidget.OnSelectionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSelectionAccessChanged(enum class EMapCellSelectionAccess CurrentState); // Function Solarland.MapSelectPointCellWidget.OnSelectionAccessChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void HandleSelection(); // Function Solarland.MapSelectPointCellWidget.HandleSelection // (Final|Native|Public|BlueprintCallable) // @ game+0x1c91600
};

// Class Solarland.MapSelectPointNoticeMap
// Size: 0x348 (Inherited: 0x340)
struct UMapSelectPointNoticeMap : USolarUserWidget {
	struct ASolarMapSelectPoint* SelectPointElement; // 0x340(0x08)

	void OnTouchPanel(struct FVector2D& InPosition); // Function Solarland.MapSelectPointNoticeMap.OnTouchPanel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c91ab0
	void OnInitialMap(int32_t InMinimapID); // Function Solarland.MapSelectPointNoticeMap.OnInitialMap // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnAddNewCell(struct FVector2D& InNewPosition, struct UMapSelectPointCellWidget* InNewCellWidget); // Function Solarland.MapSelectPointNoticeMap.OnAddNewCell // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.MapSelectPointWidget
// Size: 0x340 (Inherited: 0x340)
struct UMapSelectPointWidget : USolarUserWidget {
};

// Class Solarland.MapVoiceWidget
// Size: 0x3f8 (Inherited: 0x340)
struct UMapVoiceWidget : USolarUserWidget {
	struct TMap<int32_t, struct UMarkIconWidget*> VoiceIconMap; // 0x340(0x50)
	char pad_390[0x68]; // 0x390(0x68)

	void AddPlayerMark(enum class EMarkerType Type, int32_t DirectID, float TransparentPercent); // Function Solarland.MapVoiceWidget.AddPlayerMark // (Final|Native|Public) // @ game+0x1c91090
};

// Class Solarland.MarkIconWidget
// Size: 0x3b8 (Inherited: 0x380)
struct UMarkIconWidget : UMapMarkBase {
	struct FString AtlasPath; // 0x380(0x10)
	struct FString SpriteType; // 0x390(0x10)
	struct UImage* ImageMarker; // 0x3a0(0x08)
	char pad_3A8[0x10]; // 0x3a8(0x10)

	void SetTransparent(float TransparentPercent); // Function Solarland.MarkIconWidget.SetTransparent // (Final|Native|Public|BlueprintCallable) // @ game+0x1c92260
	void SetMarkerType(enum class EMarkerType Type, bool bRefreshSlot, bool bNeedSyncLoadIcon); // Function Solarland.MarkIconWidget.SetMarkerType // (Final|Native|Public|BlueprintCallable) // @ game+0x1c92000
};

// Class Solarland.MaterialVariableEffect
// Size: 0xd0 (Inherited: 0x50)
struct UMaterialVariableEffect : UActorEffect {
	struct TSoftObjectPtr<UMaterialInterface> NewMaterial; // 0x50(0x28)
	struct TArray<struct FMaterialVariableChange> VariableChanges; // 0x78(0x10)
	struct FAddMaterialChangeParams MaterialChangeParams; // 0x88(0x28)
	struct TArray<struct FSoftObjectPath> NoChangeMaterials; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
};

// Class Solarland.MeleeAttackAbility
// Size: 0x428 (Inherited: 0x418)
struct UMeleeAttackAbility : USolarGameplayAbility {
	struct TArray<struct UGameplayEffect*> Effects; // 0x418(0x10)
};

// Class Solarland.MemberStateBase
// Size: 0x268 (Inherited: 0x260)
struct UMemberStateBase : UUserWidget {
	char pad_260[0x4]; // 0x260(0x04)
	float MinimalSize; // 0x264(0x04)

	void UpdateWithCurrentMemberIndex(char CurrentIndex); // Function Solarland.MemberStateBase.UpdateWithCurrentMemberIndex // (Native|Event|Protected|BlueprintEvent) // @ game+0xb56550
	void UnbindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.UnbindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x1c96830
	void OnMinimalSizeSet(float NewSize); // Function Solarland.MemberStateBase.OnMinimalSizeSet // (Native|Event|Protected|BlueprintEvent) // @ game+0x1c95f80
	void ChangeMemberIndex(char NewIndex); // Function Solarland.MemberStateBase.ChangeMemberIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1c95660
	void BindMemberEvent(char MemberIndex); // Function Solarland.MemberStateBase.BindMemberEvent // (Native|Event|Protected|BlueprintEvent) // @ game+0x1c955e0
};

// Class Solarland.MemberNational
// Size: 0x278 (Inherited: 0x268)
struct UMemberNational : UMemberStateBase {
	struct UImage* ImgFlagIcon; // 0x268(0x08)
	char pad_270[0x8]; // 0x270(0x08)

	void RefreshFlag(int32_t InFlagID, bool bUsingClan); // Function Solarland.MemberNational.RefreshFlag // (Final|Native|Protected) // @ game+0x1c96350
	void OnPlayerFlagDisplayOptionChanged(bool bDisplay); // Function Solarland.MemberNational.OnPlayerFlagDisplayOptionChanged // (Final|Native|Protected) // @ game+0x1c96000
};

// Class Solarland.MeshComponentVisibilityConfig
// Size: 0x88 (Inherited: 0x30)
struct UMeshComponentVisibilityConfig : UDataAsset {
	struct FGameplayTagRequirements VisibleTagRequirements; // 0x30(0x50)
	struct FGameplayTag VisibilityFlagTag; // 0x80(0x08)

	struct FGameplayTagRequirements GetVisibleTagRequirements(); // Function Solarland.MeshComponentVisibilityConfig.GetVisibleTagRequirements // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c95d50
	struct FGameplayTag GetVisibilityFlagTag(); // Function Solarland.MeshComponentVisibilityConfig.GetVisibilityFlagTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c95d30
};

// Class Solarland.MicroPhoneOperationBase
// Size: 0x340 (Inherited: 0x340)
struct UMicroPhoneOperationBase : USolarUserWidget {

	void Init(struct UUserWidget* Owner); // Function Solarland.MicroPhoneOperationBase.Init // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseSpeakOperator(); // Function Solarland.MicroPhoneOperationBase.CloseSpeakOperator // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseMicOperator(); // Function Solarland.MicroPhoneOperationBase.CloseMicOperator // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.MiniMapBase
// Size: 0x398 (Inherited: 0x340)
struct UMiniMapBase : USolarUserWidget {
	int32_t MaxPool; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct TMap<struct FString, struct FMapMarkElemArray> MapMarkPool; // 0x348(0x50)

	void RemoveMarkIcon(struct UMapMarkBase* InMapMark); // Function Solarland.MiniMapBase.RemoveMarkIcon // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RemoveDotLineOnMap(int32_t DotLineID); // Function Solarland.MiniMapBase.RemoveDotLineOnMap // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RemoveAllMapMarks(); // Function Solarland.MiniMapBase.RemoveAllMapMarks // (Final|Native|Public|BlueprintCallable) // @ game+0x1c96430
	bool RecycleMapMark(struct FString MapMarkName, struct UMapMarkBase* MapMarkToRecycle); // Function Solarland.MiniMapBase.RecycleMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x1c96260
	void PlayVoiceOnMiniMap(enum class EMarkerType InVoiceType, struct FMapVoiceData& InVoiceData); // Function Solarland.MiniMapBase.PlayVoiceOnMiniMap // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c96180
	void MapScaleFormat(struct UMapMarkBase* MapMark); // Function Solarland.MiniMapBase.MapScaleFormat // (Native|Public|BlueprintCallable) // @ game+0x1c95e70
	struct UMapMarkBase* InitMarkIconOnMapFrame(struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIconOnMapFrame // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	struct UMapMarkBase* InitMarkIcon(struct UMapMarkBase* InMapMarkClass, struct FVector2D& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.MiniMapBase.InitMarkIcon // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void InitMapMarkPool(); // Function Solarland.MiniMapBase.InitMapMarkPool // (Final|Native|Public|BlueprintCallable) // @ game+0x1c95dd0
	struct UMapMarkBase* GetFreeMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.GetFreeMapMark // (Final|Native|Public|BlueprintCallable) // @ game+0x1c95c60
	bool EdgeSupportMarkFix(struct UMapMarkBase* InMarkInstance, struct FVector2D& FixedPos); // Function Solarland.MiniMapBase.EdgeSupportMarkFix // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	struct UMapMarkBase* CreateMapMark(struct FString MapMarkName); // Function Solarland.MiniMapBase.CreateMapMark // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t AddDotLineOnMap(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // Function Solarland.MiniMapBase.AddDotLineOnMap // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.MiniMapWidget
// Size: 0x728 (Inherited: 0x398)
struct UMiniMapWidget : UMiniMapBase {
	char pad_398[0x14]; // 0x398(0x14)
	bool bCanCheckEnemyState; // 0x3ac(0x01)
	bool bUseAsBigMap; // 0x3ad(0x01)
	bool AutoOffset; // 0x3ae(0x01)
	bool OnCar; // 0x3af(0x01)
	bool WithIconScale; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	float DeltaTime; // 0x3b4(0x04)
	float AspectRatio; // 0x3b8(0x04)
	float MapFOV; // 0x3bc(0x04)
	enum class EMapState CurrentState; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	struct FVector2D MapSize; // 0x3c4(0x08)
	struct FAnchors CenterAnchors; // 0x3cc(0x10)
	struct FVector2D IntersectionMarkSlotSize; // 0x3dc(0x08)
	struct FVector2D SelfNavSlotSize; // 0x3e4(0x08)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct TMap<int32_t, enum class EDirection> PartnerDirCacheMap; // 0x3f0(0x50)
	struct TMap<int32_t, struct UPlayerNavWidget*> PlayerNavMap; // 0x440(0x50)
	char pad_490[0x50]; // 0x490(0x50)
	struct TMap<int32_t, struct UMarkIconWidget*> PartnerInterSectionMap; // 0x4e0(0x50)
	struct UMapVoiceWidget* MapVoiceLayer; // 0x530(0x08)
	struct USizeBox* MapFOVSizeBox; // 0x538(0x08)
	struct UCanvasPanel* MapOffset; // 0x540(0x08)
	struct USolarImage* SolarImageMap; // 0x548(0x08)
	struct UCanvasPanel* ImageFrameLayer; // 0x550(0x08)
	struct UCanvasPanel* MarkerLayer; // 0x558(0x08)
	struct UScaleBox* MapScale; // 0x560(0x08)
	struct UCanvasPanel* RenderTargetCanvas; // 0x568(0x08)
	struct USolarImage* Img_EMP; // 0x570(0x08)
	struct UMeshRectangleWidget* IconMeshRectangleWidget; // 0x578(0x08)
	struct UMeshRectangleWidget* AnimIconMeshWidget; // 0x580(0x08)
	struct FConfigMiniMapMeshWidgetData MiniMapMeshWidgetConfigData; // 0x588(0x18)
	struct UPlayerNavWidget* SelfNav; // 0x5a0(0x08)
	struct FVector2D CurrentMapOffset; // 0x5a8(0x08)
	struct FVector2D MapIconScale; // 0x5b0(0x08)
	struct USolarMapManager* MapMgr; // 0x5b8(0x08)
	bool bBelongToBigMap; // 0x5c0(0x01)
	char pad_5C1[0x7]; // 0x5c1(0x07)
	struct TMap<enum class EAirdropStatus, struct FAirdropMeshWidgetData> AirdropMeshWidgetDataMap; // 0x5c8(0x50)
	float AdjustMapRatio; // 0x618(0x04)
	float AdjustWorldDis; // 0x61c(0x04)
	float AirdropAnimOutsideScale; // 0x620(0x04)
	float AirdropTickRate; // 0x624(0x04)
	float AirdropClearTime; // 0x628(0x04)
	char pad_62C[0x14]; // 0x62c(0x14)
	bool bUpdateSelfNav; // 0x640(0x01)
	char pad_641[0x7]; // 0x641(0x07)
	struct UCurveFloat* CacheFOVScaleCurve; // 0x648(0x08)
	char pad_650[0xd8]; // 0x650(0xd8)

	void VehicleClear(bool IsOwner); // Function Solarland.MiniMapWidget.VehicleClear // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateVehicleModeMapFOV(); // Function Solarland.MiniMapWidget.UpdateVehicleModeMapFOV // (Final|Native|Protected) // @ game+0x1c96c80
	void UpdatePoisonEffect(float PosX, float PosY, float Radius); // Function Solarland.MiniMapWidget.UpdatePoisonEffect // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c96b70
	void UpdateMeshWidgetMarkSlotSize(struct FString MarkKey, struct FVector2D& InMarkSlotSize); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkSlotSize // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c96a90
	void UpdateMeshWidgetMarkColorOpacityIndex(struct FString MarkKey, int32_t InColorOpacityIndex); // Function Solarland.MiniMapWidget.UpdateMeshWidgetMarkColorOpacityIndex // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c969b0
	void UpdateMeshWidgetIconTexId(struct FString MarkKey, int32_t InIconTexId); // Function Solarland.MiniMapWidget.UpdateMeshWidgetIconTexId // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c968d0
	void UpdateEmp(); // Function Solarland.MiniMapWidget.UpdateEmp // (Final|Native|Protected) // @ game+0x1c968b0
	void SetMapFOVBySpeed(float InSpeed); // Function Solarland.MiniMapWidget.SetMapFOVBySpeed // (Final|Native|Protected) // @ game+0x1c967b0
	void SetMapFOVAutoOffset(float InNewFOV); // Function Solarland.MiniMapWidget.SetMapFOVAutoOffset // (Final|Native|Public) // @ game+0x1c96730
	void SetMapFOV(float InNewFOV, struct FVector2D& InScaleCenter); // Function Solarland.MiniMapWidget.SetMapFOV // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1c96660
	void SetBelongToBigMap(bool bIsBelongToBigMap); // Function Solarland.MiniMapWidget.SetBelongToBigMap // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c965d0
	void SetAirdropMeshWidgetStatus(struct FString InKey, enum class EAirdropStatus InNewStatus); // Function Solarland.MiniMapWidget.SetAirdropMeshWidgetStatus // (Final|Native|Public) // @ game+0x1c964f0
	void RemoveMeshWidgetMark(struct FString MarkKey); // Function Solarland.MiniMapWidget.RemoveMeshWidgetMark // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c96450
	void RegisterDataProvider(); // Function Solarland.MiniMapWidget.RegisterDataProvider // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c96410
	void RefreshLastVehicleLocation(); // Function Solarland.MiniMapWidget.RefreshLastVehicleLocation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.MiniMapWidget.OnSpecTargetChanged // (Native|Public) // @ game+0x1c960b0
	void OnReconnect(); // Function Solarland.MiniMapWidget.OnReconnect // (Final|Native|Protected) // @ game+0x1c96090
	void OnFOVScaleChangedByPoison(struct UCurveFloat* InCurve); // Function Solarland.MiniMapWidget.OnFOVScaleChangedByPoison // (Final|Native|Protected) // @ game+0x1c95f00
	void IconSizeFormat(); // Function Solarland.MiniMapWidget.IconSizeFormat // (Final|Native|Protected) // @ game+0x1c95db0
	struct UPlayerNavWidget* GetSelfNav(); // Function Solarland.MiniMapWidget.GetSelfNav // (Final|Native|Public|BlueprintCallable) // @ game+0x1c95d10
	struct ASolarPlayerState* GetCameraFocusedCharacterState(); // Function Solarland.MiniMapWidget.GetCameraFocusedCharacterState // (Final|Native|Public) // @ game+0x1c95c30
	void ClearVehicleMarkWidget(); // Function Solarland.MiniMapWidget.ClearVehicleMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ClearPlayerMarkPoint(); // Function Solarland.MiniMapWidget.ClearPlayerMarkPoint // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ClearMiniMapMarkWidget(); // Function Solarland.MiniMapWidget.ClearMiniMapMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void AdjustMapOffset(struct FVector2D MapLocation); // Function Solarland.MiniMapWidget.AdjustMapOffset // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x1c95560
	struct FString AddMeshWidgetMark(struct FVector2D& InPosition, struct FVector2D& InMarkSlotSize, enum class EMarkerType InMarkType, float InRenderTransformScaleX, struct FString InMarkName, int32_t InMarkIndex); // Function Solarland.MiniMapWidget.AddMeshWidgetMark // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1c95330
};

// Class Solarland.MMC_GenericCooldown
// Size: 0x40 (Inherited: 0x40)
struct UMMC_GenericCooldown : UGameplayModMagnitudeCalculation {
};

// Class Solarland.MobileWidgetDebuggerLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebuggerLibrary : UBlueprintFunctionLibrary {

	bool IsWidgetFastPathVisible(struct UWidget* InWidget); // Function Solarland.MobileWidgetDebuggerLibrary.IsWidgetFastPathVisible // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c95df0
	struct TArray<struct UUserWidget*> GetAllWidgetClass(struct UObject* WorldContextObject, bool bIncludeDebug); // Function Solarland.MobileWidgetDebuggerLibrary.GetAllWidgetClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1c95b20
	struct UUserWidget* ConvertToUserWidgetClass(struct UObject* InObject); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToUserWidgetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c95760
	struct UObject* ConvertToObject(struct UUserWidget* InClass); // Function Solarland.MobileWidgetDebuggerLibrary.ConvertToObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c956e0
};

// Class Solarland.MobileWidgetDebugger
// Size: 0x28 (Inherited: 0x28)
struct UMobileWidgetDebugger : UObject {

	struct UWidget* FindWidget(struct UUserWidget* BaseWidgetClass, struct TArray<struct FName> WidgetRelationList, struct TArray<struct FString>& OutErrorMsg, bool bPrintLog); // Function Solarland.MobileWidgetDebugger.FindWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c95930
	struct UMobileWidgetDebugger* Create(struct UObject* Outer); // Function Solarland.MobileWidgetDebugger.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1c957f0
};

// Class Solarland.ModMagnitudeCalcProxy
// Size: 0x30 (Inherited: 0x28)
struct UModMagnitudeCalcProxy : UObject {
	struct TWeakObjectPtr<struct USolarModMagnitudeCalc> CDOOwner; // 0x28(0x08)

	struct UModMagnitudeCalcProxy* CreateProxy(struct USolarModMagnitudeCalc* InCDOOwner, struct UModMagnitudeCalcProxy* ProxyClass); // Function Solarland.ModMagnitudeCalcProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1c95870
	float CalculateBaseMagnitude(struct FGameplayEffectSpec& Spec); // Function Solarland.ModMagnitudeCalcProxy.CalculateBaseMagnitude // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x224bbb0
};

// Class Solarland.MultiplePassMaterialEffect
// Size: 0xc8 (Inherited: 0x50)
struct UMultiplePassMaterialEffect : UActorEffect {
	struct FMultiplePassMaterialChange MaterialChange; // 0x50(0x68)
	char pad_B8[0x10]; // 0xb8(0x10)
};

// Class Solarland.NgaiAIControllerComponent
// Size: 0x220 (Inherited: 0xb0)
struct UNgaiAIControllerComponent : UActorComponent {
	struct ASolarCharacterBase* EnemyCharacterBase; // 0xb0(0x08)
	char pad_B8[0x168]; // 0xb8(0x168)
};

// Class Solarland.NgaiGameModeComponent
// Size: 0x19218 (Inherited: 0xd0)
struct UNgaiGameModeComponent : UGameModeCompBase {
	char pad_D0[0x19148]; // 0xd0(0x19148)
};

// Class Solarland.NoticeMapBase
// Size: 0x340 (Inherited: 0x340)
struct UNoticeMapBase : USolarUserWidget {

	void SetMap(int32_t MapID); // Function Solarland.NoticeMapBase.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9cd10
	void LuaInitMap(int32_t MapID); // Function Solarland.NoticeMapBase.LuaInitMap // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.OBBigMapPopupWidget
// Size: 0x340 (Inherited: 0x340)
struct UOBBigMapPopupWidget : USolarUserWidget {

	void OnSpectateTargetChanged(); // Function Solarland.OBBigMapPopupWidget.OnSpectateTargetChanged // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBBigMapPopupWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1c9c470
};

// Class Solarland.OBDetailData
// Size: 0x78 (Inherited: 0x28)
struct UOBDetailData : UObject {
	struct ASolarPlayerState* SolarPlayerState; // 0x28(0x08)
	struct FDetailedListViewInfo DetailedListViewInfo; // 0x30(0x40)
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.OBSettlementBase
// Size: 0x348 (Inherited: 0x340)
struct UOBSettlementBase : USolarUserWidget {
	struct UOBSettlementRoot* OBSettleRoot; // 0x340(0x08)
};

// Class Solarland.OBDetailedDataList
// Size: 0x3e8 (Inherited: 0x348)
struct UOBDetailedDataList : UOBSettlementBase {
	struct UWidgetSwitcher* Btn_Switcher; // 0x348(0x08)
	struct USolarTextBlock* Txt_TeamName; // 0x350(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x358(0x08)
	struct UListView* PlayerListPanel; // 0x360(0x08)
	struct USolarImage* Img_TitleBox; // 0x368(0x08)
	struct USolarImage* Img_TitleBg; // 0x370(0x08)
	struct USolarImage* Img_TitleBox_3; // 0x378(0x08)
	char pad_380[0x18]; // 0x380(0x18)
	struct TArray<struct ASCMPlayerState*> AllTeammatePS; // 0x398(0x10)
	struct ASCMPlayerState* MVPPlayerState; // 0x3a8(0x08)
	struct UOBDetailData* TeamRowDataObject; // 0x3b0(0x08)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfos; // 0x3b8(0x10)
	char pad_3C8[0x20]; // 0x3c8(0x20)

	void RefreshWindow(bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.RefreshWindow // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RefreshRankColor(int32_t InRank); // Function Solarland.OBDetailedDataList.RefreshRankColor // (Final|Native|Private) // @ game+0x1c9cc90
	void InitPlayerCompetitionDetailWindow(struct TArray<struct FDetailedListViewInfo> DetailedListViewInfos, struct FString TeamName, int32_t InRank, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitPlayerCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9c1e0
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x1c95e70
	void InitCompetitionDetailWindow(struct FDetailedTeamListViewInfo DetailedTeamListViewInfo, bool bIsPopDetailWindow); // Function Solarland.OBDetailedDataList.InitCompetitionDetailWindow // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9bf70
	void InitAsDetailWindow(struct FString InSideName, int32_t& InRank, struct UOBSettlementRoot* InOwner); // Function Solarland.OBDetailedDataList.InitAsDetailWindow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c9be50
};

// Class Solarland.SolarUserLuaWidget
// Size: 0x340 (Inherited: 0x340)
struct USolarUserLuaWidget : USolarUserWidget {

	void OnInitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.OnInitWidgetLuaLogic // (Native|Event|Public|BlueprintEvent) // @ game+0x1259730
	void InitWidgetLuaLogic(); // Function Solarland.SolarUserLuaWidget.InitWidgetLuaLogic // (Final|Native|Public|BlueprintCallable) // @ game+0x1eca610
};

// Class Solarland.OBDetailedDataRow
// Size: 0x3a0 (Inherited: 0x340)
struct UOBDetailedDataRow : USolarUserLuaWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct USolarImage* Image_MVP; // 0x348(0x08)
	struct UUIComponentNationalFlag* UI_NationalFlag; // 0x350(0x08)
	struct USolarTextBlock* Txt_Name; // 0x358(0x08)
	struct USolarTextBlock* Txt_KillNum; // 0x360(0x08)
	struct USolarTextBlock* Txt_AssistNum; // 0x368(0x08)
	struct USolarTextBlock* Txt_DMGDealt; // 0x370(0x08)
	struct USolarTextBlock* Txt_DMGTaken; // 0x378(0x08)
	struct USolarTextBlock* Txt_HPRestored; // 0x380(0x08)
	struct USolarTextBlock* Txt_Time; // 0x388(0x08)
	struct USolarTextBlock* Txt_MVPSCore; // 0x390(0x08)
	struct UOBDetailData* DetailRowData; // 0x398(0x08)

	void InitWidget(); // Function Solarland.OBDetailedDataRow.InitWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InitDetailedDataRow(struct UObject* ListItemObject); // Function Solarland.OBDetailedDataRow.InitDetailedDataRow // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void EnableMVPTag(bool bIsMVP); // Function Solarland.OBDetailedDataRow.EnableMVPTag // (Final|Native|Private) // @ game+0x1c9bd30
};

// Class Solarland.OBEnterDirectorModeWidget
// Size: 0x340 (Inherited: 0x340)
struct UOBEnterDirectorModeWidget : USolarUserWidget {
};

// Class Solarland.OBFreeViewControlWidget
// Size: 0x360 (Inherited: 0x340)
struct UOBFreeViewControlWidget : USolarUserWidget {
	struct UWalkWidgetNew* ViewJoyStick; // 0x340(0x08)
	struct USolarInputButton* Btn_Up; // 0x348(0x08)
	struct USolarInputButton* Btn_Down; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)

	void SetOBFreeViewUpAndDownButtonVisibility(bool bVisible); // Function Solarland.OBFreeViewControlWidget.SetOBFreeViewUpAndDownButtonVisibility // (Final|Native|Public) // @ game+0x1c9cd90
	void OnUpdateWidgetVisibility(); // Function Solarland.OBFreeViewControlWidget.OnUpdateWidgetVisibility // (Final|Native|Public) // @ game+0x1c9cc70
	void OnUISettingUIOperationChanged(bool bVisible); // Function Solarland.OBFreeViewControlWidget.OnUISettingUIOperationChanged // (Final|Native|Public) // @ game+0x1c9cbc0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBFreeViewControlWidget.OnSpectateTargetChanged // (Final|Native|Public) // @ game+0x1c9c9d0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBFreeViewControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x1c9c500
};

// Class Solarland.OBGlobalControlWidget
// Size: 0x440 (Inherited: 0x340)
struct UOBGlobalControlWidget : USolarUserWidget {
	bool bIsPCStyleForDesign; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct USolarButton* Btn_SwitchPerspective; // 0x348(0x08)
	struct UWidgetSwitcher* Switcher_Perspective; // 0x350(0x08)
	struct USolarButton* Btn_SwitchPlayer; // 0x358(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Visibility; // 0x360(0x08)
	struct USolarButton* Btn_SwitchUIVisibility; // 0x368(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Player; // 0x370(0x08)
	struct USolarButton* Btn_SwitchPlay; // 0x378(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Play; // 0x380(0x08)
	struct UImage* Img_SwitchPlayerSlc; // 0x388(0x08)
	struct UImage* Img_UIVisibilitySlc; // 0x390(0x08)
	struct UCanvasPanel* Panel_Mobile; // 0x398(0x08)
	struct UCanvasPanel* Panel_Player_List_PC; // 0x3a0(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup_PC; // 0x3a8(0x08)
	struct UOBTeamListPopupWidget* UI_OB_TeamList_Popup; // 0x3b0(0x08)
	struct UHorizontalBox* HorizontalBox_List_Shortcut; // 0x3b8(0x08)
	struct UCanvasPanel* Panel_UIItemSetting; // 0x3c0(0x08)
	struct USolarCheckBox* CheckBox_UIAll; // 0x3c8(0x08)
	struct USolarCheckBox* CheckBox_PlayerInfo; // 0x3d0(0x08)
	struct USolarCheckBox* CheckBox_UIOperation; // 0x3d8(0x08)
	struct USolarUserWidget* UI_OB_HUD_ShortcutKey; // 0x3e0(0x08)
	struct UCanvasPanel* Panel_BattleUI_Map; // 0x3e8(0x08)
	struct UCanvasPanel* Panel_Loading; // 0x3f0(0x08)
	struct UUserWidget* OB_BattleUI_Map; // 0x3f8(0x08)
	struct UUserWidget* SafeAreaProgressUI; // 0x400(0x08)
	struct UOBProgressBar* UI_OB_ProgressBar; // 0x408(0x08)
	struct UButton* MapSwitcher; // 0x410(0x08)
	struct UWidgetAnimation* Anim_Setting_In; // 0x418(0x08)
	struct UWidgetAnimation* Anim_Setting_Exit; // 0x420(0x08)
	char pad_428[0x8]; // 0x428(0x08)
	struct UOBTeamListPopupWidget* CurrentTeamList; // 0x430(0x08)
	char pad_438[0x8]; // 0x438(0x08)

	void SetShortCutKeyMode(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.SetShortCutKeyMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnToggleShortCutKey(); // Function Solarland.OBGlobalControlWidget.OnToggleShortCutKey // (Final|Native|Private) // @ game+0x1c9cb10
	void OnToggleProgressControlButton(); // Function Solarland.OBGlobalControlWidget.OnToggleProgressControlButton // (Final|Native|Private) // @ game+0x1c9caf0
	void OnToggleProgress(); // Function Solarland.OBGlobalControlWidget.OnToggleProgress // (Final|Native|Private) // @ game+0x1c9cad0
	void OnTogglePlayerList(); // Function Solarland.OBGlobalControlWidget.OnTogglePlayerList // (Final|Native|Private) // @ game+0x1c9cab0
	void OnTogglePlayerInfo(); // Function Solarland.OBGlobalControlWidget.OnTogglePlayerInfo // (Final|Native|Private) // @ game+0x1c9ca90
	void OnPreConstruct(bool IsDesignTime); // Function Solarland.OBGlobalControlWidget.OnPreConstruct // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9c920
	void OnPlayingScrubCharactersCreated(); // Function Solarland.OBGlobalControlWidget.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x1c9c900
	void OnOBSpectateChanged(); // Function Solarland.OBGlobalControlWidget.OnOBSpectateChanged // (Final|Native|Private) // @ game+0x8ba190
	void OnCheckBoxUIOperationStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIOperationStateChanged // (Final|Native|Private) // @ game+0x1c9c870
	void OnCheckBoxUIAllStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxUIAllStateChanged // (Final|Native|Private) // @ game+0x1c9c7e0
	void OnCheckBoxPlayerInfoStateChanged(bool bIsChecked); // Function Solarland.OBGlobalControlWidget.OnCheckBoxPlayerInfoStateChanged // (Final|Native|Private) // @ game+0x1c9c750
	void OnBtnSwitchUIVisibilityClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchUIVisibilityClicked // (Final|Native|Private) // @ game+0x1c9c730
	void OnBtnSwitchPlayerClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayerClicked // (Final|Native|Private) // @ game+0x1c9c710
	void OnBtnSwitchPlayClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPlayClicked // (Final|Native|Private) // @ game+0x1c9c6f0
	void OnBtnSwitchPerspectiveClicked(); // Function Solarland.OBGlobalControlWidget.OnBtnSwitchPerspectiveClicked // (Final|Native|Private) // @ game+0x1c9c6d0
	void OnBigMapOpen(); // Function Solarland.OBGlobalControlWidget.OnBigMapOpen // (Final|Native|Private) // @ game+0x1c9c6b0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalControlWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1c9c590
};

// Class Solarland.OBGlobalInfoWidget
// Size: 0x358 (Inherited: 0x340)
struct UOBGlobalInfoWidget : USolarUserWidget {
	struct UTextBlock* Text_PlayerNum; // 0x340(0x08)
	struct UTextBlock* Text_TeamNum; // 0x348(0x08)
	struct USolarOBUIModule* SolarOBUIModule; // 0x350(0x08)

	void UpdateRemainPanelView(); // Function Solarland.OBGlobalInfoWidget.UpdateRemainPanelView // (Final|Native|Private) // @ game+0x1c9ce40
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBGlobalInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1c9c620
};

// Class Solarland.OBHeadInfoMeshWidget
// Size: 0x5d0 (Inherited: 0x340)
struct UOBHeadInfoMeshWidget : USolarUserWidget {
	struct USizeBox* SizeBox_Container; // 0x340(0x08)
	struct UCanvasPanel* Panel_Info; // 0x348(0x08)
	struct UMeshRectangleWidget* TeamMeshWidget; // 0x350(0x08)
	struct UMeshRectangleWidget* OB_Shield; // 0x358(0x08)
	struct UMeshRectangleWidget* OB_Shield_Damage; // 0x360(0x08)
	struct UMeshRectangleWidget* OB_Shield_BG; // 0x368(0x08)
	struct UMeshRectangleWidget* OB_HP; // 0x370(0x08)
	struct UMeshRectangleWidget* OB_HP_Damage; // 0x378(0x08)
	struct UMeshRectangleWidget* OB_HP_BG; // 0x380(0x08)
	struct UMeshRectangleWidget* OB_HeadInfo_BG; // 0x388(0x08)
	struct UMeshRectangleWidget* OB_Progress_BG; // 0x390(0x08)
	struct UScaleBox* ScaleBox_NickName; // 0x398(0x08)
	struct UTextBlock* Text_NickName; // 0x3a0(0x08)
	struct FConfigMeshData ConfigMeshData; // 0x3a8(0xe8)
	float ProgressEasingSpeed; // 0x490(0x04)
	struct FLinearColor HPColorNormal; // 0x494(0x10)
	struct FLinearColor HPColorDying; // 0x4a4(0x10)
	struct FLinearColor IncreaseColor; // 0x4b4(0x10)
	struct FLinearColor DecreaseColor; // 0x4c4(0x10)
	char pad_4D4[0xfc]; // 0x4d4(0xfc)

	void UpdateMeshProviderData(); // Function Solarland.OBHeadInfoMeshWidget.UpdateMeshProviderData // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c9ce20
	void OnUISettingHeadInfoChanged(bool bShow); // Function Solarland.OBHeadInfoMeshWidget.OnUISettingHeadInfoChanged // (Final|Native|Private) // @ game+0x1c9cb30
	void OnScrubCharactersCreated(); // Function Solarland.OBHeadInfoMeshWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x1c9c9b0
};

// Class Solarland.OBHeadInfoWidget
// Size: 0x3b8 (Inherited: 0x340)
struct UOBHeadInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x340(0x08)
	struct USolarImage* Image_Frame; // 0x348(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x350(0x08)
	struct USolarImage* Image_TeamBG_Middle; // 0x358(0x08)
	struct USolarImage* Image_Frame_Middle; // 0x360(0x08)
	struct USolarTextBlock* Text_TeamNum_Middle; // 0x368(0x08)
	struct UTextBlock* Text_NickName; // 0x370(0x08)
	struct FOBTeammateInfo Data; // 0x378(0x38)
	char pad_3B0[0x8]; // 0x3b0(0x08)

	void UpdatePlayerHeadInfoWidgetStyle(enum class EOBPlayerHeadInfoWidgetStyle InHeadInfoWidgetStyle); // Function Solarland.OBHeadInfoWidget.UpdatePlayerHeadInfoWidgetStyle // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateDistanceBetweenPlayerAndOBCamera(); // Function Solarland.OBHeadInfoWidget.OnUpdateDistanceBetweenPlayerAndOBCamera // (Final|Native|Public) // @ game+0x1c9cc50
	enum class EOBPlayerHeadInfoWidgetStyle GetHeadInfoWidgetStyleFromDistance(float InDistance); // Function Solarland.OBHeadInfoWidget.GetHeadInfoWidgetStyleFromDistance // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c9bdc0
};

// Class Solarland.HUDDispatcherBase
// Size: 0x10c0 (Inherited: 0x28)
struct UHUDDispatcherBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnTeammateStateReplicated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateReplicated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCharacterPSInGameChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnPlayerOperationInGameChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenPreparation; // 0x70(0x10)
	struct FMulticastInlineDelegate OnTeammatePSRemoveWhenBattle; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTeammateHPChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTeammateShieldChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveItemChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveManagerChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnTeammateReviveStateChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnTeammateNetStateChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnNavMapMarked; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnNavMapMarkCleared; // 0x100(0x10)
	struct FMulticastInlineDelegate OnTalentInitialized; // 0x110(0x10)
	struct FMulticastInlineDelegate OnTeammateCharacterIdChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnTeammateSkinIdChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnLevelChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnSkillCDStateChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnTeammateTalentStateChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnSpecTargetChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnSkydivingLeaderIndexReplicated; // 0x180(0x10)
	struct FMulticastInlineDelegate OnSkydivingMemberStatusUpdated; // 0x190(0x10)
	struct FMulticastInlineDelegate OnSkydivingFollowInvitationResponded; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnSkydivingLeaderTransferResponded; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnSkydiveFollowDisabled; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnSkydiveFollowEnabled; // 0x1d0(0x10)
	struct FDelegate TrySkydiveUnfollow; // 0x1e0(0x10)
	char pad_1F0[0x30]; // 0x1f0(0x30)
	struct FMulticastInlineDelegate OnBindHPPanelDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate OnBindItemPanelDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate OnBindPowerBarDelegate; // 0x240(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackItemDelegate; // 0x250(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackEquipDelegate; // 0x260(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponDelegate; // 0x270(0x10)
	struct FMulticastInlineDelegate OnRefreshBackpackWeaponPartDelegate; // 0x280(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxBtnDelegate; // 0x290(0x10)
	struct FMulticastInlineDelegate OnSetActiveOpenBoxProgressDelegate; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnSetTreasureBoxActorDelegate; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnSetAirdropBoxActorDelegate; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnHideTreasureBoxUIDelegate; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnHideAirdropBoxUIDelegate; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnSetPickupSwitchDelegate; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnAirdropCharChangeDelegate; // 0x300(0x10)
	struct FMulticastInlineDelegate OnAirdropProgressChangeDelegate; // 0x310(0x10)
	struct FMulticastInlineDelegate OnPlayerNumberChanged; // 0x320(0x10)
	struct FMulticastInlineDelegate OnCapsulePlayerNumChanged; // 0x330(0x10)
	struct FMulticastInlineDelegate OnBombingStarted; // 0x340(0x10)
	struct FMulticastInlineDelegate OnBombingStopped; // 0x350(0x10)
	struct FMulticastInlineDelegate OnItemDiscarded; // 0x360(0x10)
	struct FMulticastInlineDelegate OnSettingRequestOpened; // 0x370(0x10)
	struct FMulticastInlineDelegate OnSettingRequestClosed; // 0x380(0x10)
	struct FMulticastInlineDelegate OnMigrateAccountVisibilityRequestChanged; // 0x390(0x10)
	struct FMulticastInlineDelegate OnCustomizeVisibilityRequestChanged; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeOpened; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnDriveCustomizeClosed; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnBackpackTookPickup; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnBackpackReleasedPickup; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnToggleCursorVisibility; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnBackpackVisibilitySet; // 0x400(0x10)
	struct FMulticastInlineDelegate OnElectricShopVisibilitySet; // 0x410(0x10)
	struct FMulticastInlineDelegate OnBigMapVisibilitySet; // 0x420(0x10)
	struct FMulticastInlineDelegate OnRescueBtnVisibilitySet; // 0x430(0x10)
	struct FMulticastInlineDelegate OnBuyResurrectBtnVisibilitySet; // 0x440(0x10)
	struct FMulticastInlineDelegate OnBigMapCloseButtonClicked; // 0x450(0x10)
	struct FMulticastInlineDelegate OnPickupFlagChanged; // 0x460(0x10)
	struct FMulticastInlineDelegate OnPickupListVisibilityChanged; // 0x470(0x10)
	struct FMulticastInlineDelegate OnPickupItemSet; // 0x480(0x10)
	struct FMulticastInlineDelegate OnPickupItemCalculated; // 0x490(0x10)
	struct FMulticastInlineDelegate OnPickupCheckValidUpdated; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnPickupCheckHighlightUpdated; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnPickupCheckStatesUpdated; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnPickupItemSelected; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnTogglePickupDelegate; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnPlayerDead; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnJoyStickSprintStateReset; // 0x500(0x10)
	struct FMulticastInlineDelegate OnJoyStickInputReset; // 0x510(0x10)
	struct FMulticastInlineDelegate OnJoyStickResetAll; // 0x520(0x10)
	struct FDelegate OnTutorialGettingWidget; // 0x530(0x10)
	struct FMulticastInlineDelegate OnBattleTutorialWidgetDisplayed; // 0x540(0x10)
	struct FMulticastInlineDelegate OnTutorialSequenceRequested; // 0x550(0x10)
	struct FMulticastInlineDelegate OnDrivingTutorialStopped; // 0x560(0x10)
	struct FMulticastInlineDelegate OnFireButtonsInputReset; // 0x570(0x10)
	bool bBackpackVisible; // 0x580(0x01)
	bool bElectricShopVisible; // 0x581(0x01)
	bool bBigMapVisible; // 0x582(0x01)
	bool bRescueBtnVisible; // 0x583(0x01)
	bool bBuyResurrectBtnVisible; // 0x584(0x01)
	char pad_585[0x3]; // 0x585(0x03)
	struct FMulticastInlineDelegate OnInBattle; // 0x588(0x10)
	struct FMulticastInlineDelegate OnNotInBattle; // 0x598(0x10)
	struct FMulticastInlineDelegate OnRadarStationUpdated; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnAngleViewEnabled; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnCharacterSwimStateChanged; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnCharacterWaterClimbAvailable; // 0x5d8(0x10)
	struct FDelegate OnHitTraceUpdated; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnHitTraceRemoved; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnHitTraceCleared; // 0x608(0x10)
	struct FMulticastInlineDelegate OnProfessionFunctionalChanged; // 0x618(0x10)
	struct FMulticastInlineDelegate OnBackpackModeChanged; // 0x628(0x10)
	struct FMulticastInlineDelegate OnPickupListAdd; // 0x638(0x10)
	struct FMulticastInlineDelegate OnPickupListRemove; // 0x648(0x10)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x658(0x10)
	struct FMulticastInlineDelegate OnRepliableMessageChanged; // 0x668(0x10)
	struct FMulticastInlineDelegate OnPlayerFlagDisplayChanged; // 0x678(0x10)
	struct FMulticastInlineDelegate OnSpectateModeEntered; // 0x688(0x10)
	struct FMulticastInlineDelegate OnSpectateModeExited; // 0x698(0x10)
	struct FMulticastInlineDelegate OnSpectateReferToChanged; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetItemsChanged; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonHoverChanged; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonTouchMoved; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonBeenLongPressed; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnMarkButtonDragSelectEnded; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnBattleModeChanged; // 0x708(0x10)
	char pad_718[0x8]; // 0x718(0x08)
	struct FMulticastInlineDelegate OnCharacterSet; // 0x720(0x10)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x730(0x10)
	struct FMulticastInlineDelegate OnCharacterHPChanged; // 0x740(0x10)
	char pad_750[0x10]; // 0x750(0x10)
	struct FMulticastInlineDelegate OnCharacterDead; // 0x760(0x10)
	struct FMulticastInlineDelegate OnCharacterEnterWater; // 0x770(0x10)
	struct FMulticastInlineDelegate OnCharacterSelfRebirth; // 0x780(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelUp; // 0x790(0x10)
	struct FMulticastInlineDelegate OnCharacterGainExp; // 0x7a0(0x10)
	struct FMulticastInlineDelegate OnCharacterLevelExpChanged; // 0x7b0(0x10)
	struct FMulticastInlineDelegate OnBattleUpgradeEffect; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectBegin; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnSelectingBattleUpgradeEffectFinish; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnSpectateBattleUpgradeEffectUpdate; // 0x7f0(0x10)
	struct FMulticastInlineDelegate OnTeammateRebirth; // 0x800(0x10)
	struct FMulticastInlineDelegate OnDamagingActorsChange; // 0x810(0x10)
	char pad_820[0x10]; // 0x820(0x10)
	struct FMulticastInlineDelegate OnRapidBoostActivationChanged; // 0x830(0x10)
	struct FMulticastInlineDelegate OnTrySpawnSuperRadar; // 0x840(0x10)
	struct FMulticastInlineDelegate OnSuperScaningStart; // 0x850(0x10)
	struct FMulticastInlineDelegate OnSuperScaningRemovePlayer; // 0x860(0x10)
	struct FMulticastInlineDelegate OnSuperScaningEnd; // 0x870(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveForward; // 0x880(0x10)
	struct FMulticastInlineDelegate OnSuperScanCameraMoveRight; // 0x890(0x10)
	struct FMulticastInlineDelegate OnSuperScaningWidgetShow; // 0x8a0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityChange; // 0x8b0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCD; // 0x8c0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEndCD; // 0x8d0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityCDDurationChange; // 0x8e0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStartCDUTCTimeUpdate; // 0x8f0(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityStateChange; // 0x900(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityEnd; // 0x910(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityContinous; // 0x920(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffContinous; // 0x930(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffEnd; // 0x940(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffPause; // 0x950(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityBuffResume; // 0x960(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityHideControlHUD; // 0x970(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityInputAction; // 0x980(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityAddSummonBuff; // 0x990(0x10)
	struct FMulticastInlineDelegate OnRoleAbilityUsingStatusChanged; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnCharacterNightComesActorChanged; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnRoleGEShieldMultiRecoverCoolDownEffect; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged01; // 0x9d0(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged02; // 0x9e0(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged03; // 0x9f0(0x10)
	struct FMulticastInlineDelegate OnMemberFlagIDChanged04; // 0xa00(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetRemoved; // 0xa10(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetAdded; // 0xa20(0x10)
	struct FMulticastInlineDelegate OnSideAttributeSetChanged; // 0xa30(0x10)
	struct FMulticastInlineDelegate OnDrivingStateChanged; // 0xa40(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeInitialized; // 0xa50(0x10)
	struct FMulticastInlineDelegate OnVehicleScopeValueChanged; // 0xa60(0x10)
	struct FMulticastInlineDelegate OnEquipVehicleWeaponDelegate; // 0xa70(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponScopeDelegate; // 0xa80(0x10)
	struct FMulticastInlineDelegate OnTransformerChangeWeaponDelegate; // 0xa90(0x10)
	struct FMulticastInlineDelegate OnVehicleTypeChangeDelegate; // 0xaa0(0x10)
	struct FMulticastInlineDelegate OnVehicleWeaponNoAmmoAlert; // 0xab0(0x10)
	struct FMulticastInlineDelegate OnVehicleAbilityActivationChanged; // 0xac0(0x10)
	struct FMulticastInlineDelegate OnInputSprintLockStart; // 0xad0(0x10)
	struct FMulticastInlineDelegate OnSprintIconActived; // 0xae0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0xaf0(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActived; // 0xb00(0x10)
	struct FMulticastInlineDelegate OnTeamMessageReceive; // 0xb10(0x10)
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0xb20(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0xb30(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0xb40(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0xb50(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0xb60(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0xb70(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0xb80(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0xb90(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0xba0(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0xbb0(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0xbc0(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0xbd0(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0xbe0(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0xbf0(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0xc00(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0xc10(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0xc20(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0xc30(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0xc40(0x10)
	struct FMulticastInlineDelegate OnShowGameNoticeDelegate; // 0xc50(0x10)
	struct FMulticastInlineDelegate OnStartCountDownDelegate; // 0xc60(0x10)
	struct FMulticastInlineDelegate OnStopCountDownDelegate; // 0xc70(0x10)
	struct FMulticastInlineDelegate OnHideInteractionListRequested; // 0xc80(0x10)
	struct FMulticastInlineDelegate OnCancelHideInteractionListRequested; // 0xc90(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerAppear; // 0xca0(0x10)
	struct FMulticastInlineDelegate OnInteractionTriggerDisappear; // 0xcb0(0x10)
	struct FMulticastInlineDelegate OnStartInteractionCountDown; // 0xcc0(0x10)
	struct FMulticastInlineDelegate OnStopInteractionCountDown; // 0xcd0(0x10)
	struct FMulticastInlineDelegate OnStartReviveTeammateCountDownDelegate; // 0xce0(0x10)
	struct FMulticastInlineDelegate OnStopReviveTeammateCountDownDelegate; // 0xcf0(0x10)
	struct FMulticastInlineDelegate OnReviveWillBeDisabledHintDelegate; // 0xd00(0x10)
	struct FMulticastInlineDelegate OnStartReviveItemRecycleCountDownDelegate; // 0xd10(0x10)
	char pad_D20[0x10]; // 0xd20(0x10)
	struct FMulticastInlineDelegate OnOverlapElectricShopDelegate; // 0xd30(0x10)
	struct FMulticastInlineDelegate OnUpdateVehicleInteractionDelegate; // 0xd40(0x10)
	struct FMulticastInlineDelegate OnCruiseHeightSet; // 0xd50(0x10)
	struct FMulticastInlineDelegate OnEnterCruisingDelegate; // 0xd60(0x10)
	struct FMulticastInlineDelegate OnEnterParachutingDelegate; // 0xd70(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0xd80(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponUpgradeDelegate; // 0xd90(0x10)
	struct FMulticastInlineDelegate OnEShopShieldUpgradeDelegate; // 0xda0(0x10)
	struct FMulticastInlineDelegate OnEShopPurchaseSuccessDelegate; // 0xdb0(0x10)
	struct FMulticastInlineDelegate OnEShopItemCDRefreshDelegate; // 0xdc0(0x10)
	struct FMulticastInlineDelegate OnEShopItemRefreshDelegate; // 0xdd0(0x10)
	struct FMulticastInlineDelegate OnEShopSlotWeaponUpgradeDelegate; // 0xde0(0x10)
	struct FMulticastInlineDelegate OnEShopWeaponChangeDelegate; // 0xdf0(0x10)
	struct FMulticastInlineDelegate OnEShopPoolRefreshDelegate; // 0xe00(0x10)
	struct FMulticastInlineDelegate TryOpenElectricShopDelegate; // 0xe10(0x10)
	struct FDelegate OnTeammateHomePanelGetting; // 0xe20(0x10)
	struct FDelegate OnHomeBattleUIGetting; // 0xe30(0x10)
	struct FDelegate OnHomeMainBuildGetting; // 0xe40(0x10)
	struct FDelegate OnHomeFriendListGetting; // 0xe50(0x10)
	struct FDelegate OnHomeLevelUpUIGetting; // 0xe60(0x10)
	struct FMulticastInlineDelegate OnShieldAvailableChanged; // 0xe70(0x10)
	struct FMulticastInlineDelegate OnShieldChanged; // 0xe80(0x10)
	struct FMulticastInlineDelegate OnRechargeShieldEnd; // 0xe90(0x10)
	struct FMulticastInlineDelegate OnShieldFXUpdated; // 0xea0(0x10)
	struct FMulticastInlineDelegate OnShieldValueChanged; // 0xeb0(0x10)
	struct FMulticastInlineDelegate OnMaxShieldValueUpdate; // 0xec0(0x10)
	struct FMulticastInlineDelegate FOnSteamRechargeShield; // 0xed0(0x10)
	struct FMulticastInlineDelegate TryCancelCountDown; // 0xee0(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldChanged; // 0xef0(0x10)
	struct FMulticastInlineDelegate OnEnemyShieldValueChanged; // 0xf00(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeStart; // 0xf10(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeInterrupt; // 0xf20(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeFinish; // 0xf30(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChanged; // 0xf40(0x10)
	struct FMulticastInlineDelegate OnShieldUpgradeItemCountChangedBP; // 0xf50(0x10)
	struct FMulticastInlineDelegate OnAckShieldUpgradeShopInteract; // 0xf60(0x10)
	struct FDelegate TryOpenTreasureBoxDelegate; // 0xf70(0x10)
	struct FDelegate TryOpenAirDropTreasureBoxDelegate; // 0xf80(0x10)
	struct FMulticastInlineDelegate TryCancelAirDropTreasureBoxDelegate; // 0xf90(0x10)
	struct FDelegate TryPickupFirstItemDelegate; // 0xfa0(0x10)
	struct FDelegate CheckPickupItemValidDelegate; // 0xfb0(0x10)
	struct FMulticastInlineDelegate SelectPreviousItem; // 0xfc0(0x10)
	struct FMulticastInlineDelegate SelectNextItem; // 0xfd0(0x10)
	struct FMulticastInlineDelegate OnPickupEntryPlayAnim; // 0xfe0(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnim; // 0xff0(0x10)
	struct FMulticastInlineDelegate OnRequstPickupEntryPlayAnimCustom; // 0x1000(0x10)
	struct FDelegate OnInteractEvent; // 0x1010(0x10)
	struct FMulticastInlineDelegate OnBattleControlTeammateStateRemoved; // 0x1020(0x10)
	struct FMulticastInlineDelegate OnSetBackpackDropMaskVisibility; // 0x1030(0x10)
	struct FMulticastInlineDelegate OnEndBackpackDragDrop; // 0x1040(0x10)
	struct FMulticastInlineDelegate OnBattleHUDVisibilityChanged; // 0x1050(0x10)
	struct FMulticastInlineDelegate OnMicroPhonePressed; // 0x1060(0x10)
	struct FMulticastInlineDelegate OnSpeakerPressed; // 0x1070(0x10)
	struct FMulticastInlineDelegate OnSwitchEMP; // 0x1080(0x10)
	struct FMulticastInlineDelegate OnToggleAssitAim; // 0x1090(0x10)
	struct FMulticastInlineDelegate OnToggleAutoFire; // 0x10a0(0x10)
	struct FMulticastInlineDelegate OnTreatmentEnd; // 0x10b0(0x10)

	void VehicleWeaponScopeChanged__DelegateSignature(bool BOpened); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponScopeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void VehicleWeaponNoAmmoAlert__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleWeaponNoAmmoAlert__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void VehicleTypeChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.VehicleTypeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void VehicleAbilityActivationChanged__DelegateSignature(bool bInActivated, bool bCanCancel, char InAbilityIndex, float InDurationTime); // DelegateFunction Solarland.HUDDispatcherBase.VehicleAbilityActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void TwoIntUIInteractDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void TwoIntImplementableDelegate__DelegateSignature(int32_t Value01, int32_t Value02); // DelegateFunction Solarland.HUDDispatcherBase.TwoIntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool TrySkydiveUnfollow__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.TrySkydiveUnfollow__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void TransformerWeaponChanged__DelegateSignature(enum class ETransformerType InType); // DelegateFunction Solarland.HUDDispatcherBase.TransformerWeaponChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void ToggledBigMapVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42450
	void ToggledBackpackVisibility(); // Function Solarland.HUDDispatcherBase.ToggledBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42430
	void StopDrivingTutorial(); // Function Solarland.HUDDispatcherBase.StopDrivingTutorial // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f42410
	void SprintLockIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.SprintLockIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void SimpleUIInteractDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleSpectatorDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleSpectatorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimplePlayerStateDelegate__DelegateSignature(struct ASolarPlayerState* TeammatePS); // DelegateFunction Solarland.HUDDispatcherBase.SimplePlayerStateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleOnRefreshDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnRefreshDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool SimpleOnBindRetOneParamDelegate__DelegateSignature(bool bAutoPickup); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	bool SimpleOnBindRetOneIntParamDelegate__DelegateSignature(int32_t InIthisID); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetOneIntParamDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	bool SimpleOnBindRetDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindRetDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void SimpleOnBindDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleOnBindDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleImplementableDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleFloatDelegate__DelegateSignature(float Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleFloatDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleCharacterLuaDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.SimpleCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SimpleBoolDelegate__DelegateSignature(bool Value); // DelegateFunction Solarland.HUDDispatcherBase.SimpleBoolDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void ShowSuperScanChooseUI(bool bShow); // Function Solarland.HUDDispatcherBase.ShowSuperScanChooseUI // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f42250
	void ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature(int32_t ShieldLevel, int32_t ShieldMaxLevel, int32_t ShieldUpgradeItemNum, int32_t NeedShieldUpgradeItemNum, int32_t MaxShieldUpgradeItemNum); // DelegateFunction Solarland.HUDDispatcherBase.ShieldUpgradeItemCntChangedBPDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void SetRescueBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f420b0
	void SetElectricShopVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetElectricShopVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41e90
	void SetBuyResurrectBtnVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41ce0
	void SetBigMapVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.SetBigMapVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41c50
	void SetBackpackVisibility(bool bInValue); // Function Solarland.HUDDispatcherBase.SetBackpackVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41bc0
	void RequestHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestHideInteractionList // (Final|Native|Public|Const) // @ game+0x1f41910
	void RequestCancelHideInteractionList(); // Function Solarland.HUDDispatcherBase.RequestCancelHideInteractionList // (Final|Native|Public|Const) // @ game+0x1f418f0
	void RemoveItemFromPickup(struct UObject* InCardItem, bool bPickup); // Function Solarland.HUDDispatcherBase.RemoveItemFromPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f41820
	void ReceivePlayerDeath(struct FKillInfo& KillInfo); // Function Solarland.HUDDispatcherBase.ReceivePlayerDeath // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f41710
	void PlayerTutorialSequence(bool bPlay); // Function Solarland.HUDDispatcherBase.PlayerTutorialSequence // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f41660
	void PickupListRemoveDelegate__DelegateSignature(struct UObject* CardItem, bool bPickup); // DelegateFunction Solarland.HUDDispatcherBase.PickupListRemoveDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void PickupListDelegate__DelegateSignature(struct UObject* CardItem); // DelegateFunction Solarland.HUDDispatcherBase.PickupListDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnWidgetVisibilitySet__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetVisibilitySet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnWidgetButtonClicked__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnWidgetButtonClicked__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnVehicleScopeValueChanged__DelegateSignature(float InValue); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnVehicleScopeInitialized__DelegateSignature(struct UUserWidget* Widget, bool bInSpectate); // DelegateFunction Solarland.HUDDispatcherBase.OnVehicleScopeInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnUpdateVehicleInteractionDelegate__DelegateSignature(enum class EVehicleInterationUIState UiState, struct ASolarVehiclePawn* InVehicleComponent); // DelegateFunction Solarland.HUDDispatcherBase.OnUpdateVehicleInteractionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTutorialSequenceRequested__DelegateSignature(bool bPlay); // DelegateFunction Solarland.HUDDispatcherBase.OnTutorialSequenceRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	struct FString OnTutorialGettingWidget__DelegateSignature(struct UWidget*& Result, struct TArray<struct FName>& WidgetNameLink); // DelegateFunction Solarland.HUDDispatcherBase.OnTutorialGettingWidget__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnTrySpawnSuperRadar__DelegateSignature(bool bSpawn); // DelegateFunction Solarland.HUDDispatcherBase.OnTrySpawnSuperRadar__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTreatmentDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnTreatmentDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeamMessageReceive__DelegateSignature(struct FString MemberName, struct FString Message1, bool bLocalPlayer, bool bSound, int32_t PosInTeam, struct FString Message2); // DelegateFunction Solarland.HUDDispatcherBase.OnTeamMessageReceive__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateTalentStateChanged__DelegateSignature(enum class ETalentState TalentState, char PosInTeam, float AdditionalParam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateTalentStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateShieldChanged__DelegateSignature(char PosInTeam, struct FShieldInfo& OldShield, struct FShieldInfo& NewShield); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnTeammateReviveStateChanged__DelegateSignature(struct ASolarPlayerState* RevivingMePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateReviveItemChanged__DelegateSignature(char PosInTeam, char ReviveItemNum, bool bCanRebirth); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateReviveItemChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammatePlatStateRemove__DelegateSignature(char PosInTeam, bool bLastOne); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammatePlatStateRemove__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateIntegerDataChanged__DelegateSignature(int32_t Data, char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateIntegerDataChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammateHPChanged__DelegateSignature(char PosInTeam, float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnTeammateHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSwitchEMP__DelegateSignature(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // DelegateFunction Solarland.HUDDispatcherBase.OnSwitchEMP__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSuperScaningWidgetShow__DelegateSignature(bool bShow); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningWidgetShow__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSuperScaningStart__DelegateSignature(struct TArray<struct FString>& InScanPlayers); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningStart__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnSuperScaningRemovePlayer__DelegateSignature(struct FString InRemovePlayer); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningRemovePlayer__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSuperScaningEnd__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSuperScaningEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnStopCountDownDelegate__DelegateSignature(int32_t InTextId); // DelegateFunction Solarland.HUDDispatcherBase.OnStopCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSteamRechargeShieldDecl__DelegateSignature(bool bUseBigRecharger); // DelegateFunction Solarland.HUDDispatcherBase.OnSteamRechargeShieldDecl__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnStartCountDownDelegate__DelegateSignature(struct FCountDownInfo& InCountDownInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnStartCountDownDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnSprintIconHide__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconHide__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSprintIconActived__DelegateSignature(struct FVector2D& InSprintPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnSprintIconActived__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnSpectateTargetItemsChanged__DelegateSignature(struct TArray<struct FReplicateItemData> InItemDatas); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateTargetItemsChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.OnSpectateTargetChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41580
	void OnSpectateReferToChanged__DelegateSignature(struct ASolarPlayerState* ReferToPlayerState, enum class ESpectateReferToState State); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateReferToChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectateBattleUpgradeEffectUpdate__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnSpectateBattleUpgradeEffectUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpecTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // DelegateFunction Solarland.HUDDispatcherBase.OnSpecTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydivingMemberDataUpdated__DelegateSignature(struct ASolarPlayerState* MemberPS); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingMemberDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydivingFollowRequestResponded__DelegateSignature(struct ASolarPlayerState* Follower, bool bAgreed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydivingFollowRequestResponded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveFollowEnabled__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveFollowEnabled__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveFollowDisabled__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveFollowDisabled__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.HUDDispatcherBase.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkillActivationChanged__DelegateSignature(bool bActivated); // DelegateFunction Solarland.HUDDispatcherBase.OnSkillActivationChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSideAttributeSetRemoved__DelegateSignature(struct FString SideName); // DelegateFunction Solarland.HUDDispatcherBase.OnSideAttributeSetRemoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSideAttributeSetChanged__DelegateSignature(struct FString SideName, struct FSideAttributeSet& SideRef); // DelegateFunction Solarland.HUDDispatcherBase.OnSideAttributeSetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnShowGameNotice__DelegateSignature(int32_t InNoticeID, struct FHUDNoticeParams& InNoiceParams); // DelegateFunction Solarland.HUDDispatcherBase.OnShowGameNotice__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerId, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnShieldDelegate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnShieldChanged__DelegateSignature(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnShieldAvailableChanged__DelegateSignature(bool bAvailable); // DelegateFunction Solarland.HUDDispatcherBase.OnShieldAvailableChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSetTreasureBoxActorDelegate__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnSetTreasureBoxActorDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSetPickupSwitchDelegate__DelegateSignature(enum class EPickupItemType InType, bool InFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnSetPickupSwitchDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSetBackpackDropMaskVisibility__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnSetBackpackDropMaskVisibility__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSetActiveOpenBoxDelegate__DelegateSignature(bool Inactive); // DelegateFunction Solarland.HUDDispatcherBase.OnSetActiveOpenBoxDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSelectingBattleUpgradeEffectFinish__DelegateSignature(int32_t SelectedIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSelectingBattleUpgradeEffectBegin__DelegateSignature(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // DelegateFunction Solarland.HUDDispatcherBase.OnSelectingBattleUpgradeEffectBegin__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature(int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleGEShieldMultiRecoverCoolDownChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityUsingStatusChanged__DelegateSignature(struct FGameplayTag Tag, int32_t NewCount); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityUsingStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityStateChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t State); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStateChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature(int32_t RoleAbilityIndex, float InServerTime); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCDUTCTimeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityStartCD__DelegateSignature(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTimeForReplay); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityStartCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityInputAction__DelegateSignature(int32_t RoleAbilityIndex, bool bPress, bool bCanActive); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityInputAction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityHideControlHUD__DelegateSignature(bool bHide); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityHideControlHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityEndCD__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEndCD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityEnd__DelegateSignature(int32_t RoleAbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityContinous__DelegateSignature(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityContinous__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityChange__DelegateSignature(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityCDDurationChange__DelegateSignature(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityCDDurationChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityBuffPause__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffPause__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRoleAbilityBuffEnd__DelegateSignature(bool bIsMainDuration, struct FActiveGameplayEffectHandle& InGameplayEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffEnd__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnRoleAbilityBuffContinous__DelegateSignature(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityBuffContinous__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnRoleAbilityAddSummonBuff__DelegateSignature(struct FSoftObjectPath& ImagePath, struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnRoleAbilityAddSummonBuff__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnRepliableMessageChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnRepliableMessageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnQuickVoiceWheelLongPressEnd__DelegateSignature(bool bPlayerDead); // DelegateFunction Solarland.HUDDispatcherBase.OnQuickVoiceWheelLongPressEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPoisonEffectUpdated__DelegateSignature(float PosX, float PosY, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnPoisonEffectUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPlayerFlagDisplayChanged__DelegateSignature(bool bDisplay); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerFlagDisplayChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPlayerDead__DelegateSignature(struct FKillInfo& DeathMsgInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnPlayerDead__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnPickupListVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupListVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPickupItemSet__DelegateSignature(struct TArray<struct AActor*>& ObjectList, enum class EPickupItemType Type); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSet__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnPickupItemSelected__DelegateSignature(struct UObject* SelectWidget, int32_t SelectWidgetThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupItemSelected__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPickupFlagChanged__DelegateSignature(bool bFlag, bool bNotSelf); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupFlagChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPickupCheckValidUpdated__DelegateSignature(struct FItemCountsList& ItemCountsList); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckValidUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnPickupCheckStatesUpdated__DelegateSignature(bool bItemUpdate); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckStatesUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPickupCheckHighlightUpdated__DelegateSignature(enum class EPickupItemType Type, bool IsRecommend); // DelegateFunction Solarland.HUDDispatcherBase.OnPickupCheckHighlightUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnOverlapElectricShopDelegate__DelegateSignature(bool InOverlap); // DelegateFunction Solarland.HUDDispatcherBase.OnOverlapElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnNavMapMarked__DelegateSignature(char PosInTeam, struct FVector2D& MarkPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarked__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnNavMapMarkCleared__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.HUDDispatcherBase.OnNavMapMarkCleared__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMemberFlagIDChanged__DelegateSignature(int32_t FlagID, bool bClanFlag); // DelegateFunction Solarland.HUDDispatcherBase.OnMemberFlagIDChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMaxShieldValueUpdate__DelegateSignature(float MaxShieldVal); // DelegateFunction Solarland.HUDDispatcherBase.OnMaxShieldValueUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonSimpleTriggered__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonSimpleTriggered__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.HUDDispatcherBase.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.HUDDispatcherBase.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.HUDDispatcherBase.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyForbiddenChanged__DelegateSignature(enum class EJetFlyForbiddenType ForbiddenType, bool bAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.HUDDispatcherBase.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnInteractionTriggerDelegate__DelegateSignature(struct FInteractionTriggerInfo& TriggerInfo); // DelegateFunction Solarland.HUDDispatcherBase.OnInteractionTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnInputSprintLockStart__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnInputSprintLockStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnInitElectricShopDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnInitElectricShopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	struct UUserWidget* OnHomelandGetWidget__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnHomelandGetWidget__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	int32_t OnHitTraceUpdated__DelegateSignature(int32_t HitTraceID, enum class EHitTraceType HitTraceType, float Angle, float WidgetScale); // DelegateFunction Solarland.HUDDispatcherBase.OnHitTraceUpdated__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHideUIByThisIDDelegate__DelegateSignature(int64_t InThisID); // DelegateFunction Solarland.HUDDispatcherBase.OnHideUIByThisIDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopWeaponUpgradeDelegate__DelegateSignature(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopWeaponChangeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopWeaponChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopSlotWeaponUpgradeDelegate__DelegateSignature(int32_t InWeaponSlot); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopSlotWeaponUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopShieldUpgradeDelegate__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopShieldUpgradeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopPurchaseSuccessDelegate__DelegateSignature(int32_t InProductID, struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopPurchaseSuccessDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEShopInfoUpdateDelegate__DelegateSignature(struct ASolarElectricShop* InElectricShop); // DelegateFunction Solarland.HUDDispatcherBase.OnEShopInfoUpdateDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEnemyShieldValueChanged__DelegateSignature(enum class EShieldWidgetState WidgetState, float CurValue, float ChangeValue, struct FString SolarPlayerId, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldValueChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEnemyShieldChanged__DelegateSignature(struct FString SolarPlayerId, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // DelegateFunction Solarland.HUDDispatcherBase.OnEnemyShieldChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnDrivingTutorialStopped__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingTutorialStopped__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnDrivingStateChanged__DelegateSignature(enum class EDriveState DriveState); // DelegateFunction Solarland.HUDDispatcherBase.OnDrivingStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnDamagingActorsChange__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnDamagingActorsChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterStateChanged__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterSet__DelegateSignature(struct ASolarCharacter* ControlledCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterSelfRebirth__DelegateSignature(struct ASolarCharacter* RebirthCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterSelfRebirth__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterNightComesActorChanged__DelegateSignature(struct AActor* InActor); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterNightComesActorChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterLevelUp__DelegateSignature(int32_t NewLevel, int32_t OldLevel, struct FString DynamicTip); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelUp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterLevelExpChanged__DelegateSignature(int32_t NewLevel, float NewExpRatio); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterLevelExpChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterIDSet__DelegateSignature(int32_t CharacterId); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterIDSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterHPChanged__DelegateSignature(float CurrentHP, float MaxHP); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterHPChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterGainExp__DelegateSignature(int32_t ExpAdded); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterGainExp__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterDead__DelegateSignature(struct ASolarCharacter* InCharacter); // DelegateFunction Solarland.HUDDispatcherBase.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBombingStarted__DelegateSignature(int32_t BombId, struct FVector& Location, float Radius); // DelegateFunction Solarland.HUDDispatcherBase.OnBombingStarted__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnBattleUpgradeEffect__DelegateSignature(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleUpgradeEffect__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBattleTutorialWidgetDisplayed__DelegateSignature(struct UWidget* TutorialWidget, char ParentPanelType); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleTutorialWidgetDisplayed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBattleModeChanged__DelegateSignature(char NewModeType); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBattleHUDVisibilityChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.HUDDispatcherBase.OnBattleHUDVisibilityChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBackpackTookPickup__DelegateSignature(struct FVector2D& NewPosition); // DelegateFunction Solarland.HUDDispatcherBase.OnBackpackTookPickup__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnAirdropBoxInfoChangeDelegate__DelegateSignature(struct AAirDropTreasureBox* InAirdropBox); // DelegateFunction Solarland.HUDDispatcherBase.OnAirdropBoxInfoChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void LocalPlayerSkidivingCaptainChanged__DelegateSignature(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // DelegateFunction Solarland.HUDDispatcherBase.LocalPlayerSkidivingCaptainChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void JoyStickSimpleDeleghate__DelegateSignature(); // DelegateFunction Solarland.HUDDispatcherBase.JoyStickSimpleDeleghate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool IsElectricShopVisible(); // Function Solarland.HUDDispatcherBase.IsElectricShopVisible // (Final|Native|Public) // @ game+0x1423dc0
	void IntUIInteractDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void IntImplementableDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntImplementableDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void InternalCallSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveSpeed // (Final|Native|Protected) // @ game+0x1f410f0
	void InternalCallSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.InternalCallSkydiveFlyStateChanged // (Final|Native|Protected) // @ game+0x1f410d0
	void IntCharacterLuaDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void IntBackpackDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.HUDDispatcherBase.IntBackpackDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	struct USolarUserWidget* GetWorldMarkPanel(); // Function Solarland.HUDDispatcherBase.GetWorldMarkPanel // (Final|Native|Public|Const) // @ game+0x1f41080
	struct UWidget* GetWidgetFromBattleUIForTutorial(struct TArray<struct FName>& InWidgetNameLink); // Function Solarland.HUDDispatcherBase.GetWidgetFromBattleUIForTutorial // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f40fc0
	struct UUserWidget* GetTeammateHomePanel(); // Function Solarland.HUDDispatcherBase.GetTeammateHomePanel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40ed0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromUI(struct UWidget* InWidget); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromUI // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f40cd0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromPC(struct APlayerController* InPC); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromPC // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f40c50
	struct UHUDDispatcherBase* GetHUDDispatcher_FromHUD(struct AHUD* InHUD); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromHUD // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f40bd0
	struct UHUDDispatcherBase* GetHUDDispatcher_FromCharacter(struct ASolarCharacter* InCharacter, bool bCheckControlled); // Function Solarland.HUDDispatcherBase.GetHUDDispatcher_FromCharacter // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f40b10
	struct UUserWidget* GetHomeMainBuild(); // Function Solarland.HUDDispatcherBase.GetHomeMainBuild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40de0
	struct UUserWidget* GetHomeLevelUpUI(); // Function Solarland.HUDDispatcherBase.GetHomeLevelUpUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40db0
	struct UUserWidget* GetHomeFriendList(); // Function Solarland.HUDDispatcherBase.GetHomeFriendList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40d80
	struct UUserWidget* GetHomeBattleUI(); // Function Solarland.HUDDispatcherBase.GetHomeBattleUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40d50
	void EquipVehicleWeapon__DelegateSignature(struct ASolarVehicleWeapon* InVehicleWeapon); // DelegateFunction Solarland.HUDDispatcherBase.EquipVehicleWeapon__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void DisplayBattleTutorialWidget(struct UWidget* InTutorialWidget, char InParentType); // Function Solarland.HUDDispatcherBase.DisplayBattleTutorialWidget // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f40690
	void BroadcastVJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastVJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f40580
	void BroadcastVJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastVJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f404f0
	void BroadcastTrySpawnSuperRadar(bool bSpawn); // Function Solarland.HUDDispatcherBase.BroadcastTrySpawnSuperRadar // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f40460
	bool BroadcastTryPickupFirstItem(bool bAutoPickup); // Function Solarland.HUDDispatcherBase.BroadcastTryPickupFirstItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f403d0
	void BroadcastToggleCursorVisibility(bool bIsVisible); // Function Solarland.HUDDispatcherBase.BroadcastToggleCursorVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f40340
	void BroadcastToggleAutoFire(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAutoFire // (Final|Native|Public|BlueprintCallable) // @ game+0x1f40320
	void BroadcastToggleAssitAim(); // Function Solarland.HUDDispatcherBase.BroadcastToggleAssitAim // (Final|Native|Public|BlueprintCallable) // @ game+0x1f40300
	void BroadcastSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData>& InItemDatas); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetItemsChanged // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40250
	void BroadcastSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.HUDDispatcherBase.BroadcastSpectateTargetChanged // (Final|Native|Public) // @ game+0x1f40190
	void BroadcastSpectateBattleUpgradeEffectUpdate(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BroadcastSpectateBattleUpgradeEffectUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f40110
	void BroadcastSkydiveSpeed(); // Function Solarland.HUDDispatcherBase.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1f400f0
	bool BroadcastShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastShieldValueChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3ff20
	void BroadcastShieldUpgradeStart(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeStart // (Final|Native|Public|Const) // @ game+0x1f3ff00
	void BroadcastShieldUpgradeShopInteract(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeShopInteract // (Final|Native|Public|Const) // @ game+0x1f3fee0
	void BroadcastShieldUpgradeItemCountChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeItemCountChanged // (Final|Native|Public|Const) // @ game+0x1f3fe20
	void BroadcastShieldUpgradeInterrupt(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeInterrupt // (Final|Native|Public|Const) // @ game+0x1f3fe00
	void BroadcastShieldUpgradeFinish(); // Function Solarland.HUDDispatcherBase.BroadcastShieldUpgradeFinish // (Final|Native|Public|Const) // @ game+0x1f3fde0
	void BroadcastShieldFXUpdated(); // Function Solarland.HUDDispatcherBase.BroadcastShieldFXUpdated // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3fdc0
	bool BroadcastShieldChanged(float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastShieldChanged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3fc70
	bool BroadcastShieldAvailable(bool bAvailable); // Function Solarland.HUDDispatcherBase.BroadcastShieldAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3fbe0
	void BroadcastSettingRequestOpened(int32_t InOwnerType); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3fb60
	void BroadcastSettingRequestClosed(); // Function Solarland.HUDDispatcherBase.BroadcastSettingRequestClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3fb40
	void BroadcastSetBackpackDropMaskVisibility(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastSetBackpackDropMaskVisibility // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3fab0
	void BroadcastSelectPreviousItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectPreviousItem // (Final|Native|Public|Const) // @ game+0x1f3f8f0
	void BroadcastSelectNextItem(); // Function Solarland.HUDDispatcherBase.BroadcastSelectNextItem // (Final|Native|Public|Const) // @ game+0x1f3f8d0
	void BroadcastSelectingBattleUpgradeEffectFinish(int32_t SelectedIndex); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectFinish // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3fa30
	void BroadcastSelectingBattleUpgradeEffectBegin(struct ASolarCharacter* Target, int32_t Level, struct TArray<int32_t>& EffectIDArray); // Function Solarland.HUDDispatcherBase.BroadcastSelectingBattleUpgradeEffectBegin // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3f910
	void BroadcastRescueBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3f880
	void BroadcastRequsetPickupEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnimCustom // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f800
	void BroadcastRequsetPickupEntryPlayAnim(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastRequsetPickupEntryPlayAnim // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f780
	void BroadcastProfessionFunctionalChanged(bool bEnabled); // Function Solarland.HUDDispatcherBase.BroadcastProfessionFunctionalChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f6f0
	void BroadcastPlayerFlagDisplayChanged(bool bDisplay); // Function Solarland.HUDDispatcherBase.BroadcastPlayerFlagDisplayChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f660
	void BroadcastPickupToggleChanged(); // Function Solarland.HUDDispatcherBase.BroadcastPickupToggleChanged // (Final|Native|Public) // @ game+0x1f3f640
	void BroadcastPickupEntryPlayAnim(float InAnimTime); // Function Solarland.HUDDispatcherBase.BroadcastPickupEntryPlayAnim // (Final|Native|Public|Const) // @ game+0x1f3f5c0
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f5a0
	void BroadcastOnTeammateReviveStateChanged(struct ASolarPlayerState* RevivingMeTeammatePlayer); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateReviveStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3f520
	void BroadcastOnTeammateRebirth(); // Function Solarland.HUDDispatcherBase.BroadcastOnTeammateRebirth // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3f500
	void BroadcastOnStopRescueTeammateCountDown(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopRescueTeammateCountDown // (Final|Native|Public) // @ game+0x1f3f480
	void BroadcastOnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStopInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x1f3f340
	void BroadcastOnStopCountDownDelegate(int32_t InTextId); // Function Solarland.HUDDispatcherBase.BroadcastOnStopCountDownDelegate // (Final|Native|Public) // @ game+0x1f3f2c0
	void BroadcastOnStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.HUDDispatcherBase.BroadcastOnStartReviveItemRecycleCountDown // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3f200
	void BroadcastOnStartRescueTeammateCountDown(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartRescueTeammateCountDown // (Final|Native|Public|HasOutParms) // @ game+0x1f3f0c0
	void BroadcastOnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartInteractionCountDown // (Final|Native|Public|HasOutParms|Const) // @ game+0x1f3ef80
	void BroadcastOnStartCountDownDelegate(struct FCountDownInfo& InCountDownInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnStartCountDownDelegate // (Final|Native|Public|HasOutParms) // @ game+0x1f3ee40
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.HUDDispatcherBase.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3ee20
	void BroadcastOnShowGameNoticeDelegate(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.HUDDispatcherBase.BroadcastOnShowGameNoticeDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f3ecd0
	void BroadcastOnSetTreasureBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetTreasureBoxActorDelegate // (Final|Native|Public) // @ game+0x1f3ec50
	void BroadcastOnSetPickupSwitchDelegate(enum class EPickupItemType InType, bool InFlag); // Function Solarland.HUDDispatcherBase.BroadcastOnSetPickupSwitchDelegate // (Final|Native|Public) // @ game+0x1f3eb80
	void BroadcastOnSetAirdropBoxActorDelegate(struct AActor* InActor); // Function Solarland.HUDDispatcherBase.BroadcastOnSetAirdropBoxActorDelegate // (Final|Native|Public) // @ game+0x1f3eb00
	void BroadcastOnSetActiveOpenBoxProgressDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxProgressDelegate // (Final|Native|Public) // @ game+0x1f3ea70
	void BroadcastOnSetActiveOpenBoxBtnDelegate(bool Inactive); // Function Solarland.HUDDispatcherBase.BroadcastOnSetActiveOpenBoxBtnDelegate // (Final|Native|Public) // @ game+0x1f3e9e0
	void BroadcastOnRightMouseButtonDownEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnRightMouseButtonDownEvent // (Final|Native|Public) // @ game+0x1f3e9c0
	void BroadcastOnReviveWillBeDisabledHint(int32_t HintDuration); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveWillBeDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3e940
	void BroadcastOnReviveDisabledHint(); // Function Solarland.HUDDispatcherBase.BroadcastOnReviveDisabledHint // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3e920
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public|Const) // @ game+0x1f3e900
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public|Const) // @ game+0x1f3e8e0
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public|Const) // @ game+0x1f3e8c0
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.HUDDispatcherBase.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public|Const) // @ game+0x1f3e8a0
	void BroadcastOnOverlapElectricShopDelegate(bool InOverlap); // Function Solarland.HUDDispatcherBase.BroadcastOnOverlapElectricShopDelegate // (Final|Native|Public) // @ game+0x1f3e810
	void BroadcastOnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerDisappear // (Final|Native|Public|HasOutParms|Const) // @ game+0x1f3e6f0
	void BroadcastOnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractionTriggerAppear // (Final|Native|Public|HasOutParms|Const) // @ game+0x1f3e5d0
	bool BroadcastOnInteractEvent(); // Function Solarland.HUDDispatcherBase.BroadcastOnInteractEvent // (Final|Native|Public) // @ game+0x1f3e5a0
	void BroadcastOnInitElectricShopDelegate(struct ASolarCharacter* InCharcter); // Function Solarland.HUDDispatcherBase.BroadcastOnInitElectricShopDelegate // (Final|Native|Public) // @ game+0x1f3e520
	void BroadcastOnHideTreasureBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideTreasureBoxUIDelegate // (Final|Native|Public) // @ game+0x1f3e4a0
	void BroadcastOnHideAirdropBoxUIDelegate(int64_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastOnHideAirdropBoxUIDelegate // (Final|Native|Public) // @ game+0x1f3e420
	void BroadcastOnEShopWeaponUpgradeDelegate(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x1f3e360
	void BroadcastOnEShopWeaponChangeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopWeaponChangeDelegate // (Final|Native|Public) // @ game+0x1f3e2e0
	void BroadcastOnEShopSlotWeaponUpgradeDelegate(int32_t InWeaponSlot); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopSlotWeaponUpgradeDelegate // (Final|Native|Public) // @ game+0x1f3e260
	void BroadcastOnEShopShieldUpgradeDelegate(struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopShieldUpgradeDelegate // (Final|Native|Public) // @ game+0x1f3e1e0
	void BroadcastOnEShopPurchaseSuccessDelegate(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPurchaseSuccessDelegate // (Final|Native|Public) // @ game+0x1f3e120
	void BroadcastOnEShopPoolRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopPoolRefreshDelegate // (Final|Native|Public) // @ game+0x1f3e0a0
	void BroadcastOnEShopItemRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemRefreshDelegate // (Final|Native|Public) // @ game+0x1f3e020
	void BroadcastOnEShopItemCDRefreshDelegate(struct ASolarElectricShop* InElectricShop); // Function Solarland.HUDDispatcherBase.BroadcastOnEShopItemCDRefreshDelegate // (Final|Native|Public) // @ game+0x1f3dfa0
	void BroadcastOnBindPowerBarDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindPowerBarDelegates // (Final|Native|Public) // @ game+0x1f3df80
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x1f3df60
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.HUDDispatcherBase.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x1f3df40
	void BroadcastOnBattleControlTeammateStateRemoved(); // Function Solarland.HUDDispatcherBase.BroadcastOnBattleControlTeammateStateRemoved // (Final|Native|Public|Const) // @ game+0x1f3df20
	void BroadcastOnAirdropProgressChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropProgressChangeDelegate // (Final|Native|Public) // @ game+0x1f3dea0
	void BroadcastOnAirdropCharChangeDelegate(struct AAirDropTreasureBox* InAirdropBox); // Function Solarland.HUDDispatcherBase.BroadcastOnAirdropCharChangeDelegate // (Final|Native|Public) // @ game+0x1f3de20
	void BroadcastMigrateAccountVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastMigrateAccountVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x1f3dd90
	void BroadcastMaxShieldValueUpdate(float MaxShieldValue); // Function Solarland.HUDDispatcherBase.BroadcastMaxShieldValueUpdate // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3dd10
	void BroadcastJoyStickSprintStateReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickSprintStateReset // (Final|Native|Public|Const) // @ game+0x1f3dcf0
	void BroadcastJoyStickResetAll(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickResetAll // (Final|Native|Public|Const) // @ game+0x1f3dcd0
	void BroadcastJoyStickInputReset(); // Function Solarland.HUDDispatcherBase.BroadcastJoyStickInputReset // (Final|Native|Public|Const) // @ game+0x1f3dcb0
	void BroadcastItemDiscarded(int32_t InItemID, int32_t InTotalCount); // Function Solarland.HUDDispatcherBase.BroadcastItemDiscarded // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3dbf0
	void BroadcastHJetTimesChargingProgress(float Value, float Percent); // Function Solarland.HUDDispatcherBase.BroadcastHJetTimesChargingProgress // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3db30
	void BroadcastHJetForbiddenChanged(enum class EJetFlyForbiddenType Types, bool bAdded); // Function Solarland.HUDDispatcherBase.BroadcastHJetForbiddenChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3da60
	void BroadcastHJetCDStateChanged(bool bCD); // Function Solarland.HUDDispatcherBase.BroadcastHJetCDStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d9d0
	void BroadcastFireButtonsReset(); // Function Solarland.HUDDispatcherBase.BroadcastFireButtonsReset // (Final|Native|Public|Const) // @ game+0x1f3d9b0
	bool BroadcastEnemyShieldValueChanged(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID, enum class EShieldRechargeState ShieldRechargeState, bool bFixPreAdd); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldValueChanged // (Final|Native|Public|Const) // @ game+0x1f3d7e0
	bool BroadcastEnemyShieldChanged(struct FString InSolarPlayerID, float CurValue, float MaxValue, int32_t QualityColor, bool bAdvancedShield); // Function Solarland.HUDDispatcherBase.BroadcastEnemyShieldChanged // (Final|Native|Public|Const) // @ game+0x1f3d630
	void BroadcastEndBackpackDragDrop(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastEndBackpackDragDrop // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d5a0
	void BroadcastDriveCustomizeOpened(int32_t InLayoutType); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeOpened // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x1f3d520
	void BroadcastDriveCustomizeClosed(); // Function Solarland.HUDDispatcherBase.BroadcastDriveCustomizeClosed // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x1f3d500
	void BroadcastDamagingActorsChange(); // Function Solarland.HUDDispatcherBase.BroadcastDamagingActorsChange // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d4e0
	void BroadcastCustomizeVisibilityRequestChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastCustomizeVisibilityRequestChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f3d450
	bool BroadcastCheckPickupItemVaild(int32_t InThisID); // Function Solarland.HUDDispatcherBase.BroadcastCheckPickupItemVaild // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3d3c0
	void BroadcastCharacterRescueStateChanged(enum class ERescueState NewRescueState); // Function Solarland.HUDDispatcherBase.BroadcastCharacterRescueStateChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d340
	void BroadcastCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.HUDDispatcherBase.BroadcastCharacterLevelExpChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d270
	void BroadcastCharacterHPState(); // Function Solarland.HUDDispatcherBase.BroadcastCharacterHPState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3d250
	void BroadcastCharacterGainExp(int32_t ExpAdded); // Function Solarland.HUDDispatcherBase.BroadcastCharacterGainExp // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d1d0
	void BroadcastBuyResurrectBtnVisibility(); // Function Solarland.HUDDispatcherBase.BroadcastBuyResurrectBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f3d180
	void BroadcastBattleUpgradeEffect(enum class ESolarTablesEnum_BattleUpgradeEffectType EffectType, int32_t ParamSum); // Function Solarland.HUDDispatcherBase.BroadcastBattleUpgradeEffect // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d0c0
	void BroadcastBattleState(); // Function Solarland.HUDDispatcherBase.BroadcastBattleState // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d0a0
	void BroadcastBattleModeChanged(char InModeType); // Function Solarland.HUDDispatcherBase.BroadcastBattleModeChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3d020
	void BroadcastBattleHUDVisibilityChanged(bool bVisible); // Function Solarland.HUDDispatcherBase.BroadcastBattleHUDVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3cf90
	void BroadcastBackpackTakesPickup(struct FVector2D& NewPosition); // Function Solarland.HUDDispatcherBase.BroadcastBackpackTakesPickup // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f3cf00
	void BroadcastBackpackReleasesPickup(); // Function Solarland.HUDDispatcherBase.BroadcastBackpackReleasesPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3cee0
	void BroadcastBackpackModeChanged(int32_t NewMode); // Function Solarland.HUDDispatcherBase.BroadcastBackpackModeChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3ce60
	void BoolUIInteractDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolUIInteractDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void BoolGameModeLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolGameModeLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void BoolCharacterLuaDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.HUDDispatcherBase.BoolCharacterLuaDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void BindLocalSpectateDelegates(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.HUDDispatcherBase.BindLocalSpectateDelegates // (Final|Native|Protected) // @ game+0x1f3cde0
	void AddItemToPickup(struct UObject* InCardItem); // Function Solarland.HUDDispatcherBase.AddItemToPickup // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f3cd60
};

// Class Solarland.OBHUDDispatcher
// Size: 0x1208 (Inherited: 0x10c0)
struct UOBHUDDispatcher : UHUDDispatcherBase {
	struct FMulticastInlineDelegate OnToggleUISettingPlayerInfo; // 0x10c0(0x10)
	struct FMulticastInlineDelegate OnToggleUISettingPlayerList; // 0x10d0(0x10)
	struct FMulticastInlineDelegate OnToggleScoreboard; // 0x10e0(0x10)
	struct FMulticastInlineDelegate OnOpenScoreboard; // 0x10f0(0x10)
	struct FMulticastInlineDelegate OnCloseScoreboard; // 0x1100(0x10)
	struct FMulticastInlineDelegate OnToggleProgressControlButton; // 0x1110(0x10)
	struct FMulticastInlineDelegate OnToggleProgress; // 0x1120(0x10)
	struct FMulticastInlineDelegate OnToggleShortCutKey; // 0x1130(0x10)
	struct FMulticastInlineDelegate OnEnterSettlementStage; // 0x1140(0x10)
	struct FMulticastInlineDelegate OnBattleOBHUDTypeChanged; // 0x1150(0x10)
	char pad_1160[0x80]; // 0x1160(0x80)
	struct FMulticastInlineDelegate OnBigMapWidgetPlayerNameSizeChange; // 0x11e0(0x10)
	struct FMulticastInlineDelegate OnPlayerWidgetChecked; // 0x11f0(0x10)
	char pad_1200[0x8]; // 0x1200(0x08)
};

// Class Solarland.OBKeyboardWidget
// Size: 0x340 (Inherited: 0x340)
struct UOBKeyboardWidget : USolarUserWidget {

	struct UUserWidget* FindKeyWidgetByKeyName(struct FString KeyName); // Function Solarland.OBKeyboardWidget.FindKeyWidgetByKeyName // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f660
};

// Class Solarland.OBMiniMapWidget
// Size: 0x8b8 (Inherited: 0x728)
struct UOBMiniMapWidget : UMiniMapWidget {
	struct FString CurrentCheckedPlayerID; // 0x728(0x10)
	struct UMeshRectangleWidget* PlayerNavIconMeshWidget; // 0x738(0x08)
	struct UMeshRectangleWidget* PlayerNavDirMeshWidget; // 0x740(0x08)
	struct UMeshRectangleWidget* PlayerNavNameMeshWidget; // 0x748(0x08)
	struct UMeshRectangleWidget* PlayerNavDeadMeshWidget; // 0x750(0x08)
	struct UCanvasPanel* PlayerNavRTCanvas; // 0x758(0x08)
	float MiniMapPlayerNavScale; // 0x760(0x04)
	char pad_764[0x4]; // 0x764(0x04)
	struct UOBPlayerNavWidget* SpectatorNavWidget; // 0x768(0x08)
	struct TMap<int32_t, struct FTeamPlayerNavArray> MapOBTeamPlayerNavWidgets; // 0x770(0x50)
	struct UOBPlayerNavWidget* SpectatorNavWidgetClass; // 0x7c0(0x08)
	struct UOBPlayerNavWidget* OBTeamPlayerNavWidgetClass; // 0x7c8(0x08)
	char pad_7D0[0x10]; // 0x7d0(0x10)
	struct UTextureRenderTarget2D* MiniMapTexture; // 0x7e0(0x08)
	char pad_7E8[0x10]; // 0x7e8(0x10)
	struct FVector2D RTTexSize; // 0x7f8(0x08)
	int32_t NavIconType; // 0x800(0x04)
	char pad_804[0xb4]; // 0x804(0xb4)

	void UpdateOBPlayerNavMeshWidget(struct UOBPlayerNavWidget* InMapMark); // Function Solarland.OBMiniMapWidget.UpdateOBPlayerNavMeshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0d20
	void SpectatePlayer(); // Function Solarland.OBMiniMapWidget.SpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0ce0
	void RemoveOBPlayerNavMeshWidget(struct UOBPlayerNavWidget* InMapMark); // Function Solarland.OBMiniMapWidget.RemoveOBPlayerNavMeshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0ad0
	void RefreshTexture(); // Function Solarland.OBMiniMapWidget.RefreshTexture // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca0a90
	void OnSetOBTeamPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBMiniMapWidget.OnSetOBTeamPlayerNamePanelScale // (Final|Native|Protected) // @ game+0x1ca0590
	void OnSetCurrentCheckedPlayerWidget(struct FString SelectedPlayerID); // Function Solarland.OBMiniMapWidget.OnSetCurrentCheckedPlayerWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca04b0
	void OnPlayingScrubStart(); // Function Solarland.OBMiniMapWidget.OnPlayingScrubStart // (Final|Native|Protected) // @ game+0x1c9ff60
	void OnOBTeamPlayerNavInitialized(); // Function Solarland.OBMiniMapWidget.OnOBTeamPlayerNavInitialized // (Final|Native|Protected) // @ game+0x1c9ff20
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBMiniMapWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1c9fb40
	void InitRenderTexResources(); // Function Solarland.OBMiniMapWidget.InitRenderTexResources // (Final|Native|Protected|BlueprintCallable) // @ game+0x1c9fb20
	void AddOBPlayerNavMeshWidget(struct UOBPlayerNavWidget* InMapMark); // Function Solarland.OBMiniMapWidget.AddOBPlayerNavMeshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f4f0
};

// Class Solarland.OBPlayerInfoWidget
// Size: 0x3f8 (Inherited: 0x340)
struct UOBPlayerInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x340(0x08)
	struct USolarImage* Image_Frame; // 0x348(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x350(0x08)
	struct USolarTextBlock* Text_NickName; // 0x358(0x08)
	struct USolarTextBlock* Text_KillNum; // 0x360(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x368(0x08)
	struct USolarTextBlock* Text_PlayerLevel; // 0x370(0x08)
	struct USolarTextBlock* Txt_Lv_Head; // 0x378(0x08)
	struct UImage* Img_Lv_Bg_2; // 0x380(0x08)
	struct UImage* Img_Lv_Border_2; // 0x388(0x08)
	struct FOBTeammateInfo Data; // 0x390(0x38)
	char pad_3C8[0x20]; // 0x3c8(0x20)
	struct TArray<struct UOBPlayerWeaponWidget*> SlotWeaponCacheWidgets; // 0x3e8(0x10)

	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x1ca09d0
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.OBPlayerInfoWidget.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x1ca0910
	void OnSpectateTargetChanged(); // Function Solarland.OBPlayerInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x1ca0750
	void OnScrubCharactersCreated(); // Function Solarland.OBPlayerInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x1ca0490
	void OnPlayerKillNumChange(); // Function Solarland.OBPlayerInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x1c9ff40
	void OnCharacterLevelUp(int32_t NewLevel, int32_t OldLevel, struct FString DynamicTip); // Function Solarland.OBPlayerInfoWidget.OnCharacterLevelUp // (Final|Native|Private) // @ game+0x1c9fce0
};

// Class Solarland.OBPlayerMoreInfoWidget
// Size: 0x3b0 (Inherited: 0x340)
struct UOBPlayerMoreInfoWidget : USolarUserWidget {
	struct USolarImage* Img_Super_Skill; // 0x340(0x08)
	struct UGaugeImage* Super_Skill_Countdown; // 0x348(0x08)
	struct UProgressBar* Super_Skill_Progress_CD; // 0x350(0x08)
	struct UImage* img_Super_Skill_Forbid; // 0x358(0x08)
	struct USolarImage* Img_Super_Skill_Shadow; // 0x360(0x08)
	struct USolarTextBlock* Txt_Super_Skill_Progress; // 0x368(0x08)
	struct USolarImage* Img_Tactical_Skill; // 0x370(0x08)
	struct UGaugeImage* Tactical_Skill_Countdown; // 0x378(0x08)
	struct UProgressBar* Tactical_Skill_Progress_CD; // 0x380(0x08)
	struct UImage* img_Tactical_Skill_Forbid; // 0x388(0x08)
	struct USolarImage* Img_Tactical_Skill_Shadow; // 0x390(0x08)
	struct USolarTextBlock* Txt_Tactical_Skill_Progress; // 0x398(0x08)
	char pad_3A0[0x10]; // 0x3a0(0x10)

	void UpdatePlayerVJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerVJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdatePlayerMoreInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerMoreInfoUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdatePlayerJetFlyInfoUI(); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerJetFlyInfoUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdatePlayerHJetFlyChargeUI(float RemainTime, float Percent); // Function Solarland.OBPlayerMoreInfoWidget.UpdatePlayerHJetFlyChargeUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UnregisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.UnregisterDelegates // (Final|Native|Private) // @ game+0x1ca0d00
	void StopRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.StopRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetChargeState(bool bStart, bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.SetChargeState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RegisterDelegates(); // Function Solarland.OBPlayerMoreInfoWidget.RegisterDelegates // (Final|Native|Private) // @ game+0x1ca0ab0
	void PlayRoleAbilityRefreshAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityRefreshAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlayRoleAbilityContinueAnim(int32_t RoleAbilityIndex); // Function Solarland.OBPlayerMoreInfoWidget.PlayRoleAbilityContinueAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnVJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnVJetChargeStateChanged // (Final|Native|Private) // @ game+0x1ca0880
	void OnSpectateTargetItemsChanged(struct TArray<struct FReplicateItemData> InItemDatas); // Function Solarland.OBPlayerMoreInfoWidget.OnSpectateTargetItemsChanged // (Final|Native|Private) // @ game+0x1ca0770
	void OnSpecTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.OBPlayerMoreInfoWidget.OnSpecTargetChanged // (Final|Native|Private) // @ game+0x1ca0690
	void OnRoleAbilityStateChange(int32_t RoleAbilityIndex, int32_t State); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStateChange // (Final|Native|Private) // @ game+0x1ca03d0
	void OnRoleAbilityStartCD(int32_t RoleAbilityIndex, float StartCDServerTime, float StartCDTime); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityStartCD // (Final|Native|Private) // @ game+0x1ca02d0
	void OnRoleAbilityContinous(int32_t RoleAbilityIndex, bool bTurnOn, float Duration); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityContinous // (Final|Native|Private) // @ game+0x1ca01c0
	void OnRoleAbilityChange(int32_t RoleAbilityIndex, bool bHaveAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityChange // (Final|Native|Private) // @ game+0x1ca0080
	void OnRoleAbilityCDDurationChange(int32_t RoleAbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.OBPlayerMoreInfoWidget.OnRoleAbilityCDDurationChange // (Final|Native|Private) // @ game+0x1c9ff80
	void OnHJetChargeStateChanged(bool bStart); // Function Solarland.OBPlayerMoreInfoWidget.OnHJetChargeStateChanged // (Final|Native|Private) // @ game+0x1c9fe90
	void OnCharacterJetFlyModuleLevelChanged(int32_t NewLv); // Function Solarland.OBPlayerMoreInfoWidget.OnCharacterJetFlyModuleLevelChanged // (Final|Native|Private) // @ game+0x1c9fc60
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBPlayerMoreInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1c9fbd0
	int32_t GetSpectatedPlayerItemMaxPileByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemMaxPileByID // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f830
	int32_t GetSpectatedPlayerItemCountByID(int32_t InItemID); // Function Solarland.OBPlayerMoreInfoWidget.GetSpectatedPlayerItemCountByID // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f7a0
	int32_t GetCharacterJetModuleLevel(bool InUsedForVertical); // Function Solarland.OBPlayerMoreInfoWidget.GetCharacterJetModuleLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f710
};

// Class Solarland.PlayerNavWidget
// Size: 0x378 (Inherited: 0x340)
struct UPlayerNavWidget : USolarUserWidget {
	struct UWidgetSwitcher* IconSwitcher; // 0x340(0x08)
	struct UCanvasPanel* PlayerNav; // 0x348(0x08)
	struct UCanvasPanel* PlayerOutOfMapNav; // 0x350(0x08)
	struct UImage* FOV; // 0x358(0x08)
	struct UImage* ImageRoleNav; // 0x360(0x08)
	struct UTextBlock* PlayerOrder; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)

	void SwitchPlayerNav(bool bOutOfBounds); // Function Solarland.PlayerNavWidget.SwitchPlayerNav // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca9cc0
	void SetBrushResourceObject(struct UObject* InSprite); // Function Solarland.PlayerNavWidget.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca99b0
	void ResetPlayerNav(); // Function Solarland.PlayerNavWidget.ResetPlayerNav // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlayerDead(); // Function Solarland.PlayerNavWidget.ReceivePlayerDead // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.PlayerNavWidget.OnAllPlayerNavVisibilityChanged // (Final|Native|Protected) // @ game+0x1ca82f0
};

// Class Solarland.OBPlayerNavWidget
// Size: 0x410 (Inherited: 0x378)
struct UOBPlayerNavWidget : UPlayerNavWidget {
	struct FString CurrentSolarPlayerID; // 0x378(0x10)
	int32_t RecommendedZOrder; // 0x388(0x04)
	char pad_38C[0x14]; // 0x38c(0x14)
	struct UImage* Arror; // 0x3a0(0x08)
	struct USolarTextBlock* Text_TeamNumb; // 0x3a8(0x08)
	struct USolarImage* Img_BG; // 0x3b0(0x08)
	struct USolarImage* Img_Frame; // 0x3b8(0x08)
	struct USolarImage* Img_death; // 0x3c0(0x08)
	struct USolarImage* Img_FrameArrow; // 0x3c8(0x08)
	struct UCanvasPanel* panel_player; // 0x3d0(0x08)
	struct UCanvasPanel* panel_OB; // 0x3d8(0x08)
	struct UWidgetSwitcher* wgs_mod; // 0x3e0(0x08)
	struct USolarTextBlock* text_playername; // 0x3e8(0x08)
	struct USolarButton* Btn_Player; // 0x3f0(0x08)
	struct UImage* Img_NameBg; // 0x3f8(0x08)
	bool IsWidgetChecked; // 0x400(0x01)
	char pad_401[0xf]; // 0x401(0x0f)

	void SetWidgetBeChecked(bool InIsChecked); // Function Solarland.OBPlayerNavWidget.SetWidgetBeChecked // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetPlayerNamePanelScale(enum class EPlayerNamePanelScale InPanelScale); // Function Solarland.OBPlayerNavWidget.SetPlayerNamePanelScale // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.OBPlayerWeaponWidget
// Size: 0x370 (Inherited: 0x340)
struct UOBPlayerWeaponWidget : USolarUserWidget {
	struct UWidgetSwitcher* Switcher_Status; // 0x340(0x08)
	struct UImage* Img_WP; // 0x348(0x08)
	struct UImage* Img_WPSelected; // 0x350(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerWeapon; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	struct FTimerHandle LoadWeaponIconHandle; // 0x368(0x08)

	struct UTexture2D* GetWeaponTexture(); // Function Solarland.OBPlayerWeaponWidget.GetWeaponTexture // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c9f8c0
};

// Class Solarland.OBProgressBar
// Size: 0x3b0 (Inherited: 0x340)
struct UOBProgressBar : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	float TotalTime; // 0x348(0x04)
	float CurrentTime; // 0x34c(0x04)
	bool bIsPause; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct FMulticastInlineDelegate OnSetReplayTime; // 0x358(0x10)
	struct UButton* Btn_Rewind; // 0x368(0x08)
	struct UButton* Btn_PausePlay; // 0x370(0x08)
	struct UButton* Btn_FastForward; // 0x378(0x08)
	struct USolarButton* Btn_Speed_Left; // 0x380(0x08)
	struct USolarButton* Btn_Speed_Right; // 0x388(0x08)
	struct UTextBlock* Txt_CurrentTime; // 0x390(0x08)
	struct UTextBlock* Txt_TotalTime; // 0x398(0x08)
	struct USolarTextBlock* Txt_PlaybackSpeed; // 0x3a0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_PausePlay; // 0x3a8(0x08)

	void UpdateSlider(); // Function Solarland.OBProgressBar.UpdateSlider // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdatePlaybackSpeed(); // Function Solarland.OBProgressBar.UpdatePlaybackSpeed // (Final|Native|Private) // @ game+0x1ca0da0
	void SetTotalTime(); // Function Solarland.OBProgressBar.SetTotalTime // (Final|Native|Private) // @ game+0x1ca0c40
	void SetTextByTime(struct UTextBlock* TextBlock, float InTime); // Function Solarland.OBProgressBar.SetTextByTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0b70
	void SetCurrentTime(); // Function Solarland.OBProgressBar.SetCurrentTime // (Final|Native|Private) // @ game+0x1ca0b50
	void RegisterEvent(); // Function Solarland.OBProgressBar.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSliderValueChanged(float Value); // Function Solarland.OBProgressBar.OnSliderValueChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0610
	void OnSetReplayTime__DelegateSignature(); // DelegateFunction Solarland.OBProgressBar.OnSetReplayTime__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnClickSkipForwardButton(); // Function Solarland.OBProgressBar.OnClickSkipForwardButton // (Final|Native|Public) // @ game+0x1c9fe70
	void OnClickSkipBackButton(); // Function Solarland.OBProgressBar.OnClickSkipBackButton // (Final|Native|Public) // @ game+0x1c9fe50
	void OnClickPlaybackSpeedUp(); // Function Solarland.OBProgressBar.OnClickPlaybackSpeedUp // (Final|Native|Public) // @ game+0x1c9fe30
	void OnClickPlaybackSlowDown(); // Function Solarland.OBProgressBar.OnClickPlaybackSlowDown // (Final|Native|Public) // @ game+0x1c9fe10
	void OnClickPausePlayButton(); // Function Solarland.OBProgressBar.OnClickPausePlayButton // (Final|Native|Public) // @ game+0x1c9fdf0
	void CallTogglePauseDispatcher(bool bPause); // Function Solarland.OBProgressBar.CallTogglePauseDispatcher // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CallOnSkipTimeDispatcher(float InTime); // Function Solarland.OBProgressBar.CallOnSkipTimeDispatcher // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.OBRootWidget
// Size: 0x348 (Inherited: 0x340)
struct UOBRootWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_ScopeUI; // 0x340(0x08)

	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.OBRootWidget.AddScopeToPanel // (Final|Native|Protected) // @ game+0x1c9f570
};

// Class Solarland.OBScoreboard
// Size: 0x430 (Inherited: 0x348)
struct UOBScoreboard : UOBSettlementBase {
	struct UWidgetAnimation* Anim_Enter; // 0x348(0x08)
	struct UScrollBox* ScrollBox_TeamList; // 0x350(0x08)
	struct UCanvasPanel* Top3; // 0x358(0x08)
	struct UCanvasPanel* Bg_Settlement; // 0x360(0x08)
	struct UCanvasPanel* Bg_InGame; // 0x368(0x08)
	struct UOBScoreboardSingleTopTeam* FirstTeam; // 0x370(0x08)
	struct UOBScoreboardSingleTopTeam* SecondTeam; // 0x378(0x08)
	struct UOBScoreboardSingleTopTeam* ThirdTeam; // 0x380(0x08)
	struct UButton* CloseBtn; // 0x388(0x08)
	struct UHorizontalBox* Btn; // 0x390(0x08)
	struct UHorizontalBox* Remain_Total; // 0x398(0x08)
	struct UTileView* TileView_Others; // 0x3a0(0x08)
	struct USolarTextBlock* Txt_PlayerRemain; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_PlayerTotal; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_TeamRemain; // 0x3b8(0x08)
	struct USolarTextBlock* Txt_TeamTotal; // 0x3c0(0x08)
	enum class E_Type_OB_Scoreboard WidgetTypeChoice; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct FCupViewInfo CupViewInfo; // 0x3d0(0x28)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct TArray<struct UOBScoreboardSingleTopTeam*> TopThreeTeamWidget; // 0x400(0x10)
	char pad_410[0x20]; // 0x410(0x20)

	void UpdateTeamTotal(); // Function Solarland.OBScoreboard.UpdateTeamTotal // (Final|Native|Private) // @ game+0x1ca0fe0
	void UpdateTeamRemain(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.OBScoreboard.UpdateTeamRemain // (Final|Native|Private) // @ game+0x1ca0ee0
	void UpdatePlayerTotal(); // Function Solarland.OBScoreboard.UpdatePlayerTotal // (Final|Native|Private) // @ game+0x1ca0ec0
	void UpdatePlayerRemain(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.OBScoreboard.UpdatePlayerRemain // (Final|Native|Private) // @ game+0x1ca0dc0
	void SetWidgetType(enum class E_Type_OB_Scoreboard WidgetType); // Function Solarland.OBScoreboard.SetWidgetType // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca0c60
	void OnWidgetTypeChangedEvent(); // Function Solarland.OBScoreboard.OnWidgetTypeChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnTeamDataChanged(); // Function Solarland.OBScoreboard.OnTeamDataChanged // (Final|Native|Private) // @ game+0x1ca0860
	void InitPanelWithData(struct TArray<struct FDetailedTeamListViewInfo> TeamDetailedInfo, struct FCupViewInfo& InCupViewInfo); // Function Solarland.OBScoreboard.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1c9f970
	void InitPanelInGame(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanelInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f8f0
	void InitPanel(struct UOBSettlementRoot* InOnwer); // Function Solarland.OBScoreboard.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x1c95e70
	void CloseScoreboardInGame(); // Function Solarland.OBScoreboard.CloseScoreboardInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1c9f640
};

// Class Solarland.OBScoreboardSingleOtherTeam
// Size: 0x358 (Inherited: 0x340)
struct UOBScoreboardSingleOtherTeam : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x348(0x08)
	struct USolarTextBlock* Txt_Rank; // 0x350(0x08)
};

// Class Solarland.OBScoreboardSingleTeam
// Size: 0x428 (Inherited: 0x340)
struct UOBScoreboardSingleTeam : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct FString SideName; // 0x348(0x10)
	int32_t Rank; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct UOBSettlementRoot* UIOBRoot; // 0x360(0x08)
	struct USolarTextBlock* Txt_TeamNumber; // 0x368(0x08)
	struct USolarImage* Img_TitleBox; // 0x370(0x08)
	struct USolarImage* Img_TitleBg; // 0x378(0x08)
	struct USolarButton* Btn_ViewDetail; // 0x380(0x08)
	struct UOverlay* Overlay_Spectating; // 0x388(0x08)
	struct UCanvasPanel* Panel_ScoreboardUnit; // 0x390(0x08)
	struct UOBScoreboard* ParentScoreboard; // 0x398(0x08)
	struct TArray<struct FDetailedListViewInfo> CurrentDetailedInfo; // 0x3a0(0x10)
	char TeamID; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)
	struct FString TeamName; // 0x3b8(0x10)
	struct TArray<struct ASCMPlayerState*> Teammate; // 0x3c8(0x10)
	char pad_3D8[0x50]; // 0x3d8(0x50)

	void LuaShowDetailedDataList(struct UWidget*& OutWidget); // Function Solarland.OBScoreboardSingleTeam.LuaShowDetailedDataList // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t InRank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ca4690
	void InitPanel(struct FString InSideName, int32_t InRank, struct UOBSettlementRoot* InOBRoot, bool bInGame, bool bSpectating); // Function Solarland.OBScoreboardSingleTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca4360
};

// Class Solarland.OBScoreboardSingleTeamData
// Size: 0x60 (Inherited: 0x28)
struct UOBScoreboardSingleTeamData : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct TArray<struct FDetailedTeamListViewInfo> DetailedTeamListViewInfo; // 0x48(0x10)
	struct UOBSettlementRoot* UIOBRoot; // 0x58(0x08)
};

// Class Solarland.OBScoreboardSingleTopTeam
// Size: 0x358 (Inherited: 0x340)
struct UOBScoreboardSingleTopTeam : USolarUserWidget {
	struct UTexture2D* RankIcon; // 0x340(0x08)
	struct UOBScoreboardSingleTeam* UI_OB_Scoreboard_SingleTeam; // 0x348(0x08)
	struct USolarImage* Img_Rank; // 0x350(0x08)

	void InitPanelWithData(struct FDetailedTeamListViewInfo& DetailedTeamInfo, int32_t Rank, struct UOBScoreboard* InScoreboard); // Function Solarland.OBScoreboardSingleTopTeam.InitPanelWithData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ca4800
	void InitPanel(struct FString InSideName, int32_t InRank, struct UOBSettlementRoot* InOBRoot); // Function Solarland.OBScoreboardSingleTopTeam.InitPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca4540
};

// Class Solarland.OBScoreboardUnit
// Size: 0x398 (Inherited: 0x340)
struct UOBScoreboardUnit : USolarUserWidget {
	struct ASolarPlayerState* PlayerState; // 0x340(0x08)
	struct USolarTextBlock* Txt_PlayerName; // 0x348(0x08)
	struct USolarTextBlock* Txt_KillNum; // 0x350(0x08)
	struct USolarTextBlock* Txt_Assist; // 0x358(0x08)
	struct USolarTextBlock* Txt_DMGD; // 0x360(0x08)
	char pad_368[0x30]; // 0x368(0x30)

	void UpdatePlayerKillNum(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.OBScoreboardUnit.UpdatePlayerKillNum // (Final|Native|Private) // @ game+0x1ca5b10
	void UpdatePlayerDamageDealt(float NewValue); // Function Solarland.OBScoreboardUnit.UpdatePlayerDamageDealt // (Final|Native|Private) // @ game+0x1ca5a90
	void UpdatePlayerAssistNum(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.OBScoreboardUnit.UpdatePlayerAssistNum // (Final|Native|Private) // @ game+0x1ca5990
	void SetRebirthOpacity(); // Function Solarland.OBScoreboardUnit.SetRebirthOpacity // (Final|Native|Public) // @ game+0x1ca5490
	void SetDeathOpacity(); // Function Solarland.OBScoreboardUnit.SetDeathOpacity // (Final|Native|Public) // @ game+0x1ca5470
	void SetConnectStateOpacity(bool bUselessParam); // Function Solarland.OBScoreboardUnit.SetConnectStateOpacity // (Final|Native|Public) // @ game+0x1ca53e0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBScoreboardUnit.OnCharacterDead // (Final|Native|Private) // @ game+0x1ca4cc0
};

// Class Solarland.OBSettlementRoot
// Size: 0x380 (Inherited: 0x340)
struct UOBSettlementRoot : USolarUserWidget {
	char pad_340[0x18]; // 0x340(0x18)
	struct UWidgetSwitcher* PageSwitcher; // 0x358(0x08)
	struct UOBVictoryTeam* UI_OB_VictoryTeam; // 0x360(0x08)
	struct UOBDetailedDataList* UI_OB_DetailedData_List; // 0x368(0x08)
	struct UOBScoreboard* UI_OB_Scoreboard_AllTeam; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)

	void ToggleScoreboard(); // Function Solarland.OBSettlementRoot.ToggleScoreboard // (Final|Native|Private) // @ game+0x1ca5890
	void SortSideWithAscending(); // Function Solarland.OBSettlementRoot.SortSideWithAscending // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca5870
	void SkipSettlement(); // Function Solarland.OBSettlementRoot.SkipSettlement // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca5850
	void ShowScoreboard(); // Function Solarland.OBSettlementRoot.ShowScoreboard // (Final|Native|Private) // @ game+0x1ca5830
	void ShowPage(int32_t PageIndex); // Function Solarland.OBSettlementRoot.ShowPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca57b0
	void ShowNextPage(); // Function Solarland.OBSettlementRoot.ShowNextPage // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca5790
	void OnEnterSettlementStage(); // Function Solarland.OBSettlementRoot.OnEnterSettlementStage // (Final|Native|Private) // @ game+0x1ca4ee0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSettlementRoot.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1ca4a60
	void HideScoreboard(); // Function Solarland.OBSettlementRoot.HideScoreboard // (Final|Native|Private) // @ game+0x1ca4240
};

// Class Solarland.OBSpectateInfoWidget
// Size: 0x368 (Inherited: 0x340)
struct UOBSpectateInfoWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_CurrentTeam; // 0x340(0x08)
	struct UCanvasPanel* Panel_CurrentPlayerInfo; // 0x348(0x08)
	struct UCanvasPanel* Panel_Direction; // 0x350(0x08)
	struct UOBTeamInfoWidget* OB_TeamInfo; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)

	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBSpectateInfoWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x1ca5200
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBSpectateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Public|HasOutParms) // @ game+0x1ca4af0
};

// Class Solarland.OBTeamInfoWidget
// Size: 0x398 (Inherited: 0x340)
struct UOBTeamInfoWidget : USolarUserWidget {
	struct USolarImage* Image_TeamBG; // 0x340(0x08)
	struct USolarTextBlock* Text_TeamNum; // 0x348(0x08)
	struct USolarTextBlock* Text_TeamKillCount; // 0x350(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x358(0x08)
	struct FOBTeamInfo CurrentTeamInfo; // 0x360(0x28)
	char pad_388[0x10]; // 0x388(0x10)

	void OnTeamKillNumChange(); // Function Solarland.OBTeamInfoWidget.OnTeamKillNumChange // (Final|Native|Private) // @ game+0x1ca51e0
	void OnTeamDataChanged(); // Function Solarland.OBTeamInfoWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x1ca5140
	void OnSpectateTargetChanged(); // Function Solarland.OBTeamInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x1ca5180
	void OnScrubCharactersCreated(); // Function Solarland.OBTeamInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x1ca5140
};

// Class Solarland.OBTeamListItemObject
// Size: 0x50 (Inherited: 0x28)
struct UOBTeamListItemObject : UObject {
	struct FOBTeamInfo Data; // 0x28(0x28)
};

// Class Solarland.OBTeamListItemWidget
// Size: 0x370 (Inherited: 0x340)
struct UOBTeamListItemWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct USolarImage* Image_TeamBG; // 0x348(0x08)
	struct USolarImage* Image_Frame; // 0x350(0x08)
	struct UTextBlock* Text_TeamNum; // 0x358(0x08)
	struct UVerticalBox* Panel_Teammates; // 0x360(0x08)
	struct UOBTeamListItemObject* DataObject; // 0x368(0x08)
};

// Class Solarland.OBTeamListPopupWidget
// Size: 0x378 (Inherited: 0x340)
struct UOBTeamListPopupWidget : USolarUserWidget {
	struct UOBTeamListWidget* OBTeamList; // 0x340(0x08)
	struct USolarUserWidget* UI_TabControl_TeamList; // 0x348(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Exit; // 0x358(0x08)
	char pad_360[0x18]; // 0x360(0x18)

	void UpdateNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.UpdateNearbyTeamList // (Final|Native|Private) // @ game+0x1ca5970
	void ToggleShowPlayerList(); // Function Solarland.OBTeamListPopupWidget.ToggleShowPlayerList // (Final|Native|Private) // @ game+0x1ca58b0
	void ShowNearbyTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowNearbyTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca5770
	void ShowAllTeamList(); // Function Solarland.OBTeamListPopupWidget.ShowAllTeamList // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca5750
	void OnUISettingUIAllChanged(bool bShow); // Function Solarland.OBTeamListPopupWidget.OnUISettingUIAllChanged // (Final|Native|Private) // @ game+0x1ca5290
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeamListPopupWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1ca4b80
	void OnAnimExitFinished(); // Function Solarland.OBTeamListPopupWidget.OnAnimExitFinished // (Final|Native|Private) // @ game+0x1ca4a40
	bool IsOBTeamListVisible(); // Function Solarland.OBTeamListPopupWidget.IsOBTeamListVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca4970
};

// Class Solarland.OBTeamListWidget
// Size: 0x3b8 (Inherited: 0x340)
struct UOBTeamListWidget : USolarUserWidget {
	struct USolarListView* ListView_Teams; // 0x340(0x08)
	char pad_348[0x58]; // 0x348(0x58)
	struct USolarOBUIModule* SolarOBUIModule; // 0x3a0(0x08)
	struct TArray<struct UObject*> TeamItemObjects; // 0x3a8(0x10)

	void OnTeamDataChanged(); // Function Solarland.OBTeamListWidget.OnTeamDataChanged // (Final|Native|Private) // @ game+0x1ca51c0
};

// Class Solarland.OBTeammateInfoWidget
// Size: 0x3c8 (Inherited: 0x340)
struct UOBTeammateInfoWidget : USolarUserWidget {
	struct UTextBlock* Text_NickName; // 0x340(0x08)
	struct UTextBlock* Text_KillNum; // 0x348(0x08)
	struct USolarButton* Btn_Spectate; // 0x350(0x08)
	struct UDeathViewHPWidget* OBHP; // 0x358(0x08)
	struct UImage* Image_SpectateIcon; // 0x360(0x08)
	struct UImage* Image_BoardedVehicleIcon; // 0x368(0x08)
	struct UOverlay* Overlay_Spectating; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct FOBTeammateInfo Data; // 0x380(0x38)
	char pad_3B8[0x10]; // 0x3b8(0x10)

	void UpdateRebirthUI(struct ASolarCharacter* InSolarCharacter); // Function Solarland.OBTeammateInfoWidget.UpdateRebirthUI // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void UpdateBuyResurrectionItemPlayerID(struct FString PlayerId); // Function Solarland.OBTeammateInfoWidget.UpdateBuyResurrectionItemPlayerID // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateBoardedVehicleIcon(); // Function Solarland.OBTeammateInfoWidget.OnUpdateBoardedVehicleIcon // (Final|Native|Private) // @ game+0x1ca5320
	void OnTeammateDead(); // Function Solarland.OBTeammateInfoWidget.OnTeammateDead // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnTeammateAlive(); // Function Solarland.OBTeammateInfoWidget.OnTeammateAlive // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSpectateTargetChanged(); // Function Solarland.OBTeammateInfoWidget.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x1ca51a0
	void OnScrubCharactersCreated(); // Function Solarland.OBTeammateInfoWidget.OnScrubCharactersCreated // (Final|Native|Private) // @ game+0x1ca5160
	void OnPlayerStateChange(bool bUselessParam); // Function Solarland.OBTeammateInfoWidget.OnPlayerStateChange // (Final|Native|Private) // @ game+0x1ca5020
	void OnPlayerRebirth(); // Function Solarland.OBTeammateInfoWidget.OnPlayerRebirth // (Final|Native|Private) // @ game+0x1ca5000
	void OnPlayerKillNumChange(); // Function Solarland.OBTeammateInfoWidget.OnPlayerKillNumChange // (Final|Native|Private) // @ game+0x1ca4fe0
	void OnPlayerDeadChange(); // Function Solarland.OBTeammateInfoWidget.OnPlayerDeadChange // (Final|Native|Private) // @ game+0x1ca4fc0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.OBTeammateInfoWidget.OnCharacterDead // (Final|Native|Private) // @ game+0x1ca4d40
	void OnBtnSpectateClick(); // Function Solarland.OBTeammateInfoWidget.OnBtnSpectateClick // (Final|Native|Private) // @ game+0x1ca4ca0
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.OBTeammateInfoWidget.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1ca4c10
};

// Class Solarland.OBVictory
// Size: 0x388 (Inherited: 0x348)
struct UOBVictory : UOBSettlementBase {
	char pad_348[0x10]; // 0x348(0x10)
	struct UWidgetAnimation* OpenVictoryAnim; // 0x358(0x08)
	struct UWidgetAnimation* CloseVictoryAnim; // 0x360(0x08)
	char pad_368[0x20]; // 0x368(0x20)

	void PlayAnim(); // Function Solarland.OBVictory.PlayAnim // (Final|Native|Public) // @ game+0x1ca5340
	void OnOpenVictoryAnimFinished(); // Function Solarland.OBVictory.OnOpenVictoryAnimFinished // (Final|Native|Private) // @ game+0x1ca4fa0
	void OnCloseVictoryAnimFinished(); // Function Solarland.OBVictory.OnCloseVictoryAnimFinished // (Final|Native|Private) // @ game+0x1ca4200
	void OnAnimEnd__DelegateSignature(); // DelegateFunction Solarland.OBVictory.OnAnimEnd__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictory.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x1c95e70
	void BroadcastOnAnimEnd(); // Function Solarland.OBVictory.BroadcastOnAnimEnd // (Final|Native|Private) // @ game+0x1ca4200
};

// Class Solarland.OBVictoryMember
// Size: 0x348 (Inherited: 0x340)
struct UOBVictoryMember : USolarUserLuaWidget {
	struct ASolarPlayerState* PlayerState; // 0x340(0x08)

	void InitPlayer(struct ASolarPlayerState* InState); // Function Solarland.OBVictoryMember.InitPlayer // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.OBVictoryTeam
// Size: 0x398 (Inherited: 0x348)
struct UOBVictoryTeam : UOBSettlementBase {
	struct UOBVictory* BigVictory; // 0x348(0x08)
	struct UOBVictory* SmallVictory; // 0x350(0x08)
	struct UCanvasPanel* TeamPanel; // 0x358(0x08)
	struct USolarTextBlock* Txt_TeamNum; // 0x360(0x08)
	struct USolarTextBlock* Txt_KillNum; // 0x368(0x08)
	struct USolarTextBlock* Txt_TeamCnt; // 0x370(0x08)
	struct UHorizontalBox* AvatarHorization; // 0x378(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x380(0x08)
	char pad_388[0x10]; // 0x388(0x10)

	void OnAnimEndEvent(); // Function Solarland.OBVictoryTeam.OnAnimEndEvent // (Final|Native|Private) // @ game+0x1ca4a20
	void InitPanel(struct UOBSettlementRoot* InOwner); // Function Solarland.OBVictoryTeam.InitPanel // (Native|Public|BlueprintCallable) // @ game+0x1c95e70
};

// Class Solarland.OpenTreasureBoxProgressWidget
// Size: 0x388 (Inherited: 0x340)
struct UOpenTreasureBoxProgressWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x348(0x08)
	char pad_350[0x10]; // 0x350(0x10)
	struct UButton* Button_Open; // 0x360(0x08)
	struct UButton* Button_Cancel; // 0x368(0x08)
	struct UProgressBar* ProgressBar_Percent; // 0x370(0x08)
	struct UImage* ProgressBar_Percent_PC; // 0x378(0x08)
	struct UTextBlock* Txt_Time; // 0x380(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.OpenTreasureBoxProgressWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x1ca5c10
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8ba190
	bool TryOpenAirdropBox(); // Function Solarland.OpenTreasureBoxProgressWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x1ca58d0
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x1ca55d0
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxProgressWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x1ca54b0
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x1ca5360
	void OnPressCancelButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x1ca5120
	bool OnPressButtonPC(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x1ca50f0
	void OnPressButtonOpen(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonOpen // (Final|Native|Protected) // @ game+0x1ca50d0
	void OnPressButtonCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.OnPressButtonCancel // (Final|Native|Protected) // @ game+0x1ca50b0
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x1ca4f20
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxProgressWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x1ca4de0
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.OpenTreasureBoxProgressWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x1c89360
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.OpenTreasureBoxProgressWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x1ca49a0
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x1ca4260
	void ForceCancel(); // Function Solarland.OpenTreasureBoxProgressWidget.ForceCancel // (Final|Native|Protected) // @ game+0x1ca4220
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxProgressWidget.BSameThisID // (Final|Native|Protected) // @ game+0x1ca40a0
	void BindDelegates(); // Function Solarland.OpenTreasureBoxProgressWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1ca41c0
};

// Class Solarland.OpenTreasureBoxWidget
// Size: 0x370 (Inherited: 0x340)
struct UOpenTreasureBoxWidget : USolarUserWidget {
	char pad_340[0x20]; // 0x340(0x20)
	struct UButton* Button_Open; // 0x360(0x08)
	struct UTextBlock* Text_CostNum; // 0x368(0x08)

	void UpdateCost(); // Function Solarland.OpenTreasureBoxWidget.UpdateCost // (Final|Native|Protected) // @ game+0x1ca5950
	void UpdateButtonState(); // Function Solarland.OpenTreasureBoxWidget.UpdateButtonState // (Final|Native|Protected) // @ game+0x1ca5930
	void UnBindDelegates(); // Function Solarland.OpenTreasureBoxWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8ba190
	bool TryOpenTreasureBox(); // Function Solarland.OpenTreasureBoxWidget.TryOpenTreasureBox // (Final|Native|Protected) // @ game+0x1ca5900
	void SetTreasureBoxActor(struct AActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTreasureBoxActor // (Final|Native|Protected) // @ game+0x1ca56d0
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.OpenTreasureBoxWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x1ca5650
	void SetSelfVisibility(bool InShow); // Function Solarland.OpenTreasureBoxWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x1ca5540
	void OnOpenBox(); // Function Solarland.OpenTreasureBoxWidget.OnOpenBox // (Final|Native|Protected) // @ game+0x1ca4f00
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.OpenTreasureBoxWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x1ca4e60
	void OnClickButtonOpen(); // Function Solarland.OpenTreasureBoxWidget.OnClickButtonOpen // (Final|Native|Protected) // @ game+0x1ca4dc0
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x1ca42e0
	bool BSameThisID(int64_t InThisID); // Function Solarland.OpenTreasureBoxWidget.BSameThisID // (Final|Native|Protected) // @ game+0x1ca4130
	void BindDelegates(); // Function Solarland.OpenTreasureBoxWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1ca41e0
};

// Class Solarland.PakHashManager
// Size: 0xb0 (Inherited: 0x28)
struct UPakHashManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnPakHashCheckFailed; // 0x30(0x10)
	bool bEnablePakHash; // 0x40(0x01)
	char pad_41[0x1f]; // 0x41(0x1f)
	struct TMap<struct FString, struct FString> MountedPakHashMap; // 0x60(0x50)

	bool IsPakFileHashsReady(); // Function Solarland.PakHashManager.IsPakFileHashsReady // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca82a0
	bool IsEnablePakHash(); // Function Solarland.PakHashManager.IsEnablePakHash // (Final|Native|Public|BlueprintCallable) // @ game+0x1c71200
	struct TMap<struct FString, struct FString> GetReadyPakFileHashs(); // Function Solarland.PakHashManager.GetReadyPakFileHashs // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca81b0
	struct TArray<struct FString> GetAllMountedPakNames(); // Function Solarland.PakHashManager.GetAllMountedPakNames // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca8040
	bool CheckAllMountedPaks(struct TMap<struct FString, struct FString>& BasePakMap, struct TMap<struct FString, struct FString>& PatchPakMap); // Function Solarland.PakHashManager.CheckAllMountedPaks // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void CalculatePakFileMD5(); // Function Solarland.PakHashManager.CalculatePakFileMD5 // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca7f90
};

// Class Solarland.ParallelMoveSubsystem
// Size: 0x78 (Inherited: 0x30)
struct UParallelMoveSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Solarland.PassiveSkillDataAsset
// Size: 0x78 (Inherited: 0x30)
struct UPassiveSkillDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath SkillClassPath; // 0x30(0x18)
	struct FSoftObjectPath SkillIconPath; // 0x48(0x18)
	struct FWrappedLocalTextID SkillName; // 0x60(0x04)
	struct FWrappedLocalTextID SkillDescription; // 0x64(0x04)
	struct TArray<struct FPassiveSkillLevelDescription> LevelUpConfigs; // 0x68(0x10)
};

// Class Solarland.PassiveSkillIcon
// Size: 0x278 (Inherited: 0x260)
struct UPassiveSkillIcon : UUserWidget {
	struct UImage* ImgIcon; // 0x260(0x08)
	char pad_268[0x10]; // 0x268(0x10)

	void UpdateImageIcon(int32_t InCharacterId); // Function Solarland.PassiveSkillIcon.UpdateImageIcon // (Final|Native|Protected) // @ game+0x1ca9ee0
};

// Class Solarland.PickupButtonWidget
// Size: 0x420 (Inherited: 0x340)
struct UPickupButtonWidget : USolarUserWidget {
	struct UCheckBox* CheckBox_Normal; // 0x340(0x08)
	struct USizeBox* SizeBox_Normal; // 0x348(0x08)
	struct FString CurrentCheckBoxSpName; // 0x350(0x10)
	struct FString CheckBoxIconNormalSpName; // 0x360(0x10)
	struct FString CheckBoxIconHightLightSpName; // 0x370(0x10)
	struct FString CheckBoxIconPrefix; // 0x380(0x10)
	struct FVector2D Vecter2DZero; // 0x390(0x08)
	struct FVector2D Vecter2DOne; // 0x398(0x08)
	enum class EPickupItemType FirstExistType; // 0x3a0(0x01)
	enum class EPickupItemType CurrentDisplayType; // 0x3a1(0x01)
	char pad_3A2[0x6]; // 0x3a2(0x06)
	struct TArray<struct AActor*> CurrentDispayActorList; // 0x3a8(0x10)
	char pad_3B8[0x68]; // 0x3b8(0x68)

	void UpdateCheckBoxesVisibilityRef(int32_t InItemCount); // Function Solarland.PickupButtonWidget.UpdateCheckBoxesVisibilityRef // (Final|Native|Protected) // @ game+0x1ca9e60
	void UnbindPickUpDelegates(); // Function Solarland.PickupButtonWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x1ca9e20
	void SetPickupSwitchByType(enum class EPickupItemType InType, bool InFlag); // Function Solarland.PickupButtonWidget.SetPickupSwitchByType // (Final|Native|Protected) // @ game+0x1ca9bb0
	void SetItemDataRef(struct TArray<struct AActor*>& InObjectList, enum class EPickupItemType InType); // Function Solarland.PickupButtonWidget.SetItemDataRef // (Final|Native|Protected|HasOutParms) // @ game+0x1ca9ac0
	void OnUpdatePickupListStates(bool bItemUpdate); // Function Solarland.PickupButtonWidget.OnUpdatePickupListStates // (Final|Native|Protected) // @ game+0x1ca9370
	void OnUpdateCheckBoxesHighLight(enum class EPickupItemType InType, bool IsRecommend); // Function Solarland.PickupButtonWidget.OnUpdateCheckBoxesHighLight // (Final|Native|Protected) // @ game+0x1ca92a0
	void OnTogglePickupListByKeyboard(); // Function Solarland.PickupButtonWidget.OnTogglePickupListByKeyboard // (Final|Native|Protected) // @ game+0x1ca9280
	void OnTogglePickupList(bool Flag, bool NotSelf); // Function Solarland.PickupButtonWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x1ca90e0
	void OnPickupListClear(); // Function Solarland.PickupButtonWidget.OnPickupListClear // (Final|Native|Protected) // @ game+0x1ca8fc0
	void OnCheckNormal(bool IsChecked); // Function Solarland.PickupButtonWidget.OnCheckNormal // (Final|Native|Protected) // @ game+0x1ca8380
	void BindPickUpDelegates(); // Function Solarland.PickupButtonWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x1ca7f50
};

// Class Solarland.PickupItemObject
// Size: 0x100 (Inherited: 0x28)
struct UPickupItemObject : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FPickupListViewItemData Data; // 0x30(0xc8)
	struct UObject* CustomizedData; // 0xf8(0x08)

	void ResetData(); // Function Solarland.PickupItemObject.ResetData // (Final|Native|Public) // @ game+0x1ca9990
};

// Class Solarland.PickupItemWidget
// Size: 0x700 (Inherited: 0x340)
struct UPickupItemWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct UCanvasPanel* CanvasPanel_Anim; // 0x348(0x08)
	struct UTextBlock* Debug; // 0x350(0x08)
	struct UOverlay* Item; // 0x358(0x08)
	struct UImage* Img_Quality_BG; // 0x360(0x08)
	struct UImage* Img_Quality_BG_Line; // 0x368(0x08)
	struct UImage* ItemImage_BG; // 0x370(0x08)
	struct UImage* ItemImage; // 0x378(0x08)
	struct UImage* TagImage; // 0x380(0x08)
	struct UImage* ImgBulletType; // 0x388(0x08)
	struct USolarTextBlock* ItemName; // 0x390(0x08)
	struct UTextBlock* ItemCount; // 0x398(0x08)
	struct UTextBlock* ItemCountAdd; // 0x3a0(0x08)
	struct USolarTextBlock* ItemDesc; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_WeaponSkill; // 0x3b0(0x08)
	struct USizeBox* ItemSubDesc; // 0x3b8(0x08)
	struct UCanvasPanel* CardItemIcon; // 0x3c0(0x08)
	struct USolarCheckBox* Mark; // 0x3c8(0x08)
	struct USizeBox* SizeBox_Select; // 0x3d0(0x08)
	struct FSolarItemData ItemData; // 0x3d8(0xb0)
	struct FPickupListViewItemData Data; // 0x488(0xc8)
	struct UObject* CustomizeData; // 0x550(0x08)
	enum class EItemType PickActorType; // 0x558(0x04)
	char pad_55C[0x4]; // 0x55c(0x04)
	struct FString WeaponPartPrePath; // 0x560(0x10)
	struct FString ItemPrePath; // 0x570(0x10)
	struct FLinearColor ColorNormal; // 0x580(0x10)
	struct FLinearColor ColorRecommend; // 0x590(0x10)
	struct FLinearColor ColorWeaponUp; // 0x5a0(0x10)
	struct FLinearColor ColorWeaponDown; // 0x5b0(0x10)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x5c0(0x50)
	int32_t WeaponMaxLevelLocalID; // 0x610(0x04)
	int32_t WeaponUpgradeLocalID; // 0x614(0x04)
	bool bForceResetAnim; // 0x618(0x01)
	bool bMarkForceUpdate; // 0x619(0x01)
	char pad_61A[0x73]; // 0x61a(0x73)
	bool bImplementedUpdateFunc; // 0x68d(0x01)
	char pad_68E[0x2]; // 0x68e(0x02)
	struct TArray<struct FLinearColor> ImgQualityBGColors; // 0x690(0x10)
	struct TArray<struct FSlateColor> ItemNameColors; // 0x6a0(0x10)
	struct TMap<int32_t, struct UTexture2D*> CacheQualityBgMap; // 0x6b0(0x50)

	void UpdateQuality(int32_t SpecifyQuality); // Function Solarland.PickupItemWidget.UpdateQuality // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca9f60
	void TryResetEntryAnim(); // Function Solarland.PickupItemWidget.TryResetEntryAnim // (Final|Native|Protected) // @ game+0x1ca9de0
	void OnUpdateItemSlotInLua(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnUpdateItemSlotInLua // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateCustomizedItem(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnUpdateCustomizedItem // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRquestEntryPlayAnimCustom(struct UObject* InCustomObj); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnimCustom // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca9060
	void OnRquestEntryPlayAnim(int32_t InThisID); // Function Solarland.PickupItemWidget.OnRquestEntryPlayAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca8fe0
	void OnCustomizedItemClicked(struct UObject* InObject); // Function Solarland.PickupItemWidget.OnCustomizedItemClicked // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void MarkItemInPickupList(); // Function Solarland.PickupItemWidget.MarkItemInPickupList // (Final|Native|Public) // @ game+0x1ca82d0
	bool IfThisItemBeenMarked(int64_t instanceID, int32_t PosInTeam); // Function Solarland.PickupItemWidget.IfThisItemBeenMarked // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.PickupListWidget
// Size: 0x470 (Inherited: 0x340)
struct UPickupListWidget : USolarUserWidget {
	struct USizeBox* SizeBoxItemList; // 0x340(0x08)
	struct USolarListView* ItemList; // 0x348(0x08)
	struct UPickupSightWidget* UI_Pickup_Sight; // 0x350(0x08)
	struct FVector2D ScopeOffset; // 0x358(0x08)
	int32_t PickupItemCount; // 0x360(0x04)
	float RefreshSelectDelay; // 0x364(0x04)
	struct FName PickupPreActionName; // 0x368(0x08)
	struct FName PickupNextActionName; // 0x370(0x08)
	struct FVector2D ZeroVector; // 0x378(0x08)
	struct FTimerHandle PushHandler; // 0x380(0x08)
	int32_t DisplayLength; // 0x388(0x04)
	bool bIsMovePos; // 0x38c(0x01)
	char pad_38D[0x3]; // 0x38d(0x03)
	int32_t SelectScopeThisID; // 0x390(0x04)
	char pad_394[0x1c]; // 0x394(0x1c)
	struct TMap<int64_t, struct UPickupItemObject*> CachedPickupItemsMap; // 0x3b0(0x50)
	struct TArray<struct UObject*> WarppedItemList; // 0x400(0x10)
	struct TArray<struct UObject*> WarppedTeamCardList; // 0x410(0x10)
	char pad_420[0x50]; // 0x420(0x50)

	void UnbindPickUpDelegates(); // Function Solarland.PickupListWidget.UnbindPickUpDelegates // (Final|Native|Protected) // @ game+0x1ca9e00
	bool TryPickupFirstItem(bool bAutoPickup); // Function Solarland.PickupListWidget.TryPickupFirstItem // (Final|Native|Public) // @ game+0x1ca9d50
	void SetSelectPreviousItem(); // Function Solarland.PickupListWidget.SetSelectPreviousItem // (Final|Native|Protected) // @ game+0x1ca9ca0
	void SetSelectNextItem(); // Function Solarland.PickupListWidget.SetSelectNextItem // (Final|Native|Protected) // @ game+0x1ca9c80
	void SetIsMovePostion(bool InIsMovePos); // Function Solarland.PickupListWidget.SetIsMovePostion // (Final|Native|Public) // @ game+0x1ca9a30
	void RemoveCardItem(struct UObject* InCardItem, bool bPickup); // Function Solarland.PickupListWidget.RemoveCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca98c0
	void RefreshPickupSightWidget(struct UObject* InSelectWidget, int32_t InSelectWidgetThisID); // Function Solarland.PickupListWidget.RefreshPickupSightWidget // (Final|Native|Public) // @ game+0x1ca9800
	void RefreshListViewNextTick(); // Function Solarland.PickupListWidget.RefreshListViewNextTick // (Final|Native|Public) // @ game+0x1ca97e0
	void OnTogglePickupList(bool bShow, bool NotToSelf); // Function Solarland.PickupListWidget.OnTogglePickupList // (Final|Native|Protected) // @ game+0x1ca91b0
	void OnPickupListCalculated(struct TArray<struct AActor*>& InActorList, enum class EPickupItemType InType); // Function Solarland.PickupListWidget.OnPickupListCalculated // (Final|Native|Protected|HasOutParms) // @ game+0x1ca8ed0
	void OnEntryPlayPickupAnim(float InAnimTime); // Function Solarland.PickupListWidget.OnEntryPlayPickupAnim // (Final|Native|Public) // @ game+0x1ca8e50
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PickupListWidget.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca8dd0
	struct UObject* GetCustomObjData(struct UObject* InItemData); // Function Solarland.PickupListWidget.GetCustomObjData // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca8120
	bool CheckIsPickupItemValid(int32_t InThisID); // Function Solarland.PickupListWidget.CheckIsPickupItemValid // (Final|Native|Public) // @ game+0x1ca7fb0
	void BindPickUpDelegates(); // Function Solarland.PickupListWidget.BindPickUpDelegates // (Final|Native|Protected) // @ game+0x1ca7f70
	void AddCardItem(struct UObject* InCardItem); // Function Solarland.PickupListWidget.AddCardItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ca7ed0
};

// Class Solarland.PickupSightWidget
// Size: 0x3e8 (Inherited: 0x340)
struct UPickupSightWidget : USolarUserWidget {
	struct UImage* Img_WeaponA; // 0x340(0x08)
	struct UImage* Img_WeaponB; // 0x348(0x08)
	struct UImage* Img_Backpack; // 0x350(0x08)
	struct UImage* Img_DisableA; // 0x358(0x08)
	struct UImage* Img_DisableB; // 0x360(0x08)
	struct UImage* Img_Border_A; // 0x368(0x08)
	struct UImage* Img_Border_B; // 0x370(0x08)
	struct UImage* Img_Disable_Bag; // 0x378(0x08)
	struct UCanvasPanel* Panel_WP_UnarmA; // 0x380(0x08)
	struct UCanvasPanel* Panel_WP_UnarmB; // 0x388(0x08)
	struct UCanvasPanel* Panel_Arrow_Left; // 0x390(0x08)
	struct UCanvasPanel* Panel_Arrow_Right; // 0x398(0x08)
	struct UUIWeaponPartWidget* WeaponPartA; // 0x3a0(0x08)
	struct UUIWeaponPartWidget* WeaponPartB; // 0x3a8(0x08)
	struct UUIWeaponPartWidget* WeaponPartBag; // 0x3b0(0x08)
	enum class EWeaponPartType PickScopeType; // 0x3b8(0x01)
	char pad_3B9[0x3]; // 0x3b9(0x03)
	int32_t PickScopeLevel; // 0x3bc(0x04)
	struct AActor* PickActor; // 0x3c0(0x08)
	int32_t PickThisId; // 0x3c8(0x04)
	enum class EItemType PickActorType; // 0x3cc(0x04)
	struct FLinearColor ColorDisable; // 0x3d0(0x10)
	char pad_3E0[0x8]; // 0x3e0(0x08)

	void UpdateBagScope(); // Function Solarland.PickupSightWidget.UpdateBagScope // (Final|Native|Public) // @ game+0x1ca9e40
	void OnWeaponUpgradeLevel(int32_t InWeaponSlot); // Function Solarland.PickupSightWidget.OnWeaponUpgradeLevel // (Final|Native|Public) // @ game+0x1ca9480
	void OnWeaponUpdate(struct ASolarCharacter* InCharacter); // Function Solarland.PickupSightWidget.OnWeaponUpdate // (Final|Native|Public) // @ game+0x1ca9400
	void OnClickWeaponB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponB // (Final|Native|Protected|HasOutParms) // @ game+0x1ca8c30
	void OnClickWeaponA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickWeaponA // (Final|Native|Protected|HasOutParms) // @ game+0x1ca8a90
	void OnClickImgDisableBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableBag // (Final|Native|Protected|HasOutParms) // @ game+0x1ca88f0
	void OnClickImgDisableB(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableB // (Final|Native|Protected|HasOutParms) // @ game+0x1ca8750
	void OnClickImgDisableA(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickImgDisableA // (Final|Native|Protected|HasOutParms) // @ game+0x1ca85b0
	void OnClickBag(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent); // Function Solarland.PickupSightWidget.OnClickBag // (Final|Native|Protected|HasOutParms) // @ game+0x1ca8410
};

// Class Solarland.PlayerMark
// Size: 0x280 (Inherited: 0x260)
struct UPlayerMark : UUserWidget {
	struct UImage* PlayerMarkImage; // 0x260(0x08)
	struct UTextBlock* Length; // 0x268(0x08)
	struct USolarMapManager* MapManager; // 0x270(0x08)
	struct FVector2D MarkPoint; // 0x278(0x08)
};

// Class Solarland.PlayerOperationList
// Size: 0x6e0 (Inherited: 0x340)
struct UPlayerOperationList : USolarUserWidget {
	struct TMap<struct FString, struct UWidget*> CollectedLayout; // 0x340(0x50)
	char pad_390[0x50]; // 0x390(0x50)
	enum class EPlayerWidgetState WidgetVisibilityState; // 0x3e0(0x01)
	char pad_3E1[0x7]; // 0x3e1(0x07)
	struct UCanvasPanel* Panel_AngleView; // 0x3e8(0x08)
	struct UWidgetControlGroup* FlyActiveControl; // 0x3f0(0x08)
	struct UWidgetControlGroup* JetActiveControl; // 0x3f8(0x08)
	struct USolarMovablePad* FreeLookPad; // 0x400(0x08)
	struct UImage* FreeLookIcon; // 0x408(0x08)
	struct UImage* Img_SprintActive; // 0x410(0x08)
	struct UImage* Img_SprintLock; // 0x418(0x08)
	struct UImage* FX_CircleLoop; // 0x420(0x08)
	struct TSoftObjectPtr<UPaperSprite> PressedFreeLook; // 0x428(0x28)
	struct TSoftObjectPtr<UPaperSprite> ReleasedFreeLook; // 0x450(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintImage; // 0x478(0x28)
	struct TSoftObjectPtr<UTexture> SkydiveSprintHoveredImage; // 0x4a0(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveImage; // 0x4c8(0x28)
	struct TSoftObjectPtr<UTexture> VehicleAutoMoveHoveredImage; // 0x4f0(0x28)
	struct UCanvasPanel* Panel_SpectateHide; // 0x518(0x08)
	struct UHUDCountdownWidget* Panel_CountDown; // 0x520(0x08)
	struct USolarInputButton* BT_Jump; // 0x528(0x08)
	struct UButton* BTN_TeamRescue; // 0x530(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_RescueBTN; // 0x538(0x08)
	struct UHUDPassiveHeadWidget* UI_PassiveHead_item; // 0x540(0x08)
	struct UCanvasPanel* Panel_Crouch; // 0x548(0x08)
	struct UCanvasPanel* Sprint; // 0x550(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x558(0x08)
	struct USolarTextBlock* Txt_JoystickLock; // 0x560(0x08)
	struct UWidgetAnimation* FX_CircleOnce_Anim; // 0x568(0x08)
	struct UWidgetAnimation* FX_CircleLoop_Anim; // 0x570(0x08)
	int32_t JoystickLockTipsSprintTextID; // 0x578(0x04)
	int32_t JoystickLockTipsSkydiveTextID; // 0x57c(0x04)
	struct UButton* BTN_BuyResurrection; // 0x580(0x08)
	struct UCanvasPanel* Panel_ShieldUpgrade; // 0x588(0x08)
	struct UWidgetSwitcher* Switcher_State; // 0x590(0x08)
	struct UCanvasPanel* Panel_Btn; // 0x598(0x08)
	struct UCanvasPanel* Panel_CD; // 0x5a0(0x08)
	struct USolarButton* Btn_ShiledUpgrade; // 0x5a8(0x08)
	struct UImage* img_Light; // 0x5b0(0x08)
	struct UImage* Img_Enter_Light_2; // 0x5b8(0x08)
	struct UImage* Img_Enter_Light_3; // 0x5c0(0x08)
	struct UImage* Img_Loop_Light_2; // 0x5c8(0x08)
	struct UImage* Img_Loop_Light_3; // 0x5d0(0x08)
	struct UImage* Img_Loop_Arrow_4; // 0x5d8(0x08)
	char pad_5E0[0x8]; // 0x5e0(0x08)
	struct UImage* Img_Shield; // 0x5e8(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x5f0(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x5f8(0x08)
	struct UGaugeImage* Image_GameProgressBar; // 0x600(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Enter; // 0x608(0x08)
	struct UWidgetAnimation* Anim_ShieldUpgrade_Exit; // 0x610(0x08)
	float CircleOnceAnimInterval; // 0x618(0x04)
	int32_t FastReliefSkillCharacterID; // 0x61c(0x04)
	char pad_620[0x50]; // 0x620(0x50)
	struct USolarButton* BT_ElectricShop; // 0x670(0x08)
	char pad_678[0xc]; // 0x678(0x0c)
	float EShopHUDCheckTime; // 0x684(0x04)
	struct FString EShopHUDName; // 0x688(0x10)
	char pad_698[0x8]; // 0x698(0x08)
	struct UHorizontalBox* Vehicle_Drive; // 0x6a0(0x08)
	struct UHorizontalBox* Vehicle_Passenger; // 0x6a8(0x08)
	struct UCanvasPanel* Vehicle_Repair_Status; // 0x6b0(0x08)
	struct UCanvasPanel* Panel_Vehicle_Drive_Passenger; // 0x6b8(0x08)
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x6c0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_VehicleRepair; // 0x6c8(0x08)
	struct UWalkWidgetNew* WalkJoyStick; // 0x6d0(0x08)
	char bJoyStickVisible : 1; // 0x6d8(0x01)
	char pad_6D8_1 : 7; // 0x6d8(0x01)
	char pad_6D9[0x7]; // 0x6d9(0x07)

	void UpdateFreeLookUI(bool bHide); // Function Solarland.PlayerOperationList.UpdateFreeLookUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1cae5a0
	void SwitchWidgetVisibilityByState(enum class EPlayerWidgetState NewState); // Function Solarland.PlayerOperationList.SwitchWidgetVisibilityByState // (Final|Native|Public|BlueprintCallable) // @ game+0x1cae200
	void SetUIShowForSwimming(bool bSwimming); // Function Solarland.PlayerOperationList.SetUIShowForSwimming // (Final|Native|Public|BlueprintCallable) // @ game+0x1cae050
	void SetUIShowForSpectateMode(bool InSepectateMode); // Function Solarland.PlayerOperationList.SetUIShowForSpectateMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1cadfc0
	void SetShowBattleControls(bool bShow); // Function Solarland.PlayerOperationList.SetShowBattleControls // (Final|Native|Public|BlueprintCallable) // @ game+0x1ca82f0
	void SetRescueBtnVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetRescueBtnVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1cadf30
	void SetJoyStickForVehicle(); // Function Solarland.PlayerOperationList.SetJoyStickForVehicle // (Final|Native|Public) // @ game+0x1cade90
	void SetJoyStickForSkydive(); // Function Solarland.PlayerOperationList.SetJoyStickForSkydive // (Final|Native|Public) // @ game+0x1cade70
	void SetJoyStickForNormal(); // Function Solarland.PlayerOperationList.SetJoyStickForNormal // (Final|Native|Public) // @ game+0x1cade50
	void SetJoyStickDisplay(bool bShow, bool bParachutingType); // Function Solarland.PlayerOperationList.SetJoyStickDisplay // (Final|Native|Public) // @ game+0x1cadd80
	void SetForceCollapsedFreeLook(bool bCollapsed); // Function Solarland.PlayerOperationList.SetForceCollapsedFreeLook // (Final|Native|Public|BlueprintCallable) // @ game+0x1cadd00
	void SetCanClimbFromWater(bool bEnable); // Function Solarland.PlayerOperationList.SetCanClimbFromWater // (Final|Native|Public|BlueprintCallable) // @ game+0x1cadc70
	void SetBuyResurrecBTNVisibility(bool bShow); // Function Solarland.PlayerOperationList.SetBuyResurrecBTNVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1cadbe0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.PlayerOperationList.ScopeUIStateChanged // (Final|Native|Public) // @ game+0x1cadb30
	void ResetJoyStickSprintState(); // Function Solarland.PlayerOperationList.ResetJoyStickSprintState // (Final|Native|Protected) // @ game+0x1cadb10
	void ResetJoyStickControlInput(); // Function Solarland.PlayerOperationList.ResetJoyStickControlInput // (Final|Native|Protected) // @ game+0x1cadaf0
	void ResetJoyStick(); // Function Solarland.PlayerOperationList.ResetJoyStick // (Final|Native|Protected) // @ game+0x1cadad0
	void RecheckElectricShopInteraction(); // Function Solarland.PlayerOperationList.RecheckElectricShopInteraction // (Final|Native|Protected) // @ game+0x1cad970
	void OnVehicleTypeChanged(); // Function Solarland.PlayerOperationList.OnVehicleTypeChanged // (Final|Native|Protected) // @ game+0x1cad590
	void OnUpdateVehicleInteractionUIState(enum class EVehicleInterationUIState InUiState, struct ASolarVehiclePawn* InVehicleComponent); // Function Solarland.PlayerOperationList.OnUpdateVehicleInteractionUIState // (Final|Native|Protected) // @ game+0x1cad4d0
	void OnTerminateSprintFree(); // Function Solarland.PlayerOperationList.OnTerminateSprintFree // (Final|Native|Public) // @ game+0x1cad4b0
	void OnSprintLockIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintLockIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x1cad430
	void OnSprintIconHideFunc(); // Function Solarland.PlayerOperationList.OnSprintIconHideFunc // (Final|Native|Public) // @ game+0x1cad410
	void OnSprintIconActiveFunc(struct FVector2D SprintPosition); // Function Solarland.PlayerOperationList.OnSprintIconActiveFunc // (Final|Native|Public|HasDefaults) // @ game+0x1cad390
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.PlayerOperationList.OnSpectateTargetChanged // (Final|Native|Protected) // @ game+0x1cad2d0
	void OnShieldUpgradeStart(); // Function Solarland.PlayerOperationList.OnShieldUpgradeStart // (Final|Native|Protected) // @ game+0x1cad2b0
	void OnShieldUpgradeItemChanged(int32_t NewCount, int32_t LastCount); // Function Solarland.PlayerOperationList.OnShieldUpgradeItemChanged // (Final|Native|Public) // @ game+0x1cad1f0
	void OnShieldUpgradeInterrupt(); // Function Solarland.PlayerOperationList.OnShieldUpgradeInterrupt // (Final|Native|Protected) // @ game+0x1cad1d0
	void OnShieldUpgradeFinish(); // Function Solarland.PlayerOperationList.OnShieldUpgradeFinish // (Final|Native|Protected) // @ game+0x1cad1d0
	void OnShieldChanged(float InCurValue, float InMaxValue, int32_t QualityColor, bool bIsAdvancedShield); // Function Solarland.PlayerOperationList.OnShieldChanged // (Final|Native|Public) // @ game+0x1cad080
	void OnShieldAvailableChanged(bool bShow); // Function Solarland.PlayerOperationList.OnShieldAvailableChanged // (Final|Native|Public) // @ game+0x1cacff0
	void OnSettingConfigSaved(); // Function Solarland.PlayerOperationList.OnSettingConfigSaved // (Final|Native|Protected) // @ game+0x1cacfd0
	void OnPickupSwitchChanged(bool Inactive, bool InNotToSelf); // Function Solarland.PlayerOperationList.OnPickupSwitchChanged // (Final|Native|Protected) // @ game+0x1cacf00
	void OnLocalPlaySet(); // Function Solarland.PlayerOperationList.OnLocalPlaySet // (Final|Native|Public) // @ game+0x1cacee0
	void OnInVehicleJoyStickChange(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnInVehicleJoyStickChange // (Final|Native|Protected) // @ game+0x1cace60
	void OnFreeLookPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadRelease // (Final|Native|Public|HasOutParms) // @ game+0x1caccc0
	void OnFreeLookPadPressed(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.PlayerOperationList.OnFreeLookPadPressed // (Final|Native|Public|HasOutParms) // @ game+0x1cacb20
	void OnEnterParachuting(); // Function Solarland.PlayerOperationList.OnEnterParachuting // (Final|Native|Public|BlueprintCallable) // @ game+0x1cacb00
	void OnEnterLanding(); // Function Solarland.PlayerOperationList.OnEnterLanding // (Final|Native|Public|BlueprintCallable) // @ game+0x1cacae0
	void OnEnterCruising(); // Function Solarland.PlayerOperationList.OnEnterCruising // (Final|Native|Public|BlueprintCallable) // @ game+0x1cacac0
	void OnElectricShopBtnClickedPC(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClickedPC // (Final|Native|Protected) // @ game+0x1cacaa0
	void OnElectricShopBtnClicked(); // Function Solarland.PlayerOperationList.OnElectricShopBtnClicked // (Final|Native|Protected) // @ game+0x1caca80
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationList.OnDrivingStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x1caca00
	void OnClickBuyResurrection(); // Function Solarland.PlayerOperationList.OnClickBuyResurrection // (Final|Native|Public) // @ game+0x1cac960
	void OnClickBtnTeamRescue(); // Function Solarland.PlayerOperationList.OnClickBtnTeamRescue // (Final|Native|Public) // @ game+0x1cac940
	void OnClickBtnShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnShieldUpgrade // (Final|Native|Public) // @ game+0x1cac920
	void OnClickBtnCancelShieldUpgrade(); // Function Solarland.PlayerOperationList.OnClickBtnCancelShieldUpgrade // (Final|Native|Public) // @ game+0x1cac900
	void OnCharacterUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.PlayerOperationList.OnCharacterUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x1cac800
	void OnCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.PlayerOperationList.OnCharacterSet // (Final|Native|Protected) // @ game+0x1cac780
	void OnCharacterOverlapedElectricShop(bool InFlag); // Function Solarland.PlayerOperationList.OnCharacterOverlapedElectricShop // (Final|Native|Protected) // @ game+0x1cac6f0
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.PlayerOperationList.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x1cac670
	void InputSprintLockStart(); // Function Solarland.PlayerOperationList.InputSprintLockStart // (Final|Native|Public) // @ game+0x1cac550
	void InputSprintFreeStart(); // Function Solarland.PlayerOperationList.InputSprintFreeStart // (Final|Native|Public) // @ game+0x1cac530
	enum class EDriveState GetLocallPlayerDriveState(); // Function Solarland.PlayerOperationList.GetLocallPlayerDriveState // (Final|Native|Public) // @ game+0x1cac340
	void DoUpdateEShopButton(); // Function Solarland.PlayerOperationList.DoUpdateEShopButton // (Final|Native|Protected) // @ game+0x1cac320
	bool CheckEShopHUDActive(); // Function Solarland.PlayerOperationList.CheckEShopHUDActive // (Final|Native|Protected) // @ game+0x1cac250
	void ApplyPlayerJoyStickLayout(); // Function Solarland.PlayerOperationList.ApplyPlayerJoyStickLayout // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.PlayerOperationListPC
// Size: 0x6e8 (Inherited: 0x6e0)
struct UPlayerOperationListPC : UPlayerOperationList {
	struct UCanvasPanel* Panel_MobileHide; // 0x6e0(0x08)

	void OnChangedDriveState(enum class EDriveState InDriveState); // Function Solarland.PlayerOperationListPC.OnChangedDriveState // (Final|Native|Protected) // @ game+0x1cac570
};

// Class Solarland.WeaponRecoilComponent
// Size: 0x228 (Inherited: 0xb0)
struct UWeaponRecoilComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct USolarGameInstanceBase* GameInstance; // 0xb8(0x08)
	bool bHActive; // 0xc0(0x01)
	bool bVActive; // 0xc1(0x01)
	bool bRActive; // 0xc2(0x01)
	char pad_C3[0x5]; // 0xc3(0x05)
	struct ASolarWeapon* MyWeaponActor; // 0xc8(0x08)
	struct USingleWeaponConfig* WeaponConfig; // 0xd0(0x08)
	struct UCurveFloat* YawCurve; // 0xd8(0x08)
	struct UCurveFloat* PitchCurve; // 0xe0(0x08)
	struct UCurveFloat* RollCurve; // 0xe8(0x08)
	struct UCurveFloat* ScopeRollCurve; // 0xf0(0x08)
	struct UCurveFloat* ScopePitchCurve; // 0xf8(0x08)
	struct TArray<struct FRichCurveKey> OriginalScopePitchKeys; // 0x100(0x10)
	struct UAmmoConfig* CurrentAmmoConfig; // 0x110(0x08)
	char pad_118[0xc8]; // 0x118(0xc8)
	struct TArray<struct UCurveFloat*> YawCurveArray; // 0x1e0(0x10)
	struct TArray<struct UCurveFloat*> PitchCurveArray; // 0x1f0(0x10)
	struct UCurveFloat* PitchEndCurve; // 0x200(0x08)
	struct TArray<struct UCurveFloat*> RollCurveArray; // 0x208(0x10)
	struct TArray<struct UCurveFloat*> ScopeRollCurveArray; // 0x218(0x10)

	void SetRecoilVActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilVActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2fd50
	void SetRecoilRActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilRActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2fcc0
	void SetRecoilHActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilHActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2fc30
	void SetRecoilActive(bool bActive); // Function Solarland.WeaponRecoilComponent.SetRecoilActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2fba0
	bool JudgeHorizontalRecoilDir(struct FVector& factorVector, bool bCurrentRight, int32_t instantCout); // Function Solarland.WeaponRecoilComponent.JudgeHorizontalRecoilDir // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1f2f780
	bool IsRunning(); // Function Solarland.WeaponRecoilComponent.IsRunning // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2f750
	struct UCurveFloat* GetYawCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetYawCurve // (Final|Native|Private) // @ game+0x1f2f370
	struct UCurveFloat* GetRollCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetRollCurve // (Final|Native|Private) // @ game+0x1f2f070
	struct UCurveFloat* GetPitchCurve(uint32_t Mode, struct UAmmoConfig* AmmoConfig); // Function Solarland.WeaponRecoilComponent.GetPitchCurve // (Final|Native|Private) // @ game+0x1f2efb0
	struct FRotator GetCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetCurrentRecoil // (Final|Native|Public|HasDefaults|Const) // @ game+0x1f2ef10
	struct FRotator GetAndClearCurrentRecoil(); // Function Solarland.WeaponRecoilComponent.GetAndClearCurrentRecoil // (Final|Native|Public|HasDefaults) // @ game+0x1f2ece0
	void Fire(bool hipfire, bool primary); // Function Solarland.WeaponRecoilComponent.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2ec10
};

// Class Solarland.PlayerWeaponRecoilComponent
// Size: 0x238 (Inherited: 0x228)
struct UPlayerWeaponRecoilComponent : UWeaponRecoilComponent {
	char pad_228[0x8]; // 0x228(0x08)
	enum class ECharacterStateForWeapon CurrentCharacterState; // 0x230(0x01)
	enum class EPosture CurrentPostureType; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
};

// Class Solarland.PostLoadEffectUIData
// Size: 0x30 (Inherited: 0x28)
struct UPostLoadEffectUIData : UGameplayEffectUIData {
	bool bPostLoaded; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)

	void ReceivePostLoadUIData(struct FGameplayEffectSpec& OwnerSpec); // Function Solarland.PostLoadEffectUIData.ReceivePostLoadUIData // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.PreviewActor
// Size: 0x380 (Inherited: 0x228)
struct APreviewActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform DefaultSpawnTransform; // 0x230(0x30)
	struct FTransform ShowTransformRight; // 0x260(0x30)
	struct FTransform ShowTransformBattlePassRight; // 0x290(0x30)
	struct FTransform ShowTransformLuckDraw; // 0x2c0(0x30)
	struct FTransform ShowTransformCarouselDraw; // 0x2f0(0x30)
	struct FTransform ShowTransformGetReward; // 0x320(0x30)
	struct FTransform ShowTransformGrowTask; // 0x350(0x30)

	void UpdatePreviewActorConfig(struct FVector DefaultLoc); // Function Solarland.PreviewActor.UpdatePreviewActorConfig // (Final|Native|Public|HasDefaults) // @ game+0x1cae630
	void TransformToMirror(enum class EItemType ItemType, struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x1cae460
	void TransformCapsuleToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformCapsuleToMirror // (Final|Native|Public|HasDefaults) // @ game+0x1cae370
	void TransformBackpackToMirror(struct FTransform OriginalTransform); // Function Solarland.PreviewActor.TransformBackpackToMirror // (Final|Native|Public|HasDefaults) // @ game+0x1cae280
	void ShowAnimLuaCall(); // Function Solarland.PreviewActor.ShowAnimLuaCall // (Final|Native|Public) // @ game+0x1cae1e0
	void ShowAnim(); // Function Solarland.PreviewActor.ShowAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ShowActorWithTrans(struct FTransform& InOffset); // Function Solarland.PreviewActor.ShowActorWithTrans // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1cae100
	void ShowActor(); // Function Solarland.PreviewActor.ShowActor // (Final|Native|Public) // @ game+0x1cae0e0
	void PlayAnimInfo(struct FVertexAnimInfo& InAnimInfo); // Function Solarland.PreviewActor.PlayAnimInfo // (Final|Native|Public|HasOutParms) // @ game+0x1cad700
	void PlayAnim(int32_t InStartFrame, int32_t InEndFrame, float InLength, bool InLoop); // Function Solarland.PreviewActor.PlayAnim // (Final|Native|Public) // @ game+0x1cad5b0
	void HideActor(); // Function Solarland.PreviewActor.HideActor // (Final|Native|Public) // @ game+0x1cac510
	void DetachFX(struct AActor* FXActor); // Function Solarland.PreviewActor.DetachFX // (Final|Native|Public) // @ game+0x1cac2a0
	struct AActor* AttachFX(struct FString FXBPPath, struct FString SokectName, bool AutoActivate); // Function Solarland.PreviewActor.AttachFX // (Final|Native|Public) // @ game+0x1cac110
};

// Class Solarland.PreviewHomeActor
// Size: 0x390 (Inherited: 0x380)
struct APreviewHomeActor : APreviewActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x380(0x08)
	struct UStaticMeshComponent* StaticMeshComp; // 0x388(0x08)

	void SetMaterial(int32_t InItemID); // Function Solarland.PreviewHomeActor.SetMaterial // (Final|Native|Public) // @ game+0x1cadeb0
	struct UDataTable* GetTextureDataTable(); // Function Solarland.PreviewHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x1cac4e0
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.PreviewHomeActor.GetShaderConfig // (Final|Native|Public) // @ game+0x1cac4b0
};

// Class Solarland.QFrameworkArchitecture
// Size: 0x1d0 (Inherited: 0x1a0)
struct UQFrameworkArchitecture : UGameInstance {
	char pad_1A0[0x8]; // 0x1a0(0x08)
	struct UQFrameworkIocContainer* Container; // 0x1a8(0x08)
	struct TArray<struct USolarGameManager*> InitManagers; // 0x1b0(0x10)
	struct TArray<struct USolarAbstractModel*> InitViewModels; // 0x1c0(0x10)

	struct USolarAbstractModel* RegisterModel(struct USolarAbstractModel*& ModelClass); // Function Solarland.QFrameworkArchitecture.RegisterModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cada30
	struct USolarGameManager* RegisterManager(struct USolarGameManager*& ManagerClass); // Function Solarland.QFrameworkArchitecture.RegisterManager // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cad990
	struct USolarAbstractModel* GetModel(struct USolarAbstractModel*& ModelClass); // Function Solarland.QFrameworkArchitecture.GetModel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cac410
	struct USolarGameManager* GetManager(struct USolarGameManager*& ManagerClass); // Function Solarland.QFrameworkArchitecture.GetManager // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cac370
};

// Class Solarland.QFrameworkIocContainer
// Size: 0x78 (Inherited: 0x28)
struct UQFrameworkIocContainer : UObject {
	struct TMap<uint32_t, struct UObject*> InstanceDict; // 0x28(0x50)
};

// Class Solarland.QuickChatUnit
// Size: 0x290 (Inherited: 0x260)
struct UQuickChatUnit : UUserWidget {
	struct UButton* BtnUnit; // 0x260(0x08)
	struct USolarTextBlock* TxtChat; // 0x268(0x08)
	char pad_270[0x20]; // 0x270(0x20)

	void SendChatMessage(); // Function Solarland.QuickChatUnit.SendChatMessage // (Final|Native|Protected) // @ game+0x1cadbc0
	void OnChatMessageReleased(); // Function Solarland.QuickChatUnit.OnChatMessageReleased // (Final|Native|Protected) // @ game+0x1cac8e0
	void OnChatMessagePressed(); // Function Solarland.QuickChatUnit.OnChatMessagePressed // (Final|Native|Protected) // @ game+0x1cac8c0
};

// Class Solarland.QuickVoice
// Size: 0x3e0 (Inherited: 0x340)
struct UQuickVoice : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	struct UCanvasPanel* CanvasPanel_61; // 0x350(0x08)
	struct USolarCheckBox* Cancel; // 0x358(0x08)
	struct USolarCheckBox* GetIn; // 0x360(0x08)
	struct USolarCheckBox* Rescue; // 0x368(0x08)
	struct USolarCheckBox* FollowMe; // 0x370(0x08)
	struct USolarCheckBox* Weapon; // 0x378(0x08)
	struct USolarCheckBox* Vehicle; // 0x380(0x08)
	struct USolarCheckBox* Attack; // 0x388(0x08)
	struct USolarCheckBox* Defend; // 0x390(0x08)
	struct USolarCheckBox* Someone; // 0x398(0x08)
	struct USolarTextBlock* Txt_Content; // 0x3a0(0x08)
	struct UImage* Img_Arrow_1; // 0x3a8(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x3b0(0x08)
	struct UWidgetAnimation* Exit_Enter; // 0x3b8(0x08)
	struct TArray<struct USolarCheckBox*> AllCheckBoxs; // 0x3c0(0x10)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void ReceiveMarkButtonTouchMoved(float DegreeToCenter); // Function Solarland.QuickVoice.ReceiveMarkButtonTouchMoved // (Final|Native|Private) // @ game+0x1cad8f0
	void ReceiveMarkButtonHoverChanged(bool bIsHovered); // Function Solarland.QuickVoice.ReceiveMarkButtonHoverChanged // (Final|Native|Private) // @ game+0x1cad860
	void ReceiveMarkButtonDragSelectEnded(bool bPlayerDead); // Function Solarland.QuickVoice.ReceiveMarkButtonDragSelectEnded // (Final|Native|Private) // @ game+0x1cad7d0
	void ReceiveMarkButtonBeenLongPressed(); // Function Solarland.QuickVoice.ReceiveMarkButtonBeenLongPressed // (Final|Native|Private) // @ game+0x1cad7b0
	void OnSelectedChanged(int32_t ChosenIndex); // Function Solarland.QuickVoice.OnSelectedChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnExitAnimFinished(); // Function Solarland.QuickVoice.OnExitAnimFinished // (Final|Native|Private) // @ game+0x1c3c770
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.QuickVoice.OnCustomGameStateChanged // (Final|Native|Private) // @ game+0x1cac980
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.QuickVoice.OnCharacterDead // (Final|Native|Private) // @ game+0x1cac5f0
	void InitCheckBoxesArray(); // Function Solarland.QuickVoice.InitCheckBoxesArray // (Native|Event|Protected|BlueprintEvent) // @ game+0x1259730
	void DoSelectOption(int32_t ChosenIndex); // Function Solarland.QuickVoice.DoSelectOption // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseQuickChatWheel(); // Function Solarland.QuickVoice.CloseQuickChatWheel // (Final|Native|Public) // @ game+0x1cac280
};

// Class Solarland.RandomPackActorBase
// Size: 0x228 (Inherited: 0x228)
struct ARandomPackActorBase : AActor {

	void InitAnimationPosition(struct USkeletalMeshComponent* Mesh); // Function Solarland.RandomPackActorBase.InitAnimationPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb1570
};

// Class Solarland.RoleSkillWidget
// Size: 0x4b0 (Inherited: 0x340)
struct URoleSkillWidget : USolarUserWidget {
	struct UImage* icon_Skill; // 0x340(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x348(0x08)
	struct UImage* Img_Skill; // 0x350(0x08)
	struct USolarImage* img_Bg_Border; // 0x358(0x08)
	struct USolarImage* Img_BG_2; // 0x360(0x08)
	struct UImage* img_SkillBg; // 0x368(0x08)
	struct UImage* Img_Loop; // 0x370(0x08)
	struct USizeBox* Img_Loop_Box; // 0x378(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x380(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x388(0x08)
	struct UCanvasPanel* Panel_ReduceCD; // 0x390(0x08)
	struct USolarTextBlock* Txt_Progress; // 0x398(0x08)
	struct UProgressBar* Progress_CD; // 0x3a0(0x08)
	struct UWidgetAnimation* Refresh_Anim; // 0x3a8(0x08)
	struct UWidgetAnimation* Reduce_Anim; // 0x3b0(0x08)
	struct UImage* img_Forbid; // 0x3b8(0x08)
	struct UCanvasPanel* Panel_Continuous; // 0x3c0(0x08)
	struct UWidgetAnimation* Continued_Loop_Anim; // 0x3c8(0x08)
	struct UImage* Progress_Duration; // 0x3d0(0x08)
	struct UImage* Img_Loop_New; // 0x3d8(0x08)
	struct UImage* Img_Skill_Continuous; // 0x3e0(0x08)
	struct UImage* img_BtnBg; // 0x3e8(0x08)
	struct UButton* BtnCancel; // 0x3f0(0x08)
	struct USolarMovablePad* RoleSkillPad; // 0x3f8(0x08)
	struct UWidget* PanelKeyMapping; // 0x400(0x08)
	float PadPaddingOnPress; // 0x408(0x04)
	enum class ERoleWidgetType RoleWidgetType; // 0x40c(0x01)
	char pad_40D[0x3]; // 0x40d(0x03)
	struct TArray<struct FLinearColor> ImgBorderColor; // 0x410(0x10)
	struct TArray<struct FLinearColor> IconColor; // 0x420(0x10)
	struct TArray<struct FLinearColor> ImgBGColor; // 0x430(0x10)
	struct TArray<float> TacticalIconCapacity; // 0x440(0x10)
	struct TArray<struct FLinearColor> QualityColorBase; // 0x450(0x10)
	struct TArray<struct FLinearColor> QualityColorDecorate; // 0x460(0x10)
	bool bInCD; // 0x470(0x01)
	char pad_471[0x3f]; // 0x471(0x3f)

	void UpdateReduceCDWidgetColor(int32_t QualityIndex); // Function Solarland.RoleSkillWidget.UpdateReduceCDWidgetColor // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnSwitchEMP(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // Function Solarland.RoleSkillWidget.OnSwitchEMP // (Final|Native|Protected) // @ game+0x1cb2580
	void OnSuperScaningWidgetShow(bool bShow); // Function Solarland.RoleSkillWidget.OnSuperScaningWidgetShow // (Final|Native|Protected) // @ game+0x1c89360
	void OnRoleAbilityStateChange(int32_t AbilityIndex, int32_t State); // Function Solarland.RoleSkillWidget.OnRoleAbilityStateChange // (Final|Native|Protected) // @ game+0x1cb24c0
	void OnRoleAbilityStartCDServerTimeUpdate(int32_t AbilityIndex, float InServerTime); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCDServerTimeUpdate // (Final|Native|Protected) // @ game+0x1cb23f0
	void OnRoleAbilityStartCD(int32_t AbilityIndex, float InStartCDServerTime, float StartCDTimeForReplay); // Function Solarland.RoleSkillWidget.OnRoleAbilityStartCD // (Final|Native|Protected) // @ game+0x1cb22f0
	void OnRoleAbilityInputAction(int32_t AbilityIndex, bool bPress, bool bCanActive); // Function Solarland.RoleSkillWidget.OnRoleAbilityInputAction // (Final|Native|Protected) // @ game+0x1cb21f0
	void OnRoleAbilityEndCD(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEndCD // (Final|Native|Protected) // @ game+0x1cb2170
	void OnRoleAbilityEnd(int32_t AbilityIndex); // Function Solarland.RoleSkillWidget.OnRoleAbilityEnd // (Final|Native|Protected) // @ game+0x1cb20f0
	void OnRoleAbilityContinous(int32_t AbilityIndex, bool bTurnOn, float Duration); // Function Solarland.RoleSkillWidget.OnRoleAbilityContinous // (Final|Native|Protected) // @ game+0x1cb1fe0
	void OnRoleAbilityChange(int32_t AbilityIndex, bool bHaveRoleAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.RoleSkillWidget.OnRoleAbilityChange // (Final|Native|Protected) // @ game+0x1cb1ea0
	void OnRoleAbilityCDDurationChange(int32_t AbilityIndex, int32_t Duration, bool bDurationReduced); // Function Solarland.RoleSkillWidget.OnRoleAbilityCDDurationChange // (Final|Native|Protected) // @ game+0x1cb1da0
	void OnPadRelease(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadRelease // (Final|Native|Protected|HasOutParms) // @ game+0x1cb1b70
	void OnPadPress(struct FGeometry& InGeometry, struct FPointerEvent& Event); // Function Solarland.RoleSkillWidget.OnPadPress // (Final|Native|Protected|HasOutParms) // @ game+0x1cb19d0
	void OnExitSpectateMode(); // Function Solarland.RoleSkillWidget.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x1cb19b0
	void OnEntertSpectateMode(); // Function Solarland.RoleSkillWidget.OnEntertSpectateMode // (Final|Native|Protected) // @ game+0x8ba190
	void OnControllerCharacterSet(struct ASolarCharacter* ControlledCharacter); // Function Solarland.RoleSkillWidget.OnControllerCharacterSet // (Final|Native|Protected) // @ game+0x1cb1930
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.RoleSkillWidget.OnChangeDriveState // (Final|Native|Protected) // @ game+0x1cb18b0
	void OnCancelBtnRelease(); // Function Solarland.RoleSkillWidget.OnCancelBtnRelease // (Final|Native|Protected) // @ game+0x1cb1890
	void OnCancelBtnPress(); // Function Solarland.RoleSkillWidget.OnCancelBtnPress // (Final|Native|Protected) // @ game+0x1cb1870
	void OnBattleHUDVisibleChange(bool bVisible); // Function Solarland.RoleSkillWidget.OnBattleHUDVisibleChange // (Final|Native|Protected) // @ game+0x1cb17e0
	void CancelAbility(); // Function Solarland.RoleSkillWidget.CancelAbility // (Final|Native|Protected) // @ game+0x1cb0ff0
};

// Class Solarland.RotationBarMarkWidget
// Size: 0x2b0 (Inherited: 0x260)
struct URotationBarMarkWidget : UUserWidget {
	char pad_260[0x28]; // 0x260(0x28)
	struct FName FlagName; // 0x288(0x08)
	struct FName TextName; // 0x290(0x08)
	struct UImage* FlagImage; // 0x298(0x08)
	struct UTextBlock* TextBlock; // 0x2a0(0x08)
	struct TWeakObjectPtr<struct AActor> TargetActor; // 0x2a8(0x08)

	void SetupOrder(int32_t InOrderID); // Function Solarland.RotationBarMarkWidget.SetupOrder // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetUpdateState(bool ShouldUpdateLocation); // Function Solarland.RotationBarMarkWidget.SetUpdateState // (Final|Native|Public|BlueprintCallable) // @ game+0xb610f0
	void SetPosition(struct FVector2D InPosition); // Function Solarland.RotationBarMarkWidget.SetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1cb26d0
	void SetFlagIcon(struct UPaperSprite* InSprite); // Function Solarland.RotationBarMarkWidget.SetFlagIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb2650
	void InitializeMark(struct AActor* InTargetActor, bool InMoveable); // Function Solarland.RotationBarMarkWidget.InitializeMark // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb1610
	float GetAngle(); // Function Solarland.RotationBarMarkWidget.GetAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb14f0
};

// Class Solarland.RotationBarWidget
// Size: 0x418 (Inherited: 0x340)
struct URotationBarWidget : USolarUserWidget {
	struct TMap<char, struct URotationBarMarkWidget*> MarkList; // 0x340(0x50)
	struct TArray<struct URotationBarMarkWidget*> CustomMarkList; // 0x390(0x10)
	struct TArray<struct URotationBarMarkWidget*> BuildingFlagList; // 0x3a0(0x10)
	struct TArray<struct URotationBarMarkWidget*> ActorMarkList; // 0x3b0(0x10)
	struct URotationBarMarkWidget* MarkWidgetClass; // 0x3c0(0x08)
	struct FString MarkWidgetName; // 0x3c8(0x10)
	struct FString MarkAtlasType; // 0x3d8(0x10)
	struct FName PanelName; // 0x3e8(0x08)
	struct FName DirectionImage1Name; // 0x3f0(0x08)
	struct FName DirectionImage2Name; // 0x3f8(0x08)
	struct UCanvasPanel* DirectionPanel; // 0x400(0x08)
	struct UImage* DirectionImage1; // 0x408(0x08)
	struct UImage* DirectionImage2; // 0x410(0x08)

	void ShowMark(char InPosInTeam, struct FVector InPosition); // Function Solarland.RotationBarWidget.ShowMark // (Final|Native|Public|HasDefaults) // @ game+0x1cb29a0
	struct TArray<struct URotationBarMarkWidget*> ShowActorMarkWithArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.ShowActorMarkWithArray // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb2870
	struct URotationBarMarkWidget* ShowActorMark(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.ShowActorMark // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb27e0
	void OnRotationBarVisibilityChanged(bool bVisible); // Function Solarland.RotationBarWidget.OnRotationBarVisibilityChanged // (Final|Native|Public) // @ game+0x1ca82f0
	void InitBuildingFlag(); // Function Solarland.RotationBarWidget.InitBuildingFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb15f0
	struct TArray<int32_t> GetLocationIconIDs(int32_t InMapID); // Function Solarland.RotationBarWidget.GetLocationIconIDs // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct FBuildingData GetBuildingData(int32_t InIconID); // Function Solarland.RotationBarWidget.GetBuildingData // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct URotationBarMarkWidget* CreateCustomMark(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.RotationBarWidget.CreateCustomMark // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1cb13d0
	bool ContainMapID(int32_t InMapID); // Function Solarland.RotationBarWidget.ContainMapID // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void CleanMark(char InPosInTeam); // Function Solarland.RotationBarWidget.CleanMark // (Final|Native|Public) // @ game+0x1cb1350
	void CleanCustomMark(struct URotationBarMarkWidget* InMarkWidget); // Function Solarland.RotationBarWidget.CleanCustomMark // (Final|Native|Public) // @ game+0x1cb12d0
	void CleanActorMarkWithWidgetArray(struct TArray<struct URotationBarMarkWidget*> TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidgetArray // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb11f0
	void CleanActorMarkWithWidget(struct URotationBarMarkWidget* TargetMarkWidget); // Function Solarland.RotationBarWidget.CleanActorMarkWithWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb1170
	void CleanActorMarkWithActorArray(struct TArray<struct AActor*> TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActorArray // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb1090
	void CleanActorMarkWithActor(struct AActor* TargetActor); // Function Solarland.RotationBarWidget.CleanActorMarkWithActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb1010
};

// Class Solarland.SafeAreaProgressWidget
// Size: 0x418 (Inherited: 0x340)
struct USafeAreaProgressWidget : USolarUserWidget {
	struct UImage* Var_Avatar; // 0x340(0x08)
	struct UImage* Var_PoisonBar; // 0x348(0x08)
	struct UImage* Var_ImageWarnning; // 0x350(0x08)
	struct UTextBlock* Var_TextDistance; // 0x358(0x08)
	struct UTextBlock* Var_TextTime; // 0x360(0x08)
	struct UPanelWidget* Var_TimePanel; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)
	struct TSoftObjectPtr<UPaperSprite> Warning01; // 0x378(0x28)
	struct TSoftObjectPtr<UPaperSprite> Warning02; // 0x3a0(0x28)
	char pad_3C8[0x50]; // 0x3c8(0x50)
};

// Class Solarland.SolarGameMode
// Size: 0x4b0 (Inherited: 0x310)
struct ASolarGameMode : AGameMode {
	struct FMulticastInlineDelegate PreStartPlay; // 0x310(0x10)
	struct FDelegate CalledStartPlay; // 0x320(0x10)
	struct FMulticastInlineDelegate PostStartPlay; // 0x330(0x10)
	struct FMulticastInlineDelegate PreHandleMatchHasStarted; // 0x340(0x10)
	struct FDelegate CalledHandleMatchHasStarted; // 0x350(0x10)
	struct FMulticastInlineDelegate PostHandleMatchHasStarted; // 0x360(0x10)
	struct FMulticastInlineDelegate PreRestartPlayer; // 0x370(0x10)
	struct FDelegate CalledRestartPlayer; // 0x380(0x10)
	struct FMulticastInlineDelegate PostRestartPlayer; // 0x390(0x10)
	struct FMulticastInlineDelegate PreEndPlay; // 0x3a0(0x10)
	struct FDelegate CalledEndPlay; // 0x3b0(0x10)
	struct FMulticastInlineDelegate PostEndPlay; // 0x3c0(0x10)
	struct TArray<struct UGameModeCompBase*> GameModeComponents; // 0x3d0(0x10)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	int32_t GamePlayMode; // 0x3e4(0x04)
	struct TArray<struct AActor*> ManagerClasses; // 0x3e8(0x10)
	struct FString CharacterClassPath; // 0x3f8(0x10)
	int32_t CharacterIdInTrainningCourse; // 0x408(0x04)
	int32_t SkinIdInTrainningCourse; // 0x40c(0x04)
	int32_t BagIdInTrainingCourse; // 0x410(0x04)
	bool bManuallyModifyCharacter; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	int32_t SpecifiedCharacterSkinID; // 0x418(0x04)
	bool bManuallyModifyCharacterBagId; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	int32_t SpecifiedCharacterBagID; // 0x420(0x04)
	bool bManuallyModifyCharacterBagTrailId; // 0x424(0x01)
	char pad_425[0x3]; // 0x425(0x03)
	int32_t SpecifiedCharacterBagTrailID; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)
	struct FMulticastInlineDelegate OnPostSpawnDefaultSolarCharacterAtTransform; // 0x430(0x10)
	struct USolarGameModeAIComponent* AIMgrComponent; // 0x440(0x08)
	struct USolarGameModeStatisticsComponent* StatComponent; // 0x448(0x08)
	char pad_450[0x60]; // 0x450(0x60)

	void UpdatePlayerDataForBotAI(int32_t AIConfigID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdatePlayerDataForBotAI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdatePlayerData(int32_t CharacterSkinID, int32_t CharacterBagID, int32_t CharacterBagTrailID, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateBotPlayerData(struct ASolarPlayerState* PlayerState); // Function Solarland.SolarGameMode.UpdateBotPlayerData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateBackpackData(struct FString PlayerId, int32_t Grade, int32_t NewUnLockNum); // Function Solarland.SolarGameMode.UpdateBackpackData // (Native|Public|BlueprintCallable) // @ game+0x1d55260
	struct FString TryKickOutOnlinePlayer(struct FString PlayerId, bool IsAllowReconnect); // Function Solarland.SolarGameMode.TryKickOutOnlinePlayer // (Final|Native|Public) // @ game+0x1d55130
	void SetGamePlayMode(int32_t InGamePlayMode); // Function Solarland.SolarGameMode.SetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x1d550a0
	void SendHitMsgWithBool(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, bool bo); // Function Solarland.SolarGameMode.SendHitMsgWithBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d54ef0
	void SendHitMsg(struct ASolarCharacterBase* HitedPlayer, struct TScriptInterface<ISolarCharacterController>& PC, enum class ESolarHitType MsgType, float Damage, struct FString Params); // Function Solarland.SolarGameMode.SendHitMsg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d54d20
	void RestartPlayerTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void RestartPlayerEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, struct AController* NewPlayer); // DelegateFunction Solarland.SolarGameMode.RestartPlayerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature(struct ASolarPlayerState* NewPlayer, struct ASolarCharacter* NewCharacter); // DelegateFunction Solarland.SolarGameMode.PostSpawnDefaultSolarCharacterAtTransformDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnStartBattleresponded(); // Function Solarland.SolarGameMode.OnStartBattleresponded // (Final|Native|Public) // @ game+0x1d54d00
	bool OnPlayerReJoinRequest(struct FString PlayerId, struct FString& ErrorMsg); // Function Solarland.SolarGameMode.OnPlayerReJoinRequest // (Native|Public|HasOutParms) // @ game+0x1d54bd0
	void NotifyItemStateChanged(struct AActor* Item, int32_t State); // Function Solarland.SolarGameMode.NotifyItemStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void KickOutPlayerToLobby(struct FString InPlayerID); // Function Solarland.SolarGameMode.KickOutPlayerToLobby // (Final|Native|Public) // @ game+0x1d54b30
	void KickOutAllPlayerToLobby(); // Function Solarland.SolarGameMode.KickOutAllPlayerToLobby // (Final|Native|Public) // @ game+0x1d54b10
	void InitCharacterClassPath(int32_t CharacterId); // Function Solarland.SolarGameMode.InitCharacterClassPath // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<int32_t> GetRandomAISkinID(struct ASolarPlayerState* InPS); // Function Solarland.SolarGameMode.GetRandomAISkinID // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetGamePlayMode(); // Function Solarland.SolarGameMode.GetGamePlayMode // (Native|Public|BlueprintCallable) // @ game+0x1d54a80
	struct UGameModeGlobalSetting* GetGameModeSetting(struct UObject* WorldContextObject); // Function Solarland.SolarGameMode.GetGameModeSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d54a00
	int32_t GetBotAINumber(); // Function Solarland.SolarGameMode.GetBotAINumber // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GameModeComponentTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void GameModeComponentEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection); // DelegateFunction Solarland.SolarGameMode.GameModeComponentEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void EndPlayTakeChargeEvent__DelegateSignature(bool& bOutSuccess, struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayTakeChargeEvent__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void EndPlayEvent__DelegateSignature(struct TArray<struct UGameModeCompBase*>& ComponentCollection, enum class EEndPlayReason EndPlayReason); // DelegateFunction Solarland.SolarGameMode.EndPlayEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
};

// Class Solarland.SBattleGameMode
// Size: 0x4e0 (Inherited: 0x4b0)
struct ASBattleGameMode : ASolarGameMode {
	struct FMulticastInlineDelegate OnPlayerDisconnectedGame; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnPlayerReconnectedGame; // 0x4c0(0x10)
	char pad_4D0[0x8]; // 0x4d0(0x08)
	int32_t SettlementStageConfigID; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)

	void SettlePlayerBattleData(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.SettlePlayerBattleData // (Native|Public|BlueprintCallable) // @ game+0x1cb2750
	void ReceiveBattleSettlement(); // Function Solarland.SBattleGameMode.ReceiveBattleSettlement // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBattleOver(); // Function Solarland.SBattleGameMode.ReceiveBattleOver // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerLeaveDSTimeOut(struct ASolarPlayerState* PlayerState); // Function Solarland.SBattleGameMode.OnPlayerLeaveDSTimeOut // (Native|Public) // @ game+0x1cb1d10
	bool IsAutoSettlementWhenKilled(); // Function Solarland.SBattleGameMode.IsAutoSettlementWhenKilled // (Native|Event|Public|BlueprintEvent) // @ game+0x1cb1780
	bool IsAllowReconnectGame(struct ASolarPlayerState* Player); // Function Solarland.SBattleGameMode.IsAllowReconnectGame // (Native|Public|BlueprintCallable) // @ game+0x1cb16e0
};

// Class Solarland.SolarGameState
// Size: 0x3e8 (Inherited: 0x298)
struct ASolarGameState : AGameState {
	char pad_298[0x8]; // 0x298(0x08)
	struct TArray<struct ASolarPlayerState*> SolarPlayerStateArray; // 0x2a0(0x10)
	struct TArray<struct ASolarPlayerState*> RealPlayerStateArray; // 0x2b0(0x10)
	struct TArray<struct APlayerState*> PlayerArray_SameTeam; // 0x2c0(0x10)
	char bShowBattlePrompt : 1; // 0x2d0(0x01)
	char pad_2D0_1 : 7; // 0x2d0(0x01)
	char pad_2D1[0xf]; // 0x2d1(0x0f)
	struct TArray<struct FPrePooledBundle> PrePooledBundles; // 0x2e0(0x10)
	int32_t RemainingPlayersCount; // 0x2f0(0x04)
	int32_t RemainingTeamCount; // 0x2f4(0x04)
	int32_t PlayersCount; // 0x2f8(0x04)
	int32_t TeamCount; // 0x2fc(0x04)
	int32_t TotalBoardingNum; // 0x300(0x04)
	int32_t CapsulePlayerNum; // 0x304(0x04)
	int32_t SettlementStageConfigID; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct TSet<struct UObject*> LimitMaxReplicatedNumClasses; // 0x310(0x50)
	float StartTime; // 0x360(0x04)
	int32_t GameWarmID; // 0x364(0x04)
	int32_t TeammateNumMode; // 0x368(0x04)
	bool bLuaReportBattleEndServer; // 0x36c(0x01)
	char pad_36D[0x1b]; // 0x36d(0x1b)
	struct FGameStartConditionList GameStartConditions; // 0x388(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x3e0(0x08)

	void UpdateTeammateRelationship(); // Function Solarland.SolarGameState.UpdateTeammateRelationship // (Native|Public|BlueprintCallable) // @ game+0x12577b0
	void SetTeamLastVehicleLocation(char InTeamId, struct FVector& InVehiclePosition); // Function Solarland.SolarGameState.SetTeamLastVehicleLocation // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d7ae90
	void SetSettlementStageConfigID(int32_t InConfigID); // Function Solarland.SolarGameState.SetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7ad30
	void PlayTeamVictoryVoice(); // Function Solarland.SolarGameState.PlayTeamVictoryVoice // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7a680
	void OnRep_SettlementStageConfigID(); // Function Solarland.SolarGameState.OnRep_SettlementStageConfigID // (Final|Native|Protected) // @ game+0x1d7a660
	void OnRep_CapsulePlayerNum(); // Function Solarland.SolarGameState.OnRep_CapsulePlayerNum // (Final|Native|Protected) // @ game+0x1d7a640
	void OnPlayersNumberChange(); // Function Solarland.SolarGameState.OnPlayersNumberChange // (Final|Native|Protected) // @ game+0x1d7a620
	void NotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText& OutReason); // Function Solarland.SolarGameState.NotifyCheatedPlayer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarGameState.NotifyBombingEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d7a590
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarGameState.NotifyBombingBegin // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1d7a490
	void NetMulticastNotifyCheatedPlayer(struct ASolarPlayerState* CheatedPlayerState, struct FText BanReason); // Function Solarland.SolarGameState.NetMulticastNotifyCheatedPlayer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d7a2d0
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarGameState.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79f20
	bool IsSupportWeaponUpgrade(); // Function Solarland.SolarGameState.IsSupportWeaponUpgrade // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79ef0
	bool IsSupportCharacterTacticalAbility(); // Function Solarland.SolarGameState.IsSupportCharacterTacticalAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79ec0
	bool IsSupportCharacterSuperAbility(); // Function Solarland.SolarGameState.IsSupportCharacterSuperAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79e90
	bool IsSupportCharacterRole(); // Function Solarland.SolarGameState.IsSupportCharacterRole // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79e60
	bool IsSupportCharacterInGameLeveling(); // Function Solarland.SolarGameState.IsSupportCharacterInGameLeveling // (Native|Event|Public|BlueprintEvent) // @ game+0x1d79e30
	bool IsSameTeamWithReferToPlayer(struct ASolarPlayerState* Other); // Function Solarland.SolarGameState.IsSameTeamWithReferToPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79da0
	float GetWorldStartTimeSeconds(); // Function Solarland.SolarGameState.GetWorldStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78f00
	int32_t GetWatchingPlayerCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetWatchingPlayerCount // (Final|Native|Public) // @ game+0x1d79d10
	struct ASolarPlayerState* GetTeamPlayerState(char InTeamId, char InPosInTeam); // Function Solarland.SolarGameState.GetTeamPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79bb0
	int32_t GetTeamNumCount(); // Function Solarland.SolarGameState.GetTeamNumCount // (Native|Public) // @ game+0x1d79b80
	char GetTeammateNum(char InTeamId); // Function Solarland.SolarGameState.GetTeammateNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79c80
	enum class ERoleSkillOperation GetTacticalSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetTacticalSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79b50
	enum class ERoleSkillOperation GetSuperSkillStateOperationOnInit(); // Function Solarland.SolarGameState.GetSuperSkillStateOperationOnInit // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79ae0
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarGameState.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79ab0
	struct ASolarSafeArea* GetSolarSafeArea(); // Function Solarland.SolarGameState.GetSolarSafeArea // (Final|Native|Public|Const) // @ game+0x1d79a80
	int32_t GetSettlementStageConfigID(); // Function Solarland.SolarGameState.GetSettlementStageConfigID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79a60
	int32_t GetRemainingTeamCount(); // Function Solarland.SolarGameState.GetRemainingTeamCount // (Native|Public) // @ game+0x1d79a30
	int32_t GetRemainingPlayersCount(); // Function Solarland.SolarGameState.GetRemainingPlayersCount // (Native|Public) // @ game+0x1d79a00
	struct ASolarPlayerState* GetReferToPlayerTeamEntry(char InPosInTeam); // Function Solarland.SolarGameState.GetReferToPlayerTeamEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d79970
	struct TArray<struct ASolarPlayerState*> GetReferToPlayerTeamArray(); // Function Solarland.SolarGameState.GetReferToPlayerTeamArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d798f0
	struct ASolarPlayerState* GetReferToPlayerState(); // Function Solarland.SolarGameState.GetReferToPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d798c0
	struct TArray<struct ASolarPlayerState*> GetPlayerStatesInTeam(char& InTeamId); // Function Solarland.SolarGameState.GetPlayerStatesInTeam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d796b0
	int32_t GetPlayersCount(); // Function Solarland.SolarGameState.GetPlayersCount // (Native|Public) // @ game+0x1d79770
	struct ASolarCharacter* GetPlayerByPlayerID(struct FString InPlayerID); // Function Solarland.SolarGameState.GetPlayerByPlayerID // (Final|Native|Public) // @ game+0x1d79600
	struct ASolarPlayerState* GetOfflinePlayerState(struct FString OfflinePlayerId); // Function Solarland.SolarGameState.GetOfflinePlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79550
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarGameState.GetLocalSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d78f60
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarGameState.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78f30
	float GetBattleStartTimeSeconds(); // Function Solarland.SolarGameState.GetBattleStartTimeSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78f00
	void GetAllCharactersExceptTeammate(struct TArray<struct ASolarCharacter*>& CharacterArray); // Function Solarland.SolarGameState.GetAllCharactersExceptTeammate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d78e50
	int32_t GetAliveSolarPlayersCount(bool IgnoreOffline); // Function Solarland.SolarGameState.GetAliveSolarPlayersCount // (Final|Native|Public) // @ game+0x1d78dc0
	char GetAlivePlayerNumInTeamExceptDying(char InTeamId); // Function Solarland.SolarGameState.GetAlivePlayerNumInTeamExceptDying // (Native|Public|BlueprintCallable) // @ game+0x1d78d30
	char CalculateTeamNum(); // Function Solarland.SolarGameState.CalculateTeamNum // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78d00
	void CacheSafeArea(struct ASolarSafeArea* SafeArea); // Function Solarland.SolarGameState.CacheSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78c80
	void BroadcastDeath(struct FKillInfo KillInfo); // Function Solarland.SolarGameState.BroadcastDeath // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d78b80
};

// Class Solarland.SBattleGameState
// Size: 0x3f0 (Inherited: 0x3e8)
struct ASBattleGameState : ASolarGameState {
	bool IsBattleEnd; // 0x3e8(0x01)
	bool IsBattleSettlement; // 0x3e9(0x01)
	enum class EBattleEndType BattleEndType; // 0x3ea(0x01)
	char pad_3EB[0x5]; // 0x3eb(0x05)

	bool IsBattleOver(); // Function Solarland.SBattleGameState.IsBattleOver // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cb17b0
	bool GetIsBattleSettlement(); // Function Solarland.SBattleGameState.GetIsBattleSettlement // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cb1540
	enum class EBattleEndType GetBattleEndType(); // Function Solarland.SBattleGameState.GetBattleEndType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cb1520
};

// Class Solarland.SBattleRoyaleGameModeAIComp
// Size: 0x138 (Inherited: 0x120)
struct USBattleRoyaleGameModeAIComp : USolarGameModeAIComponent {
	bool bBotSkipAICruise; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	float MaxLootDistanceToAirline; // 0x124(0x04)
	bool bCanSelectLootZoneOutPoisonCircle; // 0x128(0x01)
	char pad_129[0xf]; // 0x129(0x0f)
};

// Class Solarland.SCustomGameMode
// Size: 0x5d0 (Inherited: 0x4e0)
struct ASCustomGameMode : ASBattleGameMode {
	char pad_4E0[0x58]; // 0x4e0(0x58)
	struct UCGMLogicComponent* LogicComponent; // 0x538(0x08)
	struct UCGMDeathComponent* DeathComponent; // 0x540(0x08)
	char pad_548[0x10]; // 0x548(0x10)
	struct TArray<struct ASCMPlayerController*> WaitingPlayers; // 0x558(0x10)
	char pad_568[0x10]; // 0x568(0x10)
	struct FMulticastInlineDelegate OnPlayerJoin; // 0x578(0x10)
	struct FMulticastInlineDelegate OnAIJoin; // 0x588(0x10)
	struct FMulticastInlineDelegate OnPlayerOutEvent; // 0x598(0x10)
	struct TArray<struct AGameManagerBase*> GameManagerClasses; // 0x5a8(0x10)
	struct UCGMLogicComponent* LogicComponentClass; // 0x5b8(0x08)
	struct UCGMDeathComponent* DeathComponentClass; // 0x5c0(0x08)
	struct USCMPlayerRPCComponent* PlayerRPCComponentClass; // 0x5c8(0x08)

	void TimerStartGame(); // Function Solarland.SCustomGameMode.TimerStartGame // (Final|Native|Public) // @ game+0x1cb6e10
	void OnTeamInTournamentSettled(struct FString Side, char TeamID); // Function Solarland.SCustomGameMode.OnTeamInTournamentSettled // (Final|Native|Public) // @ game+0x1cb62b0
	void OnReceivePlayerLogin(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerLogin // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReceivePlayerBattleStart(struct APlayerController* PlayerController); // Function Solarland.SCustomGameMode.OnReceivePlayerBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReceiveBattleStart(); // Function Solarland.SCustomGameMode.OnReceiveBattleStart // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerOut__DelegateSignature(struct ASCMPlayerState* Player, enum class ESCMPlayerOutType OutType); // DelegateFunction Solarland.SCustomGameMode.OnPlayerOut__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPlayerJoin__DelegateSignature(struct ASCMPlayerState* Player); // DelegateFunction Solarland.SCustomGameMode.OnPlayerJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBotAIDataReady(int32_t AICount); // Function Solarland.SCustomGameMode.OnBotAIDataReady // (Final|Native|Public) // @ game+0x1cb6130
	void OnAIJoin__DelegateSignature(struct ASCMPlayerState* BotAI); // DelegateFunction Solarland.SCustomGameMode.OnAIJoin__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void NotifyDSBattleOver(); // Function Solarland.SCustomGameMode.NotifyDSBattleOver // (Final|Native|Public) // @ game+0x1cb6070
	int32_t GetCurMapID(); // Function Solarland.SCustomGameMode.GetCurMapID // (Final|Native|Public) // @ game+0x1cb59f0
	void CreateHomeActor(struct FString Path); // Function Solarland.SCustomGameMode.CreateHomeActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool ChangePlayerCharacter(struct ASCMPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangePlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb58f0
	bool ChangeBotAICharacter(struct ASolarPlayerState* Player, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameMode.ChangeBotAICharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb57f0
};

// Class Solarland.SCBattleRoyaleGameMode
// Size: 0x5d0 (Inherited: 0x5d0)
struct ASCBattleRoyaleGameMode : ASCustomGameMode {
};

// Class Solarland.SCBountyGameMode
// Size: 0x5d0 (Inherited: 0x5d0)
struct ASCBountyGameMode : ASCustomGameMode {
};

// Class Solarland.SolarCharacterBase
// Size: 0x5d0 (Inherited: 0x4d0)
struct ASolarCharacterBase : ACharacter {
	char pad_4D0[0x24]; // 0x4d0(0x24)
	struct FSpawnedActorHandle CachedActorHandle; // 0x4f4(0x04)
	struct USolarAbilityComponent* SolarAbilityComponent; // 0x4f8(0x08)
	bool bPendingEnterWater; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)
	struct ASolarCharacterBase* InstigatorCharacter; // 0x508(0x08)
	struct TWeakObjectPtr<struct UParticleSystem> DedicatedDeathEffect; // 0x510(0x08)
	struct TSoftObjectPtr<UParticleSystem> DeathEffectSoft; // 0x518(0x28)
	char pad_540[0x34]; // 0x540(0x34)
	float VehicleCollisionProtectionTimeOnJumpingOff; // 0x574(0x04)
	struct USolarAbilitySystemComponent* SolarAbilitySystemComponent; // 0x578(0x08)
	char pad_580[0x24]; // 0x580(0x24)
	bool bHoldSignificanceWhenDyingForAutonomous; // 0x5a4(0x01)
	char pad_5A5[0x3]; // 0x5a5(0x03)
	struct UAkComponent* AkAudioComponent; // 0x5a8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x5b0(0x08)
	struct UCharacterSoundConfig* CharacterSoundConfig; // 0x5b8(0x08)
	float DefaultRefreshBonesCountDown; // 0x5c0(0x04)
	char pad_5C4[0xc]; // 0x5c4(0x0c)

	void SetAttributeWithGAS(struct FGameplayAttribute InAttribute, enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.SetAttributeWithGAS // (Native|Public|BlueprintCallable) // @ game+0x1d269e0
	void ResetAudioComponentTransform(); // Function Solarland.SolarCharacterBase.ResetAudioComponentTransform // (Final|Native|Public) // @ game+0x1d269c0
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarCharacterBase.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1d268d0
	void OnRep_PendingEnterWater(); // Function Solarland.SolarCharacterBase.OnRep_PendingEnterWater // (Native|Public) // @ game+0x1259090
	void MulticastAddHitTrace(struct FHitTraceInfo Info); // Function Solarland.SolarCharacterBase.MulticastAddHitTrace // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1d26840
	void LazyRefreshBones(float DelayTime); // Function Solarland.SolarCharacterBase.LazyRefreshBones // (Final|Native|Public|BlueprintCallable) // @ game+0x1d267c0
	bool K2_IsInWater(); // Function Solarland.SolarCharacterBase.K2_IsInWater // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26720
	bool K2_IsAlive(); // Function Solarland.SolarCharacterBase.K2_IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26780
	bool IsPlayerLocallyControlled(); // Function Solarland.SolarCharacterBase.IsPlayerLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26750
	bool IsInWater(); // Function Solarland.SolarCharacterBase.IsInWater // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26720
	bool IsInSight(struct FVector& InTargetPos, float InMaxAngle, bool bHorizontalOnly); // Function Solarland.SolarCharacterBase.IsInSight // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d26600
	bool IsInRoom(); // Function Solarland.SolarCharacterBase.IsInRoom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d265d0
	bool IsBlocked(struct AActor* InOtherActor); // Function Solarland.SolarCharacterBase.IsBlocked // (Final|Native|Public) // @ game+0x1d26540
	bool InSameTeamWithFirstPlayerController(); // Function Solarland.SolarCharacterBase.InSameTeamWithFirstPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26440
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarCharacterBase.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1d26470
	struct FString GetSoundEventString(enum class ECharacterSoundOpt SoundOpt); // Function Solarland.SolarCharacterBase.GetSoundEventString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d262c0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarCharacterBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1d262a0
	struct USolarAbilitySystemComponent* GetSafeASC(); // Function Solarland.SolarCharacterBase.GetSafeASC // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18e30
	float GetMaxHealth(); // Function Solarland.SolarCharacterBase.GetMaxHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26260
	float GetCurrentHealth(); // Function Solarland.SolarCharacterBase.GetCurrentHealth // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26220
	enum class ESolarCharacterType GetCharacterType(); // Function Solarland.SolarCharacterBase.GetCharacterType // (Native|Public|Const) // @ game+0x1d261f0
	struct FVector GetCharacterLocation(bool bMiddle); // Function Solarland.SolarCharacterBase.GetCharacterLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26140
	struct FVector GetCharacterDirection(); // Function Solarland.SolarCharacterBase.GetCharacterDirection // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d26100
	struct USolarBackpackComponent* GetBackpack(); // Function Solarland.SolarCharacterBase.GetBackpack // (Native|Public|Const) // @ game+0x1d260d0
	void ClientOnPushedByVehicle(); // Function Solarland.SolarCharacterBase.ClientOnPushedByVehicle // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1258d30
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarCharacterBase.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x1d26040
	void ChangeCurrentHealthWithGAS(enum class EGameplayModOp ModifyType, float InValue); // Function Solarland.SolarCharacterBase.ChangeCurrentHealthWithGAS // (Native|Public|BlueprintCallable) // @ game+0x1d25f80
};

// Class Solarland.SolarCharacter
// Size: 0x2500 (Inherited: 0x5d0)
struct ASolarCharacter : ASolarCharacterBase {
	char pad_5D0[0x88]; // 0x5d0(0x88)
	struct FMulticastInlineDelegate PendingBeginPlay; // 0x658(0x10)
	char pad_668[0x18]; // 0x668(0x18)
	struct FMulticastInlineDelegate OnPlayerStatePossessDelegate; // 0x680(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x690(0x10)
	enum class ESolarCharacterType SolarCharacterType; // 0x6a0(0x01)
	char pad_6A1[0x5b]; // 0x6a1(0x5b)
	struct FVector2D CharacterCapsuleSizeOverride; // 0x6fc(0x08)
	char pad_704[0x1]; // 0x704(0x01)
	bool bInRoom; // 0x705(0x01)
	char pad_706[0x2]; // 0x706(0x02)
	float CheckInRoomInterval; // 0x708(0x04)
	char pad_70C[0x26]; // 0x70c(0x26)
	struct FReconnectionParams ReconnectionParams; // 0x732(0x01)
	char pad_733[0x1d]; // 0x733(0x1d)
	struct USolarAnimInstance* SolarAnimInstance; // 0x750(0x08)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SolarAnimInstances; // 0x758(0x50)
	char pad_7A8[0x14]; // 0x7a8(0x14)
	int32_t BodyHitSoundCount; // 0x7bc(0x04)
	int32_t BodyHitByPunchSoundCount; // 0x7c0(0x04)
	char pad_7C4[0x4]; // 0x7c4(0x04)
	struct TArray<struct ASolarPile*> ChargingPileQueue; // 0x7c8(0x10)
	int64_t ChargingDoneSoundCD; // 0x7d8(0x08)
	char pad_7E0[0x10]; // 0x7e0(0x10)
	struct UCameraShake* HitCameraShake; // 0x7f0(0x08)
	float CameraShakeCD; // 0x7f8(0x04)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct UMaterialParameterCollection* CameraFOVParameterCollection; // 0x800(0x08)
	char pad_808[0x10]; // 0x808(0x10)
	struct FMulticastInlineDelegate OnCharacterIDSet; // 0x818(0x10)
	struct FMulticastInlineDelegate OnSkinIDSet; // 0x828(0x10)
	struct FMulticastInlineDelegate OnCharacterSkinReset; // 0x838(0x10)
	enum class ECharacterBodyScaleType BodyScaleType; // 0x848(0x01)
	char pad_849[0x3]; // 0x849(0x03)
	int32_t AssignedCharacterID; // 0x84c(0x04)
	int32_t AssignedSkinID; // 0x850(0x04)
	char pad_854[0xc]; // 0x854(0x0c)
	struct TMap<struct FGameplayTag, struct USkeletalMeshComponent*> SkeletalOrnaments; // 0x860(0x50)
	struct TMap<struct FGameplayTag, struct UStaticMeshComponent*> StaticOrnaments; // 0x8b0(0x50)
	struct TMap<struct FGameplayTag, struct FCharacterTagListenerForMeshComp> MeshOrnamentVisibleTagDependencies; // 0x900(0x50)
	char pad_950[0x140]; // 0x950(0x140)
	struct USolarAttributeSubComponent* AttributeSubComp; // 0xa90(0x08)
	char pad_A98[0x30]; // 0xa98(0x30)
	struct UGameplayEffect* ExtraVJetTimesEffect; // 0xac8(0x08)
	struct UGameplayEffect* VJetChargeScaleEffect; // 0xad0(0x08)
	struct UGameplayEffect* ExtraHJetTimesEffect; // 0xad8(0x08)
	struct UGameplayEffect* HJetChargeScaleEffect; // 0xae0(0x08)
	struct FGameplayTag ExtraJetTimesSetterTag; // 0xae8(0x08)
	struct FGameplayTag JetChargeScaleSetterTag; // 0xaf0(0x08)
	int32_t DeathBoxId; // 0xaf8(0x04)
	int32_t MonsterDeathBoxId; // 0xafc(0x04)
	char pad_B00[0x8]; // 0xb00(0x08)
	struct ASolarBackpackActor* SolarBackpackActor; // 0xb08(0x08)
	struct USolarBackpackComponent* SolarBackpackComponent; // 0xb10(0x08)
	char pad_B18[0x28]; // 0xb18(0x28)
	struct FMulticastInlineDelegate OnBackpackItemUpdate; // 0xb40(0x10)
	struct FMulticastInlineDelegate OnBackpackEnergyUpdate; // 0xb50(0x10)
	struct FMulticastInlineDelegate OnBackpackEquipUpdate; // 0xb60(0x10)
	struct FMulticastInlineDelegate OnBatteryIdUpdate; // 0xb70(0x10)
	struct FMulticastInlineDelegate OnEnergyStateUpdate; // 0xb80(0x10)
	struct FMulticastInlineDelegate OnChargeInfoUpdate; // 0xb90(0x10)
	struct FMulticastInlineDelegate OnConsumableNumUpdated; // 0xba0(0x10)
	struct FMulticastInlineDelegate OnMaxEnergyUpdate; // 0xbb0(0x10)
	struct FMulticastInlineDelegate OnCurEnergyUpdate; // 0xbc0(0x10)
	struct FMulticastInlineDelegate OnBackpackWeaponPartUpdate; // 0xbd0(0x10)
	struct TMap<int32_t, int32_t> ShieldUpMatCostMap; // 0xbe0(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0xc30(0x50)
	struct TArray<struct FReplicateMaxPileData> MaxPileArray; // 0xc80(0x10)
	struct TArray<struct FReplicateBagGradeData> GradeKeyBagGradeArray; // 0xc90(0x10)
	struct TArray<struct FBagRequirementData> BagRequirementArr; // 0xca0(0x10)
	struct TMap<int32_t, struct FSolarItemData> IdKeyItemMap; // 0xcb0(0x50)
	struct TArray<struct FReplicateItemData> IdKeyItemArray; // 0xd00(0x10)
	struct TMap<enum class EItemType, struct FSolarItemData> TypeKeyItemMap; // 0xd10(0x50)
	struct TArray<struct FReplicateItemData> TypeKeyItemArray; // 0xd60(0x10)
	struct TArray<struct FReplicateItemData> WeaponDataArray; // 0xd70(0x10)
	struct TMap<int32_t, struct FSolarItemData> WeaponDataMap; // 0xd80(0x50)
	char pad_DD0[0x50]; // 0xdd0(0x50)
	struct TArray<int32_t> WeaponPartsArray; // 0xe20(0x10)
	char pad_E30[0x8]; // 0xe30(0x08)
	struct TArray<char> IgnoreScopeSlots; // 0xe38(0x10)
	int32_t BeReplacedWeaponItemID; // 0xe48(0x04)
	char EnergyState; // 0xe4c(0x01)
	char pad_E4D[0x3]; // 0xe4d(0x03)
	float MaxEnergyValue; // 0xe50(0x04)
	float CurrEnergyValue; // 0xe54(0x04)
	float MaxExtraEnergyValue; // 0xe58(0x04)
	float CurrExtraEnergyValue; // 0xe5c(0x04)
	int32_t EnergyModuleID; // 0xe60(0x04)
	float AddedEnergyMax; // 0xe64(0x04)
	int32_t ExtraEnergyModuleID; // 0xe68(0x04)
	float AddedExtraEnergyMax; // 0xe6c(0x04)
	int32_t VJetPackModuleID; // 0xe70(0x04)
	int32_t HJetPackModuleID; // 0xe74(0x04)
	char pad_E78[0x1]; // 0xe78(0x01)
	bool bSettingEnergyCostEnabled; // 0xe79(0x01)
	char pad_E7A[0x2]; // 0xe7a(0x02)
	int32_t DayLightID; // 0xe7c(0x04)
	float SolarChargeRatio; // 0xe80(0x04)
	bool bReviveItemCleared; // 0xe84(0x01)
	char pad_E85[0x3]; // 0xe85(0x03)
	struct FBackpackJetPrepelInfo JetPropellingInfo; // 0xe88(0x0c)
	enum class EBackpackPropellingMode BackpackPropellingMode; // 0xe94(0x01)
	char pad_E95[0x3]; // 0xe95(0x03)
	struct FVector2D InputVector; // 0xe98(0x08)
	char pad_EA0[0x8]; // 0xea0(0x08)
	struct USolarInputActionContext* InputActionContext; // 0xea8(0x08)
	struct UGyroscopeConfig* GyroscopeConfig; // 0xeb0(0x08)
	enum class EIdleTurnType IdleTurnType; // 0xeb8(0x01)
	char pad_EB9[0x7]; // 0xeb9(0x07)
	struct FRotator CharacterLookAt; // 0xec0(0x0c)
	char pad_ECC[0x1c]; // 0xecc(0x1c)
	float TurnSpeed; // 0xee8(0x04)
	float TurnChangeSpeedThreshold; // 0xeec(0x04)
	float TurnAngleThreshold; // 0xef0(0x04)
	float SprintTolerantAngle; // 0xef4(0x04)
	char pad_EF8[0x8]; // 0xef8(0x08)
	struct FCharacterOperationEvent CharacterOperationEvt; // 0xf00(0x10)
	char pad_F10[0x18]; // 0xf10(0x18)
	struct FMulticastInlineDelegate OnHealthUpdateDelegate; // 0xf28(0x10)
	float PendingRegeneration; // 0xf38(0x04)
	float DiedTime; // 0xf3c(0x04)
	char pad_F40[0x4]; // 0xf40(0x04)
	char bIsDeathVerge : 1; // 0xf44(0x01)
	char pad_F44_1 : 7; // 0xf44(0x01)
	char pad_F45[0xf]; // 0xf45(0x0f)
	struct FName DissolvedDeathFXBindingSocketName; // 0xf54(0x08)
	char pad_F5C[0x4]; // 0xf5c(0x04)
	struct USolarTeamRescueComponent* SolarTeamRescueComponent; // 0xf60(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuingCharater; // 0xf68(0x08)
	struct TWeakObjectPtr<struct ASolarUAVRescue> RescuingUAV; // 0xf70(0x08)
	enum class ERescueState CurrentRescueState; // 0xf78(0x01)
	enum class ERescueState LastRescueState; // 0xf79(0x01)
	char pad_F7A[0x16]; // 0xf7a(0x16)
	struct FInjectorMeshPreset RescueInjectorPreset; // 0xf90(0x50)
	int32_t FastReliefPassiveTextID; // 0xfe0(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> RescuedCharater; // 0xfe4(0x08)
	float RescuedStartTime; // 0xfec(0x04)
	int32_t RescueTextID; // 0xff0(0x04)
	char pad_FF4[0x4]; // 0xff4(0x04)
	struct UStaticMeshComponent* RescueInjector; // 0xff8(0x08)
	char pad_1000[0x24]; // 0x1000(0x24)
	float RescueTime; // 0x1024(0x04)
	char pad_1028[0x8]; // 0x1028(0x08)
	struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray; // 0x1030(0x10)
	struct TArray<struct FSolarItemData> DeathBoxArray; // 0x1040(0x10)
	float DeathBoxEnergy; // 0x1050(0x04)
	char pad_1054[0x4]; // 0x1054(0x04)
	struct ASolarWaterActorNew* WaterActor; // 0x1058(0x08)
	float KneeWaterInfluencesCharacterSpeed; // 0x1060(0x04)
	float WaterDraftDepthWhenDeathVerge; // 0x1064(0x04)
	float ShoalWaterMaxDepth; // 0x1068(0x04)
	float HeavyJumpWaterMinAxisVelocity; // 0x106c(0x04)
	struct FWaterEffectPreset SwimmingWaterEffectPreset; // 0x1070(0x50)
	struct UParticleSystemComponent* SwimmingWaterEffect; // 0x10c0(0x08)
	struct FWaterEffectPreset HeavyJumpWaterEffectPreset; // 0x10c8(0x50)
	struct UParticleSystemComponent* HeavyJumpWaterEffect; // 0x1118(0x08)
	struct TArray<struct FWaterEffectPreset> SoftJumpWaterEffectPresets; // 0x1120(0x10)
	struct TArray<struct UParticleSystemComponent*> HorizontalFlyWaterEffects; // 0x1130(0x10)
	char pad_1140[0x4]; // 0x1140(0x04)
	int32_t AirDropSkillTextID; // 0x1144(0x04)
	struct FName PickupCollisionProfileName; // 0x1148(0x08)
	struct USolarItemComponent* SolarItemComponent; // 0x1150(0x08)
	struct USolarPickupComponent* SolarPickupComponent; // 0x1158(0x08)
	bool bIsElectricStoreOpened; // 0x1160(0x01)
	char pad_1161[0x3]; // 0x1161(0x03)
	float RecommendCriticalHealth; // 0x1164(0x04)
	struct FString TreatFX; // 0x1168(0x10)
	float MinHealthRatioToShowMedicineFX; // 0x1178(0x04)
	char pad_117C[0x4]; // 0x117c(0x04)
	struct USolarTreatmentComponent* SolarTreatmentComponent; // 0x1180(0x08)
	int32_t TreatmentTextID; // 0x1188(0x04)
	enum class ESolarTreatmentState CurrentTreatState; // 0x118c(0x01)
	char pad_118D[0x3]; // 0x118d(0x03)
	int32_t TreatmentCount; // 0x1190(0x04)
	int32_t ResurrectTextID; // 0x1194(0x04)
	struct TWeakObjectPtr<struct ADeathTreasureBox> SelfDeathBox; // 0x1198(0x08)
	float ResurrectTime; // 0x11a0(0x04)
	char pad_11A4[0x4]; // 0x11a4(0x04)
	struct FMulticastInlineDelegate OnShieldRecharge; // 0x11a8(0x10)
	struct FMulticastInlineDelegate OnShieldBreak; // 0x11b8(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUD; // 0x11c8(0x10)
	struct FMulticastInlineDelegate OnShowShieldHUDItem; // 0x11d8(0x10)
	struct FMulticastInlineDelegate OnShieldUpFX; // 0x11e8(0x10)
	struct FMulticastInlineDelegate OnCurShieldValueChanged; // 0x11f8(0x10)
	struct FMulticastInlineDelegate OnShieldIDChanged; // 0x1208(0x10)
	struct FMulticastInlineDelegate OnShieldValueLow; // 0x1218(0x10)
	char pad_1228[0x4]; // 0x1228(0x04)
	int32_t CurrShieldId; // 0x122c(0x04)
	int32_t CurUniqueShieldId; // 0x1230(0x04)
	float MaxShieldValue; // 0x1234(0x04)
	int32_t NextUpgradeShieldID; // 0x1238(0x04)
	int32_t NextUpgradeShieldEnergy; // 0x123c(0x04)
	float CurrShieldValue; // 0x1240(0x04)
	enum class EShieldState CurrShieldState; // 0x1244(0x01)
	char pad_1245[0x3]; // 0x1245(0x03)
	int32_t CurrShieldLevel; // 0x1248(0x04)
	char pad_124C[0x4]; // 0x124c(0x04)
	bool bHasPreAdd; // 0x1250(0x01)
	char pad_1251[0xaf]; // 0x1251(0xaf)
	struct FOperatorMeshPreset ShieldOperatorPreset; // 0x1300(0xd0)
	struct UStaticMeshComponent* ShieldRepairOperator; // 0x13d0(0x08)
	struct UStaticMesh* ShieldOperatorSM; // 0x13d8(0x08)
	struct UStaticMesh* ShieldOperatorBigSM; // 0x13e0(0x08)
	struct UParticleSystemComponent* ShieldRepairFX; // 0x13e8(0x08)
	struct UParticleSystemComponent* ShieldMultiRecoverFX; // 0x13f0(0x08)
	struct UParticleSystemComponent* ShieldUpgradeBodyFX; // 0x13f8(0x08)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyLoopFXTemplate; // 0x1400(0x10)
	struct TArray<struct TSoftObjectPtr<UParticleSystem>> ShieldUpgradeBodyEndFXTemplate; // 0x1410(0x10)
	struct UCurveFloat* ShieldOperatorExpandCurve; // 0x1420(0x08)
	struct UCurveFloat* ShieldOperatorNarrowCurve; // 0x1428(0x08)
	struct FTimeline ShieldOperatorExpandTimeline; // 0x1430(0x98)
	struct FTimeline ShieldOperatorNarrowTimeline; // 0x14c8(0x98)
	struct FName EffectAttachBone; // 0x1560(0x08)
	struct FString ShieldRechargeEffect; // 0x1568(0x10)
	struct FString ShieldBrokenEffect; // 0x1578(0x10)
	float HitEffectOffset; // 0x1588(0x04)
	int32_t ShieldRechargeTextID; // 0x158c(0x04)
	int32_t ShieldRechargePassiveTextID; // 0x1590(0x04)
	char pad_1594[0x4]; // 0x1594(0x04)
	struct TMap<enum class EShieldSoundType, struct FShieldSoundData> ShieldSounds; // 0x1598(0x50)
	char pad_15E8[0x8]; // 0x15e8(0x08)
	struct FTreasureBoxOperatorMeshPreset TreasureBoxOperatorMeshPreset; // 0x15f0(0x50)
	struct UStaticMeshComponent* TreasureBoxOperator; // 0x1640(0x08)
	struct ADeathTreasureBox* CurChargingDeathBox; // 0x1648(0x08)
	struct TArray<struct ADeathTreasureBox*> DeathBoxes; // 0x1650(0x10)
	char pad_1660[0x8]; // 0x1660(0x08)
	struct TSoftObjectPtr<UParticleSystem> RevivePickupFX; // 0x1668(0x28)
	struct TSoftObjectPtr<UParticleSystem> ReviveClearFX; // 0x1690(0x28)
	struct FMulticastInlineDelegate OnLocalPlayerSpectateMeStatusChanged; // 0x16b8(0x10)
	struct FDelegate OnHUDNickNameSet; // 0x16c8(0x10)
	struct FDelegate OnHUDTeamPosSet; // 0x16d8(0x10)
	struct FDelegate OnHUDDistanceSet; // 0x16e8(0x10)
	struct FDelegate OnHUDDistanceDisplaySet; // 0x16f8(0x10)
	struct FDelegate OnHUDRescueBtnActivitySet; // 0x1708(0x10)
	struct USolarTeammateHUDWidgetComponent* TeammateHUDComp; // 0x1718(0x08)
	struct FTeammateHUDPreset TeammateHUDPreset; // 0x1720(0x20)
	char pad_1740[0x8]; // 0x1740(0x08)
	float HUDZNomral; // 0x1748(0x04)
	float HUDZSwim; // 0x174c(0x04)
	float HUDZCrouch; // 0x1750(0x04)
	float HUDZCrawl; // 0x1754(0x04)
	float HUDChangeTime; // 0x1758(0x04)
	float HUDChangeSpeed; // 0x175c(0x04)
	float CheckHUDDistanceToCenter; // 0x1760(0x04)
	float HUDTranslucentValue; // 0x1764(0x04)
	struct USolarTeammateHUDWidgetComponent* HUDComponentClass; // 0x1768(0x08)
	char pad_1770[0x18]; // 0x1770(0x18)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0x1788(0x08)
	struct FName RadarScannedEffectID; // 0x1790(0x08)
	struct FGameplayCueTag RadarDetectedEffectCueTag; // 0x1798(0x08)
	struct FGameplayCueTag RadarDetectedInSmokeEffectCueTag; // 0x17a0(0x08)
	struct USolarRadarComponent* SolarRadarComponent; // 0x17a8(0x08)
	struct FRadarDataSpecContainer ActivatedRadars; // 0x17b0(0x120)
	struct TWeakObjectPtr<struct ASolarRadarStation> TargetRadarStation; // 0x18d0(0x08)
	struct TWeakObjectPtr<struct ASolarElectricShop> TargetElectricShop; // 0x18d8(0x08)
	char pad_18E0[0x10]; // 0x18e0(0x10)
	struct FTimerHandle StatisticsTimerHandle; // 0x18f0(0x08)
	char pad_18F8[0x70]; // 0x18f8(0x70)
	struct ASolarCharacter* CachedInstigatorCharacter; // 0x1968(0x08)
	char pad_1970[0xc]; // 0x1970(0x0c)
	float DamageLimitTime; // 0x197c(0x04)
	float ArmorReduceValue; // 0x1980(0x04)
	float HeadHitValue; // 0x1984(0x04)
	struct FMulticastInlineDelegate OnTakeDamageDelegate; // 0x1988(0x10)
	char pad_1998[0x14]; // 0x1998(0x14)
	int32_t InstigatorCharacterWeaponItemID; // 0x19ac(0x04)
	struct TArray<struct FCriticalHitInfo> CriticalHits; // 0x19b0(0x10)
	char pad_19C0[0x20]; // 0x19c0(0x20)
	float DamagingDuration; // 0x19e0(0x04)
	char pad_19E4[0x14]; // 0x19e4(0x14)
	float DefaultHitTraceLifetime; // 0x19f8(0x04)
	char pad_19FC[0x4]; // 0x19fc(0x04)
	struct UCurveFloat* DefaultHitTraceWidgetScaleCurve; // 0x1a00(0x08)
	float SniperHitTraceLifetime; // 0x1a08(0x04)
	char pad_1A0C[0x4]; // 0x1a0c(0x04)
	struct UCurveFloat* SniperHitTraceWidgetScaleCurve; // 0x1a10(0x08)
	float MeleeHitTraceLifetime; // 0x1a18(0x04)
	float VehicleHitTraceLifetime; // 0x1a1c(0x04)
	struct UCurveFloat* VehicleHitTraceWidgetScaleCurve; // 0x1a20(0x08)
	char pad_1A28[0x38]; // 0x1a28(0x38)
	struct UWorldMarkComponent* WorldMarkComponent; // 0x1a60(0x08)
	float PeekSpeed; // 0x1a68(0x04)
	int32_t DesirePeekValue; // 0x1a6c(0x04)
	struct UIMChatObject* IMChatObj; // 0x1a70(0x08)
	int32_t AIActorCapacity; // 0x1a78(0x04)
	char pad_1A7C[0x24]; // 0x1a7c(0x24)
	struct ASolarCharacterAbility* CharacterAbility; // 0x1aa0(0x08)
	char pad_1AA8[0x68]; // 0x1aa8(0x68)
	float StandJogSpeed; // 0x1b10(0x04)
	float StandRunSpeed; // 0x1b14(0x04)
	float StandSprintSpeed; // 0x1b18(0x04)
	float StandGatlingSpeed; // 0x1b1c(0x04)
	float CrouchJogSpeed; // 0x1b20(0x04)
	float CrouchRunSpeed; // 0x1b24(0x04)
	float CrouchSprintSpeed; // 0x1b28(0x04)
	float CrouchGatlingSpeed; // 0x1b2c(0x04)
	float JetLandingTriggerMinVelocity; // 0x1b30(0x04)
	float JetLandingHeightThreshold; // 0x1b34(0x04)
	float JetLandingVelocity; // 0x1b38(0x04)
	char pad_1B3C[0x4]; // 0x1b3c(0x04)
	struct FMulticastInlineDelegate OnJogSetClient; // 0x1b40(0x10)
	bool bIsSprintingMove; // 0x1b50(0x01)
	char pad_1B51[0x57]; // 0x1b51(0x57)
	struct USolarCharacterMovementComponent* CachedSolarCharacterMovement; // 0x1ba8(0x08)
	char pad_1BB0[0x4]; // 0x1bb0(0x04)
	char pad_1BB4_0 : 1; // 0x1bb4(0x01)
	char bIsJog : 1; // 0x1bb4(0x01)
	char pad_1BB4_2 : 6; // 0x1bb4(0x01)
	char pad_1BB5[0xb]; // 0x1bb5(0x0b)
	float MoveSpeedReduceBonusInHipFire; // 0x1bc0(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x1bc4(0x04)
	bool bEnableCustomJump; // 0x1bc8(0x01)
	enum class ECustomJumpType CurrentCustomJumpType; // 0x1bc9(0x01)
	char pad_1BCA[0x2]; // 0x1bca(0x02)
	enum class EJetFlyType CurrentJetFlyType; // 0x1bcc(0x01)
	char pad_1BCD[0x3]; // 0x1bcd(0x03)
	char bNewJetFlyCheckFlag : 1; // 0x1bd0(0x01)
	char pad_1BD0_1 : 7; // 0x1bd0(0x01)
	char pad_1BD1[0x47]; // 0x1bd1(0x47)
	struct UCruiseAssetSet* CruiseAssetSet; // 0x1c18(0x08)
	struct FString AirborneStartSound; // 0x1c20(0x10)
	struct FString AirborneJumpSound; // 0x1c30(0x10)
	struct UAnimSequence* CruiseStartAnim; // 0x1c40(0x08)
	struct UAnimSequence* CruiseLoopAnim; // 0x1c48(0x08)
	struct UAnimSequence* CruiseEndAnim; // 0x1c50(0x08)
	float PrepareToParachuteStartTime; // 0x1c58(0x04)
	float PrepareToParachuteDuration; // 0x1c5c(0x04)
	struct FVector PrepareToParachuteLocation; // 0x1c60(0x0c)
	struct FVector AgreedParachuteLocation; // 0x1c6c(0x0c)
	char pad_1C78[0x18]; // 0x1c78(0x18)
	int32_t CapsuleID; // 0x1c90(0x04)
	bool bEnableCruising; // 0x1c94(0x01)
	char pad_1C95[0x3]; // 0x1c95(0x03)
	struct ASolarCapsuleRoot* BoardedRoot; // 0x1c98(0x08)
	enum class ECruiseState CruiseState; // 0x1ca0(0x01)
	char pad_1CA1[0x3]; // 0x1ca1(0x03)
	int32_t ForceParachuteCountDown; // 0x1ca4(0x04)
	struct UCharacterCruiseComponent* CruiseComponentPrivate; // 0x1ca8(0x08)
	char pad_1CB0[0x8]; // 0x1cb0(0x08)
	struct TArray<struct FSkydivingEffectPreset> SkydivingEffectClassList; // 0x1cb8(0x10)
	float LowerLimitOfSpeedForSkydivingSoundEffect; // 0x1cc8(0x04)
	float MinPitchToPlaySkydivingLandingEffect; // 0x1ccc(0x04)
	struct FMulticastInlineDelegate OnSkydiveTraced; // 0x1cd0(0x10)
	struct AExponentialHeightFog* HeightFogActor; // 0x1ce0(0x08)
	struct TArray<struct UParticleSystemComponent*> SkydiveFlyingEffects; // 0x1ce8(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveLandingEffects; // 0x1cf8(0x10)
	struct TArray<struct UParticleSystemComponent*> SkydiveWholeLifetimeEffects; // 0x1d08(0x10)
	struct FName StartSkydiveLoopSoundGroup_Speed; // 0x1d18(0x08)
	struct FName StopSkydiveLoopSoundGroup_Speed; // 0x1d20(0x08)
	struct FName StopSkydiveLoopSoundGroup_Height; // 0x1d28(0x08)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x1d30(0x01)
	char pad_1D31[0x7]; // 0x1d31(0x07)
	struct FMulticastInlineDelegate OnSkydivingStageChangedDelegate; // 0x1d38(0x10)
	char pad_1D48[0x20]; // 0x1d48(0x20)
	struct UActorComponent* FollowedLeaderMovementComponent; // 0x1d68(0x08)
	char pad_1D70[0x28]; // 0x1d70(0x28)
	struct UWeaponSystemPlayerBase* WeaponSystemComponent; // 0x1d98(0x08)
	char pad_1DA0[0x38]; // 0x1da0(0x38)
	struct UMaterialInstance* MarkMaterial; // 0x1dd8(0x08)
	char pad_1DE0[0x8]; // 0x1de0(0x08)
	struct USkeletalMeshComponentConfig* FirstPersonMeshConfig; // 0x1de8(0x08)
	struct USkeletalMeshComponent* FirstPersonMesh; // 0x1df0(0x08)
	float BaseGunCollisionTraceDis; // 0x1df8(0x04)
	float CurrentGunCollisionTraceDis; // 0x1dfc(0x04)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighIdle; // 0x1e00(0x50)
	struct TMap<enum class ECharacterBodyScaleType, float> GunCollisionTraceStartHighCrouch; // 0x1e50(0x50)
	float MinDistanceGun2Wall; // 0x1ea0(0x04)
	float GunCollisionXYAdjustDownSide; // 0x1ea4(0x04)
	float GunCollisionCheckZLimit; // 0x1ea8(0x04)
	char pad_1EAC[0x4]; // 0x1eac(0x04)
	struct UWeaponSystemPlayer* WeaponSystemPlayerClass; // 0x1eb0(0x08)
	struct UWeaponSystemPlayerAI* WeaponSystemAIClass; // 0x1eb8(0x08)
	struct UMapMarkBase* TrackingMarkWidgetClass; // 0x1ec0(0x08)
	struct FVector WeaponAimStartOffset; // 0x1ec8(0x0c)
	char pad_1ED4[0xc]; // 0x1ed4(0x0c)
	struct ASolarPlayerWeapon* TempSwitchWeapon; // 0x1ee0(0x08)
	struct ASolarPlayerWeapon* CachedCurrentWeapon; // 0x1ee8(0x08)
	char pad_1EF0[0xe0]; // 0x1ef0(0xe0)
	struct UWeaponSystemVehicleComponent* WeaponSystemVehicle; // 0x1fd0(0x08)
	char pad_1FD8[0x18]; // 0x1fd8(0x18)
	struct FBoardedVehicleInfo BoardedVehicleInfo; // 0x1ff0(0x10)
	bool bOutVehicleShot; // 0x2000(0x01)
	char pad_2001[0xcf]; // 0x2001(0xcf)
	struct FVehicleRepairToolMeshPreset VehicleRepairToolMeshPreset; // 0x20d0(0x50)
	int32_t RepairWeakPointTextID; // 0x2120(0x04)
	char pad_2124[0x4]; // 0x2124(0x04)
	struct UStaticMeshComponent* VehicleRepairToolMesh; // 0x2128(0x08)
	struct UActorEffect* VehicleStealthEffectClass; // 0x2130(0x08)
	char pad_2138[0x18]; // 0x2138(0x18)
	struct FMulticastInlineDelegate OnCharacterActivateEMP; // 0x2150(0x10)
	struct FMulticastInlineDelegate OnCharacterSwitchEMPEffect; // 0x2160(0x10)
	bool bActiveEMP; // 0x2170(0x01)
	bool bActiveInfiniteAmmo; // 0x2171(0x01)
	bool bNoticedCantCharge; // 0x2172(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x2173(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x2174(0x01)
	char pad_2175[0x3]; // 0x2175(0x03)
	struct UStaticMeshComponent* MassInvisibilityWarningIconClass; // 0x2178(0x08)
	struct UStaticMeshComponent* MassInvWarningIconComponent; // 0x2180(0x08)
	char pad_2188[0x1c]; // 0x2188(0x1c)
	bool bShowMapVoiceStep; // 0x21a4(0x01)
	bool bShowMapVoiceFight; // 0x21a5(0x01)
	char pad_21A6[0x72]; // 0x21a6(0x72)
	struct UWidgetComponent* ReplayInfoHUDComponent; // 0x2218(0x08)
	char pad_2220[0xc]; // 0x2220(0x0c)
	float VaultDegree; // 0x222c(0x04)
	float VaultHalfHeight; // 0x2230(0x04)
	struct FName DetectorProfile; // 0x2234(0x08)
	char pad_223C[0x9c]; // 0x223c(0x9c)
	struct ADebugReplicator* DebugReplicator; // 0x22d8(0x08)
	struct FString DebugStringToDrawGASServer; // 0x22e0(0x10)
	int32_t RoleAbilityCharacterID; // 0x22f0(0x04)
	char pad_22F4[0x4]; // 0x22f4(0x04)
	struct TArray<int32_t> RoleAbilityBoundPlayerLevels; // 0x22f8(0x10)
	struct TArray<struct FGameplayAbilitySpecHandle> RoleAbilitySpecHandles; // 0x2308(0x10)
	struct TArray<float> RoleAbilityStartCDServerTime; // 0x2318(0x10)
	char pad_2328[0x30]; // 0x2328(0x30)
	int32_t BattleUpgradeEffectCurrentLevel; // 0x2358(0x04)
	char pad_235C[0x4]; // 0x235c(0x04)
	struct FBattleUpgradeEffectContainer BattleUpgradeEffects; // 0x2360(0x120)
	char pad_2480[0x28]; // 0x2480(0x28)
	int32_t UAVCount; // 0x24a8(0x04)
	char pad_24AC[0xc]; // 0x24ac(0x0c)
	struct TWeakObjectPtr<struct ASolarUAVRescue> PermanentRescueUAV; // 0x24b8(0x08)
	char pad_24C0[0x1c]; // 0x24c0(0x1c)
	struct TWeakObjectPtr<struct ASolarNightComesActor> EffectingNightComesActor; // 0x24dc(0x08)
	char pad_24E4[0x1c]; // 0x24e4(0x1c)

	bool WorldToScreen(struct FVector& Location, struct FVector2D& Screen); // Function Solarland.SolarCharacter.WorldToScreen // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d23eb0
	void UpgradeShieldResponse(bool bSuccess); // Function Solarland.SolarCharacter.UpgradeShieldResponse // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1d23e20
	void UpgradeGenericSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeGenericSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23da0
	void UpgradeClassTypeSkill(int32_t LevelUp); // Function Solarland.SolarCharacter.UpgradeClassTypeSkill // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23d20
	void UpdateWeaponCrosshair(float InDeltaTime); // Function Solarland.SolarCharacter.UpdateWeaponCrosshair // (Final|Native|Public) // @ game+0x1d23ca0
	void UpdateVehicleStealthProgress(float StealthMaterialPercent); // Function Solarland.SolarCharacter.UpdateVehicleStealthProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23c20
	void UpdateTeammateHUDData(char InNewPosInTeam); // Function Solarland.SolarCharacter.UpdateTeammateHUDData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23ba0
	void UpdateShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.UpdateShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x1d23b80
	void UpdateShieldPropertyByAblility(); // Function Solarland.SolarCharacter.UpdateShieldPropertyByAblility // (Final|Native|Protected) // @ game+0x1d23b60
	void UpdateRoleAbilityState(char RoleAbilityIndex, enum class ERoleSkillOperation Ope); // Function Solarland.SolarCharacter.UpdateRoleAbilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23aa0
	void UpdateJetFlyDataToSpectating(); // Function Solarland.SolarCharacter.UpdateJetFlyDataToSpectating // (Final|Native|Private) // @ game+0x1d23a80
	void UpdateExtraMagToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateExtraMagToSpectateInfo // (Final|Native|Private) // @ game+0x1d23a00
	void UpdateDyingAttr(float DeltaTime); // Function Solarland.SolarCharacter.UpdateDyingAttr // (Final|Native|Public) // @ game+0x1d23980
	float UpdateCurrentHealth(float UpdateValue, enum class EHealthChangeType ChangeType, struct ASolarCharacter* InInstigatorCharacter, struct AActor* InDamageCauserActor, struct FSolarPointDamageEvent& DamageEvent, struct ASolarMapElementBase* ElementObj); // Function Solarland.SolarCharacter.UpdateCurrentHealth // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d23750
	void UpdateBattleUpgradeEffectToSpectateInfo(struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarCharacter.UpdateBattleUpgradeEffectToSpectateInfo // (Final|Native|Private) // @ game+0x1d236d0
	void UnbindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.UnbindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23650
	void TurnCharacterWithAngle(float Degree, bool bIsYawOrPitch); // Function Solarland.SolarCharacter.TurnCharacterWithAngle // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d23580
	void TurnCharacterToDirection(struct FVector& Dir); // Function Solarland.SolarCharacter.TurnCharacterToDirection // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d234f0
	void TryStopShieldRecharge(); // Function Solarland.SolarCharacter.TryStopShieldRecharge // (Final|Native|Public) // @ game+0x1d234d0
	void TryStatisticsRechargedTimes(); // Function Solarland.SolarCharacter.TryStatisticsRechargedTimes // (Final|Native|Public) // @ game+0x1d234b0
	void TryStartShieldRecharge(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryStartShieldRecharge // (Final|Native|Public) // @ game+0x1d23420
	void TrySetTeammateHUDShow(); // Function Solarland.SolarCharacter.TrySetTeammateHUDShow // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23400
	void TrySetTeammateHUDHide(); // Function Solarland.SolarCharacter.TrySetTeammateHUDHide // (Final|Native|Public|BlueprintCallable) // @ game+0x1d233e0
	void TrySetTeamateHUDVisiblity(); // Function Solarland.SolarCharacter.TrySetTeamateHUDVisiblity // (Final|Native|Public|BlueprintCallable) // @ game+0x1d233c0
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarCharacter.TryRechargeShield // (Final|Native|Public) // @ game+0x1d23330
	void TryHideShieldOperator(); // Function Solarland.SolarCharacter.TryHideShieldOperator // (Final|Native|Public) // @ game+0x1d23310
	void TryDiscardShieldUpgradeMatItems(int32_t InItemNum); // Function Solarland.SolarCharacter.TryDiscardShieldUpgradeMatItems // (Final|Native|Public) // @ game+0x1d23290
	void TryCreatingOwnTeammate(); // Function Solarland.SolarCharacter.TryCreatingOwnTeammate // (Final|Native|Protected) // @ game+0x1d23270
	void TryBreakShieldRecharge(); // Function Solarland.SolarCharacter.TryBreakShieldRecharge // (Final|Native|Public) // @ game+0x1d23250
	void TryBreakScopeStatus(); // Function Solarland.SolarCharacter.TryBreakScopeStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x1d23230
	void TryBindPowerBarDelegates(); // Function Solarland.SolarCharacter.TryBindPowerBarDelegates // (Final|Native|Public) // @ game+0x1d23210
	void TryBindPickupDelegates(); // Function Solarland.SolarCharacter.TryBindPickupDelegates // (Final|Native|Public) // @ game+0x8ba190
	void TryBindItemPanelDelegates(); // Function Solarland.SolarCharacter.TryBindItemPanelDelegates // (Final|Native|Public) // @ game+0x1d231f0
	void TryBindHPPanelDelegates(); // Function Solarland.SolarCharacter.TryBindHPPanelDelegates // (Final|Native|Public) // @ game+0x1d231d0
	void TryAutoMarkItemForTeammateServer(struct TArray<struct FSolarItemData> ItemData); // Function Solarland.SolarCharacter.TryAutoMarkItemForTeammateServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d230d0
	void ToggleDebugInfo(); // Function Solarland.SolarCharacter.ToggleDebugInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void ToggleDebugGASInfo(); // Function Solarland.SolarCharacter.ToggleDebugGASInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void TickShieldOperatorTimeline(float InDeltaTime); // Function Solarland.SolarCharacter.TickShieldOperatorTimeline // (Final|Native|Public) // @ game+0x1d23050
	float TakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.TakeDamageResolve // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1d22eb0
	void StopTreatmentProgressBar(); // Function Solarland.SolarCharacter.StopTreatmentProgressBar // (Final|Native|Public) // @ game+0x1d22e90
	void StopTreatment(); // Function Solarland.SolarCharacter.StopTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d22e70
	void StopShieldRechargeProgressBar(); // Function Solarland.SolarCharacter.StopShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x1d22e50
	void StopShieldRechargeProgress(); // Function Solarland.SolarCharacter.StopShieldRechargeProgress // (Final|Native|Public) // @ game+0x1d22e30
	void StopRescueProgressBar(int32_t TextID); // Function Solarland.SolarCharacter.StopRescueProgressBar // (Final|Native|Public) // @ game+0x1d22db0
	void StopRepairWeakPointProgressBar(); // Function Solarland.SolarCharacter.StopRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x1d22d90
	void StopClimbSound(); // Function Solarland.SolarCharacter.StopClimbSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1d22d50
	void StatisticElectricShopOnActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.StatisticElectricShopOnActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d22cc0
	void StartTreatmentProgressBar(float Duration); // Function Solarland.SolarCharacter.StartTreatmentProgressBar // (Final|Native|Public) // @ game+0x1d22c40
	void StartTreatment(); // Function Solarland.SolarCharacter.StartTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d22c20
	void StartShieldRechargeProgressBar(float InRechargeDuration, int32_t InContributorCharacterId); // Function Solarland.SolarCharacter.StartShieldRechargeProgressBar // (Final|Native|Public) // @ game+0x1d22b50
	void StartShieldRechargeProgress(); // Function Solarland.SolarCharacter.StartShieldRechargeProgress // (Final|Native|Public) // @ game+0x1d22b30
	void StartRescueProgressBar(float Duration, float RemainingTime, int32_t TextID, bool bShowBtn, bool bIsUAV); // Function Solarland.SolarCharacter.StartRescueProgressBar // (Final|Native|Public) // @ game+0x1d229a0
	void StartRepairWeakPointProgressBar(float Duration); // Function Solarland.SolarCharacter.StartRepairWeakPointProgressBar // (Final|Native|Public) // @ game+0x1d22920
	void StartCheckShieldTutorials(); // Function Solarland.SolarCharacter.StartCheckShieldTutorials // (Final|Native|Public) // @ game+0x1d228e0
	void StartCheckBackpackTutorials(); // Function Solarland.SolarCharacter.StartCheckBackpackTutorials // (Final|Native|Protected) // @ game+0x1d228c0
	void SpecAnimInstStopMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage); // Function Solarland.SolarCharacter.SpecAnimInstStopMontage // (Native|Public|BlueprintCallable) // @ game+0x1d227f0
	float SpecAnimInstPlayMontage(enum class ESpecAnimInstType SpecAnimType, struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Solarland.SolarCharacter.SpecAnimInstPlayMontage // (Native|Public|BlueprintCallable) // @ game+0x1d226a0
	struct UAnimMontage* SpecAnimInstGetCurrentMontage(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.SpecAnimInstGetCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x1d22610
	void SpawnDeathBoxActor(); // Function Solarland.SolarCharacter.SpawnDeathBoxActor // (Final|Native|Protected) // @ game+0x1d225f0
	void SolarLaunchCharacter(struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride, struct AActor* JumpPad); // Function Solarland.SolarCharacter.SolarLaunchCharacter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d22470
	void SolarGM_UpgradeBattleUpgradeEffectLevel(int32_t UpgradeTo); // Function Solarland.SolarCharacter.SolarGM_UpgradeBattleUpgradeEffectLevel // (Final|Exec|Native|Protected) // @ game+0x1d223f0
	void SolarGM_ServerUpgradeBattleUpgradeEffectLevel(int32_t UpgradeTo); // Function Solarland.SolarCharacter.SolarGM_ServerUpgradeBattleUpgradeEffectLevel // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d22240
	void SolarGM_ServerEnableCustomJump(bool bEnabled); // Function Solarland.SolarCharacter.SolarGM_ServerEnableCustomJump // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d221b0
	void SolarGM_Server_ChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarCharacter.SolarGM_Server_ChangeTailFlameId // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1d22360
	void SolarGM_Server_ChangeBagId(int32_t InBagId); // Function Solarland.SolarCharacter.SolarGM_Server_ChangeBagId // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1d222d0
	void SolarGM_SelectBattleUpgradeEffect(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCharacter.SolarGM_SelectBattleUpgradeEffect // (Final|Exec|Native|Protected) // @ game+0x1d220f0
	void SolarGM_EnableDebugAutoMove(bool bEnabled, float SwitchInterval); // Function Solarland.SolarCharacter.SolarGM_EnableDebugAutoMove // (Final|Exec|Native|Public) // @ game+0x1d22020
	void SolarGM_EnableCustomJump(int32_t Enabled); // Function Solarland.SolarCharacter.SolarGM_EnableCustomJump // (Final|Exec|Native|Public) // @ game+0x90ca00
	void SolarGM_ChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarCharacter.SolarGM_ChangeTailFlameId // (Final|Exec|Native|Private) // @ game+0x1d21fa0
	void SolarGM_ChangeBagId(int32_t InBagId); // Function Solarland.SolarCharacter.SolarGM_ChangeBagId // (Final|Exec|Native|Private) // @ game+0x1d21f20
	void ShowShieldUIFX(int32_t ShiledID); // Function Solarland.SolarCharacter.ShowShieldUIFX // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ShowShieldUI(bool IsShow); // Function Solarland.SolarCharacter.ShowShieldUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ShowRevivePickupEffect(); // Function Solarland.SolarCharacter.ShowRevivePickupEffect // (Final|Native|Public) // @ game+0x1d21f00
	void ShowReviveClearEffect(); // Function Solarland.SolarCharacter.ShowReviveClearEffect // (Final|Native|Public) // @ game+0x1d21ee0
	void ShowRescueInjector(); // Function Solarland.SolarCharacter.ShowRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21ec0
	void ShowNoticeCantCharge(); // Function Solarland.SolarCharacter.ShowNoticeCantCharge // (Final|Native|Public) // @ game+0x1d21ea0
	bool ShouldForceOverrideDamageTaken(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser, float& OverrideDamageTaken); // Function Solarland.SolarCharacter.ShouldForceOverrideDamageTaken // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1d21ca0
	void ShieldUpgradeToNextLevel(); // Function Solarland.SolarCharacter.ShieldUpgradeToNextLevel // (Final|Native|Public) // @ game+0x1d21c80
	void ShieldOperatorInterpFunc(float InValue); // Function Solarland.SolarCharacter.ShieldOperatorInterpFunc // (Final|Native|Public) // @ game+0x1d21c00
	void SetSpectateTargetCharacter(struct ASolarCharacter* InSpectateTargetCharacter); // Function Solarland.SolarCharacter.SetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21b00
	void SetShowMapVoiceStep(bool bInShowMapVoiceStep); // Function Solarland.SolarCharacter.SetShowMapVoiceStep // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21a70
	void SetShowMapVoiceFight(bool bInShowMapVoiceFight); // Function Solarland.SolarCharacter.SetShowMapVoiceFight // (Final|Native|Public|BlueprintCallable) // @ game+0x1d219e0
	void SetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.SetSelfEnergyCostEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21950
	void SetRequirementBySetting(); // Function Solarland.SolarCharacter.SetRequirementBySetting // (Final|Native|Public) // @ game+0x1d21930
	void SetRenderMode(enum class ERenderMode Mode); // Function Solarland.SolarCharacter.SetRenderMode // (Final|Native|Public) // @ game+0x1d218b0
	void SetOpenScopeDuration(float InDuration, bool bInOpenScope); // Function Solarland.SolarCharacter.SetOpenScopeDuration // (Native|Event|Public|BlueprintEvent) // @ game+0x1d217e0
	void SetNewCharacterSkin(struct USkeletalMesh* NewMesh, struct UMaterialInterface* NewMaterial, struct UObject* NewAnimClass); // Function Solarland.SolarCharacter.SetNewCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x1d216e0
	void SetMaxWalkSpeed(float NewWalkSpeed); // Function Solarland.SolarCharacter.SetMaxWalkSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21660
	void SetInfiniteAmmoState(bool Enable); // Function Solarland.SolarCharacter.SetInfiniteAmmoState // (Final|Native|Public|BlueprintCallable) // @ game+0x1d215d0
	void SetCurrShieldValue(float InValue); // Function Solarland.SolarCharacter.SetCurrShieldValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21550
	void SetCurrExtraEnergy(float Amount); // Function Solarland.SolarCharacter.SetCurrExtraEnergy // (Final|Native|Public) // @ game+0x1d214d0
	void SetBackpackConfig(int32_t InCharacterId); // Function Solarland.SolarCharacter.SetBackpackConfig // (Final|Native|Public) // @ game+0x1d21450
	void SetActiveRescueBtn(bool bIsActive); // Function Solarland.SolarCharacter.SetActiveRescueBtn // (Final|Native|Public|BlueprintCallable) // @ game+0x1d213c0
	void ServerUseItemRequest(int32_t ItemID, int32_t Num); // Function Solarland.SolarCharacter.ServerUseItemRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d21300
	bool ServerUpgradeShield(); // Function Solarland.SolarCharacter.ServerUpgradeShield // (Final|Native|Public) // @ game+0x1d212d0
	void ServerTryRechargeShield(float InRecoverySpeed); // Function Solarland.SolarCharacter.ServerTryRechargeShield // (Final|Native|Public) // @ game+0x1d211d0
	void ServerTriggerRadarStation(struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.ServerTriggerRadarStation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d21140
	void ServerSwitchVehicleSeat(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t TargetSeatIndex, struct FVector_NetQuantize VehicleLocation, struct FVector_NetQuantizeNormal VehicleEuler); // Function Solarland.SolarCharacter.ServerSwitchVehicleSeat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20fb0
	void ServerSwitchShield(struct FSolarItemData NewShieldData); // Function Solarland.SolarCharacter.ServerSwitchShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20ed0
	void ServerStatisticsRechargedTimes(int32_t RechargedTimes, int32_t BigRechargedTimes); // Function Solarland.SolarCharacter.ServerStatisticsRechargedTimes // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20e00
	void ServerStatisticElectricShopOnActivated(struct FVector InLocation); // Function Solarland.SolarCharacter.ServerStatisticElectricShopOnActivated // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1d20d80
	void ServerStartRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarCharacter.ServerStartRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20cf0
	void ServerSpawnProjectile(struct UObject* ProjClass, struct FVector StartLocation, struct FVector Velocity); // Function Solarland.SolarCharacter.ServerSpawnProjectile // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1d20bf0
	void ServerSetTreasureBoxState(struct ASolarTreasureBoxActor* TreasureBox, enum class ETreasureBoxState NewState, struct ASolarCharacter* RequestCharacter); // Function Solarland.SolarCharacter.ServerSetTreasureBoxState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20af0
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarCharacter.ServerSetJetPackModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20a20
	void ServerSetInputVector(uint16_t AxisX, uint16_t AxisY); // Function Solarland.SolarCharacter.ServerSetInputVector // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1d20950
	void ServerSetIdleTurnType(enum class EIdleTurnType TurnType); // Function Solarland.SolarCharacter.ServerSetIdleTurnType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d208d0
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerSetEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20850
	void ServerSetDesirePeek(int32_t NewValue); // Function Solarland.SolarCharacter.ServerSetDesirePeek // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1d20790
	void ServerSetDebugCharacterGASValue(int32_t Value); // Function Solarland.SolarCharacter.ServerSetDebugCharacterGASValue // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d20700
	void ServerSetCurChargingDeathBox(struct ADeathTreasureBox* DeathBox); // Function Solarland.SolarCharacter.ServerSetCurChargingDeathBox // (Net|Native|Event|Public|NetServer) // @ game+0x1d20670
	void ServerSetChargingPile(bool bEnter, struct ASolarPile* InChargingPile); // Function Solarland.SolarCharacter.ServerSetChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d205a0
	void ServerSetCharacterOperation(enum class ECharacterOperation InType, struct UObject* Target); // Function Solarland.SolarCharacter.ServerSetCharacterOperation // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1d204d0
	void ServerSetCanBeDamaged(bool bInCanBeDamaged); // Function Solarland.SolarCharacter.ServerSetCanBeDamaged // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20440
	void ServerSendGameplayEvent(struct FGameplayTag EventTag, struct FGameplayEventData Payload); // Function Solarland.SolarCharacter.ServerSendGameplayEvent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20230
	void ServerSelectLevelSkill(int32_t Level, int32_t SelectedIndex); // Function Solarland.SolarCharacter.ServerSelectLevelSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d20170
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarCharacter.ServerRPCUpgradeWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fee0
	void ServerRPCUpgradeShield(); // Function Solarland.SolarCharacter.ServerRPCUpgradeShield // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fec0
	void ServerRPCUnLockBagGrid(int32_t Grade, int32_t NewUnLockNum); // Function Solarland.SolarCharacter.ServerRPCUnLockBagGrid // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fe00
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeWeaponPartToBag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fd40
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCTakeBagPartToWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fc80
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCSwitchWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fbc0
	void ServerRPCSwapBagGrid(int32_t FromGrade, int32_t FromGridIndex, int32_t TargetGrade, int32_t TargetIndex); // Function Solarland.SolarCharacter.ServerRPCSwapBagGrid // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fa80
	void ServerRPCSetSettlements(); // Function Solarland.SolarCharacter.ServerRPCSetSettlements // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1fa60
	void ServerRPCSetSelfEnergyCostEnable(bool bEnable); // Function Solarland.SolarCharacter.ServerRPCSetSelfEnergyCostEnable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f9d0
	void ServerRPCSetBagRequirementArr(struct TArray<struct FBagRequirementData> BagRequirements); // Function Solarland.SolarCharacter.ServerRPCSetBagRequirementArr // (Net|Native|Event|Public|NetServer) // @ game+0x1d1f930
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.ServerRPCPurchaseEShopItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f820
	void ServerRPCInitSettlementNeedRankArr(); // Function Solarland.SolarCharacter.ServerRPCInitSettlementNeedRankArr // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f800
	void ServerRPCInitBagGradeData(); // Function Solarland.SolarCharacter.ServerRPCInitBagGradeData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f7e0
	void ServerRPCFixBagGrid(int32_t InGrade, int32_t InGridIndex); // Function Solarland.SolarCharacter.ServerRPCFixBagGrid // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f720
	void ServerRPCDisplayAllElectricShops(); // Function Solarland.SolarCharacter.ServerRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1258f90
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarCharacter.ServerRPCDiscardWeaponPart // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f660
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarCharacter.ServerRPCDiscardWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f5d0
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.ServerRPCDiscardItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f510
	void ServerRPCDiscardHomeItem(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarCharacter.ServerRPCDiscardHomeItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f450
	void ServerRPCArrangeBag(); // Function Solarland.SolarCharacter.ServerRPCArrangeBag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1f430
	void ServerRequestStartResurrect(struct ADeathTreasureBox* TargetDeathBox); // Function Solarland.SolarCharacter.ServerRequestStartResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d200e0
	void ServerRequestCancelResurrect(); // Function Solarland.SolarCharacter.ServerRequestCancelResurrect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1257fb0
	void ServerRecieveHitDataFromClient(struct ASolarWeapon* Weapon, struct FBulletHitData HitData, bool IsNotDelay); // Function Solarland.SolarCharacter.ServerRecieveHitDataFromClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1ffb0
	void ServerPlayTreatmentCancelSound(); // Function Solarland.SolarCharacter.ServerPlayTreatmentCancelSound // (Net|Native|Event|Public|NetServer) // @ game+0x1257ad0
	void ServerPickUpWeapon(struct AActor* Actor, bool bIsAutoPickup, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpWeapon // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1d1f2b0
	void ServerPickUpTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpTreasureItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1d1f0d0
	void ServerPickUpItem(struct ASolarItemActor* ItemActor, bool bIsAutoPickup, int32_t TargetIndex, struct FVector ClientCharPos, struct FVector ClientItemPos); // Function Solarland.SolarCharacter.ServerPickUpItem // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1d1ef40
	void ServerPickUpHomeItemsGM(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.ServerPickUpHomeItemsGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1ee80
	void ServerPerformShieldUpgradeInteract(struct ASolarShieldUpgradeItemShop* InShop); // Function Solarland.SolarCharacter.ServerPerformShieldUpgradeInteract // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1edf0
	void ServerOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarCharacter.ServerOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1ed60
	void ServerOnDestructActor(struct ASolarDestructibleActor* DestructibleActor, struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarCharacter.ServerOnDestructActor // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1d1ebc0
	void ServerKillMe(enum class ESCMDamageType DamageType); // Function Solarland.SolarCharacter.ServerKillMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1eb40
	void ServerInitSheildComp(int32_t InShiledID); // Function Solarland.SolarCharacter.ServerInitSheildComp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1eab0
	void ServerHideShieldOperator(); // Function Solarland.SolarCharacter.ServerHideShieldOperator // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1257a10
	void ServerGMVehicleSubHealth(int32_t SubHealth); // Function Solarland.SolarCharacter.ServerGMVehicleSubHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e6a0
	void ServerGetOnVehicle(float LocalTime, struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.ServerGetOnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e9b0
	void ServerGetOffVehicleEjectedByDefaultParams(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjectedByDefaultParams // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e8e0
	void ServerGetOffVehicleEjected(bool bNeedNotify, struct FVector_NetQuantizeNormal EjectDirection, struct FVehicleEjectParams Params); // Function Solarland.SolarCharacter.ServerGetOffVehicleEjected // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e7c0
	void ServerGetOffVehicle(bool bNeedNotify); // Function Solarland.SolarCharacter.ServerGetOffVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e730
	void ServerDetectBlock(); // Function Solarland.SolarCharacter.ServerDetectBlock // (Final|Net|Native|Event|Private|NetServer) // @ game+0x12589f0
	void ServerConsumeExtraEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeExtraEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e5e0
	void ServerConsumeEnergy(float InAmount, enum class EEnergyUsage InUsage); // Function Solarland.SolarCharacter.ServerConsumeEnergy // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e520
	void ServerClearJetModule(); // Function Solarland.SolarCharacter.ServerClearJetModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1259410
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarCharacter.ServerClearEnergyState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e4a0
	void ServerChangeRechargeState(bool bRecharge, bool bUseBigRecharger); // Function Solarland.SolarCharacter.ServerChangeRechargeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e3d0
	void ServerCancelVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerCancelVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e350
	void ServerCancelVault(float InAnimPosition, struct FVector InLandLocation); // Function Solarland.SolarCharacter.ServerCancelVault // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1d1e280
	void ServerCancelRescue(); // Function Solarland.SolarCharacter.ServerCancelRescue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258370
	void ServerCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarCharacter.ServerCancelOpenAirDropTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e1f0
	void ServerCancelMeleeWarp(); // Function Solarland.SolarCharacter.ServerCancelMeleeWarp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258930
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarCharacter.ServerBackpackGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e0b0
	void ServerAskForActiveAbilityInfosToRestoreOnReconnected(); // Function Solarland.SolarCharacter.ServerAskForActiveAbilityInfosToRestoreOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1258150
	void ServerApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ServerApplyVehicleAbility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1e030
	void ServerAddVehicleTime(float InAddTime); // Function Solarland.SolarCharacter.ServerAddVehicleTime // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d1dfb0
	void RoleAbilityForbiddenAbilityTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityForbiddenAbilityTagCallback // (Final|Native|Private) // @ game+0x1d1deb0
	void RoleAbilityEndedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityEndedCallBack // (Final|Native|Private) // @ game+0x1d1de20
	void RoleAbilityCoolDownTagCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownTagCallback // (Final|Native|Private) // @ game+0x1d1dd20
	void RoleAbilityCoolDownResetCallback(struct FGameplayTag Tag, int32_t NewCount, char AbilityIndex); // Function Solarland.SolarCharacter.RoleAbilityCoolDownResetCallback // (Final|Native|Private) // @ game+0x1d1dc20
	void RoleAbilityCommittedCallBack(struct UGameplayAbility* InAbility); // Function Solarland.SolarCharacter.RoleAbilityCommittedCallBack // (Final|Native|Private) // @ game+0x1d1db90
	void ReturnMostValuableItemIDServer(char TeammatePosInTeam, int64_t ItemThisID); // Function Solarland.SolarCharacter.ReturnMostValuableItemIDServer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1d1dac0
	void ResponseChosenMark(); // Function Solarland.SolarCharacter.ResponseChosenMark // (Final|Native|Public) // @ game+0x1d1daa0
	void RequestUseBackpackItemServer(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarCharacter.RequestUseBackpackItemServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d1d9e0
	void RequestToStopVehicleRepairing(); // Function Solarland.SolarCharacter.RequestToStopVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d9c0
	void RequestToStartVehicleRepairing(struct ASolarVehiclePawn* InVehicle); // Function Solarland.SolarCharacter.RequestToStartVehicleRepairing // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d940
	void RequestPlayShieldSound(struct FShieldSoundData& ShieldSound, bool bIsOnly1P); // Function Solarland.SolarCharacter.RequestPlayShieldSound // (Final|Native|Public|HasOutParms) // @ game+0x1d1d760
	void RequestDisplayAllElectricShops(); // Function Solarland.SolarCharacter.RequestDisplayAllElectricShops // (Final|Native|Public) // @ game+0x1d1d740
	void RequestCancelRescue(); // Function Solarland.SolarCharacter.RequestCancelRescue // (Final|Native|Public) // @ game+0x1d1d720
	void RemoveTreasureBoxOperator(); // Function Solarland.SolarCharacter.RemoveTreasureBoxOperator // (Final|Native|Public) // @ game+0x1d1d700
	void RemoveTempComponent(struct UPrimitiveComponent* TargetComp); // Function Solarland.SolarCharacter.RemoveTempComponent // (Final|Native|Private|BlueprintCallable) // @ game+0x1d1d680
	void RemoveTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag); // Function Solarland.SolarCharacter.RemoveTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d580
	void RemoveShieldRepairEffectItem(); // Function Solarland.SolarCharacter.RemoveShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d560
	void RemoveShieldOperator(); // Function Solarland.SolarCharacter.RemoveShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d540
	void RefreshWeaponDataMapAndArray(); // Function Solarland.SolarCharacter.RefreshWeaponDataMapAndArray // (Final|Native|Public) // @ game+0x1d1d520
	void RefreshTypeItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshTypeItemMapAndArray // (Final|Native|Public) // @ game+0x1d1d500
	void RefreshTeammateHUDUI(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.RefreshTeammateHUDUI // (Final|Native|Protected) // @ game+0x1d1d480
	void RefreshRenderConsoleVarForSkydive(); // Function Solarland.SolarCharacter.RefreshRenderConsoleVarForSkydive // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	void RefreshMaxPileMapAndArray(); // Function Solarland.SolarCharacter.RefreshMaxPileMapAndArray // (Final|Native|Public) // @ game+0x1d1d460
	void RefreshIdItemMapAndArray(); // Function Solarland.SolarCharacter.RefreshIdItemMapAndArray // (Final|Native|Public) // @ game+0x1d1d440
	void ReceiveUpdateSkydiveLandingEffects(float DistanceToGround); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveLandingEffects // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveUpdateSkydiveFlyingEffects(float FallingRate); // Function Solarland.SolarCharacter.ReceiveUpdateSkydiveFlyingEffects // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePlaySkydiveLandingEndEffects(bool bIsInWater); // Function Solarland.SolarCharacter.ReceivePlaySkydiveLandingEndEffects // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnVehicleAbilityInput(char AbilityIndex); // Function Solarland.SolarCharacter.ReceiveOnVehicleAbilityInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d340
	void ReceivedOnShieldIdChanged(int32_t LastShieldId); // Function Solarland.SolarCharacter.ReceivedOnShieldIdChanged // (Final|Native|Public) // @ game+0x1d1d3c0
	void ReceiveAfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.ReceiveAfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void QuitVehicleWholeShield(); // Function Solarland.SolarCharacter.QuitVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d320
	void QuitVehicleStealth(); // Function Solarland.SolarCharacter.QuitVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d300
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarCharacter.PurchaseEShopItemsResponse // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d1d1f0
	void PostNotEnoughEnergyNotice(); // Function Solarland.SolarCharacter.PostNotEnoughEnergyNotice // (Final|Native|Public) // @ game+0x1d1d1d0
	void PlaySquatSound(); // Function Solarland.SolarCharacter.PlaySquatSound // (Final|Native|Protected) // @ game+0x1d1d130
	void PlaySpeedUpEffect(bool bIsUp); // Function Solarland.SolarCharacter.PlaySpeedUpEffect // (Final|Native|Public) // @ game+0x1d1d0a0
	void PlayShieldSoundByType(enum class EShieldSoundType ShieldSoundType); // Function Solarland.SolarCharacter.PlayShieldSoundByType // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d020
	void PlayParachuteStartSound(); // Function Solarland.SolarCharacter.PlayParachuteStartSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d000
	void PlayerStateReplicatedForHUD(); // Function Solarland.SolarCharacter.PlayerStateReplicatedForHUD // (Final|Native|Public) // @ game+0x1d1d1b0
	void OnVaultInput(); // Function Solarland.SolarCharacter.OnVaultInput // (Final|Native|Public) // @ game+0x1d1cfc0
	void OnUsingSkillStatusChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x1d1cf00
	void OnUpdateShieldId(); // Function Solarland.SolarCharacter.OnUpdateShieldId // (Final|Native|Public) // @ game+0x1d1cee0
	void OnUIDuationGameplayEffectRemoved(struct FActiveGameplayEffect& ActiveGameplayEffect); // Function Solarland.SolarCharacter.OnUIDuationGameplayEffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x1d1cdd0
	void OnUIDuationGameplayEffectApplied(struct UAbilitySystemComponent* ASC, struct FGameplayEffectSpec& InGameplayEffectSpec, struct FActiveGameplayEffectHandle InGameplayEffectHandle); // Function Solarland.SolarCharacter.OnUIDuationGameplayEffectApplied // (Final|Native|Private|HasOutParms) // @ game+0x1d1cc70
	void OnUAVSpawnRelatedTagChange(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarCharacter.OnUAVSpawnRelatedTagChange // (Final|Native|Protected) // @ game+0x1d1cbb0
	void OnTeamIDChange(); // Function Solarland.SolarCharacter.OnTeamIDChange // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1cb90
	void OnTakeDamage__DelegateSignature(struct ASolarCharacter* Character, struct FSolarPointDamageEvent& DamageEvent, float HPDamage); // DelegateFunction Solarland.SolarCharacter.OnTakeDamage__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarCharacter.OnStartResurrectProgress // (Final|Native|Public) // @ game+0x1d1ca40
	void OnSpawnExpItem(); // Function Solarland.SolarCharacter.OnSpawnExpItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ca20
	void OnSkydiveTraced__DelegateSignature(struct FHitResult& HitResult); // DelegateFunction Solarland.SolarCharacter.OnSkydiveTraced__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnSkydiveStageChanged(enum class ESkydiveStage LastStage, enum class ESkydiveStage CurrentStage); // Function Solarland.SolarCharacter.OnSkydiveStageChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnShowShieldHUD__DelegateSignature(bool bIsShowShieldHUD); // DelegateFunction Solarland.SolarCharacter.OnShowShieldHUD__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool OnShouldTakeDamage(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.OnShouldTakeDamage // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x1d1c880
	void OnShieldValueLowDelegate__DelegateSignature(bool bIsShieldValueLow); // DelegateFunction Solarland.SolarCharacter.OnShieldValueLowDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnShieldRechargeStart(); // Function Solarland.SolarCharacter.OnShieldRechargeStart // (Final|Native|Public) // @ game+0x1d1c860
	void OnShieldRechargeProgressBarComplete(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarComplete // (Final|Native|Protected) // @ game+0x1d1c840
	void OnShieldRechargeProgressBarCancel(); // Function Solarland.SolarCharacter.OnShieldRechargeProgressBarCancel // (Final|Native|Protected) // @ game+0x1d1c820
	void OnShieldRechargeEnd(); // Function Solarland.SolarCharacter.OnShieldRechargeEnd // (Final|Native|Public) // @ game+0x1d1c800
	void OnShieldIDChangedDelegate__DelegateSignature(float CurValue, float MaxValue, int32_t QualityColor, bool bIsAdvancedShield); // DelegateFunction Solarland.SolarCharacter.OnShieldIDChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSheildUpFXDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildUpFXDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSheildRechargeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildRechargeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSheildBreakDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnSheildBreakDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnReplayCameraModeChanged(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // Function Solarland.SolarCharacter.OnReplayCameraModeChanged // (Final|Native|Private) // @ game+0x1d1c740
	void OnRepItemWeaponParts(); // Function Solarland.SolarCharacter.OnRepItemWeaponParts // (Final|Native|Public) // @ game+0x1d1bd80
	void OnRepIgnoreScopeSlots(); // Function Solarland.SolarCharacter.OnRepIgnoreScopeSlots // (Final|Native|Public) // @ game+0x1d1bd60
	void OnRep_WeaponSystemVehicle(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemVehicle // (Final|Native|Public) // @ game+0x1d1c720
	void OnRep_WeaponSystemComponentChanged(); // Function Solarland.SolarCharacter.OnRep_WeaponSystemComponentChanged // (Final|Native|Private) // @ game+0x1d1c700
	void OnRep_WeaponDataMap(); // Function Solarland.SolarCharacter.OnRep_WeaponDataMap // (Final|Native|Public) // @ game+0x1d1c6e0
	void OnRep_VJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_VJetPackModuleID // (Final|Native|Public) // @ game+0x1d1c6c0
	void OnRep_TypeKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_TypeKeyItemArrayChange // (Final|Native|Public) // @ game+0x1d1c6a0
	void OnRep_TreatmentState(enum class ESolarTreatmentState LastState); // Function Solarland.SolarCharacter.OnRep_TreatmentState // (Final|Native|Public) // @ game+0x1d1c620
	void OnRep_TreatmentCount(int32_t LastCount); // Function Solarland.SolarCharacter.OnRep_TreatmentCount // (Final|Native|Public) // @ game+0x1d1c5a0
	void OnRep_SettingEnergyCostChanged(); // Function Solarland.SolarCharacter.OnRep_SettingEnergyCostChanged // (Final|Native|Public) // @ game+0x8ba190
	void OnRep_RoleAbilityStartCDServerTime(); // Function Solarland.SolarCharacter.OnRep_RoleAbilityStartCDServerTime // (Final|Native|Private) // @ game+0x1d1c580
	void OnRep_RoleAbilitySpecHandles(); // Function Solarland.SolarCharacter.OnRep_RoleAbilitySpecHandles // (Final|Native|Private) // @ game+0x1d1c560
	void OnRep_ReviveItemCleared(); // Function Solarland.SolarCharacter.OnRep_ReviveItemCleared // (Final|Native|Public) // @ game+0x1d1c540
	void OnRep_RescueState(); // Function Solarland.SolarCharacter.OnRep_RescueState // (Final|Native|Public) // @ game+0x1d1c4a0
	void OnRep_RescuedStartTime(float LastRescuedStartTime); // Function Solarland.SolarCharacter.OnRep_RescuedStartTime // (Final|Native|Public) // @ game+0x1d1c4c0
	void OnRep_PlayBodyHitSound(int32_t LastBodyHitSoundCount); // Function Solarland.SolarCharacter.OnRep_PlayBodyHitSound // (Final|Native|Protected) // @ game+0x1d1c420
	void OnRep_PlayBodyHitByPunchSound(int32_t LastBodyHitByPunchSoundCount); // Function Solarland.SolarCharacter.OnRep_PlayBodyHitByPunchSound // (Final|Native|Protected) // @ game+0x1d1c3a0
	void OnRep_PendingRegeneration(); // Function Solarland.SolarCharacter.OnRep_PendingRegeneration // (Final|Native|Public) // @ game+0x1d1c380
	void OnRep_OutVehicleShotState(); // Function Solarland.SolarCharacter.OnRep_OutVehicleShotState // (Final|Native|Private) // @ game+0x1d1bb60
	void OnRep_MaxPileArrayChange(); // Function Solarland.SolarCharacter.OnRep_MaxPileArrayChange // (Final|Native|Public) // @ game+0x1d1c340
	void OnRep_MaxExtraEnergyChanged(); // Function Solarland.SolarCharacter.OnRep_MaxExtraEnergyChanged // (Final|Native|Public) // @ game+0x1d1c320
	void OnRep_JetPropellingInfo(); // Function Solarland.SolarCharacter.OnRep_JetPropellingInfo // (Final|Native|Protected) // @ game+0x1d1c300
	void OnRep_IsDeathVerge(); // Function Solarland.SolarCharacter.OnRep_IsDeathVerge // (Final|Native|Public) // @ game+0x1d1c2e0
	void OnRep_IdKeyItemArrayChange(); // Function Solarland.SolarCharacter.OnRep_IdKeyItemArrayChange // (Final|Native|Public) // @ game+0x1d1c2c0
	void OnRep_HJetPackModuleID(); // Function Solarland.SolarCharacter.OnRep_HJetPackModuleID // (Final|Native|Public) // @ game+0x1d1c2a0
	void OnRep_GradeKeyBagGradeArrayChange(); // Function Solarland.SolarCharacter.OnRep_GradeKeyBagGradeArrayChange // (Final|Native|Public) // @ game+0x1d1c280
	void OnRep_ForceParachuteCountDown(); // Function Solarland.SolarCharacter.OnRep_ForceParachuteCountDown // (Final|Native|Protected) // @ game+0x1d1c260
	void OnRep_ExtraEnergyModuleIDChanged(); // Function Solarland.SolarCharacter.OnRep_ExtraEnergyModuleIDChanged // (Final|Native|Public) // @ game+0x1d1c240
	void OnRep_EnergyStateChanged(); // Function Solarland.SolarCharacter.OnRep_EnergyStateChanged // (Final|Native|Public) // @ game+0x1d1c220
	void OnRep_EnableCruising(); // Function Solarland.SolarCharacter.OnRep_EnableCruising // (Final|Native|Protected) // @ game+0x1d1c200
	void OnRep_EffectingNightComesActor(); // Function Solarland.SolarCharacter.OnRep_EffectingNightComesActor // (Final|Native|Protected) // @ game+0x1d1c1e0
	void OnRep_DiedTime(); // Function Solarland.SolarCharacter.OnRep_DiedTime // (Final|Native|Private) // @ game+0x1d1c1c0
	void OnRep_CurUniqueShieldId(); // Function Solarland.SolarCharacter.OnRep_CurUniqueShieldId // (Final|Native|Public) // @ game+0x1d1bee0
	void OnRep_CurrShieldValue(float PreviousValue); // Function Solarland.SolarCharacter.OnRep_CurrShieldValue // (Final|Native|Public) // @ game+0x1d1c000
	void OnRep_CurrShieldState(enum class EShieldState LastState); // Function Solarland.SolarCharacter.OnRep_CurrShieldState // (Final|Native|Public) // @ game+0x1d1bf80
	void OnRep_CurrShieldId(int32_t InLastShieldId); // Function Solarland.SolarCharacter.OnRep_CurrShieldId // (Final|Native|Public) // @ game+0x1d1bf00
	void OnRep_CurrentSkydiveStage(enum class ESkydiveStage LastStage); // Function Solarland.SolarCharacter.OnRep_CurrentSkydiveStage // (Final|Native|Private) // @ game+0x1d1c140
	void OnRep_CurrentSkillAnimType(); // Function Solarland.SolarCharacter.OnRep_CurrentSkillAnimType // (Final|Native|Public) // @ game+0x1d1c120
	void OnRep_CurrentEnergyChanged(float LastEnergyValue); // Function Solarland.SolarCharacter.OnRep_CurrentEnergyChanged // (Final|Native|Public) // @ game+0x1d1c0a0
	void OnRep_CurChargingDeathBoxChanged(struct ADeathTreasureBox* PreBox); // Function Solarland.SolarCharacter.OnRep_CurChargingDeathBoxChanged // (Final|Native|Private) // @ game+0x1d1be60
	void OnRep_CruiseState(); // Function Solarland.SolarCharacter.OnRep_CruiseState // (Final|Native|Protected) // @ game+0x1d1be40
	void OnRep_CharacterCapsuleSizeOverride(); // Function Solarland.SolarCharacter.OnRep_CharacterCapsuleSizeOverride // (Final|Native|Private) // @ game+0x1d1be20
	void OnRep_CapsuleID(); // Function Solarland.SolarCharacter.OnRep_CapsuleID // (Final|Native|Protected) // @ game+0x1d1be00
	void OnRep_BagRequirementArrChange(); // Function Solarland.SolarCharacter.OnRep_BagRequirementArrChange // (Final|Native|Public) // @ game+0x8ba190
	void OnRep_BackpackPropellingMode(); // Function Solarland.SolarCharacter.OnRep_BackpackPropellingMode // (Final|Native|Protected) // @ game+0x1d1bde0
	void OnRep_ActiveInfiniteAmmo(); // Function Solarland.SolarCharacter.OnRep_ActiveInfiniteAmmo // (Final|Native|Protected) // @ game+0x1d1bdc0
	void OnRep_ActiveEMP(); // Function Solarland.SolarCharacter.OnRep_ActiveEMP // (Final|Native|Protected) // @ game+0x1d1bda0
	void OnRegisterShieldChangedWithIDEvent(); // Function Solarland.SolarCharacter.OnRegisterShieldChangedWithIDEvent // (Final|Native|Private) // @ game+0x1d1bd40
	void OnRegisterShieldAvailableChangedWithIDEvent(); // Function Solarland.SolarCharacter.OnRegisterShieldAvailableChangedWithIDEvent // (Final|Native|Private) // @ game+0x1d1bd20
	void OnRegisterRescueStateChangedWithIDEvent(); // Function Solarland.SolarCharacter.OnRegisterRescueStateChangedWithIDEvent // (Final|Native|Private) // @ game+0x1d1bd00
	void OnRegisterHPChangedWithIDEvent(); // Function Solarland.SolarCharacter.OnRegisterHPChangedWithIDEvent // (Final|Native|Private) // @ game+0x1d1bce0
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarCharacter.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x1d1bcc0
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKilled // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SolarCharacter.OnPlayerKill // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerDataRepAsPlayer(char TeamID); // Function Solarland.SolarCharacter.OnPlayerDataRepAsPlayer // (Final|Native|Protected) // @ game+0x1d1bc40
	void OnPlayerBackpackEnergyUpdate(); // Function Solarland.SolarCharacter.OnPlayerBackpackEnergyUpdate // (Final|Native|Public) // @ game+0x1d1bc20
	void OnPickupSettingChanged(); // Function Solarland.SolarCharacter.OnPickupSettingChanged // (Final|Native|Private) // @ game+0x1d1bc00
	void OnOwnTeammateHUDCreated(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.OnOwnTeammateHUDCreated // (Final|Native|Protected) // @ game+0x1d1bb80
	void OnOutVehicleStateChanged(); // Function Solarland.SolarCharacter.OnOutVehicleStateChanged // (Final|Native|Public) // @ game+0x1d1bb60
	void OnNotInBattle(); // Function Solarland.SolarCharacter.OnNotInBattle // (Final|Native|Public) // @ game+0x1d1bb40
	void OnMaxEnergyUpdateEvent__DelegateSignature(float InMaxValue); // DelegateFunction Solarland.SolarCharacter.OnMaxEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnLocalPlayerSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* LocalPlayerSpectateInfo); // Function Solarland.SolarCharacter.OnLocalPlayerSpectateTargetChanged // (Final|Native|Private) // @ game+0x1d1ba80
	void OnLocalPlayerSpectateMeStatusChanged__DelegateSignature(struct ASolarCharacter* Character, bool bIsSpectating); // DelegateFunction Solarland.SolarCharacter.OnLocalPlayerSpectateMeStatusChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnLevelSequence_PlayAirborneJumpSound(); // Function Solarland.SolarCharacter.OnLevelSequence_PlayAirborneJumpSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ba60
	void OnJogSetClient__DelegateSignature(bool bSet); // DelegateFunction Solarland.SolarCharacter.OnJogSetClient__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnInBattle(); // Function Solarland.SolarCharacter.OnInBattle // (Final|Native|Public) // @ game+0x1d1ba40
	void OnHUDTeamPosSet__DelegateSignature(char PosInTeam); // DelegateFunction Solarland.SolarCharacter.OnHUDTeamPosSet__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHUDRescueBtnActivitySet__DelegateSignature(bool bIsActive); // DelegateFunction Solarland.SolarCharacter.OnHUDRescueBtnActivitySet__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHUDNickNameSet__DelegateSignature(struct FString NickName); // DelegateFunction Solarland.SolarCharacter.OnHUDNickNameSet__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHUDDistanceSet__DelegateSignature(float Distance); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceSet__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHUDDistanceDisplaySet__DelegateSignature(bool bShown); // DelegateFunction Solarland.SolarCharacter.OnHUDDistanceDisplaySet__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnHealthUpdated__DelegateSignature(struct ASolarCharacter* Character); // DelegateFunction Solarland.SolarCharacter.OnHealthUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool OnExitOpenTreasureBox(); // Function Solarland.SolarCharacter.OnExitOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ba10
	bool OnEnterOpenTreasureBox(); // Function Solarland.SolarCharacter.OnEnterOpenTreasureBox // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b9e0
	void OnEnterCombat(enum class EEnterBattleType battleType); // Function Solarland.SolarCharacter.OnEnterCombat // (Final|Native|Public) // @ game+0x1d1b960
	void OnEnergyStateUpdateEvent__DelegateSignature(char InEnergyState); // DelegateFunction Solarland.SolarCharacter.OnEnergyStateUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnDrivingStateChanged(struct ASolarVehiclePawn* SolarVehicle, enum class EDriveState NewDriveState, enum class EDriveState OldDriveState, int32_t NewSeatIndex, int32_t OldSeatIndex); // Function Solarland.SolarCharacter.OnDrivingStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnDetectRadarStation(bool bEnter, struct ASolarRadarStation* InRadarStation); // Function Solarland.SolarCharacter.OnDetectRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b8a0
	void OnDetectElectricShop(bool bEnter, struct ASolarElectricShop* InElectricShop); // Function Solarland.SolarCharacter.OnDetectElectricShop // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b7e0
	void OnCurShieldValueChangedDelegate__DelegateSignature(enum class EShieldWidgetState WidgetState, float InCurValue, float InChangeValue, struct FString InSolarPlayerID); // DelegateFunction Solarland.SolarCharacter.OnCurShieldValueChangedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCurEnergyUpdateEvent__DelegateSignature(float InCurValue, float InChangeValue); // DelegateFunction Solarland.SolarCharacter.OnCurEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnConsumableNumChangedEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnConsumableNumChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnClientMovementComponentEnabled(); // Function Solarland.SolarCharacter.OnClientMovementComponentEnabled // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1d1b7c0
	void OnChargeInfoUpdateEvent__DelegateSignature(struct ASolarCharacter* OwnerCharacter, float ChargeFrequency, float ChargeQuantity); // DelegateFunction Solarland.SolarCharacter.OnChargeInfoUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterSpawnDeathBox(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount); // Function Solarland.SolarCharacter.OnCharacterSpawnDeathBox // (Final|Native|Public) // @ game+0x1d1b670
	void OnCharacterSkinReset__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnCharacterSkinReset__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterDeathEnd(); // Function Solarland.SolarCharacter.OnCharacterDeathEnd // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1257af0
	void OnCharacterDaraSet__DelegateSignature(int32_t DataID); // DelegateFunction Solarland.SolarCharacter.OnCharacterDaraSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarCharacter.OnCancelResurrectProgress // (Final|Native|Public) // @ game+0x1d1b5f0
	void OnBatteryIdUpdateEvent__DelegateSignature(int32_t InBatteryId); // DelegateFunction Solarland.SolarCharacter.OnBatteryIdUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBackpackWeaponPartUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackWeaponPartUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBackpackItemUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackItemUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBackpackEquipUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEquipUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBackpackEnergyUpdateEvent__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.OnBackpackEnergyUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnApplyDyingDamage(float DeltaTime); // Function Solarland.SolarCharacter.OnApplyDyingDamage // (Final|Native|Public) // @ game+0x1d1b570
	void NotifyLeaveSafeArea(); // Function Solarland.SolarCharacter.NotifyLeaveSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b550
	void NotifyEnterSafeArea(); // Function Solarland.SolarCharacter.NotifyEnterSafeArea // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b530
	void NetTriggerRadarStation(); // Function Solarland.SolarCharacter.NetTriggerRadarStation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b510
	bool NetGetOnVehicle(struct ASolarVehiclePawn* InVehicle, int32_t SeatIndex); // Function Solarland.SolarCharacter.NetGetOnVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b450
	bool NetGetOffVehicle(bool bShouldEject, bool bNeedNotify); // Function Solarland.SolarCharacter.NetGetOffVehicle // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1b370
	void MultiSetGetOffVehicleLocationAndRotation(struct FVector DropLocation, float TeleportRotYaw); // Function Solarland.SolarCharacter.MultiSetGetOffVehicleLocationAndRotation // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x1d1b2b0
	void MultiResetCharacter(struct FVector Location, struct FRotator Rotation, bool bClearWeapons); // Function Solarland.SolarCharacter.MultiResetCharacter // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x1d1b1b0
	void MultiOnRebirth(); // Function Solarland.SolarCharacter.MultiOnRebirth // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x12577f0
	void MarkWarningOnWorld(); // Function Solarland.SolarCharacter.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x1d1b190
	void MarkQuickChatOnWorld(struct FString IconImg); // Function Solarland.SolarCharacter.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x1d1b0f0
	void MarkPointOnWorld(); // Function Solarland.SolarCharacter.MarkPointOnWorld // (Final|Native|Public) // @ game+0x1d1b0d0
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d1af80
	void LeaveNightComes(struct ASolarNightComesActor* InNightComesActor); // Function Solarland.SolarCharacter.LeaveNightComes // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d1aef0
	void KillMe(); // Function Solarland.SolarCharacter.KillMe // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d1aed0
	void K2_SetCanShowBattlePrompt(bool NewValue); // Function Solarland.SolarCharacter.K2_SetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ae40
	void K2_RemoveGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_RemoveGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ad70
	void K2_PlaySoundGroup(struct FName GroupName, struct FSoundGroupPlayContext Context); // Function Solarland.SolarCharacter.K2_PlaySoundGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1aca0
	bool K2_IsSwimming(); // Function Solarland.SolarCharacter.K2_IsSwimming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1ac70
	bool K2_IsInAir(); // Function Solarland.SolarCharacter.K2_IsInAir // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1ac40
	bool K2_HasMatchingGameplayTag(struct FGameplayTag Tag); // Function Solarland.SolarCharacter.K2_HasMatchingGameplayTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1abb0
	struct UWidgetComponent* K2_GetTeamHUDComp(); // Function Solarland.SolarCharacter.K2_GetTeamHUDComp // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d1ab80
	struct AHUD* K2_GetControlledHUD(); // Function Solarland.SolarCharacter.K2_GetControlledHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1ab50
	void K2_AddGameplayTag(struct FGameplayTag Tag, bool bReplicated); // Function Solarland.SolarCharacter.K2_AddGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1aa40
	bool IsWeaponsAvailable(); // Function Solarland.SolarCharacter.IsWeaponsAvailable // (Final|Native|Public) // @ game+0x1d1aa10
	bool IsWeaponCauseTeamDamage(); // Function Solarland.SolarCharacter.IsWeaponCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1a9e0
	bool IsViewportFocused(); // Function Solarland.SolarCharacter.IsViewportFocused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a620
	bool IsVerticalJetFlying(); // Function Solarland.SolarCharacter.IsVerticalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a9b0
	bool IsVehicleFire(); // Function Solarland.SolarCharacter.IsVehicleFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a980
	bool IsTeammateWith(struct ASolarCharacter* Other); // Function Solarland.SolarCharacter.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a8f0
	bool IsTeamHUDValid(); // Function Solarland.SolarCharacter.IsTeamHUDValid // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1a8c0
	bool IsSprinting(); // Function Solarland.SolarCharacter.IsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a890
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarCharacter.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a860
	bool IsSkyCharging(); // Function Solarland.SolarCharacter.IsSkyCharging // (Final|Native|Public|Const) // @ game+0x1d1a830
	bool IsShowMapVoiceStep(); // Function Solarland.SolarCharacter.IsShowMapVoiceStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a800
	bool IsShowMapVoiceFight(); // Function Solarland.SolarCharacter.IsShowMapVoiceFight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a7d0
	bool IsShieldValueLow(); // Function Solarland.SolarCharacter.IsShieldValueLow // (Final|Native|Public) // @ game+0x1d1a7a0
	bool IsShieldMaxLevel(); // Function Solarland.SolarCharacter.IsShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a770
	bool IsShieldFullyCharged(); // Function Solarland.SolarCharacter.IsShieldFullyCharged // (Final|Native|Public|Const) // @ game+0x1d1a740
	bool IsScopeOpening(); // Function Solarland.SolarCharacter.IsScopeOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a710
	bool IsRescuing(); // Function Solarland.SolarCharacter.IsRescuing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a6e0
	bool IsReplayPlaying(); // Function Solarland.SolarCharacter.IsReplayPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a6b0
	bool IsReloading(); // Function Solarland.SolarCharacter.IsReloading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a680
	bool IsRechargerEnough(); // Function Solarland.SolarCharacter.IsRechargerEnough // (Final|Native|Public|Const) // @ game+0x1d1a650
	bool IsPlayerLocallyControlledOrSpectated(); // Function Solarland.SolarCharacter.IsPlayerLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a620
	bool IsPileCharging(); // Function Solarland.SolarCharacter.IsPileCharging // (Final|Native|Public|Const) // @ game+0x1d1a5f0
	bool IsOwnerOffline(); // Function Solarland.SolarCharacter.IsOwnerOffline // (Final|Native|Protected) // @ game+0x1d1a5c0
	bool IsOpeningTreasureBox(); // Function Solarland.SolarCharacter.IsOpeningTreasureBox // (Final|Native|Public|Const) // @ game+0x1d1a590
	bool IsNoCharging(); // Function Solarland.SolarCharacter.IsNoCharging // (Final|Native|Public|Const) // @ game+0x1d1a560
	bool IsMovingOnGround(enum class EVelocityStatus VelocityStatus); // Function Solarland.SolarCharacter.IsMovingOnGround // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a4d0
	bool IsMeleeAttacking(); // Function Solarland.SolarCharacter.IsMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a4a0
	bool IsMaxLevelInGame(); // Function Solarland.SolarCharacter.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a470
	bool IsLocalPlayerSpectatingMe(); // Function Solarland.SolarCharacter.IsLocalPlayerSpectatingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a440
	bool IsLocalPlayerSpectateAsThirdPerson(); // Function Solarland.SolarCharacter.IsLocalPlayerSpectateAsThirdPerson // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a410
	bool IsLaunching(); // Function Solarland.SolarCharacter.IsLaunching // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a3e0
	bool IsJumping(); // Function Solarland.SolarCharacter.IsJumping // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a3b0
	bool IsJetFlying(); // Function Solarland.SolarCharacter.IsJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a380
	bool IsInVehicle(); // Function Solarland.SolarCharacter.IsInVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a2c0
	bool IsInsideVehicle(); // Function Solarland.SolarCharacter.IsInsideVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a320
	bool IsInShoulderOrScopeView(); // Function Solarland.SolarCharacter.IsInShoulderOrScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a290
	bool IsInScopeView(); // Function Solarland.SolarCharacter.IsInScopeView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a260
	bool IsInRescueState(); // Function Solarland.SolarCharacter.IsInRescueState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a230
	bool IsInMassInvisibilityPrepare(); // Function Solarland.SolarCharacter.IsInMassInvisibilityPrepare // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a200
	bool IsInMassInvisibility(); // Function Solarland.SolarCharacter.IsInMassInvisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a1d0
	bool IsInInvisibleStatus(); // Function Solarland.SolarCharacter.IsInInvisibleStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a1a0
	bool IsInDeathVerge(); // Function Solarland.SolarCharacter.IsInDeathVerge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19fb0
	bool IsHumanCharacter(); // Function Solarland.SolarCharacter.IsHumanCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d1a170
	bool IsHorizontalJetFlying(); // Function Solarland.SolarCharacter.IsHorizontalJetFlying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a140
	bool IsHoldingWeapon(); // Function Solarland.SolarCharacter.IsHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a100
	bool IsFullHealth(); // Function Solarland.SolarCharacter.IsFullHealth // (Final|Native|Public|Const) // @ game+0x1d1a0d0
	bool IsFullBodyMeleeAttacking(); // Function Solarland.SolarCharacter.IsFullBodyMeleeAttacking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a0a0
	bool IsFiring(); // Function Solarland.SolarCharacter.IsFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a070
	bool IsExistWeaponSeatedVehicleSeat(); // Function Solarland.SolarCharacter.IsExistWeaponSeatedVehicleSeat // (Final|Native|Public|Const) // @ game+0x1d1a040
	bool IsEnergyCostAndChargeDisabled(); // Function Solarland.SolarCharacter.IsEnergyCostAndChargeDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d1a010
	bool IsE2M(); // Function Solarland.SolarCharacter.IsE2M // (Final|Native|Public|Const) // @ game+0x1d19fe0
	bool IsDying(); // Function Solarland.SolarCharacter.IsDying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19fb0
	bool IsDoingAnyAttack(); // Function Solarland.SolarCharacter.IsDoingAnyAttack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19f80
	bool IsCruising(); // Function Solarland.SolarCharacter.IsCruising // (Final|Native|Public|Const) // @ game+0x1d19f50
	bool IsClimbing(); // Function Solarland.SolarCharacter.IsClimbing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19f20
	bool IsCharacterDebugBlockDetectionEnabled(); // Function Solarland.SolarCharacter.IsCharacterDebugBlockDetectionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d147e0
	bool IsCanShowTeammateHUD(); // Function Solarland.SolarCharacter.IsCanShowTeammateHUD // (Final|Native|Public|Const) // @ game+0x1d19ef0
	bool IsBoxCharging(); // Function Solarland.SolarCharacter.IsBoxCharging // (Final|Native|Public|Const) // @ game+0x1d19ec0
	bool IsBolting(); // Function Solarland.SolarCharacter.IsBolting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19e90
	bool IsBigRechargerEnough(); // Function Solarland.SolarCharacter.IsBigRechargerEnough // (Final|Native|Public|Const) // @ game+0x1d19e60
	bool IsBeingSpectated(); // Function Solarland.SolarCharacter.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19e30
	bool IsBeingRescue(); // Function Solarland.SolarCharacter.IsBeingRescue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19e00
	bool IsAllEnergyFull(); // Function Solarland.SolarCharacter.IsAllEnergyFull // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19dd0
	bool IsAiming(); // Function Solarland.SolarCharacter.IsAiming // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19da0
	bool IsAbleToContinueRecharge(); // Function Solarland.SolarCharacter.IsAbleToContinueRecharge // (Final|Native|Public|Const) // @ game+0x1d19d70
	void InitShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.InitShieldUpgradeMatMaxPile // (Final|Native|Public) // @ game+0x1d19c90
	void InitShieldPropertyByConfig(); // Function Solarland.SolarCharacter.InitShieldPropertyByConfig // (Final|Native|Protected) // @ game+0x1d19c70
	void InitShieldOperatorTimeline(); // Function Solarland.SolarCharacter.InitShieldOperatorTimeline // (Final|Native|Public) // @ game+0x1d19c50
	void InitializeCharacterData(int32_t InCharacterId, int32_t InSkinID); // Function Solarland.SolarCharacter.InitializeCharacterData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19cb0
	void InitGameStatisticEquipment(); // Function Solarland.SolarCharacter.InitGameStatisticEquipment // (Final|Native|Public) // @ game+0x1d19c30
	void InitDefaultDayNight(); // Function Solarland.SolarCharacter.InitDefaultDayNight // (Final|Native|Public) // @ game+0x1d19c10
	void InitCharacterDefaultShield(struct FSolarItemData& InShiledID); // Function Solarland.SolarCharacter.InitCharacterDefaultShield // (Final|Native|Public|HasOutParms) // @ game+0x1d19b20
	void IncreaseRechargedTimes(); // Function Solarland.SolarCharacter.IncreaseRechargedTimes // (Final|Native|Public) // @ game+0x1d19b00
	void HideShieldRepairEffectItem(); // Function Solarland.SolarCharacter.HideShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19ae0
	void HideShieldOperator(); // Function Solarland.SolarCharacter.HideShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19ac0
	void HideRescueInjector(); // Function Solarland.SolarCharacter.HideRescueInjector // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19aa0
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle, bool bShowLog); // Function Solarland.SolarCharacter.HasBlockBetweenUs // (Final|Native|Public) // @ game+0x1d19920
	bool HasAnyShieldEquiped(); // Function Solarland.SolarCharacter.HasAnyShieldEquiped // (Final|Native|Public|BlueprintCallable) // @ game+0x1d198f0
	bool HasAnyRecharger(); // Function Solarland.SolarCharacter.HasAnyRecharger // (Final|Native|Public|Const) // @ game+0x1d198c0
	bool HandleDying(enum class EHealthChangeType ChangeType, struct AController* InstigatorController); // Function Solarland.SolarCharacter.HandleDying // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19800
	struct TMap<enum class EWeaponPartType, int32_t> GetWeaponPartsMap(); // Function Solarland.SolarCharacter.GetWeaponPartsMap // (Final|Native|Public|Const) // @ game+0x1d197d0
	struct TArray<int32_t> GetWeaponPartsArray(); // Function Solarland.SolarCharacter.GetWeaponPartsArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d197a0
	bool GetWeaponItemDataBySlot(int32_t InSlot, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetWeaponItemDataBySlot // (Final|Native|Public|HasOutParms|Const) // @ game+0x1d19660
	struct TMap<int32_t, struct FSolarItemData> GetWeaponDataMap(); // Function Solarland.SolarCharacter.GetWeaponDataMap // (Final|Native|Public|Const) // @ game+0x1d19630
	int32_t GetVerticalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d195c0
	int32_t GetVerticalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetVerticalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19590
	void GetVerticalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d194b0
	void GetVerticalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetVerticalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d193d0
	struct ASolarVehicleWeapon* GetVehicleWeapon(); // Function Solarland.SolarCharacter.GetVehicleWeapon // (Final|Native|Public|Const) // @ game+0x1d193a0
	char GetVehicleAbilityCounter(); // Function Solarland.SolarCharacter.GetVehicleAbilityCounter // (Final|Native|Public) // @ game+0x1d19370
	struct TMap<enum class EItemType, struct FSolarItemData> GetTypeKeyItemMap(); // Function Solarland.SolarCharacter.GetTypeKeyItemMap // (Final|Native|Public|Const) // @ game+0x1d192d0
	float GetTreatmentRemaining(); // Function Solarland.SolarCharacter.GetTreatmentRemaining // (Final|Native|Public|Const) // @ game+0x1d192a0
	float GetTreatmentDuration(); // Function Solarland.SolarCharacter.GetTreatmentDuration // (Final|Native|Public|Const) // @ game+0x1d19270
	void GetTeamHUDTranslucentData(float& CheckDistance, float& TranslucentValue); // Function Solarland.SolarCharacter.GetTeamHUDTranslucentData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d19180
	struct UUserWidget* GetTeamHUD(); // Function Solarland.SolarCharacter.GetTeamHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19150
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarCharacter.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19120
	struct UAnimInstance* GetSpecAnimInstance(enum class ESpecAnimInstType SpecAnimType); // Function Solarland.SolarCharacter.GetSpecAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19090
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarCharacter.GetSolarReplayPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19060
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarCharacter.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d19030
	struct FString GetSolarPlayerID(); // Function Solarland.SolarCharacter.GetSolarPlayerID // (Final|Native|Public|Const) // @ game+0x1d18fb0
	struct ASolarPlayerController* GetSolarPlayerController(bool bSkipPossessCheck); // Function Solarland.SolarCharacter.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18f10
	struct USolarCharacterMovementComponent* GetSolarCharacterMovementComponent(); // Function Solarland.SolarCharacter.GetSolarCharacterMovementComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18b40
	struct ASolarBotAIController* GetSolarAIController(); // Function Solarland.SolarCharacter.GetSolarAIController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18e00
	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponentSimple(); // Function Solarland.SolarCharacter.GetSolarAbilitySystemComponentSimple // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18e30
	float GetSkydiveLandingHeight(); // Function Solarland.SolarCharacter.GetSkydiveLandingHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18dd0
	struct UCharacterSkinConfig* GetSkinConfig(int32_t InSkinID); // Function Solarland.SolarCharacter.GetSkinConfig // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d18d50
	int32_t GetShieldWorthByID(int32_t InShieldID); // Function Solarland.SolarCharacter.GetShieldWorthByID // (Final|Native|Protected) // @ game+0x1d18cc0
	int32_t GetShieldUpgradeNeedMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeNeedMatNum // (Final|Native|Public|Const) // @ game+0x1d18c90
	int32_t GetShieldUpgradeMatNum(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatNum // (Final|Native|Public|Const) // @ game+0x1d18c60
	int32_t GetShieldUpgradeMatMaxPile(); // Function Solarland.SolarCharacter.GetShieldUpgradeMatMaxPile // (Final|Native|Public|Const) // @ game+0x1d18c30
	float GetShieldRecoveryAmount(); // Function Solarland.SolarCharacter.GetShieldRecoveryAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18c00
	float GetShieldRechargeRemainningTime(); // Function Solarland.SolarCharacter.GetShieldRechargeRemainningTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18bd0
	float GetShieldRechargeDuration(); // Function Solarland.SolarCharacter.GetShieldRechargeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18ba0
	int32_t GetShieldMaxLevel(); // Function Solarland.SolarCharacter.GetShieldMaxLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18b70
	struct USolarCharacterMovementComponent* GetSafeSolarCharacterMovement(); // Function Solarland.SolarCharacter.GetSafeSolarCharacterMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18b40
	enum class ERoleSkillStatus GetRoleAbilityState(char RoleAbilityIndex); // Function Solarland.SolarCharacter.GetRoleAbilityState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18ab0
	struct ASolarUAVRescue* GetRescuingUAV(); // Function Solarland.SolarCharacter.GetRescuingUAV // (Final|Native|Public|Const) // @ game+0x1d18a70
	struct ASolarCharacter* GetRescuingCharacter(); // Function Solarland.SolarCharacter.GetRescuingCharacter // (Final|Native|Public|Const) // @ game+0x1d18a30
	float GetRescueTime(); // Function Solarland.SolarCharacter.GetRescueTime // (Final|Native|Public|Const) // @ game+0x1d18a00
	float GetRecoveryDuartionModify(); // Function Solarland.SolarCharacter.GetRecoveryDuartionModify // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	float GetRecoveryAmountModify(); // Function Solarland.SolarCharacter.GetRecoveryAmountModify // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct ASolarUAVRescue* GetPermanentRescueUAV(); // Function Solarland.SolarCharacter.GetPermanentRescueUAV // (Final|Native|Public|Const) // @ game+0x1d189c0
	struct FRotator GetNormalizeCameraRotation(); // Function Solarland.SolarCharacter.GetNormalizeCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x1d18980
	bool GetNewItemData(int32_t InItemID, int32_t InItemNum, struct FSolarItemData& OutItemData); // Function Solarland.SolarCharacter.GetNewItemData // (Final|Native|Public|HasOutParms) // @ game+0x1d18800
	char GetMyTeamID(); // Function Solarland.SolarCharacter.GetMyTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d187d0
	float GetMaxShieldValue(); // Function Solarland.SolarCharacter.GetMaxShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d187a0
	float GetMaxExtraEnergy(); // Function Solarland.SolarCharacter.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x1d18770
	float GetMaxEnergy(); // Function Solarland.SolarCharacter.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x1d18770
	struct ASolarPlayerState* GetLastDownBy(); // Function Solarland.SolarCharacter.GetLastDownBy // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d18730
	int32_t GetJetPackModuleLevel(bool bVertical); // Function Solarland.SolarCharacter.GetJetPackModuleLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d186a0
	int32_t GetItemNumById(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemNumById // (Final|Native|Public|Const) // @ game+0x1d18610
	int32_t GetItemMaxPile(int32_t InItemID); // Function Solarland.SolarCharacter.GetItemMaxPile // (Final|Native|Public|Const) // @ game+0x1d18580
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x1d18440
	bool GetItemDataById(int32_t InItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarCharacter.GetItemDataById // (Final|Native|Public|HasOutParms|Const) // @ game+0x1d18300
	bool GetIsActiveEMP(); // Function Solarland.SolarCharacter.GetIsActiveEMP // (Final|Native|Public|Const) // @ game+0x1d182e0
	struct FVector GetInputVector(); // Function Solarland.SolarCharacter.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d182a0
	struct TMap<int32_t, struct FSolarItemData> GetIdKeyItemMap(); // Function Solarland.SolarCharacter.GetIdKeyItemMap // (Final|Native|Public|Const) // @ game+0x1d18270
	int32_t GetHorizontalJetFlyTotalTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyTotalTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18240
	int32_t GetHorizontalJetFlyRestTimes(); // Function Solarland.SolarCharacter.GetHorizontalJetFlyRestTimes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18210
	void GetHorizontalJetFlyCharging(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCharging // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18130
	void GetHorizontalJetFlyCD(float& OutValue, float& OutPercent); // Function Solarland.SolarCharacter.GetHorizontalJetFlyCD // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18050
	int32_t GetGenericSkillLevel(); // Function Solarland.SolarCharacter.GetGenericSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18020
	float GetFactorialAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetFactorialAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17f90
	int32_t GetExtraEnergyModuleID(); // Function Solarland.SolarCharacter.GetExtraEnergyModuleID // (Final|Native|Public|Const) // @ game+0x1d17f70
	float GetEnergyConsumptionModify(); // Function Solarland.SolarCharacter.GetEnergyConsumptionModify // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	enum class EDriveState GetDriveState(); // Function Solarland.SolarCharacter.GetDriveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17f40
	float GetDesirePeekValue(); // Function Solarland.SolarCharacter.GetDesirePeekValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17f10
	struct AActor* GetDamagerCauserActor(); // Function Solarland.SolarCharacter.GetDamagerCauserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17ee0
	float GetCurrShieldValue(); // Function Solarland.SolarCharacter.GetCurrShieldValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17cc0
	int32_t GetCurrShieldID(); // Function Solarland.SolarCharacter.GetCurrShieldID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17c90
	float GetCurrExtraEnergy(); // Function Solarland.SolarCharacter.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x1d17c60
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.SolarCharacter.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17eb0
	enum class EWalkMode GetCurrentWalkMode(); // Function Solarland.SolarCharacter.GetCurrentWalkMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17e80
	float GetCurrentVehicleAbilityCooldownRemaining(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownRemaining // (Final|Native|Public|Const) // @ game+0x1d17df0
	float GetCurrentVehicleAbilityCooldownDuration(char AbilityIndex); // Function Solarland.SolarCharacter.GetCurrentVehicleAbilityCooldownDuration // (Final|Native|Public|Const) // @ game+0x1d17d60
	int32_t GetCurrentShieldLevel(); // Function Solarland.SolarCharacter.GetCurrentShieldLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17d30
	enum class ERenderMode GetCurrentRenderMode(); // Function Solarland.SolarCharacter.GetCurrentRenderMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17d10
	enum class ECustomJumpType GetCurrentCustomJumpType(); // Function Solarland.SolarCharacter.GetCurrentCustomJumpType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17cf0
	float GetCurrEnergy(); // Function Solarland.SolarCharacter.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x1d17c60
	float GetCumulativeAttributeModifies(int32_t AttributeID); // Function Solarland.SolarCharacter.GetCumulativeAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17bd0
	struct APlayerController* GetControllingOrReplayController(); // Function Solarland.SolarCharacter.GetControllingOrReplayController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17b70
	struct UStaticMesh* GetClipMeshOfHoldingWeapon(); // Function Solarland.SolarCharacter.GetClipMeshOfHoldingWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d17b40
	int32_t GetClassTypeSkillLevel(); // Function Solarland.SolarCharacter.GetClassTypeSkillLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17b10
	void GetChargingStateForUI(bool& IsSky, bool& IsPile, bool& IsBox, bool& IsE2M); // Function Solarland.SolarCharacter.GetChargingStateForUI // (Final|Native|Public|HasOutParms) // @ game+0x1d17970
	struct FRotator GetCharacterLookAt(); // Function Solarland.SolarCharacter.GetCharacterLookAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17930
	bool GetCanShowBattlePrompt(); // Function Solarland.SolarCharacter.GetCanShowBattlePrompt // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17900
	struct FRotator GetCameraRotation(); // Function Solarland.SolarCharacter.GetCameraRotation // (Final|Native|Public|HasDefaults|Const) // @ game+0x1d178c0
	struct FVector GetCameraLocation(); // Function Solarland.SolarCharacter.GetCameraLocation // (Final|Native|Public|HasDefaults|Const) // @ game+0x1d17880
	void GetAllSkydiveLandingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveLandingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d17750
	void GetAllSkydiveFlyingEffects(struct TArray<struct UParticleSystemComponent*>& OutEffects); // Function Solarland.SolarCharacter.GetAllSkydiveFlyingEffects // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d176a0
	void GatheringDeathBoxItem(bool bCheat, bool bKilledByTeammate, int32_t InExpItemCount, int32_t InMaxSheildMatCount); // Function Solarland.SolarCharacter.GatheringDeathBoxItem // (Final|Native|Protected) // @ game+0x1d17550
	void GameStatisticsWeaponHit(struct ASolarCharacterBase* DamageCauserCharacter, struct FSolarPointDamageEvent& DamageInfo, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsWeaponHit // (Final|Native|Public|HasOutParms) // @ game+0x1d17400
	void GameStatisticsVehicleLanded(struct FHitResult& Hit); // Function Solarland.SolarCharacter.GameStatisticsVehicleLanded // (Final|Native|Public|HasOutParms) // @ game+0x1d17320
	void GameStatisticsVehicleInAir(); // Function Solarland.SolarCharacter.GameStatisticsVehicleInAir // (Final|Native|Public) // @ game+0x1d17300
	void GameStatisticsVehicleHit(struct AActor* DamageCauser, float HitDamage); // Function Solarland.SolarCharacter.GameStatisticsVehicleHit // (Final|Native|Public) // @ game+0x1d17230
	void GameStatisticsItemChange(int32_t ItemID, enum class EItemChangeType PickType, int32_t OldNum, int32_t NewNum, int32_t TriggerType); // Function Solarland.SolarCharacter.GameStatisticsItemChange // (Final|Native|Public) // @ game+0x1d170b0
	void GameStatisticsGodWeapon(); // Function Solarland.SolarCharacter.GameStatisticsGodWeapon // (Final|Native|Public) // @ game+0x1d17090
	void GameStatisticsGetOnVehicleReason(int32_t Type, struct FString Type_Parameter); // Function Solarland.SolarCharacter.GameStatisticsGetOnVehicleReason // (Final|Native|Public) // @ game+0x1d16f70
	void GameStatisticsGetOffVehicleReason(struct ASolarWeapon* CurrentWeapon, struct FString Param); // Function Solarland.SolarCharacter.GameStatisticsGetOffVehicleReason // (Final|Native|Public) // @ game+0x1d16e90
	void GameStatisticsEquipment(); // Function Solarland.SolarCharacter.GameStatisticsEquipment // (Final|Native|Public) // @ game+0x1d16e70
	void GameStatisticsElectricShopActivated(struct FVector& InLocation); // Function Solarland.SolarCharacter.GameStatisticsElectricShopActivated // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d16de0
	void GameStatisticsDamageReason(struct FSolarPointDamageEvent& InDamageEvent, float ActualDamage); // Function Solarland.SolarCharacter.GameStatisticsDamageReason // (Final|Native|Public|HasOutParms) // @ game+0x1d16cd0
	void GameStatisticsCharacterSkill(bool bIsSuperSkill); // Function Solarland.SolarCharacter.GameStatisticsCharacterSkill // (Final|Native|Public) // @ game+0x1d16c40
	void GameStatisticsBackpackFly(struct FBackpackStatisticsInfo& InBackpackStatisticsInfo); // Function Solarland.SolarCharacter.GameStatisticsBackpackFly // (Final|Native|Public|HasOutParms) // @ game+0x1d16bb0
	void ForceBreakSprintState(); // Function Solarland.SolarCharacter.ForceBreakSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x1d16b90
	void FindMostValuableItemClient(struct TArray<struct FSolarItemData> ItemData, char FromWhichTeammate); // Function Solarland.SolarCharacter.FindMostValuableItemClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d16a50
	void ExitDyingMovement(); // Function Solarland.SolarCharacter.ExitDyingMovement // (Final|Native|Public) // @ game+0x1d16a30
	void ExitDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.ExitDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x1d169a0
	void ExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacter.ExecuteGM // (Final|Native|Public|BlueprintCallable) // @ game+0x1d16860
	void EnterVehicleWholeShield(struct UMaterialInterface* ShieldMaterialSource); // Function Solarland.SolarCharacter.EnterVehicleWholeShield // (Final|Native|Public|BlueprintCallable) // @ game+0x1d167e0
	void EnterVehicleStealth(); // Function Solarland.SolarCharacter.EnterVehicleStealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1d167c0
	void EnterDyingMovement(); // Function Solarland.SolarCharacter.EnterDyingMovement // (Final|Native|Public) // @ game+0x1d167a0
	void EnterDeathVerge(bool bClientSimulation); // Function Solarland.SolarCharacter.EnterDeathVerge // (Native|Public|BlueprintCallable) // @ game+0x1d16710
	void EnableCharacterDebugInfo_BlockDetection(bool bEnabled); // Function Solarland.SolarCharacter.EnableCharacterDebugInfo_BlockDetection // (Final|Native|Public|BlueprintCallable) // @ game+0x1c89360
	void DoOperation(enum class ECharacterOperation OperationType, struct UObject* Target); // Function Solarland.SolarCharacter.DoOperation // (Final|Native|Public) // @ game+0x1d16650
	void DisCardShield(); // Function Solarland.SolarCharacter.DisCardShield // (Final|Native|Public) // @ game+0x1d16630
	float DealDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.DealDamageResolve // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1d16490
	void CreateTreasureBoxOperator(); // Function Solarland.SolarCharacter.CreateTreasureBoxOperator // (Final|Native|Public) // @ game+0x1d16470
	void CreateShieldRepairEffectItem(); // Function Solarland.SolarCharacter.CreateShieldRepairEffectItem // (Final|Native|Public|BlueprintCallable) // @ game+0x1d16450
	void CreateShieldOperator(); // Function Solarland.SolarCharacter.CreateShieldOperator // (Final|Native|Public|BlueprintCallable) // @ game+0x1d16430
	struct UWidgetComponent* CreateOwnTeammateHUDInternal(struct ASolarPlayerState* SelfData); // Function Solarland.SolarCharacter.CreateOwnTeammateHUDInternal // (Final|Native|Protected) // @ game+0x1d163a0
	struct UWidgetComponent* CreateOwnTeammateHUD(); // Function Solarland.SolarCharacter.CreateOwnTeammateHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x1d16370
	void ClientWeaponPartReplaceNotice(int32_t OldWeaponPartId, int32_t NewWeaponPartId); // Function Solarland.SolarCharacter.ClientWeaponPartReplaceNotice // (Net|Native|Event|Public|NetClient) // @ game+0x1d161f0
	void ClientUpdateTracking(int32_t Mode, int32_t Index, struct FVector Location); // Function Solarland.SolarCharacter.ClientUpdateTracking // (Final|Net|NetReliableNative|Event|Private|HasDefaults|NetClient) // @ game+0x1d160f0
	void ClientSuperRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientSuperRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d16060
	void ClientStartRecharge(float InCurrentValue, float InRecoveryDuration, float InRecoveryAmount, enum class EShieldRechargeState ShieldRechargeType, int32_t InShieldContributorCharacterId, bool bFixPreAdd); // Function Solarland.SolarCharacter.ClientStartRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15e90
	void ClientSomeOneIsOpening(); // Function Solarland.SolarCharacter.ClientSomeOneIsOpening // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x12585d0
	void ClientSetServerBlockDetectionResult(struct FString Info); // Function Solarland.SolarCharacter.ClientSetServerBlockDetectionResult // (Final|Net|Native|Event|Private|NetClient) // @ game+0x1d15df0
	void ClientRPCDisplayAllElectricShops(struct TArray<struct FVector> AllPositions); // Function Solarland.SolarCharacter.ClientRPCDisplayAllElectricShops // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1d15860
	void ClientRestoreActiveAbilitiesOnReconnected(struct TArray<struct FRestoreAbilityInfo> SpecHandles); // Function Solarland.SolarCharacter.ClientRestoreActiveAbilitiesOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1d15d50
	void ClientReceiveVehicleWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15c80
	void ClientReceiveVehicleWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveVehicleWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15be0
	void ClientReceiveScanResult(struct TArray<struct FScannedInfo_NetQuantize> ScannedDatas, float SpanTimer); // Function Solarland.SolarCharacter.ClientReceiveScanResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15b00
	void ClientReceiveCharacterWeaponMessageArray(struct TArray<struct FPlayerWeaponMsg> InPlayerWeaponMessageArray); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessageArray // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15a30
	void ClientReceiveCharacterWeaponMessage(struct FPlayerWeaponMsg InPlayerWeaponMessage); // Function Solarland.SolarCharacter.ClientReceiveCharacterWeaponMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15990
	void ClientRadarOnceScanned(int32_t ScannedNum); // Function Solarland.SolarCharacter.ClientRadarOnceScanned // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15900
	void ClientPlaySoundGroup(struct FName GroupName); // Function Solarland.SolarCharacter.ClientPlaySoundGroup // (Net|Native|Event|Public|NetClient) // @ game+0x1d157d0
	void ClientPlayHitEffect(struct FHitResult HitResult, struct ASolarBullet* BulletClass, enum class ESolarHitType HitType, struct APlayerController* Attacker, struct FVector RelativeVector, float VFXScale, struct ASolarWeapon* AttackerWeapon); // Function Solarland.SolarCharacter.ClientPlayHitEffect // (Net|Native|Event|NetMulticast|Public|HasDefaults|NetClient) // @ game+0x1d15590
	void ClientOnTriggerCharacterDown(); // Function Solarland.SolarCharacter.ClientOnTriggerCharacterDown // (Net|Native|Event|Public|NetClient) // @ game+0x1257750
	void ClientOnShieldUpgrade(); // Function Solarland.SolarCharacter.ClientOnShieldUpgrade // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1257db0
	void ClientOnReconnecting(struct FReconnectionParams Params); // Function Solarland.SolarCharacter.ClientOnReconnecting // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1d15510
	void ClientOnContinuousTreatmentStarted(); // Function Solarland.SolarCharacter.ClientOnContinuousTreatmentStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1258d10
	void ClientNotifyMarkedBySuperRadar(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedBySuperRadar // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15440
	void ClientNotifyMarkedByOnceScan(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyMarkedByOnceScan // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15370
	void ClientNotifyGameProgressCondition(struct FGameplayTag& InProgressTag); // Function Solarland.SolarCharacter.ClientNotifyGameProgressCondition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d152e0
	void ClientNotifyCharacterExposed(float InRadarLifeTime, struct FGameplayTag InTag); // Function Solarland.SolarCharacter.ClientNotifyCharacterExposed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15210
	void ClientNoticePickup(int32_t ItemID, int32_t ItemQuality); // Function Solarland.SolarCharacter.ClientNoticePickup // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d15150
	void ClientKilledCharacter(); // Function Solarland.SolarCharacter.ClientKilledCharacter // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1257890
	void ClientHideShieldOperator(); // Function Solarland.SolarCharacter.ClientHideShieldOperator // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1257d30
	void ClientEquipReplaceNotice(int32_t OldEquipItemId, int32_t CurEquipItemId, int32_t EquipType); // Function Solarland.SolarCharacter.ClientEquipReplaceNotice // (Net|Native|Event|Public|NetClient) // @ game+0x1d15060
	void ClientCreateTreatEffect(); // Function Solarland.SolarCharacter.ClientCreateTreatEffect // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x1258c10
	void ClientCompleteRecharge(float InCurrentValue, float InChangeValue); // Function Solarland.SolarCharacter.ClientCompleteRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d14f90
	void ClientCancelRecharge(bool BreakAnimOnly, float InCurrentValue, float InChangeValue, float MaxShieldVal, enum class EShieldCancelRechargeReason CancelReason); // Function Solarland.SolarCharacter.ClientCancelRecharge // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d14e00
	void ClientBroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.ClientBroadcastCharacterRoleAbilityContinousEvent // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d14cf0
	void ClientAddHitTrace(struct FHitTraceInfo Info); // Function Solarland.SolarCharacter.ClientAddHitTrace // (Net|Native|Event|Public|NetClient) // @ game+0x1d14c60
	void ClientAckValidShieldUpgradeInteract(struct ASolarShieldUpgradeItemShop* InShop, enum class EShieldUpgradeInteractAckType AckReason); // Function Solarland.SolarCharacter.ClientAckValidShieldUpgradeInteract // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d14b90
	void ClearGameStatisticEquipment(); // Function Solarland.SolarCharacter.ClearGameStatisticEquipment // (Final|Native|Public) // @ game+0x1d14b70
	void ClearDeathBoxData(); // Function Solarland.SolarCharacter.ClearDeathBoxData // (Final|Native|Protected) // @ game+0x1d14b50
	float CheckSelfAltitudeInstantlyByTrace(struct FHitResult& HitGeography, bool bCheckEveryFrame, float traceDistOverride, bool bSimpleCheck); // Function Solarland.SolarCharacter.CheckSelfAltitudeInstantlyByTrace // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d149b0
	void ChangeSeatByIndex(int32_t TargetSeatIndex); // Function Solarland.SolarCharacter.ChangeSeatByIndex // (Final|Native|Public) // @ game+0x1d14930
	void ChangeSeatByDefault(); // Function Solarland.SolarCharacter.ChangeSeatByDefault // (Final|Native|Public) // @ game+0x1d14910
	void CGM_SpawnDeathBox(); // Function Solarland.SolarCharacter.CGM_SpawnDeathBox // (Final|Native|Public|BlueprintCallable) // @ game+0x1d146a0
	void CGM_EnterDeath(); // Function Solarland.SolarCharacter.CGM_EnterDeath // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1257ef0
	bool CanStickOutOfVehicle(bool bIgnoreSelfWeaponCheck); // Function Solarland.SolarCharacter.CanStickOutOfVehicle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d14840
	bool CanRebirth(); // Function Solarland.SolarCharacter.CanRebirth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d14810
	bool CanPeek(); // Function Solarland.SolarCharacter.CanPeek // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d147e0
	bool CanMarkPointOnWorld(); // Function Solarland.SolarCharacter.CanMarkPointOnWorld // (Final|Native|Public) // @ game+0x1d147b0
	void CancelVehicleAbility(); // Function Solarland.SolarCharacter.CancelVehicleAbility // (Final|Native|Public) // @ game+0x1d148f0
	void CancelTreatment(); // Function Solarland.SolarCharacter.CancelTreatment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d148d0
	void CalculateBubbleKillNum(struct TArray<struct ASolarCharacter*>& InstigatorCharacters, struct AActor* AttackWeapon); // Function Solarland.SolarCharacter.CalculateBubbleKillNum // (Final|Native|Public|HasOutParms) // @ game+0x1d146c0
	void BroadcastCharacterRoleAbilityContinousEvent(float Duration, bool bAutoClose, char RoleAbilityIndex); // Function Solarland.SolarCharacter.BroadcastCharacterRoleAbilityContinousEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d14590
	void BreakRechargeShield(); // Function Solarland.SolarCharacter.BreakRechargeShield // (Final|Native|Public) // @ game+0x1d14570
	void BindUpdateHUDToOnHealthUpdateDelegateProc(struct ASolarCharacter* Character); // Function Solarland.SolarCharacter.BindUpdateHUDToOnHealthUpdateDelegateProc // (Final|Native|Private) // @ game+0x1d14440
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarCharacter.BindLocalPlayerSpectateDelegates // (Final|Native|Public) // @ game+0x1d143c0
	void BindActorToSelfTeam(struct AActor* Actor); // Function Solarland.SolarCharacter.BindActorToSelfTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1d14340
	void BeginplayPending__DelegateSignature(); // DelegateFunction Solarland.SolarCharacter.BeginplayPending__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void BeginPlayBlueprint(); // Function Solarland.SolarCharacter.BeginPlayBlueprint // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void AutoMarkItemForTeammateClient(int64_t ItemThisID); // Function Solarland.SolarCharacter.AutoMarkItemForTeammateClient // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1d142b0
	void ApplyVehicleAbility(char AbilityIndex); // Function Solarland.SolarCharacter.ApplyVehicleAbility // (Final|Native|Public) // @ game+0x1d14230
	void AfterTakeDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterTakeDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void AfterDealDamageResolve(float Damage, struct FSolarPointDamageEvent& DamageEvent, struct ASCMPlayerState* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarCharacter.AfterDealDamageResolve // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void AddTrackingTarget(struct ASolarCharacterBase* Tracked); // Function Solarland.SolarCharacter.AddTrackingTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d141b0
	void AddTempAttributeModifies(int32_t AttributeID, bool bCumulOrFact, struct FName Tag, float Value); // Function Solarland.SolarCharacter.AddTempAttributeModifies // (Final|Native|Public|BlueprintCallable) // @ game+0x1d14060
	void AddDebugString(struct FString DebugString); // Function Solarland.SolarCharacter.AddDebugString // (Final|Native|Public|BlueprintCallable) // @ game+0x1d13fc0
	void AddCurrExtraEnergyValue(float DeltaEnergy); // Function Solarland.SolarCharacter.AddCurrExtraEnergyValue // (Final|Native|Public) // @ game+0x1d13f40
};

// Class Solarland.SCMCharacter
// Size: 0x2500 (Inherited: 0x2500)
struct ASCMCharacter : ASolarCharacter {
};

// Class Solarland.SCMLoadLevelAction
// Size: 0x78 (Inherited: 0x30)
struct USCMLoadLevelAction : UBlueprintAsyncActionBase {
	char pad_30[0x28]; // 0x30(0x28)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLoadComplete; // 0x68(0x10)

	struct USCMLoadLevelAction* LoadLevel(struct UObject* WorldContextObject, struct FString LevelName, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadLevelAction.LoadLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb5e40
	void HandleLoadComplete(); // Function Solarland.SCMLoadLevelAction.HandleLoadComplete // (Final|Native|Public) // @ game+0x1cb5b70
};

// Class Solarland.SCMLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x48(0x10)

	struct USCMLoadElementAction* LoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMLoadElementAction.LoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb5d30
	void HandleElementLoadComplete(); // Function Solarland.SCMLoadElementAction.HandleElementLoadComplete // (Final|Native|Public) // @ game+0x1cb5b50
};

// Class Solarland.SCMUnLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCMUnLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementUnLoadComplete; // 0x48(0x10)

	struct USCMUnLoadElementAction* UnLoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCMUnLoadElementAction.UnLoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb6e30
	void HandleElementUnLoadComplete(); // Function Solarland.SCMUnLoadElementAction.HandleElementUnLoadComplete // (Final|Native|Public) // @ game+0x1cb5b50
};

// Class Solarland.SCMMapElementBase
// Size: 0x280 (Inherited: 0x228)
struct ASCMMapElementBase : AActor {
	bool bPersistent; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FString Side; // 0x230(0x10)
	struct FString Job; // 0x240(0x10)
	struct FString ElementID; // 0x250(0x10)
	enum class ESCMMapElementType Type; // 0x260(0x01)
	enum class ESCMMapElementStateType State; // 0x261(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x262(0x01)
	char pad_263[0x5]; // 0x263(0x05)
	struct USCMMapElementRPCComponent* MapElementRPCComponentClass; // 0x268(0x08)
	struct FName ElementName; // 0x270(0x08)
	char bUseSceneActorOptimization; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMMapElementBase.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x1cb6cf0
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMMapElementBase.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x1cb6bd0
	void OnRep_ElementVisibility(); // Function Solarland.SCMMapElementBase.OnRep_ElementVisibility // (Final|Native|Public) // @ game+0x1cb61f0
	void OnRep_ElementState(); // Function Solarland.SCMMapElementBase.OnRep_ElementState // (Final|Native|Public) // @ game+0x1cb61d0
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMMapElementBase.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMMapElementBase.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SCMMapElementRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMMapElementRPCComponent : UActorComponent {
};

// Class Solarland.SCMMatchChannelAction
// Size: 0x60 (Inherited: 0x30)
struct USCMMatchChannelAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct UObject* WorldContextObject; // 0x48(0x08)
	struct FMulticastInlineDelegate OnMatchChannelChange; // 0x50(0x10)

	struct USCMMatchChannelAction* OpenMatchChannel(struct UObject* WorldContextObject, enum class EMatchType MatchType, struct TArray<int32_t>& PlayerStructure, int32_t MaxMatchTime); // Function Solarland.SCMMatchChannelAction.OpenMatchChannel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb63f0
	void HandleMatchChannelChange(bool InMatchResult, int32_t RPCID); // Function Solarland.SCMMatchChannelAction.HandleMatchChannelChange // (Final|Native|Public) // @ game+0x1cb5b90
};

// Class Solarland.SolarPlayerController
// Size: 0xc48 (Inherited: 0x5a8)
struct ASolarPlayerController : APlayerController {
	char pad_5A8[0x30]; // 0x5a8(0x30)
	struct FMulticastInlineDelegate OnPawnReplicated; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnPlayerStateRepDelegate; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnCatchInputActionDelegate; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnEnterLandingDelegate; // 0x608(0x10)
	struct FMulticastInlineDelegate OnNotifiedMarkedItemWasPickedUpDelegate; // 0x618(0x10)
	struct USolarInputManager* InputManager; // 0x628(0x08)
	struct USolarEasyAntiCheatComponent* AntiCheatComponent; // 0x630(0x08)
	struct FMulticastInlineDelegate OnHUDSpawnedDelegate; // 0x638(0x10)
	char pad_648[0xd0]; // 0x648(0xd0)
	struct USolarInputModePolicyComponent* SolarInputModePolicyComponent; // 0x718(0x08)
	struct TArray<struct USolarInputActionContext*> InputActionContextArray; // 0x720(0x10)
	char pad_730[0x8]; // 0x730(0x08)
	struct FVector2D InputMovementVector; // 0x738(0x08)
	float InputRotatePitch; // 0x740(0x04)
	char pad_744[0x10]; // 0x744(0x10)
	float PingHoldDownTime; // 0x754(0x04)
	float VoiceWheelMouseMoveRatio; // 0x758(0x04)
	float WheelRadius; // 0x75c(0x04)
	float CancelRadius; // 0x760(0x04)
	char pad_764[0x64]; // 0x764(0x64)
	struct TArray<struct UActorMarkBase*> DeathBoxWorldMarks; // 0x7c8(0x10)
	char pad_7D8[0x4]; // 0x7d8(0x04)
	float DeathBoxMarksRefreshInterval; // 0x7dc(0x04)
	char pad_7E0[0x4]; // 0x7e0(0x04)
	int32_t MaxDeathBoxWorldMarkNumber; // 0x7e4(0x04)
	struct UActorMarkBase* DeathBoxMarkClass; // 0x7e8(0x08)
	char pad_7F0[0x30]; // 0x7f0(0x30)
	struct USolarCharacterSpringArmComponent* FollowArmClass; // 0x820(0x08)
	struct USolarCharacterCameraComponent* FollowCameraClass; // 0x828(0x08)
	float FreeLookSmoothSpeed; // 0x830(0x04)
	char pad_834[0x14]; // 0x834(0x14)
	struct USolarCharacterSpringArmComponent* FollowArm; // 0x848(0x08)
	struct USolarCharacterCameraComponent* FollowCamera; // 0x850(0x08)
	char pad_858[0x10]; // 0x858(0x10)
	struct FString PlayerId; // 0x868(0x10)
	char pad_878[0x20]; // 0x878(0x20)
	float VehicleInteractionDistance; // 0x898(0x04)
	char pad_89C[0x4]; // 0x89c(0x04)
	struct TArray<struct ASolarVehiclePawn*> InteractingVehicles; // 0x8a0(0x10)
	struct ASolarVehiclePawn* BestInteractingVehicle; // 0x8b0(0x08)
	char pad_8B8[0xc]; // 0x8b8(0x0c)
	int32_t PeekInput; // 0x8c4(0x04)
	char pad_8C8[0x50]; // 0x8c8(0x50)
	struct FMulticastInlineDelegate OnTeammateHUDDodgeSet; // 0x918(0x10)
	struct TMap<struct ASolarCharacter*, int32_t> TeammateCandidates; // 0x928(0x50)
	bool bIsAlreadyParachuted; // 0x978(0x01)
	char pad_979[0x7]; // 0x979(0x07)
	struct TArray<struct FGameplayHitInfo> WeaponMessageArray; // 0x980(0x10)
	char pad_990[0x18]; // 0x990(0x18)
	struct TArray<struct TWeakObjectPtr<struct AActor>> UniqueActorArray; // 0x9a8(0x10)
	float HangUpTime; // 0x9b8(0x04)
	char pad_9BC[0x1c]; // 0x9bc(0x1c)
	struct TWeakObjectPtr<struct UUserWidget> DamageTextWidget; // 0x9d8(0x08)
	struct TArray<struct FSolarDamageText> SameFrameDamageTextDataCache; // 0x9e0(0x10)
	struct FTimerHandle SameFrameDamageTextDataHandle; // 0x9f0(0x08)
	char pad_9F8[0xa0]; // 0x9f8(0xa0)
	struct USolarWarmClockComponent* WarmClockComp; // 0xa98(0x08)
	char pad_AA0[0x8]; // 0xaa0(0x08)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0xaa8(0x10)
	char pad_AB8[0x30]; // 0xab8(0x30)
	bool bShowCursorWhenSpectateOthers; // 0xae8(0x01)
	char pad_AE9[0x7]; // 0xae9(0x07)
	struct APlayerController* ScoutPlayerController; // 0xaf0(0x08)
	struct AActor* ScoutViewTarget; // 0xaf8(0x08)
	struct USolarSwitchTargetCameraControlComp* SolarSwitchTargetCameraControlComp; // 0xb00(0x08)
	char pad_B08[0x8]; // 0xb08(0x08)
	struct TArray<int32_t> UsableJetpacks; // 0xb10(0x10)
	struct TArray<int32_t> UsableTailFlames; // 0xb20(0x10)
	struct TArray<int32_t> AllCharacterSkins; // 0xb30(0x10)
	struct FName PickUpExpItemSound; // 0xb40(0x08)
	struct FString CachedRechamberSound; // 0xb48(0x10)
	char pad_B58[0x14]; // 0xb58(0x14)
	struct FName EMPScreenEffectName; // 0xb6c(0x08)
	float AntiCheatUploadInterval; // 0xb74(0x04)
	struct FFixedAntiCheatData FixedAntiCheatData; // 0xb78(0x24)
	char pad_B9C[0x34]; // 0xb9c(0x34)
	struct TArray<struct FString> CustomAntiCheatNames; // 0xbd0(0x10)
	struct TArray<struct FString> CustomAntiCheatContents; // 0xbe0(0x10)
	char pad_BF0[0x58]; // 0xbf0(0x58)

	void WorldMarkWheelYAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelYAxis // (Final|Native|Public) // @ game+0x1decee0
	void WorldMarkWheelXAxis(float Movement); // Function Solarland.SolarPlayerController.WorldMarkWheelXAxis // (Final|Native|Public) // @ game+0x1dece60
	void WorldMarkDelayExecFunction(); // Function Solarland.SolarPlayerController.WorldMarkDelayExecFunction // (Final|Native|Public) // @ game+0x1dece40
	void UseMedicine(); // Function Solarland.SolarPlayerController.UseMedicine // (Final|Native|Public) // @ game+0x1dece20
	void UnMarkWorldInLevel(int64_t instanceID); // Function Solarland.SolarPlayerController.UnMarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1decd90
	void Turn(float Value); // Function Solarland.SolarPlayerController.Turn // (Final|Native|Public) // @ game+0x1decd10
	void TryRecordBattlePlayerData(); // Function Solarland.SolarPlayerController.TryRecordBattlePlayerData // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void TryRechargeShield(bool bUseBigRecharger); // Function Solarland.SolarPlayerController.TryRechargeShield // (Native|Public) // @ game+0x1decc80
	void TriggerVoiceByType(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.TriggerVoiceByType // (Final|Native|Public) // @ game+0x1decc00
	void TriggerVoiceByNumber(int32_t VoiceIndex); // Function Solarland.SolarPlayerController.TriggerVoiceByNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1decb80
	void ToggleEMPScreenEffect(bool bInVisible); // Function Solarland.SolarPlayerController.ToggleEMPScreenEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1decaf0
	void ToggleCursor(); // Function Solarland.SolarPlayerController.ToggleCursor // (Final|Native|Public|BlueprintCallable) // @ game+0x1decad0
	void TakeOverNextClientSetViewTargetBySwitchTargetComp(bool bRestartBlendEvenIfSameTarget); // Function Solarland.SolarPlayerController.TakeOverNextClientSetViewTargetBySwitchTargetComp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1deca40
	void SwtichVehicleSeatNotification(); // Function Solarland.SolarPlayerController.SwtichVehicleSeatNotification // (Final|Native|Public) // @ game+0x1deca20
	void SwitchWeaponByReverseOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByReverseOrder // (Final|Native|Public) // @ game+0x1deca00
	void SwitchWeaponByOrder(); // Function Solarland.SolarPlayerController.SwitchWeaponByOrder // (Final|Native|Public) // @ game+0x1dec9e0
	void SwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.SwitchSpectatedCharacterInTeam // (Final|Native|Protected|BlueprintCallable) // @ game+0x1dec960
	void SwitchInputBinding(struct FName& InputName, enum class EInputSwitchType SwitchTpye); // Function Solarland.SolarPlayerController.SwitchInputBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dec890
	void StopSpectateCountdown(); // Function Solarland.SolarPlayerController.StopSpectateCountdown // (Final|Native|Public) // @ game+0x1dec870
	void StopRecordingAtDS(); // Function Solarland.SolarPlayerController.StopRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec850
	void StartSpectateCountdown(struct FRepCountdownData InCountdownData); // Function Solarland.SolarPlayerController.StartSpectateCountdown // (Final|Native|Public) // @ game+0x1dec780
	void StartRecordingAtDS(struct FString Filename); // Function Solarland.SolarPlayerController.StartRecordingAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec6e0
	void SolarSlot(int32_t ID); // Function Solarland.SolarPlayerController.SolarSlot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec650
	void SolarShowPanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarShowPanelUI // (Final|Exec|Native|Public) // @ game+0x1dec5d0
	void SolarServerNetProfileStop(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStop // (Final|Exec|Native|Public) // @ game+0x1dec5b0
	void SolarServerNetProfileStart(); // Function Solarland.SolarPlayerController.SolarServerNetProfileStart // (Final|Exec|Native|Public) // @ game+0x1dec590
	void SolarOpenUI(struct FString UIID, int32_t RootID); // Function Solarland.SolarPlayerController.SolarOpenUI // (Final|Exec|Native|Public) // @ game+0x1dec4b0
	void SolarModule(int32_t ID); // Function Solarland.SolarPlayerController.SolarModule // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec420
	void SolarISPC(struct FString _str); // Function Solarland.SolarPlayerController.SolarISPC // (Final|Exec|Native|Public) // @ game+0x1dec340
	void SolarGM_Weapon(struct FString Type, struct FString paramOne, struct FString paramTwo); // Function Solarland.SolarPlayerController.SolarGM_Weapon // (Final|Exec|Native|Public) // @ game+0x1dec200
	void SolarGM_UpdateTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_UpdateTaskInfo // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_TeleportToBotAIServer(uint32_t CtrlIndex); // Function Solarland.SolarPlayerController.SolarGM_TeleportToBotAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec170
	void SolarGM_StopRecordingAtDS(); // Function Solarland.SolarPlayerController.SolarGM_StopRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x1dec150
	void SolarGM_StopBotAIBehaviorTreeServer(bool bStop); // Function Solarland.SolarPlayerController.SolarGM_StopBotAIBehaviorTreeServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dec0c0
	void SolarGM_StartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_StartShrinkSafeArea // (Final|Exec|Native|Public) // @ game+0x1dec0a0
	void SolarGM_StartRecordingAtDS(struct FString Filename); // Function Solarland.SolarPlayerController.SolarGM_StartRecordingAtDS // (Final|Exec|Native|Public) // @ game+0x1dec000
	void SolarGM_SpawnBotAIAtCrosshairByNumServer(int32_t Num, int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshairByNumServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1debeb0
	void SolarGM_SpawnBotAIAtCrosshair(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnBotAIAtCrosshair // (Final|Exec|Native|Public) // @ game+0x1debdb0
	void SolarGM_SpawnAIAtCrosshairServer(int32_t CharacterId, bool bAsTeammate, int32_t DifficultyLevel); // Function Solarland.SolarPlayerController.SolarGM_SpawnAIAtCrosshairServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1debca0
	void SolarGM_ShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ShowRedZoneDamage // (Final|Exec|Native|Public) // @ game+0x1debc10
	void SolarGM_ShowNotice(int32_t NoticeId); // Function Solarland.SolarPlayerController.SolarGM_ShowNotice // (Final|Exec|Native|Public) // @ game+0x1debb90
	void SolarGM_SetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_SetTeamID // (Final|Exec|Native|Public) // @ game+0x1debb10
	void SolarGM_SetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_SetStatDataForDebug // (Final|Exec|Native|Public) // @ game+0x1debaf0
	void SolarGM_SetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_SetSolarPlayerID // (Final|Exec|Native|Public) // @ game+0x1deba50
	void SolarGM_SetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_SetReconnection // (Final|Exec|Native|Public) // @ game+0x1deb9c0
	void SolarGM_SetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_SetPlayerData // (Final|Exec|Native|Public) // @ game+0x1deb920
	void SolarGM_SetGyroscopeTiltZThresholdSwitch(struct FString bSwitch); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThresholdSwitch // (Final|Exec|Native|Public) // @ game+0x1deb880
	void SolarGM_SetGyroscopeTiltZThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltZThreshold // (Final|Exec|Native|Public) // @ game+0x1deb800
	void SolarGM_SetGyroscopeTiltYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltYThreshold // (Final|Exec|Native|Public) // @ game+0x1deb780
	void SolarGM_SetGyroscopeTiltFrameCount(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeTiltFrameCount // (Final|Exec|Native|Public) // @ game+0x1deb700
	void SolarGM_SetGyroscopeRotationRateYThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateYThreshold // (Final|Exec|Native|Public) // @ game+0x1deb680
	void SolarGM_SetGyroscopeRotationRateXThreshold(float Value); // Function Solarland.SolarPlayerController.SolarGM_SetGyroscopeRotationRateXThreshold // (Final|Exec|Native|Public) // @ game+0x1deb600
	void SolarGM_ServerStartShrinkSafeArea(); // Function Solarland.SolarPlayerController.SolarGM_ServerStartShrinkSafeArea // (Net|Native|Event|Public|NetServer) // @ game+0x1deb5e0
	void SolarGM_ServerShowRedZoneDamage(bool IsShow); // Function Solarland.SolarPlayerController.SolarGM_ServerShowRedZoneDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb550
	void SolarGM_ServerSetTeamID(int32_t InTeamId); // Function Solarland.SolarPlayerController.SolarGM_ServerSetTeamID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb4c0
	void SolarGM_ServerSetStatDataForDebug(); // Function Solarland.SolarPlayerController.SolarGM_ServerSetStatDataForDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb4a0
	void SolarGM_ServerSetSolarPlayerID(struct FString InSolarPlayer); // Function Solarland.SolarPlayerController.SolarGM_ServerSetSolarPlayerID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb400
	void SolarGM_ServerSetReconnection(bool IsReconnection); // Function Solarland.SolarPlayerController.SolarGM_ServerSetReconnection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb370
	void SolarGM_ServerSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ServerSetPlayerData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb2d0
	void SolarGM_ServerDumpAllPlayer(); // Function Solarland.SolarPlayerController.SolarGM_ServerDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb2b0
	void SolarGM_ServerDebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_ServerDebugOffline // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deb290
	void SolarGM_ServerConsoleCommand(struct FString InConsoleCommand); // Function Solarland.SolarPlayerController.SolarGM_ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1deb1f0
	void SolarGM_ServerClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ServerClosePoisonDamage // (Net|Native|Event|Public|NetServer) // @ game+0x1deb160
	void SolarGM_ServerChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ServerChangeDayLight // (Net|Native|Event|Public|NetServer) // @ game+0x1deb0d0
	void SolarGM_ResetZoneBombsFire(); // Function Solarland.SolarPlayerController.SolarGM_ResetZoneBombsFire // (Final|Exec|Native|Public) // @ game+0x1deb0b0
	void SolarGM_RedZoneServer(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZoneServer // (Net|Native|Event|Public|NetServer) // @ game+0x1deb020
	void SolarGM_RedZone(int32_t ZoneId); // Function Solarland.SolarPlayerController.SolarGM_RedZone // (Final|Exec|Native|Public) // @ game+0x1deafa0
	void SolarGM_PoisonServer(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_PoisonServer // (Net|Native|Event|Public|NetServer) // @ game+0x1deaf00
	void SolarGM_Poison(struct FString GMType); // Function Solarland.SolarPlayerController.SolarGM_Poison // (Final|Exec|Native|Public) // @ game+0x1deae60
	void SolarGM_PlayerUndetectableByAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deadd0
	void SolarGM_PlayerUndetectableByAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_PlayerUndetectableByAI // (Final|Exec|Native|Public) // @ game+0x1dead50
	void SolarGM_PickHomeitems(int32_t ID, int32_t InCount); // Function Solarland.SolarPlayerController.SolarGM_PickHomeitems // (Final|Exec|Native|Public) // @ game+0x1deac90
	void SolarGM_NoviceGuidance(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SolarGM_NoviceGuidance // (Final|Exec|Native|Public) // @ game+0x1deabd0
	void SolarGM_KillAllAIServer(bool KillBot); // Function Solarland.SolarPlayerController.SolarGM_KillAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1deab40
	void SolarGM_KickMeOut(); // Function Solarland.SolarPlayerController.SolarGM_KickMeOut // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_InitTaskInfo(); // Function Solarland.SolarPlayerController.SolarGM_InitTaskInfo // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_GoPreviousHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoPreviousHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1deab20
	void SolarGM_GoNextHomeCameraMode(); // Function Solarland.SolarPlayerController.SolarGM_GoNextHomeCameraMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1deab00
	void SolarGM_GoHomeCameraModeByIndex(int32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GoHomeCameraModeByIndex // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1deaa80
	void SolarGM_GMGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePreviousPlayer // (Final|Exec|Native|Public) // @ game+0x1de7950
	void SolarGM_GMGoSpectatePlayerByIndex(uint32_t Index); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectatePlayerByIndex // (Final|Exec|Native|Public) // @ game+0x1de7700
	void SolarGM_GMGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.SolarGM_GMGoSpectateNextPlayer // (Final|Exec|Native|Public) // @ game+0x1de76e0
	void SolarGM_Freelook(bool Open); // Function Solarland.SolarPlayerController.SolarGM_Freelook // (Final|Exec|Native|Public) // @ game+0x1c89360
	void SolarGM_DumpAllPlayer(bool bSendToServer); // Function Solarland.SolarPlayerController.SolarGM_DumpAllPlayer // (Final|Exec|Native|Public) // @ game+0x1c89360
	void SolarGM_DebugOffline(); // Function Solarland.SolarPlayerController.SolarGM_DebugOffline // (Final|Exec|Native|Public) // @ game+0x1deaa60
	void SolarGM_DebugAllAIServer(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAIServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dea9d0
	void SolarGM_DebugAllAI(int32_t debugValue); // Function Solarland.SolarPlayerController.SolarGM_DebugAllAI // (Final|Exec|Native|Public) // @ game+0x1dea950
	void SolarGM_ClosePoisonDamage(bool isClose); // Function Solarland.SolarPlayerController.SolarGM_ClosePoisonDamage // (Final|Exec|Native|Public) // @ game+0x1dea8c0
	void SolarGM_ClientShowRedZoneDamage(struct FVector bombLocation, struct FVector CharacterLocation, float Distance, float Damage); // Function Solarland.SolarPlayerController.SolarGM_ClientShowRedZoneDamage // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x1dea730
	void SolarGM_ClientSetPlayerData(struct FString InPlayerID); // Function Solarland.SolarPlayerController.SolarGM_ClientSetPlayerData // (Final|Native|Public) // @ game+0x1dea690
	void SolarGM_ClientGotoLogin(); // Function Solarland.SolarPlayerController.SolarGM_ClientGotoLogin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_ClientDumpAllPlayer(struct FString DumpString); // Function Solarland.SolarPlayerController.SolarGM_ClientDumpAllPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1dea5f0
	void SolarGM_Character(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarPlayerController.SolarGM_Character // (Final|Exec|Native|Public) // @ game+0x1dea4b0
	void SolarGM_ChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleVectorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea350
	void SolarGM_ChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleRotatorProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea350
	void SolarGM_ChangeVehicleIntProperty(struct FString InPropertyName, int32_t inInt); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleIntProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea270
	void SolarGM_ChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleGASAttribute // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea190
	void SolarGM_ChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleFloatProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea190
	void SolarGM_ChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleCurveProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1dea030
	void SolarGM_ChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.SolarGM_ChangeVehicleBoolProperty // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1de9f50
	void SolarGM_ChangeDayLight(int32_t ID); // Function Solarland.SolarPlayerController.SolarGM_ChangeDayLight // (Final|Exec|Native|Public) // @ game+0x1de9ed0
	void SolarGM_BattleLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_BattleLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_Battle(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarPlayerController.SolarGM_Battle // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1de9db0
	void SolarGM(struct FString _str); // Function Solarland.SolarPlayerController.SolarGM // (Final|Exec|Native|Public) // @ game+0x1de9d10
	void SolarEnergy(int32_t InMode, int32_t ID); // Function Solarland.SolarPlayerController.SolarEnergy // (Final|Exec|Native|Public) // @ game+0x1de9c50
	void SolarCloseUI(struct FString UIID); // Function Solarland.SolarPlayerController.SolarCloseUI // (Final|Exec|Native|Public) // @ game+0x1de9bb0
	void SolarClosePanelUI(int32_t Type); // Function Solarland.SolarPlayerController.SolarClosePanelUI // (Final|Exec|Native|Public) // @ game+0x1de9b30
	void SolarClientNetProfileStop(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStop // (Final|Exec|Native|Public) // @ game+0x1de9b10
	void SolarClientNetProfileStart(); // Function Solarland.SolarPlayerController.SolarClientNetProfileStart // (Final|Exec|Native|Public) // @ game+0x1de9af0
	void ShowBackpackUI(); // Function Solarland.SolarPlayerController.ShowBackpackUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetInputActionSwitch(int32_t ActionID, bool bOn); // Function Solarland.SolarPlayerController.SetInputActionSwitch // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetAllTeammateHUDDodge(bool bDodge); // Function Solarland.SolarPlayerController.SetAllTeammateHUDDodge // (Final|Native|Public|BlueprintCallable) // @ game+0x1de9a60
	void ServerUpdateTaskInfo(); // Function Solarland.SolarPlayerController.ServerUpdateTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9a40
	void ServerUnforbidRoleAbilitySkillDebugOnly(); // Function Solarland.SolarPlayerController.ServerUnforbidRoleAbilitySkillDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1de9a20
	void ServerTeleportTo(struct FVector DestLocation); // Function Solarland.SolarPlayerController.ServerTeleportTo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1de99a0
	void ServerSyncPlayerSelfReport(); // Function Solarland.SolarPlayerController.ServerSyncPlayerSelfReport // (Final|Native|Public) // @ game+0x1de9980
	void ServerSwitchSpectatedCharacterInTeam(int32_t PosInTeam); // Function Solarland.SolarPlayerController.ServerSwitchSpectatedCharacterInTeam // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1de98f0
	void ServerSpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarPlayerController.ServerSpawnVehicleWithVehicleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9860
	void ServerSpawnVehicle(int32_t SpawnID); // Function Solarland.SolarPlayerController.ServerSpawnVehicle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de97d0
	void ServerSpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarPlayerController.ServerSpawnTreasureBox // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9740
	void ServerSpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnSolarRadar // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de96a0
	void ServerSpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarPlayerController.ServerSpawnOutcomeContent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9610
	void ServerSpawnChargingPile(struct FString BpPath); // Function Solarland.SolarPlayerController.ServerSpawnChargingPile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9570
	void ServerSpawnAirship(float Loc_X, float Loc_Y); // Function Solarland.SolarPlayerController.ServerSpawnAirship // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de94a0
	void ServerSpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarPlayerController.ServerSpawnAirdrop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9410
	void ServerSolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarPlayerController.ServerSolarWeaponSpreadForWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9240
	void ServerSolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarPlayerController.ServerSolarWeaponReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9180
	void ServerSolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarPlayerController.ServerSolarWeaponOverload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de9030
	void ServerSolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarPlayerController.ServerSolarWeaponFiringMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8e60
	void ServerSolarSetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarPlayerController.ServerSolarSetPlayerValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8d70
	void ServerSolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarPlayerController.ServerSolarAmmoSpreadPerBullet // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8b70
	void ServerSolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarPlayerController.ServerSolarAmmoRangeSpeedDamage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de88f0
	void ServerSolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarPlayerController.ServerSolarAmmoFiring // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de86b0
	void ServerSolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarPlayerController.ServerSolarAmmoBoltAndMag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8520
	void ServerSolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float Lifetime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarPlayerController.ServerSolarAmmoBasicMovement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8320
	void ServerSetRoleAbilitySkillCDDurationDebugOnly(float InCD); // Function Solarland.SolarPlayerController.ServerSetRoleAbilitySkillCDDurationDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1de82a0
	void ServerSetPlayerLevel(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerSetPlayerLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8210
	void ServerSetHangUpBehavior(); // Function Solarland.SolarPlayerController.ServerSetHangUpBehavior // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de81f0
	void ServerSetFreeLook(bool bInFreeLook); // Function Solarland.SolarPlayerController.ServerSetFreeLook // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8160
	void ServerSetAppLifetimeState(enum class EAppLifetimeState NewLifeState); // Function Solarland.SolarPlayerController.ServerSetAppLifetimeState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de80e0
	void ServerSetActorOwner(struct AActor* TargetActor); // Function Solarland.SolarPlayerController.ServerSetActorOwner // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de8050
	void ServerRPCResetZoneBombsFire(); // Function Solarland.SolarPlayerController.ServerRPCResetZoneBombsFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7d50
	void ServerRespondSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.ServerRespondSkydivingLeaderTransferRequest // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de7f80
	void ServerRespondSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.ServerRespondSkydivingFollowInvitation // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de7eb0
	void ServerResetUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerResetUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1de7e90
	void ServerRequestSkydivingLeaderTransfer(struct ASolarPlayerState* DesiredLeaderPlayerState); // Function Solarland.SolarPlayerController.ServerRequestSkydivingLeaderTransfer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de7e00
	void ServerRequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.ServerRequestSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de7d70
	void ServerPlayerUpgrade(int32_t InLevel); // Function Solarland.SolarPlayerController.ServerPlayerUpgrade // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7cc0
	void ServerPlayerResumeSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerResumeSettlement // (Final|Native|Public) // @ game+0x1de7ca0
	void ServerPlayerRequestLogout(); // Function Solarland.SolarPlayerController.ServerPlayerRequestLogout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7c80
	void ServerPlayerOutBySelf(enum class ESCMPlayerOutPath InPath); // Function Solarland.SolarPlayerController.ServerPlayerOutBySelf // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7c00
	void ServerPlayerGoToSettlement(); // Function Solarland.SolarPlayerController.ServerPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x1de7bb0
	void ServerNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.ServerNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7ab0
	void ServerNetProfile(bool startOrStop); // Function Solarland.SolarPlayerController.ServerNetProfile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7a20
	void ServerInviteSkydivingFollow(struct ASolarPlayerState* FollowerPlayerState); // Function Solarland.SolarPlayerController.ServerInviteSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de7990
	void ServerInitTaskInfo(); // Function Solarland.SolarPlayerController.ServerInitTaskInfo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7970
	void ServerGoSpectatePreviousPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectatePreviousPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1de7950
	void ServerGoSpectatePlayerByPlayerIdInternal(struct FString SolarPlayerId); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerIdInternal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1de78b0
	void ServerGoSpectatePlayerByPlayerId(struct FString SolarPlayerId); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByPlayerId // (Final|Native|Public|BlueprintCallable) // @ game+0x1de7810
	void ServerGoSpectatePlayerByIndex_Internal(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex_Internal // (Final|Net|Native|Event|Private|NetServer) // @ game+0x1de7780
	void ServerGoSpectatePlayerByIndex(int32_t Index); // Function Solarland.SolarPlayerController.ServerGoSpectatePlayerByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1de7700
	void ServerGoSpectateNextPlayer(); // Function Solarland.SolarPlayerController.ServerGoSpectateNextPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1de76e0
	void ServerGainExperience(int32_t InExp); // Function Solarland.SolarPlayerController.ServerGainExperience // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7650
	void ServerEnableCheats(); // Function Solarland.SolarPlayerController.ServerEnableCheats // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7630
	void ServerCmd(struct FString Cmd); // Function Solarland.SolarPlayerController.ServerCmd // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7590
	void ServerClearUniqueSkillCDDebugOnly(); // Function Solarland.SolarPlayerController.ServerClearUniqueSkillCDDebugOnly // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1de7570
	void ServerChangeVehicleVectorProperty(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ServerChangeVehicleVectorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7420
	void ServerChangeVehicleRotatorProperty(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ServerChangeVehicleRotatorProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de72d0
	void ServerChangeVehicleIntProperty(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleIntProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de71f0
	void ServerChangeVehicleGASAttribute(struct FString InPropertyName, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleGASAttribute // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7110
	void ServerChangeVehicleFloatProperty(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ServerChangeVehicleFloatProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de7030
	void ServerChangeVehicleCurveProperty(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ServerChangeVehicleCurveProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de6ee0
	void ServerChangeVehicleBoolProperty(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ServerChangeVehicleBoolProperty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de6e00
	void ServerCancelSkydivingFollow(); // Function Solarland.SolarPlayerController.ServerCancelSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1de6de0
	void SendRepliableMessageServer(int32_t Message); // Function Solarland.SolarPlayerController.SendRepliableMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de6d50
	void SendRepliableMessageInMsgBucket(struct TArray<int32_t>& MessageIDs); // Function Solarland.SolarPlayerController.SendRepliableMessageInMsgBucket // (Final|Native|Public|HasOutParms) // @ game+0x1de6ca0
	void SendRepliableMessageByMessageID(int32_t& ID); // Function Solarland.SolarPlayerController.SendRepliableMessageByMessageID // (Final|Native|Public|HasOutParms) // @ game+0x1de6c10
	void SendQuickMessageServer(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.SendQuickMessageServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de6b30
	void SendQuickMessageNewServer(int32_t VoiceType); // Function Solarland.SolarPlayerController.SendQuickMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1de6aa0
	void SendQuickMessageNewClient(struct FString NickName, int32_t VoiceType, int32_t CharID, int32_t SkinId, bool bGender, int32_t PosInTeam, bool bLocalPlayer, bool bShowLocMessage); // Function Solarland.SolarPlayerController.SendQuickMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de6840
	void SendQuickMessageClient(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendQuickMessageClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de6690
	void SendLocalizationTeamMessageServer(int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x1de6540
	void SendLocalizationTeamMessageNewServer(struct TArray<struct FLocTextParam> TextParams, int32_t SoundID1, int32_t SoundDI2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewServer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x1de6400
	void SendLocalizationTeamMessageNewClient(int32_t CharacterId, int32_t SkinId, bool bGender, int32_t SoundID1, struct FString NickName, struct TArray<struct FLocTextParam> TextParams, int32_t PosInTeam, int32_t SoundID2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageNewClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x1de6170
	void SendLocalizationTeamMessageClient(struct ASolarPlayerState* SenderPS, int32_t TextID, struct TArray<struct FLocTextParam> TextParams, struct FString SoundEvent, int32_t PosInTeam); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessageClient // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x1de5fb0
	void SendLocalizationTeamMessage(int32_t TextID, struct TMap<struct FString, int32_t>& TextParamsId, struct FString SoundEvent1, struct FString SoundEvent2); // Function Solarland.SolarPlayerController.SendLocalizationTeamMessage // (Final|Native|Public|HasOutParms|Const) // @ game+0x1de5db0
	void SendDamageTextDataNextTick(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarPlayerController.SendDamageTextDataNextTick // (Final|Native|Public|HasOutParms) // @ game+0x1de5cc0
	void RespondSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.RespondSkydivingLeaderTransferRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5bf0
	void RespondSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.RespondSkydivingFollowInvitation // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5b20
	void ResetPeekInput(); // Function Solarland.SolarPlayerController.ResetPeekInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5b00
	void ResetJoyStickControlInput(); // Function Solarland.SolarPlayerController.ResetJoyStickControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5ae0
	void ResetAllInput(); // Function Solarland.SolarPlayerController.ResetAllInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5ac0
	void RequestSkydivingLeaderTransfer(struct ASolarPlayerState* DesiredLeaderPlayerState); // Function Solarland.SolarPlayerController.RequestSkydivingLeaderTransfer // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5a40
	void RequestSkydivingFollow(struct ASolarPlayerState* LeaderPlayerState); // Function Solarland.SolarPlayerController.RequestSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x1de59c0
	void RequestNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter, float ValidEmojiUseDistance); // Function Solarland.SolarPlayerController.RequestNotifyShowEmoji // (Final|Native|Public) // @ game+0x1de58b0
	void RecordSpectateInfoToBI(struct FSpectateReportInfo& SpectateReportInfo); // Function Solarland.SolarPlayerController.RecordSpectateInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void QuickMessageLuaCall(struct FString Message, bool bSound); // Function Solarland.SolarPlayerController.QuickMessageLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x1de57d0
	int32_t QueryStage(); // Function Solarland.SolarPlayerController.QueryStage // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PushInputModeUIOnly(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport); // Function Solarland.SolarPlayerController.PushInputModeUIOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5680
	void PushInputModeGameOnly(struct FName Name, bool bShowCursor); // Function Solarland.SolarPlayerController.PushInputModeGameOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x1de55b0
	void PushInputModeGameAndUI(struct FName Name, bool bShowCursor, struct UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // Function Solarland.SolarPlayerController.PushInputModeGameAndUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5400
	void PostInputAction(struct FName ActionName, enum class EInputEvent KeyEvent); // Function Solarland.SolarPlayerController.PostInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5340
	void PostAkEventByName(struct FString EventName1, struct FString EventName2); // Function Solarland.SolarPlayerController.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1de5250
	void PopInputMode(struct FName Name); // Function Solarland.SolarPlayerController.PopInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1de51d0
	void PlayerGoToSettleMent(); // Function Solarland.SolarPlayerController.PlayerGoToSettleMent // (Final|Native|Public) // @ game+0x1de5190
	void PlayerGotoLobbyWithLogout(); // Function Solarland.SolarPlayerController.PlayerGotoLobbyWithLogout // (Final|Native|Public) // @ game+0x1de51b0
	void PassiveTriggeredVoice(enum class EPassiveTriggeredVoice VoiceType); // Function Solarland.SolarPlayerController.PassiveTriggeredVoice // (Final|Native|Public) // @ game+0x1de5110
	void OnVehiclePitchRotateInputDelegate__DelegateSignature(float InputValue); // DelegateFunction Solarland.SolarPlayerController.OnVehiclePitchRotateInputDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeamNumChangeFun(enum class ESCMDataChangeType ChangeType, int32_t OldValue, int32_t NewValue); // Function Solarland.SolarPlayerController.OnTeamNumChangeFun // (Final|Native|Public) // @ game+0x1de5010
	void OnTeammateHUDDodgeSet__DelegateSignature(bool bDodge); // DelegateFunction Solarland.SolarPlayerController.OnTeammateHUDDodgeSet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSuperScaningStart(struct TArray<struct FString>& InScanPlayers); // Function Solarland.SolarPlayerController.OnSuperScaningStart // (Final|Native|Public|HasOutParms) // @ game+0x1de4f40
	void OnSuperScaningRemovePlayer(struct FString InRemovePlayer); // Function Solarland.SolarPlayerController.OnSuperScaningRemovePlayer // (Final|Native|Public) // @ game+0x1de4ea0
	void OnSuperScaningEnd(); // Function Solarland.SolarPlayerController.OnSuperScaningEnd // (Final|Native|Public) // @ game+0x1de4e80
	void OnSpectateTargetItemsChanged(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetItemsChanged // (Final|Native|Public) // @ game+0x1de4e00
	void OnSpectateTargetChangedHandler(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* MySpecInfo); // Function Solarland.SolarPlayerController.OnSpectateTargetChangedHandler // (Final|Native|Protected) // @ game+0x1de4d40
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerController.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydivingStatusUpdated(struct ASolarPlayerState* SelfPlayerState, bool bInIsSkydiving); // Function Solarland.SolarPlayerController.OnSkydivingStatusUpdated // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnShowGameNotice(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.OnShowGameNotice // (Final|Native|Public|HasOutParms) // @ game+0x1de4bf0
	struct TArray<struct URotationBarMarkWidget*> OnShowActorMarkDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnShowActorMarkDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnSeamlessTravelEnd(); // Function Solarland.SolarPlayerController.OnSeamlessTravelEnd // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de4bd0
	void OnScopeAxisInput(float InAxisValue); // Function Solarland.SolarPlayerController.OnScopeAxisInput // (Final|Native|Private) // @ game+0x1de4b50
	void OnReviveSelfTriggered(bool bAppear); // Function Solarland.SolarPlayerController.OnReviveSelfTriggered // (Final|Native|Public|BlueprintCallable) // @ game+0x1de4ac0
	void OnReceivedSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerController.OnReceivedSkydivingLeaderTransferRequest // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReceivedSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState); // Function Solarland.SolarPlayerController.OnReceivedSkydivingFollowInvitation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnReceiveBattleEnd(); // Function Solarland.SolarPlayerController.OnReceiveBattleEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPutAwayWeaponPressed(); // Function Solarland.SolarPlayerController.OnPutAwayWeaponPressed // (Final|Native|Public) // @ game+0x1de4aa0
	void OnPlayerStateSpectateInfoRepHandler(struct ASolarSpectateInfo* SpecInfo); // Function Solarland.SolarPlayerController.OnPlayerStateSpectateInfoRepHandler // (Native|Public) // @ game+0x1de4a10
	void OnPlayerStateRepHandlerForSpectate(enum class EPlayerStateRepType RepType, struct APlayerState* InPlayerState); // Function Solarland.SolarPlayerController.OnPlayerStateRepHandlerForSpectate // (Final|Native|Public) // @ game+0x1de4950
	void OnPawnReplicated__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnPawnReplicated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature(int64_t& InItemInstanceId); // DelegateFunction Solarland.SolarPlayerController.OnNotifiedMarkedItemWasPickedUpDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnEnterVoyageDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerController.OnEnterVoyageDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnEnterLanding(); // Function Solarland.SolarPlayerController.OnEnterLanding // (Native|Public) // @ game+0x1de4860
	void OnCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.OnCustomizeLevelLoaded // (Final|Native|Public) // @ game+0x1de4840
	void OnCleanActorMarkWithWidgetsDelegate__DelegateSignature(struct TArray<struct URotationBarMarkWidget*> MarkWidgets); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithWidgetsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnCleanActorMarkWithActorsDelegate__DelegateSignature(struct TArray<struct AActor*> MarkActors); // DelegateFunction Solarland.SolarPlayerController.OnCleanActorMarkWithActorsDelegate__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	void OnCharacterRebirthLua(); // Function Solarland.SolarPlayerController.OnCharacterRebirthLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCharacterDeathLua(); // Function Solarland.SolarPlayerController.OnCharacterDeathLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCatchInputActionDelegate__DelegateSignature(struct FName ActionName, enum class EInputEvent InputEventType); // DelegateFunction Solarland.SolarPlayerController.OnCatchInputActionDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBeforeSpectateTargetChange(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarPlayerController.OnBeforeSpectateTargetChange // (Final|Native|Protected) // @ game+0x1de4780
	void OnAppHasReactivated(); // Function Solarland.SolarPlayerController.OnAppHasReactivated // (Final|Native|Public) // @ game+0x1de4760
	void OnAppHasDeactiveated(); // Function Solarland.SolarPlayerController.OnAppHasDeactiveated // (Final|Native|Public) // @ game+0x1de4740
	void NotifyMonsterSpawn(); // Function Solarland.SolarPlayerController.NotifyMonsterSpawn // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyCrouchIsLocked(); // Function Solarland.SolarPlayerController.NotifyCrouchIsLocked // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyAppReactivate(); // Function Solarland.SolarPlayerController.NotifyAppReactivate // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyAppHasDeactivate(); // Function Solarland.SolarPlayerController.NotifyAppHasDeactivate // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NofityCustomizeLevelLoaded(); // Function Solarland.SolarPlayerController.NofityCustomizeLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void MarkWorldInLevelLuaCall(struct FWorldMarkData& InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevelLuaCall // (Final|Native|Public|HasOutParms) // @ game+0x1de4620
	void MarkWorldInLevel(struct FWorldMarkData InWorldMarkedData); // Function Solarland.SolarPlayerController.MarkWorldInLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de4550
	void MarkPointInNavMapLuaCall(struct FVector2D& InMarkedPoint); // Function Solarland.SolarPlayerController.MarkPointInNavMapLuaCall // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1de44c0
	void MarkPointInNavMap(struct FVector2D InMarkedPoint, bool bFromWorldMark); // Function Solarland.SolarPlayerController.MarkPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1de43f0
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D MinimapPos); // Function Solarland.SolarPlayerController.MarkOnWorldByMinimapPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x1de4330
	void MarkedAsAppHasReactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasReactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de4720
	void MarkedAsAppHasDeactivated(); // Function Solarland.SolarPlayerController.MarkedAsAppHasDeactivated // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de4700
	void LuaShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.LuaShowUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaCallInputTouch(uint32_t Handle, enum class ETouchType Type, struct FVector2D& TouchLocation); // Function Solarland.SolarPlayerController.LuaCallInputTouch // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1de4220
	void LookUp(float Value); // Function Solarland.SolarPlayerController.LookUp // (Final|Native|Public) // @ game+0x1de41a0
	void LogMarkAndQuickVoice(int32_t Type, int32_t SubType); // Function Solarland.SolarPlayerController.LogMarkAndQuickVoice // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de40e0
	void KickMeOutAtDS(struct FString InPlayerID); // Function Solarland.SolarPlayerController.KickMeOutAtDS // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de4040
	void K2_ShowDamageText(float InDamage, struct FHitResult& InHitResult, struct AActor* InDamageSource, struct AController* InAutonomousController, struct FSolarPointDamageEvent& InPointDamageEvent); // Function Solarland.SolarPlayerController.K2_ShowDamageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1de3e30
	bool IsThirdPersonSpectateCameraMode(); // Function Solarland.SolarPlayerController.IsThirdPersonSpectateCameraMode // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3e00
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerController.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3dd0
	bool IsHasSkydiveAndEnd(); // Function Solarland.SolarPlayerController.IsHasSkydiveAndEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de3da0
	bool IsHasCharacterAndSkin(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarPlayerController.IsHasCharacterAndSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3ce0
	void InviteSkydivingFollow(struct ASolarPlayerState* FollowerPlayerState); // Function Solarland.SolarPlayerController.InviteSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3c60
	void InputWorldMarkReleased(); // Function Solarland.SolarPlayerController.InputWorldMarkReleased // (Final|Native|Public) // @ game+0x1de3c40
	void InputWorldMarkPressed(); // Function Solarland.SolarPlayerController.InputWorldMarkPressed // (Final|Native|Public) // @ game+0x1de3c20
	void InputVerticalJetReleased(); // Function Solarland.SolarPlayerController.InputVerticalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3c00
	void InputVerticalJetPressed(); // Function Solarland.SolarPlayerController.InputVerticalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3be0
	void InputVehicleInteractionReleased(); // Function Solarland.SolarPlayerController.InputVehicleInteractionReleased // (Final|Native|Public) // @ game+0x1de3bc0
	void InputVehicleInteractionPressed(); // Function Solarland.SolarPlayerController.InputVehicleInteractionPressed // (Final|Native|Public) // @ game+0x1de3ba0
	void InputUseMedicineReleased(); // Function Solarland.SolarPlayerController.InputUseMedicineReleased // (Final|Native|Public) // @ game+0x1de3b80
	void InputUseMedicinePressed(); // Function Solarland.SolarPlayerController.InputUseMedicinePressed // (Final|Native|Public) // @ game+0x1de3b60
	void InputToggleTertiaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleTertiaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x1de3b40
	void InputToggleSecondaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponReleased // (Final|Native|Public) // @ game+0x1de3b00
	void InputToggleSecondaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeaponPressed // (Final|Native|Public) // @ game+0x1de3ae0
	void InputToggleSecondaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputToggleSecondaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x1de3b20
	void InputTogglePrimaryWeaponReleased(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponReleased // (Final|Native|Public) // @ game+0x1de3aa0
	void InputTogglePrimaryWeaponPressed(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeaponPressed // (Final|Native|Public) // @ game+0x1de3a80
	void InputTogglePrimaryWeapon_Checkbox(); // Function Solarland.SolarPlayerController.InputTogglePrimaryWeapon_Checkbox // (Final|Native|Public) // @ game+0x1de3ac0
	void InputTogglePickupReleased(); // Function Solarland.SolarPlayerController.InputTogglePickupReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3a60
	void InputTogglePickupPressed(); // Function Solarland.SolarPlayerController.InputTogglePickupPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3a40
	bool InputTestPriority3Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority3Pressed // (Final|Native|Public) // @ game+0x1d147e0
	bool InputTestPriority2Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority2Pressed // (Final|Native|Public) // @ game+0x1d4fbf0
	bool InputTestPriority1Released(); // Function Solarland.SolarPlayerController.InputTestPriority1Released // (Final|Native|Public) // @ game+0x1d147e0
	bool InputTestPriority1Pressed(); // Function Solarland.SolarPlayerController.InputTestPriority1Pressed // (Final|Native|Public) // @ game+0x1d147e0
	void InputSwitchToSeatTwoPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatTwoPressed // (Final|Native|Public) // @ game+0x1de3a20
	void InputSwitchToSeatThreePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatThreePressed // (Final|Native|Public) // @ game+0x1de3a00
	void InputSwitchToSeatOnePressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatOnePressed // (Final|Native|Public) // @ game+0x1de39e0
	void InputSwitchToSeatFourPressed(); // Function Solarland.SolarPlayerController.InputSwitchToSeatFourPressed // (Final|Native|Public) // @ game+0x1de39c0
	void InputSwitchFireModeReleased(); // Function Solarland.SolarPlayerController.InputSwitchFireModeReleased // (Final|Native|Public) // @ game+0x1de39a0
	void InputSwitchFireModePressed(); // Function Solarland.SolarPlayerController.InputSwitchFireModePressed // (Final|Native|Public) // @ game+0x1de3980
	void InputStartRepairVehicleReleased(); // Function Solarland.SolarPlayerController.InputStartRepairVehicleReleased // (Final|Native|Public) // @ game+0x1de3960
	void InputSprintLockStart(); // Function Solarland.SolarPlayerController.InputSprintLockStart // (Final|Native|Public) // @ game+0x1de34e0
	void InputSprintFreeTerminate(); // Function Solarland.SolarPlayerController.InputSprintFreeTerminate // (Final|Native|Public) // @ game+0x1de3940
	void InputSprintFreeStart(); // Function Solarland.SolarPlayerController.InputSprintFreeStart // (Final|Native|Public) // @ game+0x1de3920
	void InputSprintFreeReleasedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreeReleasedOnPC // (Final|Native|Public) // @ game+0x1de3900
	void InputSprintFreePressedOnPC(); // Function Solarland.SolarPlayerController.InputSprintFreePressedOnPC // (Final|Native|Public) // @ game+0x1de38e0
	void InputShieldUpgradeReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeReleased // (Final|Native|Public) // @ game+0x1de38c0
	void InputShieldUpgradePressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradePressed // (Final|Native|Public) // @ game+0x1de38a0
	void InputShieldUpgradeCancelReleased(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelReleased // (Final|Native|Public) // @ game+0x1de3880
	void InputShieldUpgradeCancelPressed(); // Function Solarland.SolarPlayerController.InputShieldUpgradeCancelPressed // (Final|Native|Public) // @ game+0x1de3860
	void InputRoleAbilityTacticalReleased(); // Function Solarland.SolarPlayerController.InputRoleAbilityTacticalReleased // (Final|Native|Public) // @ game+0x1de3840
	void InputRoleAbilityTacticalPressed(); // Function Solarland.SolarPlayerController.InputRoleAbilityTacticalPressed // (Final|Native|Public) // @ game+0x1de3820
	void InputRoleAbilitySuperReleased(); // Function Solarland.SolarPlayerController.InputRoleAbilitySuperReleased // (Final|Native|Public) // @ game+0x1de3800
	void InputRoleAbilitySuperPressed(); // Function Solarland.SolarPlayerController.InputRoleAbilitySuperPressed // (Final|Native|Public) // @ game+0x1de37e0
	void InputRightMouseButtonReleased(); // Function Solarland.SolarPlayerController.InputRightMouseButtonReleased // (Final|Native|Public) // @ game+0x1de3420
	void InputRightMouseButtonPressed(); // Function Solarland.SolarPlayerController.InputRightMouseButtonPressed // (Final|Native|Public) // @ game+0x1de37c0
	void InputReviveSelfReleased(); // Function Solarland.SolarPlayerController.InputReviveSelfReleased // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InputReloadReleased(); // Function Solarland.SolarPlayerController.InputReloadReleased // (Final|Native|Public) // @ game+0x1de37a0
	void InputReloadPressed(); // Function Solarland.SolarPlayerController.InputReloadPressed // (Final|Native|Public) // @ game+0x1de3780
	void InputRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputRechargeShieldReleased // (Final|Native|Public) // @ game+0x1de31c0
	void InputRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputRechargeShieldPressed // (Final|Native|Public) // @ game+0x1de3760
	void InputQuickAdsReleased(); // Function Solarland.SolarPlayerController.InputQuickAdsReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3740
	void InputQuickAdsPressed(); // Function Solarland.SolarPlayerController.InputQuickAdsPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3720
	void InputPSTouchpadButton(float InValueX); // Function Solarland.SolarPlayerController.InputPSTouchpadButton // (Final|Native|Public) // @ game+0x1de3660
	void InputPickupReleased(); // Function Solarland.SolarPlayerController.InputPickupReleased // (Final|Native|Public) // @ game+0x1de3700
	void InputPickupPressed(); // Function Solarland.SolarPlayerController.InputPickupPressed // (Final|Native|Public) // @ game+0x1de36e0
	void InputMoveRight(float InValueY); // Function Solarland.SolarPlayerController.InputMoveRight // (Final|Native|Public) // @ game+0x1de35e0
	void InputMovementYReceived(float InValueY); // Function Solarland.SolarPlayerController.InputMovementYReceived // (Final|Native|Public) // @ game+0x1de35e0
	void InputMovementXReceived(float InValueX); // Function Solarland.SolarPlayerController.InputMovementXReceived // (Final|Native|Public) // @ game+0x1de3560
	void InputMoveForward(float InValueX); // Function Solarland.SolarPlayerController.InputMoveForward // (Final|Native|Public) // @ game+0x1de3560
	void InputMapPressed(); // Function Solarland.SolarPlayerController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3540
	void InputLeftFireReleased(); // Function Solarland.SolarPlayerController.InputLeftFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3520
	void InputLeftFirePressed(); // Function Solarland.SolarPlayerController.InputLeftFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3500
	void InputKeepSprintPressed(); // Function Solarland.SolarPlayerController.InputKeepSprintPressed // (Final|Native|Public) // @ game+0x1de34e0
	void InputJumpReleased(); // Function Solarland.SolarPlayerController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de34c0
	void InputJumpPressed(); // Function Solarland.SolarPlayerController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de34a0
	void InputInteractPressed(); // Function Solarland.SolarPlayerController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3480
	void InputHorizontalJetReleased(); // Function Solarland.SolarPlayerController.InputHorizontalJetReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3460
	void InputHorizontalJetPressed(); // Function Solarland.SolarPlayerController.InputHorizontalJetPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3440
	void InputGunsightReleased(); // Function Solarland.SolarPlayerController.InputGunsightReleased // (Final|Native|Public) // @ game+0x1de3420
	void InputGunsightPressed(); // Function Solarland.SolarPlayerController.InputGunsightPressed // (Final|Native|Public) // @ game+0x1de3400
	void InputGetOnVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOnVehicleReleased // (Final|Native|Public) // @ game+0x1de33e0
	void InputGetOffVehicleReleased(); // Function Solarland.SolarPlayerController.InputGetOffVehicleReleased // (Final|Native|Public) // @ game+0x1de33c0
	void InputFreeLookReleased(); // Function Solarland.SolarPlayerController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de33a0
	void InputFreeLookPressed(); // Function Solarland.SolarPlayerController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3380
	void InputFireReleased(); // Function Solarland.SolarPlayerController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3360
	void InputFirePressed(); // Function Solarland.SolarPlayerController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3340
	void InputEquip2Released(); // Function Solarland.SolarPlayerController.InputEquip2Released // (Final|Native|Public) // @ game+0x1de3320
	void InputEquip2Pressed(); // Function Solarland.SolarPlayerController.InputEquip2Pressed // (Final|Native|Public) // @ game+0x1de3300
	void InputEquip1Released(); // Function Solarland.SolarPlayerController.InputEquip1Released // (Final|Native|Public) // @ game+0x1de32e0
	void InputEquip1Pressed(); // Function Solarland.SolarPlayerController.InputEquip1Pressed // (Final|Native|Public) // @ game+0x1de32c0
	void InputEjectReleased(); // Function Solarland.SolarPlayerController.InputEjectReleased // (Final|Native|Public) // @ game+0x1de32a0
	void InputEjectPressed(); // Function Solarland.SolarPlayerController.InputEjectPressed // (Final|Native|Public) // @ game+0x1de3280
	void InputDriveVehicleReleased(); // Function Solarland.SolarPlayerController.InputDriveVehicleReleased // (Final|Native|Public) // @ game+0x1de3260
	void InputCrouchReleased(); // Function Solarland.SolarPlayerController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3240
	void InputCrouchPressed(); // Function Solarland.SolarPlayerController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3220
	void InputCancelVehicleAbilityReleased(); // Function Solarland.SolarPlayerController.InputCancelVehicleAbilityReleased // (Final|Native|Public) // @ game+0x1de3200
	void InputBuilding(); // Function Solarland.SolarPlayerController.InputBuilding // (Final|Native|Public) // @ game+0x1de31e0
	void InputBigRechargeShieldReleased(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldReleased // (Final|Native|Public) // @ game+0x1de31c0
	void InputBigRechargeShieldPressed(); // Function Solarland.SolarPlayerController.InputBigRechargeShieldPressed // (Final|Native|Public) // @ game+0x1de31a0
	void InputBackpackReleased(); // Function Solarland.SolarPlayerController.InputBackpackReleased // (Final|Native|Public) // @ game+0x1de3180
	void InputBackpackPressed(); // Function Solarland.SolarPlayerController.InputBackpackPressed // (Final|Native|Public) // @ game+0x1de3160
	void InputAltFireReleased(); // Function Solarland.SolarPlayerController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3140
	void InputAltFirePressed(); // Function Solarland.SolarPlayerController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3120
	void InputActiveVehicleSecondAbilityReleased(); // Function Solarland.SolarPlayerController.InputActiveVehicleSecondAbilityReleased // (Final|Native|Public) // @ game+0x1de3100
	void InputActiveVehicleSecondAbilityPressed(); // Function Solarland.SolarPlayerController.InputActiveVehicleSecondAbilityPressed // (Final|Native|Public) // @ game+0x1de30a0
	void InputActiveVehicleFirstAbilityReleased(); // Function Solarland.SolarPlayerController.InputActiveVehicleFirstAbilityReleased // (Final|Native|Public) // @ game+0x1de30e0
	void InputActiveVehicleFirstAbilityPressed(); // Function Solarland.SolarPlayerController.InputActiveVehicleFirstAbilityPressed // (Final|Native|Public) // @ game+0x1de3060
	void InputActionSecondaryReleased(); // Function Solarland.SolarPlayerController.InputActionSecondaryReleased // (Final|Native|Public) // @ game+0x1de30c0
	void InputActionSecondaryPressed(); // Function Solarland.SolarPlayerController.InputActionSecondaryPressed // (Final|Native|Public) // @ game+0x1de30a0
	void InputActionPrimaryReleased(); // Function Solarland.SolarPlayerController.InputActionPrimaryReleased // (Final|Native|Public) // @ game+0x1de3080
	void InputActionPrimaryPressed(); // Function Solarland.SolarPlayerController.InputActionPrimaryPressed // (Final|Native|Public) // @ game+0x1de3060
	bool IfSolarCharacterIsDriver(); // Function Solarland.SolarPlayerController.IfSolarCharacterIsDriver // (Final|Native|Public) // @ game+0x1de3030
	void HandleBeginSpectateRequest(); // Function Solarland.SolarPlayerController.HandleBeginSpectateRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x1de3010
	void GyroscopeTilt(struct FVector Tilt); // Function Solarland.SolarPlayerController.GyroscopeTilt // (Final|Native|Public|HasDefaults) // @ game+0x1de2f80
	void GyroscopeRotationRate(struct FVector RotationRate); // Function Solarland.SolarPlayerController.GyroscopeRotationRate // (Final|Native|Public|HasDefaults) // @ game+0x1de2ef0
	struct ASolarCharacter* GetViewportFocusedCharacter(bool bReturnPossessedCharacterIfSpectateNull); // Function Solarland.SolarPlayerController.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2e50
	struct FVector2D GetViewportCenter(); // Function Solarland.SolarPlayerController.GetViewportCenter // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2e10
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerController.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2db0
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerController.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2d80
	struct ASolarCharacter* GetSpectatedCharacter(); // Function Solarland.SolarPlayerController.GetSpectatedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2de0
	struct ASolarPlayerState* GetSolarViewPlayerState(); // Function Solarland.SolarPlayerController.GetSolarViewPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2d50
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarPlayerController.GetSolarPlayerState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2d10
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerController.GetSolarCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2cd0
	enum class EPlayerNetStateInGame GetPlayNetStateInGame(); // Function Solarland.SolarPlayerController.GetPlayNetStateInGame // (Final|Native|Public) // @ game+0x1de2a00
	struct FRotator GetPlayerViewRotation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2be0
	struct FVector GetPlayerViewLocation(bool bWithoutCameraModifiers, bool bWithRotationInput); // Function Solarland.SolarPlayerController.GetPlayerViewLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2af0
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerController.GetPlayerStatData // (Final|Native|Public) // @ game+0x1de2ac0
	struct FString GetPlayerID(); // Function Solarland.SolarPlayerController.GetPlayerID // (Native|Public|Const) // @ game+0x1de2a30
	struct FString GetNoticeLocalText(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarPlayerController.GetNoticeLocalText // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	char GetMyTeamID(); // Function Solarland.SolarPlayerController.GetMyTeamID // (Native|Public|Const) // @ game+0x1de29c0
	char GetMyPosInTeam(); // Function Solarland.SolarPlayerController.GetMyPosInTeam // (Final|Native|Public|Const) // @ game+0x1de2990
	struct FVector2D GetMyMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.GetMyMarkedPointInNavMap // (Final|Native|Public|HasDefaults|Const) // @ game+0x1de2950
	int32_t GetMultiKillNum(); // Function Solarland.SolarPlayerController.GetMultiKillNum // (Final|Native|Public|Const) // @ game+0x1de2920
	int32_t GetKillNum(); // Function Solarland.SolarPlayerController.GetKillNum // (Final|Native|Public|Const) // @ game+0x1de28c0
	int32_t GetKillingSpreesNum(); // Function Solarland.SolarPlayerController.GetKillingSpreesNum // (Final|Native|Public|Const) // @ game+0x1de28f0
	bool GetIsDropAndPickUpItemOrWeaponSwitchOnValue(); // Function Solarland.SolarPlayerController.GetIsDropAndPickUpItemOrWeaponSwitchOnValue // (Final|Native|Public) // @ game+0x1de2890
	struct USolarInputModePolicyComponent* GetInputModePolicyComp(); // Function Solarland.SolarPlayerController.GetInputModePolicyComp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2870
	struct FSolarInputModeDataBase GetInputMode(struct FName Name, enum class ESolarInputMode& OutInputMode, bool& bFound); // Function Solarland.SolarPlayerController.GetInputMode // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2750
	struct USolarCameraComponent* GetCurrentCameraComponent(); // Function Solarland.SolarPlayerController.GetCurrentCameraComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de25c0
	void GetControlledVehiclePropertyContainer(struct TArray<struct UObject*>& OutObjects); // Function Solarland.SolarPlayerController.GetControlledVehiclePropertyContainer // (Final|Native|Public|HasOutParms) // @ game+0x1de2510
	struct FRotator GetCharacterViewRotation(); // Function Solarland.SolarPlayerController.GetCharacterViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de24d0
	struct FRotator GetCameraRotation(); // Function Solarland.SolarPlayerController.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2480
	struct FVector GetCameraLocation(); // Function Solarland.SolarPlayerController.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2430
	struct ASolarCharacter* GetCameraFocusedCharacter(); // Function Solarland.SolarPlayerController.GetCameraFocusedCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2400
	float GetCameraDefaultFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraDefaultFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de23d0
	float GetCameraCurrentFOVAngle(); // Function Solarland.SolarPlayerController.GetCameraCurrentFOVAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de23a0
	struct USolarCameraComponent* GetActiveCamera(); // Function Solarland.SolarPlayerController.GetActiveCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de2370
	void ForceCompleteClientBlendToSpectateTarget(); // Function Solarland.SolarPlayerController.ForceCompleteClientBlendToSpectateTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de2350
	void ExcludeDifferentTeam(int32_t TeamID); // Function Solarland.SolarPlayerController.ExcludeDifferentTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1de22d0
	void EndOBCurrentBattle(); // Function Solarland.SolarPlayerController.EndOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1de22b0
	void DropPassengerNotification(); // Function Solarland.SolarPlayerController.DropPassengerNotification // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de2290
	void DestroyCharacterCorpse(); // Function Solarland.SolarPlayerController.DestroyCharacterCorpse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de2270
	void DebugUpdateTask(); // Function Solarland.SolarPlayerController.DebugUpdateTask // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void DebugSetPlayerData(); // Function Solarland.SolarPlayerController.DebugSetPlayerData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void DebugInitTask(); // Function Solarland.SolarPlayerController.DebugInitTask // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CustomModeShowNotice(int32_t InType, int32_t InNoticeID, struct UObject* InClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarPlayerController.CustomModeShowNotice // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CustomAntiCheatDataExport(struct TArray<struct FString>& DataName, struct TArray<struct FString>& DataContent); // Function Solarland.SolarPlayerController.CustomAntiCheatDataExport // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ClientSyncPlayerSelfReport(struct FSolarPlayerReport SelfReport, struct FSolarGameModeInfo GameInfo); // Function Solarland.SolarPlayerController.ClientSyncPlayerSelfReport // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de2180
	void ClientStartReviveItemRecycleCountDown(int32_t CurrentTime, int32_t DurationTime); // Function Solarland.SolarPlayerController.ClientStartReviveItemRecycleCountDown // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1de20c0
	void ClientShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SolarPlayerController.ClientShowUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1fd0
	void ClientShowDiePage(); // Function Solarland.SolarPlayerController.ClientShowDiePage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1fb0
	void ClientReviveWillBeDisabledHint(int32_t Duration); // Function Solarland.SolarPlayerController.ClientReviveWillBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1de1f20
	void ClientReviveBeDisabledHint(); // Function Solarland.SolarPlayerController.ClientReviveBeDisabledHint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x1de1f00
	void ClientRespondSkydivingLeaderTransferRequest(struct ASolarPlayerState* DesiredLeaderPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.ClientRespondSkydivingLeaderTransferRequest // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1de1e30
	void ClientRespondSkydivingFollowInvitation(struct ASolarPlayerState* FollowerPlayerState, bool bAgreed); // Function Solarland.SolarPlayerController.ClientRespondSkydivingFollowInvitation // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1de1d60
	void ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving(struct ASolarPlayerState* NewLeaderPlayerState, struct ASolarPlayerState* OldLeaderPlayerState); // Function Solarland.SolarPlayerController.ClientRespondSkydivingFollowAutoChangedOnLeaderLeaving // (Final|Net|Native|Event|Private|NetClient) // @ game+0x1de1c90
	void ClientRequestSkydivingLeaderTransfer(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerController.ClientRequestSkydivingLeaderTransfer // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1de1c00
	void ClientReplacePlayerKillEffect(struct AActor* InSource, struct AActor* InTarget); // Function Solarland.SolarPlayerController.ClientReplacePlayerKillEffect // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1b30
	void ClientReceviceDamageText(struct TArray<struct FSolarDamageText> InSolarDamageTextDatas); // Function Solarland.SolarPlayerController.ClientReceviceDamageText // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1a90
	void ClientPlayerGoToSettlement(struct TArray<struct FSolarPlayerReport> Reports, struct FSolarGameModeInfo GameInfo, struct TArray<int32_t> InSettlementPageIndexs, bool IsCustomRoom); // Function Solarland.SolarPlayerController.ClientPlayerGoToSettlement // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de18e0
	void ClientNotifyShowEmoji(int32_t EmojiID, struct ASolarCharacter* UseEmojiCharacter); // Function Solarland.SolarPlayerController.ClientNotifyShowEmoji // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1810
	void ClientNotifyCheatedPlayer(struct FText OutReason); // Function Solarland.SolarPlayerController.ClientNotifyCheatedPlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1750
	void ClientInviteSkydivingFollow(struct ASolarPlayerState* InviterPlayerState); // Function Solarland.SolarPlayerController.ClientInviteSkydivingFollow // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1de16c0
	void ClientDoCharacterOperation(struct FCharacterOperationEvent ChOperationEvt); // Function Solarland.SolarPlayerController.ClientDoCharacterOperation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1630
	void ClientCloseUI(struct FString UIName); // Function Solarland.SolarPlayerController.ClientCloseUI // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1590
	void ClientClearAudioListenerOverride(); // Function Solarland.SolarPlayerController.ClientClearAudioListenerOverride // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de1570
	void ClientCharacterIsDead(); // Function Solarland.SolarPlayerController.ClientCharacterIsDead // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x1de1520
	void ClientBeginOBCurrentBattleInternal(); // Function Solarland.SolarPlayerController.ClientBeginOBCurrentBattleInternal // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1de1500
	void ClearMarkedPointInNavMapLuaCall(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMapLuaCall // (Final|Native|Public) // @ game+0x1de14e0
	void ClearMarkedPointInNavMap(); // Function Solarland.SolarPlayerController.ClearMarkedPointInNavMap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de14c0
	void ChangeVehicleVectorPropertyInternal(struct FString InPropertyName, float InX, float InY, float InZ); // Function Solarland.SolarPlayerController.ChangeVehicleVectorPropertyInternal // (Final|Native|Public) // @ game+0x1de1360
	void ChangeVehicleRotatorPropertyInternal(struct FString InPropertyName, float InPitch, float InYaw, float InRoll); // Function Solarland.SolarPlayerController.ChangeVehicleRotatorPropertyInternal // (Final|Native|Public) // @ game+0x1de1360
	void ChangeVehicleIntPropertyInternal(struct FString InPropertyName, int32_t InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleIntPropertyInternal // (Final|Native|Public) // @ game+0x1de1280
	void ChangeVehicleFloatPropertyInternal(struct FString InPropertyName, float InFloat); // Function Solarland.SolarPlayerController.ChangeVehicleFloatPropertyInternal // (Final|Native|Public) // @ game+0x1de11a0
	void ChangeVehicleCurvePropertyInternal(struct FString InPropertyName, char InChangeType, float InKey, float InValue); // Function Solarland.SolarPlayerController.ChangeVehicleCurvePropertyInternal // (Final|Native|Public) // @ game+0x1de1040
	void ChangeVehicleBoolPropertyInternal(struct FString InPropertyName, bool InBool); // Function Solarland.SolarPlayerController.ChangeVehicleBoolPropertyInternal // (Final|Native|Public) // @ game+0x1de0f60
	bool CanWorldMark(); // Function Solarland.SolarPlayerController.CanWorldMark // (Final|Native|Public) // @ game+0x1de0f10
	bool CanSolarCharacterLaunchJetPack(); // Function Solarland.SolarPlayerController.CanSolarCharacterLaunchJetPack // (Final|Native|Public) // @ game+0x1de0ee0
	bool CanSolarCharacterInput(); // Function Solarland.SolarPlayerController.CanSolarCharacterInput // (Final|Native|Public) // @ game+0x1de0eb0
	bool CanSolarCharacterCrouch(); // Function Solarland.SolarPlayerController.CanSolarCharacterCrouch // (Final|Native|Public) // @ game+0x1de0e80
	void CancelSkydivingFollow(); // Function Solarland.SolarPlayerController.CancelSkydivingFollow // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0f40
	void BuyRescurrectionEnded(); // Function Solarland.SolarPlayerController.BuyRescurrectionEnded // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0e60
	void BuildSkydivingFollowOnLeavingTeam(bool bIgnoreNotification); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnLeavingTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0dd0
	void BuildSkydivingFollowOnEnteringTeam(); // Function Solarland.SolarPlayerController.BuildSkydivingFollowOnEnteringTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0db0
	void BindDelegatesDependGameState(); // Function Solarland.SolarPlayerController.BindDelegatesDependGameState // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0d90
	void BeNotifiedMarkedItemWasPickedUp(int64_t InItemInstanceId); // Function Solarland.SolarPlayerController.BeNotifiedMarkedItemWasPickedUp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de0ce0
	void BeginOBCurrentBattle(); // Function Solarland.SolarPlayerController.BeginOBCurrentBattle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1de0d70
	void BackToLobby(); // Function Solarland.SolarPlayerController.BackToLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1de0cc0
	void AssembleCustomAntiCheatData(struct ASolarWeapon* ActiveWeapon, struct ASolarVehiclePawn* BoardedVehicle); // Function Solarland.SolarPlayerController.AssembleCustomAntiCheatData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void AntiCheatDataSchedulerUpload(struct TArray<struct FString> DataName, struct TArray<struct FString> DataContent, struct FFixedAntiCheatData FixedData); // Function Solarland.SolarPlayerController.AntiCheatDataSchedulerUpload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1de0b20
	void AddTeammateCandidate(struct ASolarCharacter* Candidate, int32_t TeamID); // Function Solarland.SolarPlayerController.AddTeammateCandidate // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0a60
	void AddRightPeekInput(); // Function Solarland.SolarPlayerController.AddRightPeekInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0a40
	void AddLeftPeekInput(); // Function Solarland.SolarPlayerController.AddLeftPeekInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1de0a20
};

// Class Solarland.SCMPlayerController
// Size: 0xc50 (Inherited: 0xc48)
struct ASCMPlayerController : ASolarPlayerController {
	struct USCMPlayerRPCComponent* RpcComponent; // 0xc48(0x08)

	void ServerHandlePlayerLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerController.ServerHandlePlayerLevelLoaded // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1cb6b30
	void RequestUpdataDataManager(); // Function Solarland.SCMPlayerController.RequestUpdataDataManager // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1cb6a80
};

// Class Solarland.SCMPlayerRPCComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USCMPlayerRPCComponent : UActorComponent {

	void ReceivedLevelLoaded(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivedCharacter(); // Function Solarland.SCMPlayerRPCComponent.ReceivedCharacter // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivedBeginLevelLoad(struct FString LevelName); // Function Solarland.SCMPlayerRPCComponent.ReceivedBeginLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SCMPlayerStart
// Size: 0x2b8 (Inherited: 0x258)
struct ASCMPlayerStart : APlayerStart {
	float Distance; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct FString Side; // 0x260(0x10)
	struct FString Job; // 0x270(0x10)
	struct FString ElementID; // 0x280(0x10)
	enum class ESCMMapElementType Type; // 0x290(0x01)
	enum class ESCMMapElementStateType State; // 0x291(0x01)
	enum class ESCMMapElementVisibilityType Visibility; // 0x292(0x01)
	char pad_293[0x1]; // 0x293(0x01)
	struct FName ElementName; // 0x294(0x08)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TArray<struct FVector> PlayerLocations; // 0x2a0(0x10)
	char pad_2B0[0x8]; // 0x2b0(0x08)

	enum class ESCMMapElementVisibilityType SetElementVisibility(enum class ESCMMapElementVisibilityType NewType); // Function Solarland.SCMPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x1cb6d80
	enum class ESCMMapElementStateType SetElementState(enum class ESCMMapElementStateType NewState); // Function Solarland.SCMPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x1cb6c60
	void OnElementVisibilityChanged(enum class ESCMMapElementVisibilityType CurrentVisibility); // Function Solarland.SCMPlayerStart.OnElementVisibilityChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnElementStateChanged(enum class ESCMMapElementStateType CurrentState); // Function Solarland.SCMPlayerStart.OnElementStateChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarPlayerState
// Size: 0xa18 (Inherited: 0x330)
struct ASolarPlayerState : APlayerState {
	struct FMulticastInlineDelegate OnTeammatePlayerStateRepDelegate; // 0x330(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInPreparatoryPhaseDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnTeammatePlayerStateRemovedInBattlePhaseDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnPlayerChangedGoldsDelegate; // 0x360(0x10)
	int32_t Gold; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct TArray<int32_t> CostedGolds; // 0x378(0x10)
	struct TArray<int32_t> ReceivedGolds; // 0x388(0x10)
	int32_t CharacterId; // 0x398(0x04)
	int32_t SkinId; // 0x39c(0x04)
	struct FString ClanId; // 0x3a0(0x10)
	struct FString ClanName; // 0x3b0(0x10)
	struct FString ClanShortName; // 0x3c0(0x10)
	int32_t BagId; // 0x3d0(0x04)
	int32_t CapsuleID; // 0x3d4(0x04)
	struct FString SolarPlayerId; // 0x3d8(0x10)
	struct FString NickName; // 0x3e8(0x10)
	uint32_t BattleVoiceId; // 0x3f8(0x04)
	char TeamID; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	uint64_t UserId; // 0x400(0x08)
	char PosInTeam; // 0x408(0x01)
	char pad_409[0x7]; // 0x409(0x07)
	struct FString Side; // 0x410(0x10)
	struct FString Job; // 0x420(0x10)
	int32_t CharacterLevel; // 0x430(0x04)
	int32_t AvatarID; // 0x434(0x04)
	int32_t AvatarFrameID; // 0x438(0x04)
	int32_t Gender; // 0x43c(0x04)
	int32_t AccountLevel; // 0x440(0x04)
	int32_t FriendNum; // 0x444(0x04)
	int32_t RoleID; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct TArray<struct FMedalInfo> Medals; // 0x450(0x10)
	struct TArray<struct FBattleCharacterData> AllCharacterData; // 0x460(0x10)
	struct FBattleCharacterData CurUsedCharacterData; // 0x470(0x30)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x4a0(0x10)
	struct FLastBattleInfo LastBattleInfo; // 0x4b0(0x1c)
	int32_t RoleUltimateSkillCDState; // 0x4cc(0x04)
	struct TArray<int32_t> SettlementItems; // 0x4d0(0x10)
	struct TArray<struct FSettlementParam_ExtraRewardInfo> ExtraRewards; // 0x4e0(0x10)
	struct TArray<struct FSettlementReward> SettlementRewards; // 0x4f0(0x10)
	struct TArray<struct FSettlementCrateReward> CrateRewards; // 0x500(0x10)
	uint32_t PlayerNumber; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct TArray<int32_t> BackpackUnLockGridNumArr; // 0x518(0x10)
	struct TMap<int32_t, int32_t> VehicleSkinData; // 0x528(0x50)
	float CurrentHealth; // 0x578(0x04)
	float MaxHealth; // 0x57c(0x04)
	struct FShieldInfo CurShieldInfo; // 0x580(0x08)
	char ReviveItemNum; // 0x588(0x01)
	char ReviveCountByItem; // 0x589(0x01)
	char pad_58A[0x2]; // 0x58a(0x02)
	int32_t TalentID; // 0x58c(0x04)
	int32_t LikeValue; // 0x590(0x04)
	int32_t ReceivedGiftNum; // 0x594(0x04)
	int32_t SpectatorNum; // 0x598(0x04)
	enum class ETalentState TalentState; // 0x59c(0x01)
	bool HasBackendVerified; // 0x59d(0x01)
	bool HasGroupBackendVerified; // 0x59e(0x01)
	char pad_59F[0x1]; // 0x59f(0x01)
	struct FVector2D MarkedPointInNavMap; // 0x5a0(0x08)
	struct FVector SelfLastVehicleLocation; // 0x5a8(0x0c)
	struct FVector TeamLastVehicleLocation; // 0x5b4(0x0c)
	char CurrentPlayerStateInGame; // 0x5c0(0x01)
	char CurrentCharacterStateInGame; // 0x5c1(0x01)
	char pad_5C2[0x6]; // 0x5c2(0x06)
	struct FWorldMarkData MarkedWorldData; // 0x5c8(0x50)
	int32_t AccountFlag; // 0x618(0x04)
	int32_t ClanFlag; // 0x61c(0x04)
	struct TArray<int32_t> EquippedEmotes; // 0x620(0x10)
	struct FString OS; // 0x630(0x10)
	bool bIsSameTeamWithLocalPlayer; // 0x640(0x01)
	bool HasReconnection; // 0x641(0x01)
	char pad_642[0x6]; // 0x642(0x06)
	bool bHasHangUpBehavior; // 0x648(0x01)
	char pad_649[0x3]; // 0x649(0x03)
	float HangUpTime; // 0x64c(0x04)
	float OfflineBattleTime; // 0x650(0x04)
	int32_t Elo; // 0x654(0x04)
	int32_t RankLevel; // 0x658(0x04)
	int32_t RankLevel2; // 0x65c(0x04)
	char LobbyTeamMemberNum; // 0x660(0x01)
	char pad_661[0x27]; // 0x661(0x27)
	bool bTeamIDHasChanged; // 0x688(0x01)
	char pad_689[0x3]; // 0x689(0x03)
	int32_t RepliableMessageID; // 0x68c(0x04)
	float RepliableMessageStartTime; // 0x690(0x04)
	char pad_694[0xc]; // 0x694(0x0c)
	bool bIsOBPlayer; // 0x6a0(0x01)
	char pad_6A1[0x3]; // 0x6a1(0x03)
	struct FVector CharacterLocation; // 0x6a4(0x0c)
	int32_t WarmId; // 0x6b0(0x04)
	int32_t WarmType; // 0x6b4(0x04)
	bool AllowOtherJoin; // 0x6b8(0x01)
	char pad_6B9[0x3]; // 0x6b9(0x03)
	float WaitTimeBeforeEnterSpectateMode; // 0x6bc(0x04)
	struct FMulticastInlineDelegate OnSpectateInfoRep; // 0x6c0(0x10)
	struct ASolarPlayerState* KillerPlayerState; // 0x6d0(0x08)
	struct ASolarPlayerState* RevengePlayerState; // 0x6d8(0x08)
	struct ASolarSpectateInfo* SpectateInfo; // 0x6e0(0x08)
	enum class EPlayerNetStateInGame NetStateInGame; // 0x6e8(0x01)
	bool bHasLogin; // 0x6e9(0x01)
	char pad_6EA[0xe]; // 0x6ea(0x0e)
	bool bHasUpdateByServerData; // 0x6f8(0x01)
	char pad_6F9[0x7]; // 0x6f9(0x07)
	struct USolarReplayHighlightComponent* ReplayHightlightComp; // 0x700(0x08)
	int32_t KillNum; // 0x708(0x04)
	int32_t AssistNum; // 0x70c(0x04)
	struct FVector DeathPos; // 0x710(0x0c)
	int32_t ReconnectNum; // 0x71c(0x04)
	char pad_720[0x10]; // 0x720(0x10)
	float MultiKillDurationTime; // 0x730(0x04)
	char pad_734[0x24]; // 0x734(0x24)
	float TotalReceivedDamage; // 0x758(0x04)
	float TotalCausedDamage; // 0x75c(0x04)
	struct FSettlementTempData SettleSyncData; // 0x760(0xd8)
	struct TArray<struct ASolarPlayerState*> TeammatesState; // 0x838(0x10)
	int32_t PlayerRank; // 0x848(0x04)
	int32_t TeamRank; // 0x84c(0x04)
	bool IsAce; // 0x850(0x01)
	bool bMVP; // 0x851(0x01)
	bool IsVictory; // 0x852(0x01)
	char pad_853[0x1]; // 0x853(0x01)
	float MvpScore; // 0x854(0x04)
	float KDA; // 0x858(0x04)
	int32_t ResurrectionTimes; // 0x85c(0x04)
	int32_t CharacterExp; // 0x860(0x04)
	char pad_864[0x4]; // 0x864(0x04)
	struct TArray<int32_t> CharacterExpReason; // 0x868(0x10)
	int32_t AccountExp; // 0x878(0x04)
	char pad_87C[0x4]; // 0x87c(0x04)
	struct TMap<int32_t, int32_t> WeaponExps; // 0x880(0x50)
	int32_t Zomborg; // 0x8d0(0x04)
	int32_t ZomborgExtra; // 0x8d4(0x04)
	struct TArray<int32_t> StrategyConditionIDs; // 0x8d8(0x10)
	int32_t SettlementDisplayStrategyID; // 0x8e8(0x04)
	char pad_8EC[0x2]; // 0x8ec(0x02)
	enum class ESCMPlayerOutPath PlayerOutPath; // 0x8ee(0x01)
	char pad_8EF[0x1]; // 0x8ef(0x01)
	struct TArray<int32_t> UsedCharacterIDs; // 0x8f0(0x10)
	bool bHasSettled; // 0x900(0x01)
	bool isPlayerBattleEnd; // 0x901(0x01)
	char pad_902[0x2]; // 0x902(0x02)
	int32_t InteractValue; // 0x904(0x04)
	float LastInteractTime; // 0x908(0x04)
	float DamageFactor; // 0x90c(0x04)
	float VehicleProbability; // 0x910(0x04)
	bool bIsTimeoutPlayer; // 0x914(0x01)
	char bShowBattlePrompt : 1; // 0x915(0x01)
	char pad_915_1 : 7; // 0x915(0x01)
	char pad_916[0x1a]; // 0x916(0x1a)
	struct FExposeLocationMap ExposeLocationMap; // 0x930(0x58)
	struct TArray<struct ASolarPlayerState*> ExposeLocationArray; // 0x988(0x10)
	struct FVector PlayerLocation; // 0x998(0x0c)
	char pad_9A4[0x4]; // 0x9a4(0x04)
	struct ASolarPlayerState* ExposeTo; // 0x9a8(0x08)
	char pad_9B0[0x8]; // 0x9b0(0x08)
	char SkydivingLeaderPosInTeam; // 0x9b8(0x01)
	char SkydivingFollowFormationPos; // 0x9b9(0x01)
	enum class ESkydivingState SkydivingState; // 0x9ba(0x01)
	char pad_9BB[0x5]; // 0x9bb(0x05)
	struct USolarAchievementComponent* AchievementComponent; // 0x9c0(0x08)
	char pad_9C8[0x8]; // 0x9c8(0x08)
	struct TArray<int32_t> PreCompletedAchievementIDs; // 0x9d0(0x10)
	int32_t PlayerLevel; // 0x9e0(0x04)
	int32_t PlayerExperience; // 0x9e4(0x04)
	char pad_9E8[0x18]; // 0x9e8(0x18)
	struct ASpatializeInfoTrack* TrackInfo; // 0xa00(0x08)
	float TrackMaxRevealDistance; // 0xa08(0x04)
	enum class EAppLifetimeState AppLifetimeState; // 0xa0c(0x01)
	char pad_A0D[0x3]; // 0xa0d(0x03)
	int32_t TailFlameID; // 0xa10(0x04)
	char pad_A14[0x4]; // 0xa14(0x04)

	bool WillFollowMovementOfSkydivingLeader(); // Function Solarland.SolarPlayerState.WillFollowMovementOfSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df79f0
	void UpgradePlayerLevel(int32_t LevelAdded); // Function Solarland.SolarPlayerState.UpgradePlayerLevel // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df7970
	void UpdateCurUseCharacterData(int32_t InCharacterId); // Function Solarland.SolarPlayerState.UpdateCurUseCharacterData // (Final|Native|Public) // @ game+0x1df78f0
	void UpdateAICharacterDataList(struct FBattleCharacterData& InCharacterData); // Function Solarland.SolarPlayerState.UpdateAICharacterDataList // (Final|Native|Public|HasOutParms) // @ game+0x1df7840
	void SynchronizePlayerStateInGame(enum class EPlayerStateInGame InEPlayerStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizePlayerStateInGame // (Final|Native|Public) // @ game+0x1df7770
	void SynchronizeCharacterStateInGame(enum class ECharacterStateInGame InECharacterStateInGame, bool InIfOrNot); // Function Solarland.SolarPlayerState.SynchronizeCharacterStateInGame // (Final|Native|Public) // @ game+0x1df76a0
	void StatVehicleDriveTypeLuaCall(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveTypeLuaCall // (Final|Native|Public|BlueprintCallable) // @ game+0x1df7620
	void StatVehicleDriveType(int32_t DriveType); // Function Solarland.SolarPlayerState.StatVehicleDriveType // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1df7590
	void ShowTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates, struct ASolarPlayerState* InSpectateTargetPlayerState); // Function Solarland.SolarPlayerState.ShowTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1df74a0
	void SetRoleUltimateSkillCDState(int32_t NewState); // Function Solarland.SolarPlayerState.SetRoleUltimateSkillCDState // (Final|Native|Public) // @ game+0x1df7420
	void SetRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.SetRoleID // (Final|Native|Public) // @ game+0x1df73a0
	void SetPlayerNetStateInGame(enum class EPlayerNetStateInGame InPlayerNetStateInGame); // Function Solarland.SolarPlayerState.SetPlayerNetStateInGame // (Final|Native|Public) // @ game+0x1df7320
	void SetIsTimeoutPlayer(bool InValue); // Function Solarland.SolarPlayerState.SetIsTimeoutPlayer // (Final|Native|Public) // @ game+0x1df7290
	void SetIsSameTeamWithLocalPlayer(bool bIsSameTeam); // Function Solarland.SolarPlayerState.SetIsSameTeamWithLocalPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1df7200
	void SetIsPlayerBattleEnd(bool bPlayerBattleEnd); // Function Solarland.SolarPlayerState.SetIsPlayerBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1df7180
	void ServerUnexposeLocationToOtherOnce(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOtherOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x1df7080
	void ServerUnexposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerUnexposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x1df7000
	void ServerExposeLocationToOther(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.ServerExposeLocationToOther // (Final|Native|Public|BlueprintCallable) // @ game+0x1df6f80
	void ServerChangeRoleID(int32_t InRoleID); // Function Solarland.SolarPlayerState.ServerChangeRoleID // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1df6ef0
	void ReviseWeaponExp(int32_t weaponid, int32_t WeaponExp, int32_t CurLevel, int32_t CurExp); // Function Solarland.SolarPlayerState.ReviseWeaponExp // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cf33c0
	void ReceiveTeamIdReplicated(); // Function Solarland.SolarPlayerState.ReceiveTeamIdReplicated // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveTalentStateSet(enum class ETalentState InState); // Function Solarland.SolarPlayerState.ReceiveTalentStateSet // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveTalentIDReplication(enum class EPlayerStateRepType RepType, struct APlayerState* ClientOwnerPS); // Function Solarland.SolarPlayerState.ReceiveTalentIDReplication // (Final|Native|Protected) // @ game+0x1df6e30
	void ReceiveSideReplicatedAfter(); // Function Solarland.SolarPlayerState.ReceiveSideReplicatedAfter // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePostInitializeComponents(); // Function Solarland.SolarPlayerState.ReceivePostInitializeComponents // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool ReceiveGold(int32_t InReceivedGold, bool NeedSyncToServer, bool NeedSyncToDS); // Function Solarland.SolarPlayerState.ReceiveGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df6d20
	void ReceiveClientInitialize(struct AController* C); // Function Solarland.SolarPlayerState.ReceiveClientInitialize // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool PlayerIsResurrecting(); // Function Solarland.SolarPlayerState.PlayerIsResurrecting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool PlayerHasLogin(); // Function Solarland.SolarPlayerState.PlayerHasLogin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df6c40
	bool PlayerCanRebirthByReviveItem(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByReviveItem // (Final|Native|Public) // @ game+0x1df6c10
	bool PlayerCanRebirthByBuyResurrection(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByBuyResurrection // (Final|Native|Public|BlueprintCallable) // @ game+0x1df6be0
	bool PlayerCanRebirthByAllMeans(); // Function Solarland.SolarPlayerState.PlayerCanRebirthByAllMeans // (Final|Native|Public|BlueprintCallable) // @ game+0x1df6bb0
	bool PlayerCanRebirthBlueprint(); // Function Solarland.SolarPlayerState.PlayerCanRebirthBlueprint // (Native|Event|Protected|BlueprintEvent) // @ game+0x1d79e30
	bool PlayerCanRebirth(); // Function Solarland.SolarPlayerState.PlayerCanRebirth // (Native|Public|BlueprintCallable) // @ game+0x1df6b80
	bool PlayerCanBuyRescue(); // Function Solarland.SolarPlayerState.PlayerCanBuyRescue // (Native|Public|BlueprintCallable) // @ game+0x1df6b50
	void OnUpdatedPlayerStateLoginData(); // Function Solarland.SolarPlayerState.OnUpdatedPlayerStateLoginData // (Final|Native|Public) // @ game+0x1df6b30
	void OnTeammatePlayerStateRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnTeammatePlayerStateRemovedDelegate__DelegateSignature(char& InPosInTeam, bool InIsLastOne); // DelegateFunction Solarland.SolarPlayerState.OnTeammatePlayerStateRemovedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnStopReceiveExposedLocation(struct ASolarPlayerState* OtherPS); // Function Solarland.SolarPlayerState.OnStopReceiveExposedLocation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnStartResurrectProgress(int32_t InTextId, float InDuration, float InRemaining, bool bShowCancel); // Function Solarland.SolarPlayerState.OnStartResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1df69e0
	void OnSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x1df6920
	void OnSpectateInfoRep__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarPlayerState.OnSpectateInfoRep__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRequestStartResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestStartResurrect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRequestCancelResurrect(struct ADeathTreasureBox* InDeatbox); // Function Solarland.SolarPlayerState.OnRequestCancelResurrect // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnReplayRecordingStarted(); // Function Solarland.SolarPlayerState.OnReplayRecordingStarted // (Final|Native|Private) // @ game+0x1df6900
	void OnRep_UserId(); // Function Solarland.SolarPlayerState.OnRep_UserId // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_TotalReceivedDamage(); // Function Solarland.SolarPlayerState.OnRep_TotalReceivedDamage // (Final|Native|Private) // @ game+0x1df68e0
	void OnRep_TotalCausedDamage(); // Function Solarland.SolarPlayerState.OnRep_TotalCausedDamage // (Final|Native|Private) // @ game+0x1df68c0
	void OnRep_TeammatesState(); // Function Solarland.SolarPlayerState.OnRep_TeammatesState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_TeamLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_TeamLastVehicleLocation // (Native|Public) // @ game+0x1258bd0
	void OnRep_TeamId(); // Function Solarland.SolarPlayerState.OnRep_TeamId // (Final|Native|Public) // @ game+0x1df68a0
	void OnRep_TalentID(); // Function Solarland.SolarPlayerState.OnRep_TalentID // (Final|Native|Public) // @ game+0x1df6880
	void OnRep_TailFlameId(); // Function Solarland.SolarPlayerState.OnRep_TailFlameId // (Final|Native|Public) // @ game+0x1df6860
	void OnRep_SpectateInfo(); // Function Solarland.SolarPlayerState.OnRep_SpectateInfo // (Final|Native|Private) // @ game+0x1df6840
	void OnRep_SkydivingState(); // Function Solarland.SolarPlayerState.OnRep_SkydivingState // (Final|Native|Public) // @ game+0x1df6820
	void OnRep_SkydivingLeaderPosInTeam(); // Function Solarland.SolarPlayerState.OnRep_SkydivingLeaderPosInTeam // (Final|Native|Public) // @ game+0x1df6800
	void OnRep_SkinId(); // Function Solarland.SolarPlayerState.OnRep_SkinId // (Native|Public) // @ game+0x1258fd0
	void OnRep_Side(struct FString OldSide); // Function Solarland.SolarPlayerState.OnRep_Side // (Native|Public) // @ game+0x1df6760
	void OnRep_SelfLastVehicleLocation(); // Function Solarland.SolarPlayerState.OnRep_SelfLastVehicleLocation // (Native|Public) // @ game+0x12591b0
	void OnRep_RoleUltimateSkillCDState(); // Function Solarland.SolarPlayerState.OnRep_RoleUltimateSkillCDState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_RoleID(); // Function Solarland.SolarPlayerState.OnRep_RoleID // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_ReviveItemNum(); // Function Solarland.SolarPlayerState.OnRep_ReviveItemNum // (Native|Public) // @ game+0x1259470
	void OnRep_ReviveCountByItem(); // Function Solarland.SolarPlayerState.OnRep_ReviveCountByItem // (Native|Public) // @ game+0x1259210
	void OnRep_RepliableMsg(); // Function Solarland.SolarPlayerState.OnRep_RepliableMsg // (Final|Native|Public) // @ game+0x1df6740
	void OnRep_PosInTeam(char& InLastPosInTeam); // Function Solarland.SolarPlayerState.OnRep_PosInTeam // (Native|Public|HasOutParms) // @ game+0x1df66a0
	void OnRep_PlayerLocation(); // Function Solarland.SolarPlayerState.OnRep_PlayerLocation // (Native|Protected) // @ game+0x1259150
	void OnRep_PlayerLevel(); // Function Solarland.SolarPlayerState.OnRep_PlayerLevel // (Native|Public) // @ game+0x1258ad0
	void OnRep_PlayerExp(); // Function Solarland.SolarPlayerState.OnRep_PlayerExp // (Native|Public) // @ game+0x1259170
	void OnRep_NickName(struct FString OldNickName); // Function Solarland.SolarPlayerState.OnRep_NickName // (Final|Native|Public) // @ game+0x1df6600
	void OnRep_NetStateInGame(); // Function Solarland.SolarPlayerState.OnRep_NetStateInGame // (Native|Public) // @ game+0x12590f0
	void OnRep_MaxHealth(); // Function Solarland.SolarPlayerState.OnRep_MaxHealth // (Native|Public) // @ game+0x1258a90
	void OnRep_MarkedWorldData(); // Function Solarland.SolarPlayerState.OnRep_MarkedWorldData // (Native|Public) // @ game+0x1258db0
	void OnRep_MarkedPointInNavMap(); // Function Solarland.SolarPlayerState.OnRep_MarkedPointInNavMap // (Native|Public) // @ game+0x1258af0
	void OnRep_KillNum(); // Function Solarland.SolarPlayerState.OnRep_KillNum // (Final|Native|Public) // @ game+0x1df65e0
	void OnRep_Job(); // Function Solarland.SolarPlayerState.OnRep_Job // (Final|Native|Public) // @ game+0x8ba190
	void OnRep_Gold(); // Function Solarland.SolarPlayerState.OnRep_Gold // (Final|Native|Public) // @ game+0x1df65c0
	void OnRep_ExposeLocationArray(); // Function Solarland.SolarPlayerState.OnRep_ExposeLocationArray // (Native|Protected) // @ game+0x1259450
	void OnRep_CurShieldInfo(struct FShieldInfo& InLastShieldInfo); // Function Solarland.SolarPlayerState.OnRep_CurShieldInfo // (Native|Public|HasOutParms) // @ game+0x1df63e0
	void OnRep_CurrentPlayerStateInGame(char& InLastPlayerStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentPlayerStateInGame // (Native|Public|HasOutParms) // @ game+0x1df6520
	void OnRep_CurrentHealth(); // Function Solarland.SolarPlayerState.OnRep_CurrentHealth // (Native|Public) // @ game+0x1258bb0
	void OnRep_CurrentCharacterStateInGame(char& InLastCharacterStateInGame); // Function Solarland.SolarPlayerState.OnRep_CurrentCharacterStateInGame // (Native|Public|HasOutParms) // @ game+0x1df6480
	void OnRep_ClanId(); // Function Solarland.SolarPlayerState.OnRep_ClanId // (Native|Public) // @ game+0x1259030
	void OnRep_ClanFlag(); // Function Solarland.SolarPlayerState.OnRep_ClanFlag // (Final|Native|Public) // @ game+0x1df63c0
	void OnRep_CharacterId(); // Function Solarland.SolarPlayerState.OnRep_CharacterId // (Native|Public) // @ game+0x1258a50
	void OnRep_BattleVoiceId(); // Function Solarland.SolarPlayerState.OnRep_BattleVoiceId // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_BagId(); // Function Solarland.SolarPlayerState.OnRep_BagId // (Final|Native|Public) // @ game+0x1df63a0
	void OnRep_BackpackUnLockGridNumArr(); // Function Solarland.SolarPlayerState.OnRep_BackpackUnLockGridNumArr // (Native|Public) // @ game+0x1258e10
	void OnRep_AccountFlag(); // Function Solarland.SolarPlayerState.OnRep_AccountFlag // (Final|Native|Public) // @ game+0x1df6380
	void OnRefreshReviveInfo(); // Function Solarland.SolarPlayerState.OnRefreshReviveInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x1df6360
	void OnReceiveExposedLocation(struct ASolarPlayerState* OtherPS, struct FVector& Location); // Function Solarland.SolarPlayerState.OnReceiveExposedLocation // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	struct FString OnPlayerUpgrade(int32_t NewLevel, bool bFromServer); // Function Solarland.SolarPlayerState.OnPlayerUpgrade // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerUpdateStatData(enum class EStatisticsType InType); // Function Solarland.SolarPlayerState.OnPlayerUpdateStatData // (Final|Native|Public) // @ game+0x1df62e0
	void OnPlayerGainExperience(int32_t GainedExp, int32_t CurrentExp, int32_t TotalExp, enum class EExpBehaviorType BehaviorType); // Function Solarland.SolarPlayerState.OnPlayerGainExperience // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerChangedGolds(enum class EPlayerChangedGoldType ChangedGoldType, int32_t CostGoldNum, enum class EPlayerChangedGoldResult CostResult); // Function Solarland.SolarPlayerState.OnPlayerChangedGolds // (Net|Native|Event|Public|NetClient) // @ game+0x1df61e0
	void OnOtherPlayerStopSpectateMyTeam(struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMyTeam // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnOtherPlayerStopSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerStopSpectateMe // (Final|Native|Private) // @ game+0x1df6120
	void OnOtherPlayerBeginSpectateMe(struct ASolarPlayerState* InSpectatorPlayerState, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnOtherPlayerBeginSpectateMe // (Final|Native|Private) // @ game+0x1df6060
	void OnDamageChanged__DelegateSignature(float Damage); // DelegateFunction Solarland.SolarPlayerState.OnDamageChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnClientSpectateTargetChanged(struct ASolarPlayerState* InOldTarget, struct ASolarSpectateInfo* InSpectateInfo); // Function Solarland.SolarPlayerState.OnClientSpectateTargetChanged // (Final|Native|Private) // @ game+0x1df5fa0
	void OnCancelResurrectProgress(int32_t InTextId); // Function Solarland.SolarPlayerState.OnCancelResurrectProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1df5f20
	void NotifyUpdateTeamMateLevelUI(); // Function Solarland.SolarPlayerState.NotifyUpdateTeamMateLevelUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyAddExperience(int32_t ExpAdded); // Function Solarland.SolarPlayerState.NotifyAddExperience // (Net|Native|Event|Public|NetClient) // @ game+0x1df5e90
	bool NeedPerformSpectateInfoOnSimulate(); // Function Solarland.SolarPlayerState.NeedPerformSpectateInfoOnSimulate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5e60
	int32_t LuaGetExpFromWeaponImplementation(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.LuaGetExpFromWeaponImplementation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsWaitingLogin(); // Function Solarland.SolarPlayerState.IsWaitingLogin // (Native|Public|Const) // @ game+0x1dbbc10
	bool IsUsingClanForFlag(); // Function Solarland.SolarPlayerState.IsUsingClanForFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5e30
	bool IsUnfollowShortcutEnabled(); // Function Solarland.SolarPlayerState.IsUnfollowShortcutEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5e00
	bool IsTimeOutPlayer(); // Function Solarland.SolarPlayerState.IsTimeOutPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5de0
	bool IsTeammateWith(struct ASolarPlayerState* Other); // Function Solarland.SolarPlayerState.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5d50
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarPlayerState.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5d10
	bool IsSkydivingLeader(); // Function Solarland.SolarPlayerState.IsSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ce0
	bool IsSkydivingCompleted(); // Function Solarland.SolarPlayerState.IsSkydivingCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5cb0
	bool IsSkydiving(); // Function Solarland.SolarPlayerState.IsSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5c80
	bool IsSameTeamWithReferToPlayer(); // Function Solarland.SolarPlayerState.IsSameTeamWithReferToPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5c50
	bool IsSameTeamWithLocalPlayer(); // Function Solarland.SolarPlayerState.IsSameTeamWithLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5c20
	bool IsReconnecting(); // Function Solarland.SolarPlayerState.IsReconnecting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5bf0
	bool IsPreStartSkydiving(); // Function Solarland.SolarPlayerState.IsPreStartSkydiving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5bc0
	bool IsPlayerWaitingForTeammatesHelp(); // Function Solarland.SolarPlayerState.IsPlayerWaitingForTeammatesHelp // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool IsPlayerTeam(); // Function Solarland.SolarPlayerState.IsPlayerTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1df5b90
	bool IsPlayerOnline(); // Function Solarland.SolarPlayerState.IsPlayerOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5b60
	bool IsPlayerOffline(); // Function Solarland.SolarPlayerState.IsPlayerOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5b30
	bool IsPlayer(); // Function Solarland.SolarPlayerState.IsPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5b00
	bool IsOutBySelf(); // Function Solarland.SolarPlayerState.IsOutBySelf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5ad0
	bool IsOfflinePlayer(); // Function Solarland.SolarPlayerState.IsOfflinePlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5aa0
	bool IsOBPlayer(); // Function Solarland.SolarPlayerState.IsOBPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5a80
	bool IsMySkydivingLeader(int32_t LeaderPosInTeam); // Function Solarland.SolarPlayerState.IsMySkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df59f0
	bool IsMVP(); // Function Solarland.SolarPlayerState.IsMVP // (Final|Native|Protected|BlueprintCallable) // @ game+0x1df5990
	bool IsMaxLevelInGame(); // Function Solarland.SolarPlayerState.IsMaxLevelInGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df59c0
	bool IsLocalPlayerSpectatingMe(); // Function Solarland.SolarPlayerState.IsLocalPlayerSpectatingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5960
	bool IsLocalPlayerCameraFocusingMe(); // Function Solarland.SolarPlayerState.IsLocalPlayerCameraFocusingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5930
	bool IsKickOutByServer(); // Function Solarland.SolarPlayerState.IsKickOutByServer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5900
	bool IsBuyingResurrection(); // Function Solarland.SolarPlayerState.IsBuyingResurrection // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	bool IsBeingSpectated(); // Function Solarland.SolarPlayerState.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df58c0
	bool IsAIPlayer(); // Function Solarland.SolarPlayerState.IsAIPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbbc40
	void IncreaseReviveCount(); // Function Solarland.SolarPlayerState.IncreaseReviveCount // (Native|Public|BlueprintCallable) // @ game+0x1257d10
	void HideTeammatesHUD(struct TArray<struct ASolarPlayerState*>& TeammateStates); // Function Solarland.SolarPlayerState.HideTeammatesHUD // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1df57d0
	bool HasSkydivingLeader(); // Function Solarland.SolarPlayerState.HasSkydivingLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df57a0
	bool HasSettled(); // Function Solarland.SolarPlayerState.HasSettled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5780
	int32_t GetWeaponSettlmentExp(int32_t weaponid); // Function Solarland.SolarPlayerState.GetWeaponSettlmentExp // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetVehicleSkinID(int32_t VehicleID); // Function Solarland.SolarPlayerState.GetVehicleSkinID // (Final|Native|Public) // @ game+0x1df56f0
	struct FString GetUserID(); // Function Solarland.SolarPlayerState.GetUserID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5660
	struct TArray<int32_t> GetUsableTailFlameIds(); // Function Solarland.SolarPlayerState.GetUsableTailFlameIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df55e0
	void GetUsableSkinsForCharacter(int32_t InCharacterId, struct TArray<int32_t>& Result, bool& bCharacterUsable); // Function Solarland.SolarPlayerState.GetUsableSkinsForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df54b0
	struct TArray<int32_t> GetUsableJetpackIds(); // Function Solarland.SolarPlayerState.GetUsableJetpackIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5430
	float GetTotalReceivedDamage(); // Function Solarland.SolarPlayerState.GetTotalReceivedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1df5410
	float GetTotalCausedDamage(); // Function Solarland.SolarPlayerState.GetTotalCausedDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1df53f0
	void GetTeammatePlayers(bool bIncludingSelf, struct TArray<struct ASolarPlayerState*>& OutTeammates); // Function Solarland.SolarPlayerState.GetTeammatePlayers // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1df52f0
	struct ASolarPlayerState* GetTeammatePlayerByPosInTeam(int32_t InPosInTeam); // Function Solarland.SolarPlayerState.GetTeammatePlayerByPosInTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5260
	struct USolarGameModeStatisticsComponent* GetStatComponent(); // Function Solarland.SolarPlayerState.GetStatComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5230
	struct ASolarSpectateInfo* GetSpectateTargetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateTargetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df51a0
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarPlayerState.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5150
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarPlayerState.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5100
	struct ASolarSpectateInfo* GetSpectateInfo(); // Function Solarland.SolarPlayerState.GetSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df50e0
	struct ASolarReplayPlayerController* GetSolarReplayPlayerController(); // Function Solarland.SolarPlayerState.GetSolarReplayPlayerController // (Final|Native|Public|Const) // @ game+0x1df50b0
	struct ASolarPlayerController* GetSolarPlayerController(); // Function Solarland.SolarPlayerState.GetSolarPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5080
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarPlayerState.GetSolarCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5050
	struct ASolarCharacter* GetPossessedCharacter(); // Function Solarland.SolarPlayerState.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df5020
	struct UPlayerStatisticsData* GetPlayerStatData(); // Function Solarland.SolarPlayerState.GetPlayerStatData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4ff0
	enum class EPlayerNetStateInGame GetPlayerNetState(); // Function Solarland.SolarPlayerState.GetPlayerNetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4fd0
	struct FString GetPlayerNameWithoutUID(); // Function Solarland.SolarPlayerState.GetPlayerNameWithoutUID // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4f50
	void GetNotSettlementItems(struct TArray<struct FSolarItemData>& Items); // Function Solarland.SolarPlayerState.GetNotSettlementItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1df4d40
	struct TArray<struct FMedalInfo> GetMedalInfo(); // Function Solarland.SolarPlayerState.GetMedalInfo // (Final|Native|Public|Const) // @ game+0x1df4cc0
	int32_t GetMaxShieldMatCountToDeathbox(); // Function Solarland.SolarPlayerState.GetMaxShieldMatCountToDeathbox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4c90
	bool GetIsPlayerBattleEnd(); // Function Solarland.SolarPlayerState.GetIsPlayerBattleEnd // (Native|Public|BlueprintCallable) // @ game+0x1cb17b0
	float GetExpSettleModePunishRatio(); // Function Solarland.SolarPlayerState.GetExpSettleModePunishRatio // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetExpItemCount(int32_t InLevelGap); // Function Solarland.SolarPlayerState.GetExpItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4c00
	int32_t GetExpByBehavior(enum class EExpBehaviorType InBehaviorType, int32_t InParamOne, int32_t InParamTwo, float InDamage); // Function Solarland.SolarPlayerState.GetExpByBehavior // (Native|Event|Public|BlueprintEvent) // @ game+0x1df4ab0
	int32_t GetDriveVehicleID(); // Function Solarland.SolarPlayerState.GetDriveVehicleID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df48f0
	struct FVector GetDeathBoxLocation(); // Function Solarland.SolarPlayerState.GetDeathBoxLocation // (Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x224bbb0
	float GetCurrentTalentCDDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentCDDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4800
	float GetCurrentTalentActiveDuration(); // Function Solarland.SolarPlayerState.GetCurrentTalentActiveDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df47d0
	void GetCurrentSkinForCharacter(int32_t InCharacterId, bool& bCharacterUsable, int32_t& OutSkinId); // Function Solarland.SolarPlayerState.GetCurrentSkinForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df46b0
	struct FVector GetCharacterLocation(); // Function Solarland.SolarPlayerState.GetCharacterLocation // (Final|Native|Public|HasDefaults) // @ game+0x1df4670
	void GetCanSettlementItems(struct TArray<int32_t>& Items); // Function Solarland.SolarPlayerState.GetCanSettlementItems // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1df45c0
	struct TArray<struct FString> GetBuyResurrectionSavedTeammateIDArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateIDArr // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<int32_t> GetBuyResurrectionSavedTeammateBonusArr(); // Function Solarland.SolarPlayerState.GetBuyResurrectionSavedTeammateBonusArr // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool CostGold(int32_t InCostedGold, bool NeedSyncToServer); // Function Solarland.SolarPlayerState.CostGold // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1df4370
	void ClientNotifyKillNumChanged(int32_t KillNumber, int32_t SpreesNum); // Function Solarland.SolarPlayerState.ClientNotifyKillNumChanged // (Net|Native|Event|Public|NetClient) // @ game+0x1df42b0
	void ClearTeammatesMark(); // Function Solarland.SolarPlayerState.ClearTeammatesMark // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1257d90
	bool CheckIfTeamLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfTeamLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x1df4280
	bool CheckIfTeamIdValid(); // Function Solarland.SolarPlayerState.CheckIfTeamIdValid // (Final|Native|Public|Const) // @ game+0x1df4250
	bool CheckIfSelfLastVehicleLocationValid(); // Function Solarland.SolarPlayerState.CheckIfSelfLastVehicleLocationValid // (Final|Native|Public|Const) // @ game+0x1df4220
	bool CheckIfPosInTeamValid(); // Function Solarland.SolarPlayerState.CheckIfPosInTeamValid // (Final|Native|Public|Const) // @ game+0x1df41f0
	bool CheckIfMarkedPointInNavMapValid(); // Function Solarland.SolarPlayerState.CheckIfMarkedPointInNavMapValid // (Final|Native|Public|Const) // @ game+0x1df41c0
	bool CheckIfInactive(); // Function Solarland.SolarPlayerState.CheckIfInactive // (Final|Native|Public|Const) // @ game+0x1df4190
	bool CheckIfDataValid(); // Function Solarland.SolarPlayerState.CheckIfDataValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4160
	bool CheckIfBeInSpecifiedPlayerState(enum class EPlayerStateInGame InEPlayerStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedPlayerState // (Final|Native|Public) // @ game+0x1df40d0
	bool CheckIfBeInSpecifiedCharacterState(enum class ECharacterStateInGame InECharacterStateInGame); // Function Solarland.SolarPlayerState.CheckIfBeInSpecifiedCharacterState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df4040
	bool CheckIfBattleVoiceIdValid(); // Function Solarland.SolarPlayerState.CheckIfBattleVoiceIdValid // (Final|Native|Public|Const) // @ game+0x1df4010
	bool CheckGoldIsEnough(int32_t InCostedGold); // Function Solarland.SolarPlayerState.CheckGoldIsEnough // (Final|Native|Public) // @ game+0x1df3f80
	void ChangeTailFlameId(int32_t InTailFlameId); // Function Solarland.SolarPlayerState.ChangeTailFlameId // (Final|Native|Public|BlueprintCallable) // @ game+0x1df3f00
	void ChangeBagById(int32_t InBagId); // Function Solarland.SolarPlayerState.ChangeBagById // (Final|Native|Public|BlueprintCallable) // @ game+0x1df3e80
	bool CanReviveItemPutInDeathBox(); // Function Solarland.SolarPlayerState.CanReviveItemPutInDeathBox // (Final|Native|Public) // @ game+0x1d147e0
	bool CanAcceptSkydivingLeaderTransferRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingLeaderTransferRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df3d60
	bool CanAcceptSkydivingFollowRequest(struct ASolarPlayerState* RequesterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df3cd0
	bool CanAcceptSkydivingFollowInvitation(struct ASolarPlayerState* InviterPlayerState); // Function Solarland.SolarPlayerState.CanAcceptSkydivingFollowInvitation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1df3c40
	int32_t CalculateZomborg(); // Function Solarland.SolarPlayerState.CalculateZomborg // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	float CalculateCharacterExp(); // Function Solarland.SolarPlayerState.CalculateCharacterExp // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	float CalculateAccountExp(); // Function Solarland.SolarPlayerState.CalculateAccountExp // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void AssignReplaceTeamPosBySide(struct FString InSide); // Function Solarland.SolarPlayerState.AssignReplaceTeamPosBySide // (Final|Native|Public) // @ game+0x1df3ba0
	void AssignPosInTeamBySide(); // Function Solarland.SolarPlayerState.AssignPosInTeamBySide // (Final|Native|Public) // @ game+0x1df3b80
	void AssignPosInTeam(); // Function Solarland.SolarPlayerState.AssignPosInTeam // (Final|Native|Public) // @ game+0x1df3b60
	void AddExperience(int32_t InExp, enum class EExpBehaviorType InType); // Function Solarland.SolarPlayerState.AddExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x1df3aa0
};

// Class Solarland.SCMPlayerState
// Size: 0xa80 (Inherited: 0xa18)
struct ASCMPlayerState : ASolarPlayerState {
	enum class ESCMPlayerState BattleState; // 0xa18(0x01)
	enum class ESCMPlayerOutType PlayerOutType; // 0xa19(0x01)
	enum class ESCMPlayerType PlayerType; // 0xa1a(0x01)
	enum class ESCMPlayerGameRole PlayerGameRole; // 0xa1b(0x01)
	char pad_A1C[0x14]; // 0xa1c(0x14)
	struct FMulticastInlineDelegate OnSideChange; // 0xa30(0x10)
	struct AHeroPickInfo* HeroPickInfo; // 0xa40(0x08)
	struct TArray<struct FSCMReplicateHostData> ReplicateData; // 0xa48(0x10)
	char pad_A58[0x10]; // 0xa58(0x10)
	float ReviveStartTime; // 0xa68(0x04)
	char pad_A6C[0x4]; // 0xa6c(0x04)
	struct ASolarCharacter* RevivingTeammate; // 0xa70(0x08)
	struct USolarTaskComponent* TaskSystem; // 0xa78(0x08)

	void UpdateTaskInfo(struct FTaskUpdateInfo& InTaskInfo); // Function Solarland.SCMPlayerState.UpdateTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x1cb7060
	void UpDateDataManager(struct TArray<struct FSCMReplicateHostData> InReplicateData, bool bInit); // Function Solarland.SCMPlayerState.UpDateDataManager // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1cb6f40
	void ServerBeginSpectate(struct ASCMPlayerState* TargetPlayer); // Function Solarland.SCMPlayerState.ServerBeginSpectate // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb6aa0
	void RequestStartGame(); // Function Solarland.SCMPlayerState.RequestStartGame // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1258f70
	void RequestSetInviteEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetInviteEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb69f0
	void RequestSetExchangeEnable(bool bEnable); // Function Solarland.SCMPlayerState.RequestSetExchangeEnable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb6960
	void RequestKickPlayerOut(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequestKickPlayerOut // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb68d0
	void RequestExchangeSidesAndPos(struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCMPlayerState.RequestExchangeSidesAndPos // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb6800
	void RequestChangeSide(struct ASCMPlayerState* Player, struct FString NewSide, int32_t NewPosInTeam); // Function Solarland.SCMPlayerState.RequestChangeSide // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb66e0
	void RequesJoinOB(struct ASCMPlayerState* Player); // Function Solarland.SCMPlayerState.RequesJoinOB // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1cb6650
	void PlayerSelectHero(int32_t InCharacterId, int32_t InSkinID, bool bConfirm); // Function Solarland.SCMPlayerState.PlayerSelectHero // (Net|Native|Event|Public|NetServer) // @ game+0x1cb6550
	void OnUpdateLifeTime(); // Function Solarland.SCMPlayerState.OnUpdateLifeTime // (Final|Native|Public) // @ game+0x1cb63d0
	void OnReviveSucceed(struct FString TargetPlayerID); // Function Solarland.SCMPlayerState.OnReviveSucceed // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_RevivingTeammate(struct ASolarCharacter* LastRevivingTeammate); // Function Solarland.SCMPlayerState.OnRep_RevivingTeammate // (Final|Native|Public) // @ game+0x1cb6230
	void OnRep_HeroPickInfo(); // Function Solarland.SCMPlayerState.OnRep_HeroPickInfo // (Final|Native|Public) // @ game+0x1cb6210
	void OnRep_BattleState(); // Function Solarland.SCMPlayerState.OnRep_BattleState // (Final|Native|Private) // @ game+0x1cb61b0
	void OnPlayerKilled(struct ASCMPlayerState* KillerPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKilled // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerKill(struct ASCMPlayerState* KilledPlayer, struct FSolarPointDamageEvent& InDamageEvent, struct AActor* InDamageCauser); // Function Solarland.SCMPlayerState.OnPlayerKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void NotifyUpdateCGMData(struct FString InDataName); // Function Solarland.SCMPlayerState.NotifyUpdateCGMData // (Final|Native|Private) // @ game+0x1cb6090
	void NotifyClientUpdateDataManager(bool bInit); // Function Solarland.SCMPlayerState.NotifyClientUpdateDataManager // (Final|Native|Private) // @ game+0x1cb5fe0
	bool NeedConsiderRepData(); // Function Solarland.SCMPlayerState.NeedConsiderRepData // (Final|Native|Public|Const) // @ game+0x1cb5fa0
	bool IsPreJoinPlayer(); // Function Solarland.SCMPlayerState.IsPreJoinPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cb5d00
	void InitTaskInfo(struct FBattlePassInfo& InTaskInfo); // Function Solarland.SCMPlayerState.InitTaskInfo // (Final|Native|Public|HasOutParms) // @ game+0x1cb5c50
	struct TArray<struct FSCMReplicateHostData> GetReplicateDataArray(); // Function Solarland.SCMPlayerState.GetReplicateDataArray // (Final|Native|Private) // @ game+0x1cb5b20
	struct TArray<struct ASCMPlayerState*> GetMySidePlayerList(); // Function Solarland.SCMPlayerState.GetMySidePlayerList // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb5aa0
	struct TArray<struct ASCMPlayerState*> GetMySideJobPlayerList(); // Function Solarland.SCMPlayerState.GetMySideJobPlayerList // (Final|Native|Public|BlueprintCallable) // @ game+0x1cb5a20
	void EventOnEndRevived(struct ASolarCharacter* InTeammate); // Function Solarland.SCMPlayerState.EventOnEndRevived // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void EventOnBeginRevived(struct ASolarCharacter* InTeammate); // Function Solarland.SCMPlayerState.EventOnBeginRevived // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CanPlayerBattle(); // Function Solarland.SCMPlayerState.CanPlayerBattle // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SCMSettlementPlayerState
// Size: 0xa80 (Inherited: 0xa80)
struct ASCMSettlementPlayerState : ASCMPlayerState {
};

// Class Solarland.ScopeFullScreenWidget
// Size: 0x340 (Inherited: 0x340)
struct UScopeFullScreenWidget : USolarUserWidget {
};

// Class Solarland.SCustomGameState
// Size: 0x4f8 (Inherited: 0x3f0)
struct ASCustomGameState : ASBattleGameState {
	enum class ESCMInGameState InGameState; // 0x3f0(0x01)
	char pad_3F1[0x1f]; // 0x3f1(0x1f)
	struct FCustomRoomData CustomRoomData; // 0x410(0x70)
	bool bCustomRoomMode; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)
	struct TArray<struct AGameManagerBase*> GameManagers; // 0x488(0x10)
	struct AGameDataManager* GameDataManager; // 0x498(0x08)
	struct AGameJobManager* GameJobManager; // 0x4a0(0x08)
	char pad_4A8[0x10]; // 0x4a8(0x10)
	struct UCGMManagerConfigComponent* ManagerConfigComponent; // 0x4b8(0x08)
	struct ACGFormula* InsFormula; // 0x4c0(0x08)
	struct TArray<struct ASolarPlayerState*> PlayersWithTrackingAbility; // 0x4c8(0x10)
	struct TArray<struct ASpatializeInfoTrack*> TrackInfos; // 0x4d8(0x10)
	char pad_4E8[0x10]; // 0x4e8(0x10)

	void SetRoomEnableSwapPos(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableSwapPos // (Final|Native|Public|BlueprintCallable) // @ game+0x1cccba0
	void SetRoomEnableInvite(bool bIsEnabled); // Function Solarland.SCustomGameState.SetRoomEnableInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x1cccb10
	void OnTournamentBattleEnd(); // Function Solarland.SCustomGameState.OnTournamentBattleEnd // (Final|Native|Public) // @ game+0x1ccc740
	void OnSidePosInTeamChange(struct FString SideName); // Function Solarland.SCustomGameState.OnSidePosInTeamChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSideListPostChanged(); // Function Solarland.SCustomGameState.OnSideListPostChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSideListChange(struct TArray<struct FSCMSideData>& SideList); // Function Solarland.SCustomGameState.OnSideListChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnServerCustomRoomDataReady(); // Function Solarland.SCustomGameState.OnServerCustomRoomDataReady // (Final|Native|Public) // @ game+0x1ccc720
	void OnRep_InGameState(); // Function Solarland.SCustomGameState.OnRep_InGameState // (Final|Native|Public) // @ game+0x1ccc6a0
	void OnRep_GameManagerList(); // Function Solarland.SCustomGameState.OnRep_GameManagerList // (Final|Native|Private) // @ game+0x8ba190
	void OnRep_GameJobManager(); // Function Solarland.SCustomGameState.OnRep_GameJobManager // (Final|Native|Public) // @ game+0x1ccc660
	void OnRep_GameDataManager(); // Function Solarland.SCustomGameState.OnRep_GameDataManager // (Final|Native|Public) // @ game+0x1ccc640
	void OnRep_CustomRoomData(); // Function Solarland.SCustomGameState.OnRep_CustomRoomData // (Final|Native|Public) // @ game+0x1ccc600
	void OnPlayerBattleStateChange(struct ASCMPlayerState* PlayerState); // Function Solarland.SCustomGameState.OnPlayerBattleStateChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnOBPlayerListChange(); // Function Solarland.SCustomGameState.OnOBPlayerListChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnDataManagerPrepare(); // Function Solarland.SCustomGameState.OnDataManagerPrepare // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCustomRoomDataChange(struct FCustomRoomData& InCustomRoomData); // Function Solarland.SCustomGameState.OnCustomRoomDataChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void MultiClientAllManagersOnRepDelegate__DelegateSignature(); // DelegateFunction Solarland.SCustomGameState.MultiClientAllManagersOnRepDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool IsNeedCalculateTournamentPoints(); // Function Solarland.SCustomGameState.IsNeedCalculateTournamentPoints // (Final|Native|Public) // @ game+0x1ccc100
	bool IsInTournament(); // Function Solarland.SCustomGameState.IsInTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ccc0c0
	bool IsCustomRoomMode(); // Function Solarland.SCustomGameState.IsCustomRoomMode // (Final|Native|Public|Const) // @ game+0x1ccc0a0
	bool IsAtNonSettlementStage(); // Function Solarland.SCustomGameState.IsAtNonSettlementStage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ccc070
	void InitKnockoutPointParams(struct FKnockoutParams& InParams); // Function Solarland.SCustomGameState.InitKnockoutPointParams // (Final|Native|Public|HasOutParms) // @ game+0x1ccbf30
	struct FTournamentData GetTournamentData(); // Function Solarland.SCustomGameState.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ccbe50
	struct UCGMManagerConfigComponent* GetManagerConfigComponent(); // Function Solarland.SCustomGameState.GetManagerConfigComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ccbda0
	struct ACGFormula* GetFormula(); // Function Solarland.SCustomGameState.GetFormula // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ccbd70
	struct FCustomRoomData GetCustomRoomData(); // Function Solarland.SCustomGameState.GetCustomRoomData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ccbb80
	struct UCGMGameplayConfig* GetCGMGameplayConfig(); // Function Solarland.SCustomGameState.GetCGMGameplayConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ccbb50
	void ClearCustomRoomData(); // Function Solarland.SCustomGameState.ClearCustomRoomData // (Final|Native|Public) // @ game+0x1ccb350
	int32_t CalculateKnockoutPoints(int32_t InTeamRank, int32_t InKillNum, float InTotalDamage, float InTotalDamageTaken); // Function Solarland.SCustomGameState.CalculateKnockoutPoints // (Final|Native|Public) // @ game+0x1ccb210
};

// Class Solarland.SCSettlementGameState
// Size: 0x4f8 (Inherited: 0x4f8)
struct ASCSettlementGameState : ASCustomGameState {
};

// Class Solarland.SCustomGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USCustomGameModeLibrary : UBlueprintFunctionLibrary {

	bool ValidateAirline(struct UObject* InWorldContext, struct FString& OutMsg, struct FVector InHalfBufferExtent, float DrawDebugTime); // Function Solarland.SCustomGameModeLibrary.ValidateAirline // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1cc76d0
	bool UnBindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.UnBindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7420
	bool UnbindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	bool UnbindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	bool UnbindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	bool UnbindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	bool UnbindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	bool UnbindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SCustomGameModeLibrary.UnbindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7510
	void TryActivateAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag, bool bAllowRemoteActivation); // Function Solarland.SCustomGameModeLibrary.TryActivateAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc7310
	bool SwitchPlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCustomGameModeLibrary.SwitchPlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc7220
	bool SwitchPlayerPosInTeam(struct UObject* WorldContextObject, struct ASCMPlayerState* PlayerA, struct ASCMPlayerState* PlayerB); // Function Solarland.SCustomGameModeLibrary.SwitchPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc7130
	bool SwitchOBPlayerWithPlayer(struct UObject* WorldContextObject, struct ASCMPlayerState* OBPlayer, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.SwitchOBPlayerWithPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc7040
	void StopSpectateOtherPlayer(struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.StopSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6fd0
	void SpawnVehicleByIDAtTheSpecified(struct UObject* WorldContextObject, int32_t ID, struct FTransform Transform); // Function Solarland.SCustomGameModeLibrary.SpawnVehicleByIDAtTheSpecified // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1cc6e60
	void SideLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct FString SideName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SCustomGameModeLibrary.SideLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc6c90
	void SideEnterHeroPick(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.SideEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6bc0
	bool ShowTargetSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowTargetSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6b40
	struct UUserWidget* ShowSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.ShowSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6a00
	bool ShowNextSettlementPage(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.ShowNextSettlementPage // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6980
	void ShowGameNoticeCustom(struct UObject* WorldContextObject, struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeCustom // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6770
	void ShowGameNoticeByID(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SCustomGameModeLibrary.ShowGameNoticeByID // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc66c0
	bool SetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.SetWeaponParts // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc64c0
	void SetupBotDifficulty(struct TArray<struct ASolarBotAIController*>& BotPlayers, int32_t Difficulty); // Function Solarland.SCustomGameModeLibrary.SetupBotDifficulty // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc65e0
	void SetSpectateConditions(struct ASolarPlayerState* Player, struct FSpectateConditions& Conditions); // Function Solarland.SCustomGameModeLibrary.SetSpectateConditions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc6380
	bool SetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cc6260
	bool SetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6130
	bool SetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc6020
	bool SetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5f00
	bool SetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5de0
	bool SetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetPlayerDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5cc0
	void SetModifyColorGrading(bool InEnable, struct FLinearColor InGain, struct FLinearColor InSaturation, struct FLinearColor InContrast); // Function Solarland.SCustomGameModeLibrary.SetModifyColorGrading // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1cc5b60
	bool SetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& InValue); // Function Solarland.SCustomGameModeLibrary.SetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cc59c0
	bool SetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InValue); // Function Solarland.SCustomGameModeLibrary.SetDataString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5810
	bool SetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t InValue); // Function Solarland.SCustomGameModeLibrary.SetDataInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5680
	bool SetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.SetDataFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc54e0
	bool SetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char InValue); // Function Solarland.SCustomGameModeLibrary.SetDataByte // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5350
	bool SetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool InValue); // Function Solarland.SCustomGameModeLibrary.SetDataBool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc51c0
	bool SetBattleUISubItemVisibilityBySabotageGameMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SetBattleUISubItemVisibilityBySabotageGameMode // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc5140
	void SaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.SaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc50d0
	bool ResurrectCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, enum class EPlayerResurrectType PlayerResurrectType); // Function Solarland.SCustomGameModeLibrary.ResurrectCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cc4e20
	void RenumberAllPlayerPosInTeam(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.RenumberAllPlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc4db0
	void RemoveSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc4c40
	void RemoveRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.RemoveRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc4b20
	void RemovePlayerData(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemovePlayerData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc4a50
	void RemoveHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.RemoveHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc4890
	void RemoveGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag); // Function Solarland.SCustomGameModeLibrary.RemoveGameplayCue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc47e0
	void RemoveData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.RemoveData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc4680
	struct UActorMarkBase* RegisterWorldMarkOnPos(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct FVector Pos); // Function Solarland.SCustomGameModeLibrary.RegisterWorldMarkOnPos // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1cc4570
	bool PreAssignPlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* Player, struct FString InSide, struct FString InJob, int32_t PosInTeam); // Function Solarland.SCustomGameModeLibrary.PreAssignPlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc43e0
	bool PlusData(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float InValue); // Function Solarland.SCustomGameModeLibrary.PlusData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc4240
	void PlayersSettlement(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*> TargetPlayers); // Function Solarland.SCustomGameModeLibrary.PlayersSettlement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc4130
	void PlayerReportServer(struct UObject* WorldContextObject, struct ASolarPlayerState* PS, enum class EStatisticsType StatisticsType, int32_t InValue, bool IsIncrease); // Function Solarland.SCustomGameModeLibrary.PlayerReportServer // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3fb0
	void PlayerOutBySelf(struct UObject* WorldContextObject, enum class ESCMPlayerOutPath InPath); // Function Solarland.SCustomGameModeLibrary.PlayerOutBySelf // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3f00
	void PlayerLogGameStateStatistics(struct UObject* WorldContextObject, struct FString LogName, struct ASCMPlayerState* PlayerState, struct TMap<struct FString, struct FString>& LogValues, bool IncludeStatisticsData); // Function Solarland.SCustomGameModeLibrary.PlayerLogGameStateStatistics // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc3cf0
	void PlayerEnterHeroPick(struct UObject* WorldContextObject, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.PlayerEnterHeroPick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3c40
	void PlaceCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct FTransform& Transform, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons); // Function Solarland.SCustomGameModeLibrary.PlaceCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cc39e0
	void NotifyAIMgrBattleStarted(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.NotifyAIMgrBattleStarted // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3970
	void LetPlayerOut(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*> TargetPlayers, enum class ESCMPlayerOutType OutType, bool bReportSettleReward, bool bGoSpectator, bool bRemoveSide, struct FText OutReason); // Function Solarland.SCustomGameModeLibrary.LetPlayerOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc36b0
	void LetBattleEnd(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetBattleEnd // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3600
	void LetAllPlayersOut(struct UObject* WorldContextObject, enum class EBattleEndType BattleEndType); // Function Solarland.SCustomGameModeLibrary.LetAllPlayersOut // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3550
	bool IsSideSettled(struct UObject* WorldContextObject, struct FString InSide, bool& IsSettle); // Function Solarland.SCustomGameModeLibrary.IsSideSettled // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc3430
	bool IsSideCanJoinAI(struct UObject* WorldContextObject, struct FString SideName); // Function Solarland.SCustomGameModeLibrary.IsSideCanJoinAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3350
	bool IsPlayingReplay(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsPlayingReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc32d0
	bool IsInPreparation(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsInPreparation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc3250
	bool IsEnablePlayerUpgrade(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnablePlayerUpgrade // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc31d0
	bool IsEnableAITeamManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsEnableAITeamManager // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc3150
	bool IsCustomRoomMode(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.IsCustomRoomMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc30d0
	bool InsertWidgetToMapUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc2f40
	bool InsertWidgetToBattleUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc2db0
	bool InsertWidgetToBackpackUISlot(struct UObject* WorldContextObject, struct UPanelSlot*& OutResultSlot, struct UWidget* InChildWidget, struct FName PanelName, bool bReplaceOldWidget); // Function Solarland.SCustomGameModeLibrary.InsertWidgetToBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc2c20
	void InitializeSkydivingRelatedAbilities(struct ASolarCharacter* SolarCharacter); // Function Solarland.SCustomGameModeLibrary.InitializeSkydivingRelatedAbilities // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc2bb0
	void InitBotCruiseAIComp(struct UAirlineCruiseComponent* AirlineCruiseComponent, struct USBattleRoyaleGameModeAIComp* SBattleRoyaleGameModeAIComp); // Function Solarland.SCustomGameModeLibrary.InitBotCruiseAIComp // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cc2b00
	void InitAirLineAndCrusiseInfo(struct TArray<struct ASolarCharacter*> CharacterArr, struct FTransform StartTransform, struct UAirlineCruiseComponent* AirlineCruiseComponent, float Speed, struct FVector2D StartPoint, struct FVector2D EndPoint, struct FVector2D CanParachutePoint, struct FVector2D ForceParachutePoint, bool bCreateRootIfNull, struct ASolarCapsuleActor* DefaultCapsuleActorClass); // Function Solarland.SCustomGameModeLibrary.InitAirLineAndCrusiseInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1cc2770
	bool HasBlockBetweenUs(struct AActor* A, struct AActor* B, bool bIsVehicle); // Function Solarland.SCustomGameModeLibrary.HasBlockBetweenUs // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc2680
	bool GetWeaponParts(struct UObject* WorldContextObject, struct ASolarWeapon* TargetWeapon, struct FWeaponPartsData& Parts); // Function Solarland.SCustomGameModeLibrary.GetWeaponParts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc2560
	struct ASolarWeapon* GetWeaponBySlot(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, int32_t Slot); // Function Solarland.SCustomGameModeLibrary.GetWeaponBySlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc2470
	void GetStartBattleRequestInfo(struct UObject* WorldContextObject, struct FStartBattleRequestInfo& OutResult); // Function Solarland.SCustomGameModeLibrary.GetStartBattleRequestInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc23b0
	bool GetSpecificRankData(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FSCMRankData& outData); // Function Solarland.SCustomGameModeLibrary.GetSpecificRankData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc21f0
	int32_t GetSolarItemManagerAirDropRelatedInfo(struct UObject* WorldContextObject, struct ASolarSafeArea* SafeArea, int32_t ChestID, struct TArray<struct FTransform>& TransformsArr); // Function Solarland.SCustomGameModeLibrary.GetSolarItemManagerAirDropRelatedInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc20a0
	struct UUserWidget* GetSolarDisplayWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.GetSolarDisplayWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cc1fe0
	void GetSideList(struct UObject* WorldContextObject, bool FilterEmptySide, bool NeedExistUnBattleEnd, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetSideList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc1e50
	struct USolarSaveGame* GetSaveGame(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSaveGame // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc1dd0
	struct ASolarSafeArea* GetSafeArea(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetSafeArea // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cc1d50
	bool GetRankListData(struct UObject* WorldContextObject, struct FString RankName, int32_t BeginRank, int32_t EndRank, struct TArray<struct FSCMRankData>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetRankListData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc1b40
	void GetPlayerStatisticData(struct UObject* WorldContextObject, struct ASolarPlayerState* PS, enum class EStatisticsType StatisticsType, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerStatisticData // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc1a00
	struct ASCMPlayerState* GetPlayerStateByCharacterOrController(struct ASolarCharacter* Player, struct ASCMPlayerController* Controller); // Function Solarland.SCustomGameModeLibrary.GetPlayerStateByCharacterOrController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc1940
	struct APawn* GetPlayerPawn(struct ASCMPlayerState* Player, enum class EPlayerPawnType& OutType); // Function Solarland.SCustomGameModeLibrary.GetPlayerPawn // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc1870
	bool GetPlayerDataVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cc1750
	bool GetPlayerDataString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc1610
	bool GetPlayerDataInt(struct ASCMPlayerState* PlayerState, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc14f0
	bool GetPlayerDataFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc13c0
	bool GetPlayerDataByte(struct ASCMPlayerState* PlayerState, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc12a0
	bool GetPlayerDataBool(struct ASCMPlayerState* PlayerState, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetPlayerDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc1180
	void GetPlayerBattleRequestInfo(struct UObject* WorldContextObject, struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SCustomGameModeLibrary.GetPlayerBattleRequestInfo // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cc1030
	struct TArray<struct ASCMPlayerState*> GetOBPlayers(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetOBPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc0f60
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SCustomGameModeLibrary.GetNoticeFormatText // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0db0
	int32_t GetMatchRuleID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetMatchRuleID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc0d30
	bool GetMapDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cc0b40
	bool GetMapDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0930
	bool GetMapDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0740
	bool GetMapDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0540
	bool GetMapDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0340
	bool GetMapDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString InKey, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetMapDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cc0140
	struct ASCMPlayerState* GetLocalPlayer(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetLocalPlayer // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc00c0
	struct AGameJobManager* GetJobManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetJobManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cc0040
	void GetJobList(struct UObject* WorldContextObject, struct FString Side, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetJobList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbfee0
	enum class ESCMInGameState GetInGameState(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetInGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbfe60
	int32_t GetHostRank(struct UObject* WorldContextObject, struct FString RankName, enum class ESCMHostType HostType, struct FString HostID); // Function Solarland.SCustomGameModeLibrary.GetHostRank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbfc80
	void GetHostKeyArray(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct TArray<struct FString>& OutResult); // Function Solarland.SCustomGameModeLibrary.GetHostKeyArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbfb40
	struct FString GetGameModeParam(struct UObject* WorldContextObject, struct FString InParamKey); // Function Solarland.SCustomGameModeLibrary.GetGameModeParam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbfa20
	int32_t GetGameModeID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbf9a0
	int32_t GetGameModeGroupId(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetGameModeGroupId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbf920
	struct AGameManagerBase* GetGameManager(struct UObject* WorldContextObject, struct AGameManagerBase* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetGameManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbf860
	struct ADefenderManager* GetDefenderManager(struct UObject* WorldContextObject, struct ADefenderManager* ManagerClass); // Function Solarland.SCustomGameModeLibrary.GetDefenderManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbf7a0
	bool GetDataVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FVector& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cbf600
	bool GetDataString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FString& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbf440
	bool GetDataInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, int32_t& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbf2a0
	bool GetDataFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, float& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbf100
	bool GetDataByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, char& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbef60
	bool GetDataBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, bool& OutValue); // Function Solarland.SCustomGameModeLibrary.GetDataBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1cbedc0
	struct ACustomRoomManager* GetCustomRoomManager(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbed40
	struct FCustomRoomData GetCustomRoomData(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCustomRoomData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbeb70
	float GetCurBattleTime(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCurBattleTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cbeae0
	struct UCGMGameplayConfig* GetCGMGameplayConfig(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetCGMGameplayConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbea60
	void GetAvatarIconWithID(struct UObject* WorldContextObject, int32_t InAvatarID, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIconWithID // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbe960
	void GetAvatarIcon(struct ASolarPlayerState* InPS, struct UTexture2D*& OutAvatar); // Function Solarland.SCustomGameModeLibrary.GetAvatarIcon // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbe8a0
	bool GetAILevelConfigCurrentMatch(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& AILevelConfig); // Function Solarland.SCustomGameModeLibrary.GetAILevelConfigCurrentMatch // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbe6e0
	int32_t GetAIAccompanyTimelineID(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.GetAIAccompanyTimelineID // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbe660
	void FindPlayerSideJob(struct UObject* WorldContextObject, struct FString InSide, struct FString InJob, int32_t& OutCountCurrent, int32_t& OutCountMax, int32_t& OutMatchCountCurrent, int32_t& OutMatchCountMax); // Function Solarland.SCustomGameModeLibrary.FindPlayerSideJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbe1d0
	struct TArray<struct ASCMPlayerState*> FindPlayers(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbe420
	struct ASCMPlayerState* FindPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbe0f0
	struct ASCMPlayerState* FindOBPlayerByPlayerID(struct UObject* WorldContextObject, struct FString PlayerId); // Function Solarland.SCustomGameModeLibrary.FindOBPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbe010
	struct TArray<struct ASCMPlayerState*> FindBotAI(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<enum class ESCMPlayerState>& States); // Function Solarland.SCustomGameModeLibrary.FindBotAI // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbddd0
	void ExecuteGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.ExecuteGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbdbf0
	void EnableSpeedUpEffect(struct ASolarCharacter* Player, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnableSpeedUpEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbdb30
	void EnablePoisonEffect(struct UObject* WorldContextObject, bool bEnable); // Function Solarland.SCustomGameModeLibrary.EnablePoisonEffect // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbda70
	struct UTexture2D* DrawDebugPointInMapImg(struct UObject* WorldContextObject, struct UTexture2D* Tex, struct FString Path, struct TArray<struct FVector> PointArrA, struct FColor PointAColor, float PointASize, struct TArray<struct FVector> PointArrB, struct FColor PointBColor, float PointBSize); // Function Solarland.SCustomGameModeLibrary.DrawDebugPointInMapImg // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1cbd720
	int32_t DeleteAIFromBattleForPlayer(struct UObject* WorldContextObject, struct TArray<struct ASCMPlayerState*>& AIPlayers); // Function Solarland.SCustomGameModeLibrary.DeleteAIFromBattleForPlayer // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbd630
	struct UUserWidget* CreateSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass, enum class EUIRoot UILayer, bool bInShowPersistent); // Function Solarland.SCustomGameModeLibrary.CreateSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbd4f0
	struct UWidgetComponent* CreateOverheadHUD(struct ASolarCharacter* SolarCharacter, struct UUserWidget* Widget); // Function Solarland.SCustomGameModeLibrary.CreateOverheadHUD // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbd430
	struct ASCMPlayerState* CreateBotAISingle(struct UObject* WorldContextObject, int32_t CharacterId, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAutoSideAndJob, bool bAllowMix, struct FString Side, struct FString Job); // Function Solarland.SCustomGameModeLibrary.CreateBotAISingle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbd180
	struct TArray<struct ASCMPlayerState*> CreateBotAI(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& TempleteMap, int32_t SpawnNum, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAutoSideAndJob, bool bAllowMix, struct FString Side, struct FString Job); // Function Solarland.SCustomGameModeLibrary.CreateBotAI // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbcd20
	void CreateAirdropByOutcomeIDWithCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbca50
	void CreateAirdropByOutcomeIDWithAirship(struct UObject* WorldContextObject, struct ASolarAirship* SolarAirshipClass, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeIDWithAirship // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbc800
	void CreateAirdropByOutcomeID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, int32_t OutcomeID, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByOutcomeID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbc570
	void CreateAirdropByItemID(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByItemID // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbc210
	void CreateAirdropByCharacter(struct UObject* WorldContextObject, struct FTransform& SpawnTrans, struct ASolarTreasureBoxSpawner* SolarTreasureBoxSpawnerClass, struct TArray<struct FSolarItemData> ItemDataArr, int32_t ChestID, int32_t ChestSpawnID, float AirDropSpawnDelay, struct ASolarCharacter* InCharacter, float InStartHeight); // Function Solarland.SCustomGameModeLibrary.CreateAirdropByCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cbbeb0
	void CloseSupplement(struct UObject* WorldContextObject); // Function Solarland.SCustomGameModeLibrary.CloseSupplement // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbbe40
	void CloseSolarWidget(struct UObject* WorldContextObject, struct UUserWidget* WidgetClass); // Function Solarland.SCustomGameModeLibrary.CloseSolarWidget // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbbd90
	void ClearPlayerDataChangeEvent(struct ASCMPlayerState* PlayerState, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearPlayerDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbbcc0
	bool ClearMapUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearMapUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbbc00
	void ClearDataChangeEvent(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName); // Function Solarland.SCustomGameModeLibrary.ClearDataChangeEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cbbaa0
	void ClearCharacterAllItems(struct ASolarCharacter* Player, bool bEmptyWeaponsOnly); // Function Solarland.SCustomGameModeLibrary.ClearCharacterAllItems // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb9e0
	bool ClearBattleUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBattleUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb920
	bool ClearBackpackUISlot(struct UObject* WorldContextObject, struct FName PanelName); // Function Solarland.SCustomGameModeLibrary.ClearBackpackUISlot // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb860
	bool ClearBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID); // Function Solarland.SCustomGameModeLibrary.ClearBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb7a0
	bool ChangePlayerSideJob(struct UObject* WorldContextObject, struct ASCMPlayerState* Player, struct FString InSide, struct FString InJob, int32_t PosInTeam); // Function Solarland.SCustomGameModeLibrary.ChangePlayerSideJob // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb610
	bool ChangePlayerPosInTeam(struct UObject* WorldContextObject, struct ASCMPlayerState* Player, int32_t PosInTeam); // Function Solarland.SCustomGameModeLibrary.ChangePlayerPosInTeam // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb520
	bool ChangePlayerOB(struct UObject* WorldContextObject, struct ASCMPlayerState* Player); // Function Solarland.SCustomGameModeLibrary.ChangePlayerOB // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb460
	bool ChangePlayerCharacter(struct ASCMPlayerState* TargetPlayer, int32_t CharacterId, int32_t SkinId); // Function Solarland.SCustomGameModeLibrary.ChangePlayerCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cbb370
	void CancelAbilityByTag(struct USolarAbilitySystemComponent* SolarAbilitySystemComponent, struct FGameplayTag& AbilityTag); // Function Solarland.SCustomGameModeLibrary.CancelAbilityByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbb2b0
	bool BindSpecificRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, int32_t TargetRank, struct FDelegate& SpecificRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindSpecificRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbb130
	bool BindRankListChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FSCMRankEventHandle& RankListEventHandle); // Function Solarland.SCustomGameModeLibrary.BindRankListChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbb000
	bool BindPlayerReconnectedGameEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SCustomGameModeLibrary.BindPlayerReconnectedGameEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbaf10
	bool BindPlayerDataChangeEventVector3(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbadd0
	bool BindPlayerDataChangeEventString(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbac90
	bool BindPlayerDataChangeEventInt(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbab50
	bool BindPlayerDataChangeEventFloat(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cbaa10
	bool BindPlayerDataChangeEventByte(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba8d0
	bool BindPlayerDataChangeEventBool(struct ASCMPlayerState* PlayerState, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindPlayerDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba790
	bool BindHostRankChangeEvent(struct UObject* WorldContextObject, struct FString RankName, struct FString HostID, enum class ESCMHostType HostType, struct FDelegate& HostRankChangeEvent); // Function Solarland.SCustomGameModeLibrary.BindHostRankChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba5d0
	bool BindDataChangeEventVector3(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventVector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba410
	bool BindDataChangeEventString(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba250
	bool BindDataChangeEventInt(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cba090
	bool BindDataChangeEventFloat(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb9ed0
	bool BindDataChangeEventByte(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventByte // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb9d10
	bool BindDataChangeEventBool(struct UObject* WorldContextObject, enum class ESCMHostType HostType, struct FString HostID, struct FString DataName, struct FDelegate& InEvent); // Function Solarland.SCustomGameModeLibrary.BindDataChangeEventBool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb9b50
	bool BeginSpectateOtherPlayer(struct UObject* WorldContextObject, struct ASolarPlayerState* Player, struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SCustomGameModeLibrary.BeginSpectateOtherPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cb9a60
	void BeginCruise(struct TArray<struct ASolarCharacter*> CharacterArr, struct UAirlineCruiseComponent* AirlineCruiseComponent, float& IntoParachuteZoneTime, float& ForceParachuteTime, float& CruiseEndTime); // Function Solarland.SCustomGameModeLibrary.BeginCruise // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb9860
	void AddGameplayCue(struct UAbilitySystemComponent* AbilitySystemComponen, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters& GameplayCueParameters); // Function Solarland.SCustomGameModeLibrary.AddGameplayCue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cb9680
	enum class EItemModifyResult AddBackpackItem(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SCustomGameModeLibrary.AddBackpackItem // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x1cb9550
};

// Class Solarland.SCustomizedGameMode
// Size: 0x510 (Inherited: 0x4e0)
struct ASCustomizedGameMode : ASBattleGameMode {
	struct USolarGameMode_LogicComponent* ModeLogicComponent; // 0x4e0(0x08)
	struct USolarGameMode_RewardComponent* ModeRewardComponent; // 0x4e8(0x08)
	struct USCustomizedGameModeManager* CustomModeManager; // 0x4f0(0x08)
	struct USolarGameMode_DataManager* CustomModeDataManager; // 0x4f8(0x08)
	char pad_500[0x10]; // 0x500(0x10)

	void OnReceivePlayerLogin(struct APlayerController* PlayerController); // Function Solarland.SCustomizedGameMode.OnReceivePlayerLogin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnReceiveBattleStart(struct APlayerController* PlayerController); // Function Solarland.SCustomizedGameMode.OnReceiveBattleStart // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SCustomizedGameModeAIComponent
// Size: 0x120 (Inherited: 0x120)
struct USCustomizedGameModeAIComponent : USolarGameModeAIComponent {

	struct TMap<struct FString, int32_t> GetAllAITeamInfo(); // Function Solarland.SCustomizedGameModeAIComponent.GetAllAITeamInfo // (Final|Native|Public) // @ game+0x1ccba60
};

// Class Solarland.SCustomizedGameModeManager
// Size: 0x80 (Inherited: 0x28)
struct USCustomizedGameModeManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameMode_JobManager* JobManager; // 0x30(0x08)
	struct USolarGameMode_DataManager* DataManager; // 0x38(0x08)
	struct USolarGameMode_PlayerManager* PlayerManager; // 0x40(0x08)
	struct USolarGameMode_CharacterManager* CharacterManager; // 0x48(0x08)
	struct USolarGameMode_LevelManager* LevelManager; // 0x50(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x58(0x08)
	struct USolarGameMode_EffectJobManager* EffectJobManager; // 0x60(0x08)
	struct USCustomizedMode_AttributeManager* AttributeManager; // 0x68(0x08)
	struct USolarGameModeData* GameModeData; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)

	void InitModeById(int32_t ModeID); // Function Solarland.SCustomizedGameModeManager.InitModeById // (Final|Native|Public) // @ game+0x1ccbff0
};

// Class Solarland.SCustomizedGameState
// Size: 0x478 (Inherited: 0x3f0)
struct ASCustomizedGameState : ASBattleGameState {
	char pad_3F0[0x8]; // 0x3f0(0x08)
	struct FString ModeConfigPath; // 0x3f8(0x10)
	struct FString ModeParams; // 0x408(0x10)
	enum class ESolarCustomMode_InGameState InGameState; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct FString CurrentLevel; // 0x420(0x10)
	struct TArray<struct USGameMode_Player*> PlayerDatas; // 0x430(0x10)
	struct TArray<struct FString> LoadElementLevels; // 0x440(0x10)
	struct TArray<struct FString> UnLoadElementLevels; // 0x450(0x10)
	char pad_460[0x8]; // 0x460(0x08)
	struct TArray<struct FSCustomizedModeRepData> RepDatas; // 0x468(0x10)

	void OnRep_UnLoadElementLevels(); // Function Solarland.SCustomizedGameState.OnRep_UnLoadElementLevels // (Final|Native|Public) // @ game+0x1ccc700
	void OnRep_PlayerDatas(); // Function Solarland.SCustomizedGameState.OnRep_PlayerDatas // (Final|Native|Public) // @ game+0x1ccc6e0
	void OnRep_ModeDatas(); // Function Solarland.SCustomizedGameState.OnRep_ModeDatas // (Final|Native|Public) // @ game+0x1ccc6c0
	void OnRep_GameState(); // Function Solarland.SCustomizedGameState.OnRep_GameState // (Final|Native|Public) // @ game+0x1ccc680
	void OnRep_ElementLevels(); // Function Solarland.SCustomizedGameState.OnRep_ElementLevels // (Final|Native|Public) // @ game+0x1ccc620
	void OnRep_CurrentLevel(); // Function Solarland.SCustomizedGameState.OnRep_CurrentLevel // (Final|Native|Public) // @ game+0x1ccc5e0
	void MulticastLoadLevel(struct FString LevelName); // Function Solarland.SCustomizedGameState.MulticastLoadLevel // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1ccc480
	struct USGameMode_Player* GetPlayerByPlayerState(struct ASolarPlayerState* InPlayerState); // Function Solarland.SCustomizedGameState.GetPlayerByPlayerState // (Final|Native|Public) // @ game+0x1ccbdc0
	void ClientRefreshPlayers(); // Function Solarland.SCustomizedGameState.ClientRefreshPlayers // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1257810
};

// Class Solarland.SCustomizedMode_AttributeManager
// Size: 0x38 (Inherited: 0x28)
struct USCustomizedMode_AttributeManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Solarland.SCustomizedMode_LocalCharacterReady
// Size: 0x48 (Inherited: 0x30)
struct USCustomizedMode_LocalCharacterReady : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnModeLocalCharacterReady; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)

	struct USCustomizedMode_LocalCharacterReady* LocalCharacterReady(struct UObject* WorldContextObject); // Function Solarland.SCustomizedMode_LocalCharacterReady.LocalCharacterReady // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ccc3a0
	void HandleCharacterReady(); // Function Solarland.SCustomizedMode_LocalCharacterReady.HandleCharacterReady // (Final|Native|Public) // @ game+0x1ccbe80
};

// Class Solarland.SCustomizedMode_PlayerDelay
// Size: 0x50 (Inherited: 0x30)
struct USCustomizedMode_PlayerDelay : UBlueprintAsyncActionBase {
	struct USGameMode_Player* Player; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
	struct FMulticastInlineDelegate OnTimeUp; // 0x40(0x10)

	void HandleTimeUp(); // Function Solarland.SCustomizedMode_PlayerDelay.HandleTimeUp // (Final|Native|Public) // @ game+0x1ccbee0
	struct USCustomizedMode_PlayerDelay* DelayForPlayer(struct UObject* WorldContextObject, struct USGameMode_Player* Player, float Duration); // Function Solarland.SCustomizedMode_PlayerDelay.DelayForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ccb860
};

// Class Solarland.SCustomizedMode_ModeDataReady
// Size: 0x48 (Inherited: 0x30)
struct USCustomizedMode_ModeDataReady : UBlueprintAsyncActionBase {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnModeDataReadyComplete; // 0x38(0x10)

	void HandleModeDataReadyComplete(); // Function Solarland.SCustomizedMode_ModeDataReady.HandleModeDataReadyComplete // (Final|Native|Public) // @ game+0x1ccbec0
	struct USCustomizedMode_ModeDataReady* BindModeDataReady(struct UObject* WorldContextObject); // Function Solarland.SCustomizedMode_ModeDataReady.BindModeDataReady // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ccb110
};

// Class Solarland.SCustomizedMode_ModePlayerReady
// Size: 0x48 (Inherited: 0x30)
struct USCustomizedMode_ModePlayerReady : UBlueprintAsyncActionBase {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnModePlayerReadyComplete; // 0x38(0x10)

	void HandleModePlayerReadyComplete(); // Function Solarland.SCustomizedMode_ModePlayerReady.HandleModePlayerReadyComplete // (Final|Native|Public) // @ game+0x1ccbec0
	struct USCustomizedMode_ModePlayerReady* BindModePlayerReady(struct UObject* WorldContextObject); // Function Solarland.SCustomizedMode_ModePlayerReady.BindModePlayerReady // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ccb190
};

// Class Solarland.SolarGameModeWeaponAction
// Size: 0x100 (Inherited: 0x30)
struct USolarGameModeWeaponAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate OnCompleted; // 0x30(0x10)
	char pad_40[0xc0]; // 0x40(0xc0)

	struct USolarGameModeWeaponAction* SetCharacterWeaponBySeq(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool bDestroyPrevWeapon, enum class EWeaponSlotType Slot, int32_t ItemID); // Function Solarland.SolarGameModeWeaponAction.SetCharacterWeaponBySeq // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ccc980
	void OnWeaponCreated(enum class EWeaponSlotType SlotIndex, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.OnWeaponCreated // (Final|Native|Public) // @ game+0x1ccc760
	void CreateWeaponAsync(enum class EWeaponSlotType SlotIndex, bool bDestroyPrevWeapon, struct FSolarItemData& InItemData, struct USolarBackpackComponent* InSolarBackpackComponent); // Function Solarland.SolarGameModeWeaponAction.CreateWeaponAsync // (Final|Native|Public|HasOutParms) // @ game+0x1ccb690
};

// Class Solarland.SCustomizedModeManagerInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomizedModeManagerInterface : UInterface {
};

// Class Solarland.SCustomMode_ElementInterface
// Size: 0x28 (Inherited: 0x28)
struct USCustomMode_ElementInterface : UInterface {

	void ResetElement(); // Function Solarland.SCustomMode_ElementInterface.ResetElement // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xb5b260
	void FollowTarget(struct AActor* Target); // Function Solarland.SCustomMode_ElementInterface.FollowTarget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1ccb9e0
};

// Class Solarland.SCustomMode_LoadLevelAction
// Size: 0x78 (Inherited: 0x30)
struct USCustomMode_LoadLevelAction : UBlueprintAsyncActionBase {
	char pad_30[0x28]; // 0x30(0x28)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x58(0x10)
	struct FMulticastInlineDelegate OnLoadComplete; // 0x68(0x10)

	struct USCustomMode_LoadLevelAction* LoadLevel(struct UObject* WorldContextObject, struct FString LevelName, struct TArray<struct FString>& Elements); // Function Solarland.SCustomMode_LoadLevelAction.LoadLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ccc240
	void HandleLoadComplete(); // Function Solarland.SCustomMode_LoadLevelAction.HandleLoadComplete // (Final|Native|Public) // @ game+0x1cb5b70
};

// Class Solarland.SCustomMode_LoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCustomMode_LoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementLoadComplete; // 0x48(0x10)

	struct USCustomMode_LoadElementAction* LoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCustomMode_LoadElementAction.LoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ccc130
	void HandleElementLoadComplete(); // Function Solarland.SCustomMode_LoadElementAction.HandleElementLoadComplete // (Final|Native|Public) // @ game+0x1cb5b50
};

// Class Solarland.SCustomMode_UnLoadElementAction
// Size: 0x58 (Inherited: 0x30)
struct USCustomMode_UnLoadElementAction : UBlueprintAsyncActionBase {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnElementUnLoadComplete; // 0x48(0x10)

	struct USCustomMode_UnLoadElementAction* UnLoadElementLevel(struct UObject* WorldContextObject, struct TArray<struct FString>& Elements); // Function Solarland.SCustomMode_UnLoadElementAction.UnLoadElementLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ccced0
	void HandleElementUnLoadComplete(); // Function Solarland.SCustomMode_UnLoadElementAction.HandleElementUnLoadComplete // (Final|Native|Public) // @ game+0x1cb5b50
};

// Class Solarland.SCustomMode_PlayerController
// Size: 0xc70 (Inherited: 0xc48)
struct ASCustomMode_PlayerController : ASolarPlayerController {
	bool PlayerPlaced; // 0xc48(0x01)
	char pad_C49[0x7]; // 0xc49(0x07)
	struct FString LevelOfLoaded; // 0xc50(0x10)
	struct USGameMode_Player* GameModePlayer; // 0xc60(0x08)
	char pad_C68[0x8]; // 0xc68(0x08)

	void ShowNoticeWithoutLocalization(int32_t InType, int32_t InNoticeID, struct UObject* InClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SCustomMode_PlayerController.ShowNoticeWithoutLocalization // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ccccc0
	void ShowNoticeWithLocalization(int32_t NoticeId); // Function Solarland.SCustomMode_PlayerController.ShowNoticeWithLocalization // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1cccc30
	void ServerGetModeData(enum class ESolarGameModeHostType HostType, struct UObject* DataObject, struct FString DataName); // Function Solarland.SCustomMode_PlayerController.ServerGetModeData // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ccc860
	void NotifyPlayerPlaced(); // Function Solarland.SCustomMode_PlayerController.NotifyPlayerPlaced // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ccc5c0
	void NotifyLevelLoaded(struct FString LevelName); // Function Solarland.SCustomMode_PlayerController.NotifyLevelLoaded // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ccc520
	void ClientShowNoticeWithoutLocalization(int32_t InType, int32_t InNoticeID, struct UObject* InClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SCustomMode_PlayerController.ClientShowNoticeWithoutLocalization // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ccb480
	void ClientShowNoticeWithLocalization(int32_t NoticeId); // Function Solarland.SCustomMode_PlayerController.ClientShowNoticeWithLocalization // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ccb3f0
	void ClientOnPlayerOut(enum class ESolarGameMode_PlayerOutType OutType); // Function Solarland.SCustomMode_PlayerController.ClientOnPlayerOut // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ccb370
};

// Class Solarland.SelfHealingCueNotify_Static
// Size: 0xb0 (Inherited: 0x50)
struct USelfHealingCueNotify_Static : UGameplayCueNotify_Static {
	struct FVector RepairUIOffset; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TSoftObjectPtr<UMaterialInstance> RepairMaterial; // 0x60(0x28)
	struct TSoftObjectPtr<UStaticMesh> RepairMesh; // 0x88(0x28)
};

// Class Solarland.SeparatedPackagesSettings
// Size: 0x68 (Inherited: 0x38)
struct USeparatedPackagesSettings : UDeveloperSettings {
	struct FString PackageSavedSubDirctory; // 0x38(0x10)
	struct FString PackageServerSubURL; // 0x48(0x10)
	struct TArray<struct FSeparatedPackageInfo> SeparatedPackagesInfo; // 0x58(0x10)

	bool FindSeparatedPackageInfoByID(int32_t InPkgID, struct FSeparatedPackageInfo& OutInfo); // Function Solarland.SeparatedPackagesSettings.FindSeparatedPackageInfoByID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd0900
};

// Class Solarland.SeparatedPkgDownloader
// Size: 0xf8 (Inherited: 0x28)
struct USeparatedPkgDownloader : UObject {
	struct FMulticastInlineDelegate OnDownloadInfoDetected; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloading; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSepPkgReady; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSepPkgDownloadFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedPkgDownloader; // 0x68(0x10)
	enum class EDownloadState DownloadState; // 0x78(0x01)
	char pad_79[0x27]; // 0x79(0x27)
	int64_t StartTimestamp; // 0xa0(0x08)
	char pad_A8[0x50]; // 0xa8(0x50)

	void StartGettingSeparatedPackage(); // Function Solarland.SeparatedPkgDownloader.StartGettingSeparatedPackage // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd2590
	bool ResumeDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x1cd2320
	void ResumeDownloading(); // Function Solarland.SeparatedPkgDownloader.ResumeDownloading // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd2350
	bool PauseDownloadSeparatedPaks(); // Function Solarland.SeparatedPkgDownloader.PauseDownloadSeparatedPaks // (Final|Native|Protected) // @ game+0x1cd2070
	void OnPaksMountFailed(); // Function Solarland.SeparatedPkgDownloader.OnPaksMountFailed // (Final|Native|Protected) // @ game+0x1cd2050
	void OnPaksMountCompleted(int32_t InLastMountOrder); // Function Solarland.SeparatedPkgDownloader.OnPaksMountCompleted // (Final|Native|Protected) // @ game+0x1cd1fd0
	void OnPaksFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPaksFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1cd1e80
	void OnPackageListFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgDownloader.OnPackageListFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1cd1d30
	void OnHashCheckFailed(); // Function Solarland.SeparatedPkgDownloader.OnHashCheckFailed // (Final|Native|Protected) // @ game+0x1cd1ae0
	void OnEacPakCompleted(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnEacPakCompleted // (Final|Native|Protected) // @ game+0x1cd18a0
	void OnEachPakDownloading(struct FString Filename, int32_t DownloadSize, int32_t TotalSize, int32_t CachedSize); // Function Solarland.SeparatedPkgDownloader.OnEachPakDownloading // (Final|Native|Protected) // @ game+0x1cd1980
	void OnAllPaksCompleted(struct TArray<struct FString>& LocalFilePaths, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.OnAllPaksCompleted // (Final|Native|Protected|HasOutParms) // @ game+0x1cd1780
	int64_t GetLocalTime(); // Function Solarland.SeparatedPkgDownloader.GetLocalTime // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1cd0ee0
	void CollectPaksFromList(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgDownloader.CollectPaksFromList // (Final|Native|Protected) // @ game+0x1cd0820
	void ClearEvents(); // Function Solarland.SeparatedPkgDownloader.ClearEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd0780
};

// Class Solarland.SeparatedPkgListDownloader
// Size: 0x128 (Inherited: 0x28)
struct USeparatedPkgListDownloader : UObject {
	struct FMulticastInlineDelegate OnSepPkgListDownloading; // 0x28(0x10)
	struct FMulticastInlineDelegate OnSepPkgListReady; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void SepPkgListReady(int32_t PkgID); // Function Solarland.SeparatedPkgListDownloader.SepPkgListReady // (Final|Native|Public) // @ game+0x1cd2470
	void SepPkgDownloading(int32_t PkgID, int32_t ChunkDownloadedSize, int32_t ChunkTotalSize); // Function Solarland.SeparatedPkgListDownloader.SepPkgDownloading // (Final|Native|Public) // @ game+0x1cd2370
};

// Class Solarland.SeparatedPkgManager
// Size: 0x158 (Inherited: 0x30)
struct USeparatedPkgManager : UGameInstanceSubsystem {
	struct FMulticastInlineDelegate OnFileListDownloaded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFileListFailed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSepPkgDataInitFinish; // 0x50(0x10)
	char pad_60[0x90]; // 0x60(0x90)
	struct TMap<int32_t, struct USeparatedPkgDownloader*> ActiveDownloaders; // 0xf0(0x50)
	struct USolarlandFileDownloader* FileListDownloader; // 0x140(0x08)
	char pad_148[0x10]; // 0x148(0x10)

	bool TryStartDownloadHighResResources(struct USeparatedPkgListDownloader*& OutDownloder); // Function Solarland.SeparatedPkgManager.TryStartDownloadHighResResources // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd25e0
	void StartDownloadFileList(struct FString InCurrentCDNURL); // Function Solarland.SeparatedPkgManager.StartDownloadFileList // (Final|Native|Public) // @ game+0x1cd24f0
	bool RequireSeparatedPackageListDownload(struct TArray<int32_t>& PkgIDList, struct USeparatedPkgListDownloader*& OutDownloader); // Function Solarland.SeparatedPkgManager.RequireSeparatedPackageListDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd2220
	bool RequireSeparatedPackageDownload(int32_t InPkgID, struct USeparatedPkgDownloader*& OutDownloader, bool bIncludeMain, bool bIncludeOptional); // Function Solarland.SeparatedPkgManager.RequireSeparatedPackageDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd20a0
	void OnPackageFileListFailed(enum class EFileDownloadError InErrorType, int32_t InErrorCode, struct TArray<struct FString>& Headers); // Function Solarland.SeparatedPkgManager.OnPackageFileListFailed // (Final|Native|Protected|HasOutParms) // @ game+0x1cd1be0
	void OnPackageFileListDownload(struct FString LocalFilePath, int64_t CDNServerTimeStamp); // Function Solarland.SeparatedPkgManager.OnPackageFileListDownload // (Final|Native|Protected) // @ game+0x1cd1b00
	bool IsSepareatedPkgListDownloading(struct TArray<int32_t>& PkgIDList); // Function Solarland.SeparatedPkgManager.IsSepareatedPkgListDownloading // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd1610
	bool IsSepareatedPkgDownloading(int32_t& PkgID); // Function Solarland.SeparatedPkgManager.IsSepareatedPkgDownloading // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd1570
	bool IsSeparatedPackageListAvailable(struct TArray<int32_t>& PkgIDList); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageListAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd14b0
	bool IsSeparatedPackageFileListExist(); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageFileListExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd1480
	bool IsSeparatedPackageAvailable(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.IsSeparatedPackageAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd13f0
	void InitPakIDToFileNameMap(); // Function Solarland.SeparatedPkgManager.InitPakIDToFileNameMap // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd13d0
	bool IfSeparatedPakDownloaded(int32_t PakID, bool bIsOptional); // Function Solarland.SeparatedPkgManager.IfSeparatedPakDownloaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd1310
	bool GetTotalSizeOfPak(int32_t InPackageID, int32_t& OutTotalSize); // Function Solarland.SeparatedPkgManager.GetTotalSizeOfPak // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cd10e0
	struct USeparatedPkgManager* GetSeparatedPackageManager(struct UObject* WorldContextObject); // Function Solarland.SeparatedPkgManager.GetSeparatedPackageManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cd1060
	int32_t GetDownloadedSizeOfPak(int32_t ChunkID); // Function Solarland.SeparatedPkgManager.GetDownloadedSizeOfPak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd0d00
	struct USeparatedPkgDownloader* GetActiveDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.GetActiveDownloader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd0b20
	void ClearSepPkgDownloader(int32_t InPkgID); // Function Solarland.SeparatedPkgManager.ClearSepPkgDownloader // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd07a0
	void ClearAllDownloaders(); // Function Solarland.SeparatedPkgManager.ClearAllDownloaders // (Final|Native|Public|BlueprintCallable) // @ game+0x1cd0760
	void AllOptionalPaksDownloaded(bool bAllDownloaded); // Function Solarland.SeparatedPkgManager.AllOptionalPaksDownloaded // (Final|Native|Public) // @ game+0x1cd0640
};

// Class Solarland.SequenceNode
// Size: 0x90 (Inherited: 0x70)
struct USequenceNode : UActionNode {
	struct TArray<struct UActionNode*> Nodes; // 0x70(0x10)
	struct TArray<struct UActionNode*> ExecutingNodes; // 0x80(0x10)

	int32_t TotalCount(); // Function Solarland.SequenceNode.TotalCount // (Final|Native|Public) // @ game+0x1cd25b0
	struct UActionNode* GetCurrentExecutingNode(); // Function Solarland.SequenceNode.GetCurrentExecutingNode // (Final|Native|Public) // @ game+0x1cd0cd0
	struct USequenceNode* Append(struct UActionNode* Node); // Function Solarland.SequenceNode.Append // (Final|Native|Public) // @ game+0x1cd06d0
};

// Class Solarland.SettlementFormula
// Size: 0x228 (Inherited: 0x228)
struct ASettlementFormula : AActor {

	struct TArray<struct FString> MakeStringForLuaByAnyStruct(struct UObject* AnyStruct); // Function Solarland.SettlementFormula.MakeStringForLuaByAnyStruct // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cd16d0
	int32_t GetZomborg(struct FSettlementParam_Zomborg& InParam); // Function Solarland.SettlementFormula.GetZomborg // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd1250
	void GetWeeklyChallenge(struct FString InSolarPlayerID, struct TArray<struct FString>& OutChallengeName, struct TArray<int32_t>& OutChallengeValue); // Function Solarland.SettlementFormula.GetWeeklyChallenge // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetWeaponExp(struct FSettlementParam_WeaponExp& InParam); // Function Solarland.SettlementFormula.GetWeaponExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd11b0
	void GetStrategyGuideConditions(struct ASolarPlayerState* InPS, struct TArray<int32_t>& OutResult); // Function Solarland.SettlementFormula.GetStrategyGuideConditions // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<int32_t> GetShowPageIndexs(struct FSettlementParam_PageParam& InParam); // Function Solarland.SettlementFormula.GetShowPageIndexs // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FString> GetSettlementItems(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetSettlementItems // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FString> GetPersonalResultPlayerExData(struct FString SolarPlayerId, struct FString& PBName); // Function Solarland.SettlementFormula.GetPersonalResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd0f10
	float GetKDA(struct FSettlementParam_KDA& InParam); // Function Solarland.SettlementFormula.GetKDA // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct FString> GetGroupResultPlayerExData(struct FString SolarPlayerId, struct FString& PBName); // Function Solarland.SettlementFormula.GetGroupResultPlayerExData // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd0d90
	struct TArray<struct FSettlementParam_ExtraRewardInfo> GetExtraRewards(struct FSettlementParam_CommonExp& InParam); // Function Solarland.SettlementFormula.GetExtraRewards // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetCharaterExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetCharaterExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd0bb0
	int32_t GetAccountExp(struct FSettlementParam_CommonExp& InParam, struct FSolarGameModeInfo& InGameInfo); // Function Solarland.SettlementFormula.GetAccountExp // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cd0a00
	float CalculateMVPScore(struct FSolarGameModeInfo& GameInfo, struct FSettlementParam_MVP& Param); // Function Solarland.SettlementFormula.CalculateMVPScore // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SettlementGameMode
// Size: 0x4c0 (Inherited: 0x4b0)
struct ASettlementGameMode : ASolarGameMode {
	char pad_4B0[0x10]; // 0x4b0(0x10)

	void PostLevelLoad(); // Function Solarland.SettlementGameMode.PostLevelLoad // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SettlementPageConfig
// Size: 0x80 (Inherited: 0x30)
struct USettlementPageConfig : UDataAsset {
	int32_t PageSkipIndex; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct TSoftClassPtr<UObject>> SettlementPage; // 0x38(0x10)
	struct FString EnterSettleSoundEvent; // 0x48(0x10)
	struct FString ExitSettleSoundEvent; // 0x58(0x10)
	struct TArray<int32_t> PageIndexs; // 0x68(0x10)
	bool IsCustomRoom; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Solarland.SettlementStageManager
// Size: 0x50 (Inherited: 0x28)
struct USettlementStageManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	int32_t CurStageIndex; // 0x38(0x04)
	int32_t SettlementStageConfigID; // 0x3c(0x04)
	struct UDataTable* SettlementConfig; // 0x40(0x08)
	struct ASettlementFormula* Formula; // 0x48(0x08)

	void UpdateModeConfig(int32_t InConfigID); // Function Solarland.SettlementStageManager.UpdateModeConfig // (Final|Native|Public) // @ game+0x1cd6c90
	void SkipToTarget(); // Function Solarland.SettlementStageManager.SkipToTarget // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowNextStage(); // Function Solarland.SettlementStageManager.ShowNextStage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowDiePage(); // Function Solarland.SettlementStageManager.ShowDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void Init(); // Function Solarland.SettlementStageManager.Init // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USolarUWSettlementBase* GetSettlementUIClass(); // Function Solarland.SettlementStageManager.GetSettlementUIClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd5af0
	int32_t GetSettlementStageID(); // Function Solarland.SettlementStageManager.GetSettlementStageID // (Final|Native|Public|Const) // @ game+0x1cd5ac0
	struct FSettlementConfig GetSettlementConfigRow(); // Function Solarland.SettlementStageManager.GetSettlementConfigRow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd5920
	struct ASettlementFormula* GetFormula(); // Function Solarland.SettlementStageManager.GetFormula // (Final|Native|Public) // @ game+0x1cd5860
	struct FString GetClassRelativePathName(struct UObject* InClass); // Function Solarland.SettlementStageManager.GetClassRelativePathName // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseDiePage(); // Function Solarland.SettlementStageManager.CloseDiePage // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SNonCombatGameMode
// Size: 0x4b0 (Inherited: 0x4b0)
struct ASNonCombatGameMode : ASolarGameMode {
};

// Class Solarland.SHomeGameMode
// Size: 0x4b8 (Inherited: 0x4b0)
struct ASHomeGameMode : ASNonCombatGameMode {
	char pad_4B0[0x8]; // 0x4b0(0x08)

	struct APawn* SpawnHomePawnAtTransformAndPossess(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Solarland.SHomeGameMode.SpawnHomePawnAtTransformAndPossess // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cd6b70
	void OnSelfPawnSpawned(); // Function Solarland.SHomeGameMode.OnSelfPawnSpawned // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnReceiveRoomData(); // Function Solarland.SHomeGameMode.OnReceiveRoomData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InitFavoriteWeapons(); // Function Solarland.SHomeGameMode.InitFavoriteWeapons // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SNonCombatGameState
// Size: 0x3e8 (Inherited: 0x3e8)
struct ASNonCombatGameState : ASolarGameState {
};

// Class Solarland.SHomeGameState
// Size: 0x3e8 (Inherited: 0x3e8)
struct ASHomeGameState : ASNonCombatGameState {
};

// Class Solarland.ShootingTargetSettings
// Size: 0x60 (Inherited: 0x38)
struct UShootingTargetSettings : UDeveloperSettings {
	float ShootingTargetCleanupTime; // 0x38(0x04)
	struct FColor RingColor; // 0x3c(0x04)
	int32_t RingSegments; // 0x40(0x04)
	float RingSize; // 0x44(0x04)
	float HitPointSize; // 0x48(0x04)
	bool bIgnoreDPIScale; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float HUDRingRadius; // 0x50(0x04)
	struct FVector2D HUDRingOffset; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Solarland.ShootingTargetComponent
// Size: 0x360 (Inherited: 0x320)
struct UShootingTargetComponent : USceneComponent {
	struct TArray<float> Rings; // 0x318(0x10)
	bool bAutoShowDebug; // 0x328(0x01)
	char pad_331[0x2f]; // 0x331(0x2f)
};

// Class Solarland.SimpleEffectController
// Size: 0x40 (Inherited: 0x28)
struct USimpleEffectController : UActorEffectController {
	float SmoothSpeed; // 0x28(0x04)
	float TargetValue; // 0x2c(0x04)
	bool bFinishOnReached; // 0x30(0x01)
	bool bSmoothToValueOnStop; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	float TargetValueOnStop; // 0x34(0x04)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Solarland.SingleWeaponConfig
// Size: 0x7a8 (Inherited: 0x30)
struct USingleWeaponConfig : UDataAsset {
	struct FWeaponDebugFlag DebugFlag; // 0x30(0x04)
	enum class ESolarWeaponBrand WeaponBrand; // 0x34(0x01)
	enum class EWeaponType WeaponType; // 0x35(0x01)
	bool bSupportSecondaryFire; // 0x36(0x01)
	char pad_37[0x1]; // 0x37(0x01)
	struct TMap<struct FString, float> CharacterStateWeightMap; // 0x38(0x50)
	struct TArray<struct FMoveSpeedReduceCurveConfig> MoveSpeedReduceCurveConfigs; // 0x88(0x10)
	float MoveSpeedReduceBonusInHipFire; // 0x98(0x04)
	float MoveSpeedReduceBonusInAdsHipFire; // 0x9c(0x04)
	struct TArray<struct FName> MultiMuzzleSocketNames; // 0xa0(0x10)
	struct TArray<struct FName> MultiBulletSocketNames; // 0xb0(0x10)
	struct TArray<struct FName> MultiCastShellSocketNames; // 0xc0(0x10)
	struct TArray<struct FName> MultiCastShellOnScopeSocketNames; // 0xd0(0x10)
	bool bIsSingleWeapon; // 0xe0(0x01)
	bool bIsHeavyFireWeapon; // 0xe1(0x01)
	bool bUseSpecialFireInputRespondConfig; // 0xe2(0x01)
	struct FSolarWeaponFireInputRespondConfig FireInputRespondConfig; // 0xe3(0x0a)
	char pad_ED[0x3]; // 0xed(0x03)
	float AimOffsetReferenceAimDistance; // 0xf0(0x04)
	float MaxSpread; // 0xf4(0x04)
	float MinSpread; // 0xf8(0x04)
	float HipFireBaseSpread; // 0xfc(0x04)
	float ShoulderFireBaseSpread; // 0x100(0x04)
	float ADSBaseSpread; // 0x104(0x04)
	float VhADSBaseSpread; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct UWeaponShootConfig* WeaponShootConfig; // 0x110(0x08)
	bool bCalcSpreadByStandardDistance; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	float SpreadStandardDistance; // 0x11c(0x04)
	float SpreadStandardOriginMaxRange; // 0x120(0x04)
	bool bCalcSpreadByDistributionCurve; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0x128(0x88)
	struct TMap<struct FString, float> SpreadCOPMap; // 0x1b0(0x50)
	float SpreadStatuSpeed; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)
	struct TMap<struct FString, float> SpreadStatuIncreaseCoefficient; // 0x208(0x50)
	struct TMap<struct FString, float> SpreadStatuReduceCoefficient; // 0x258(0x50)
	struct USolarWeaponAT_CtrlFireBase* CtrlFireTaskClass; // 0x2a8(0x08)
	struct USolarWeaponAT_FireBase* FireTaskClass; // 0x2b0(0x08)
	struct UAmmoConfig* PrimaryAmmo; // 0x2b8(0x08)
	int32_t PrimaryAmmoIndex; // 0x2c0(0x04)
	int32_t PrimaryAmmoCap; // 0x2c4(0x04)
	struct UAmmoConfig* SecondaryAmmo; // 0x2c8(0x08)
	int32_t SecondaryAmmoIndex; // 0x2d0(0x04)
	int32_t SecondaryAmmoCap; // 0x2d4(0x04)
	struct UAmmoConfig* UpgradedSecAmmo; // 0x2d8(0x08)
	struct FLinearColor UpgradedSecAmmoColor; // 0x2e0(0x10)
	bool bNeedOverload; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	float OverloadMaxValue; // 0x2f4(0x04)
	float NormalOverloadCoolingRate; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x300(0x08)
	float OverloadCoolingPeriod; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct UCurveFloat* OverloadReduceRateCurve; // 0x310(0x08)
	float OverloadWarningRate; // 0x318(0x04)
	float WeaponSwitchTime; // 0x31c(0x04)
	bool bCanAutoFire; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	float AutoFireDelayMs; // 0x324(0x04)
	float AutoFireEndDelayMs; // 0x328(0x04)
	float AutoFireCompensationRate; // 0x32c(0x04)
	bool bCanAimAssist; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct FWeaponAssistAimWeaponConfigAll AssistAimWeaponConfigAll; // 0x338(0x60)
	bool bOneKeyScope; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float ScopeOpenTime; // 0x39c(0x04)
	float ScopeOpenFOVTimeScale; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct TArray<enum class EWeaponPartType> SupportChangeTypeArray; // 0x3a8(0x10)
	struct TArray<int32_t> DefaultPartsArray; // 0x3b8(0x10)
	float RecoilFireTimeWithScope; // 0x3c8(0x04)
	float RecoilRecoverTimeWithScope; // 0x3cc(0x04)
	float RecoilMagnitudeWithScope; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct UCurveFloat* RecoilCurveWithScope; // 0x3d8(0x08)
	int32_t RecoilSkipSequenceSumWithScope; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct TArray<struct FVector2D> RecoilCurveSequenceWithScope; // 0x3e8(0x10)
	float RecoilFireTimeNoScope; // 0x3f8(0x04)
	float RecoilRecoverTimeNoScope; // 0x3fc(0x04)
	float RecoilMagnitudeNoScope; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct UCurveFloat* RecoilCurveNoScope; // 0x408(0x08)
	int32_t RecoilSkipSequenceSumNoScope; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct TArray<struct FVector2D> RecoilCurveSequenceNoScope; // 0x418(0x10)
	bool bIsGatling; // 0x428(0x01)
	char pad_429[0x3]; // 0x429(0x03)
	float GatlingRotaryAcceleration; // 0x42c(0x04)
	float GatlingFireRotarySpeed; // 0x430(0x04)
	float GatlingMaxRotarySpeed; // 0x434(0x04)
	float GatlingHoldTime; // 0x438(0x04)
	float GatlingRotaryAttenuation; // 0x43c(0x04)
	float GatlingScatteringMagnification; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct UParticleSystem* GatlingOverHeatSmokeEffect; // 0x448(0x08)
	struct TArray<struct UGameplayAbility*> GasAbilities; // 0x450(0x10)
	struct FName Socket; // 0x460(0x08)
	struct FName LeftHandIKTargetSocket; // 0x468(0x08)
	struct FVector LeftHandIkEffectLocation; // 0x470(0x0c)
	struct FVector LeftHandIkJointLocation; // 0x47c(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdle; // 0x488(0x0c)
	struct FVector LeftHandIkJointLocationForGunIdleWhenCrouch; // 0x494(0x0c)
	struct FVector RightHandIkEffectLocation; // 0x4a0(0x0c)
	struct FVector RightHandIkJointLocation; // 0x4ac(0x0c)
	struct FLeftHandGripConfig LeftHandGripRotationConfig; // 0x4b8(0x84)
	struct FLeftHandGripConfig LeftHandGripRotationConfigForGunIdle; // 0x53c(0x84)
	bool bShowCoolDownWidget; // 0x5c0(0x01)
	char pad_5C1[0x7]; // 0x5c1(0x07)
	struct UCrossHairWidget* Crosshair; // 0x5c8(0x08)
	struct UFeedbackWidget* FeedbackWidget; // 0x5d0(0x08)
	struct FSolarWeaponCrosshairData CrosshairWidgetData; // 0x5d8(0x38)
	struct FSoftObjectPath WeaponIcon; // 0x610(0x18)
	struct FSlateBrush PrimaryFireBrush; // 0x628(0x98)
	int32_t PrimaryFireTxt; // 0x6c0(0x04)
	char pad_6C4[0x4]; // 0x6c4(0x04)
	struct FSlateBrush SecondaryFireBrush; // 0x6c8(0x98)
	int32_t SecondaryFireTxt; // 0x760(0x04)
	char pad_764[0x4]; // 0x764(0x04)
	struct FString WeaponTextType; // 0x768(0x10)
	struct FSoftObjectPath ItemIcon; // 0x778(0x18)
	struct FSoftObjectPath UpgradeParticleSystem; // 0x790(0x18)

	void InitSupportChangeTypeArray(struct TArray<int32_t> Data); // Function Solarland.SingleWeaponConfig.InitSupportChangeTypeArray // (Final|Native|Public) // @ game+0x1cd6360
	void InitStatuSpreadCoefficient(struct TArray<struct FString>& Increasekeys, struct TArray<float>& Increasevalues, struct TArray<struct FString>& Reducekeys, struct TArray<float>& Reducevalues); // Function Solarland.SingleWeaponConfig.InitStatuSpreadCoefficient // (Final|Native|Public|HasOutParms) // @ game+0x1cd6130
	void InitSpreadData(float Max, float Min, float hipbase, float adsbase, float vhadsbase, float statuspeed); // Function Solarland.SingleWeaponConfig.InitSpreadData // (Final|Native|Public) // @ game+0x1cd5f50
	void InitSpreadCOPMap(struct TArray<struct FString>& Keys, struct TArray<float>& Values); // Function Solarland.SingleWeaponConfig.InitSpreadCOPMap // (Final|Native|Public|HasOutParms) // @ game+0x1cd5e10
	void InitScopeData(bool onekey, float scopetime); // Function Solarland.SingleWeaponConfig.InitScopeData // (Final|Native|Public) // @ game+0x1cd5d40
	void InitOverload(bool InAllow, float InMax, float InNormalCoolingRate, float InCoolingPeriod, float InOverloadWarningRate); // Function Solarland.SingleWeaponConfig.InitOverload // (Final|Native|Public) // @ game+0x1cd5bb0
	void InitBase(int32_t WPType); // Function Solarland.SingleWeaponConfig.InitBase // (Final|Native|Public) // @ game+0x1cd5b30
	bool GetIsSupportPart(enum class EWeaponPartType Type); // Function Solarland.SingleWeaponConfig.GetIsSupportPart // (Final|Native|Public) // @ game+0x1cd5890
};

// Class Solarland.SkeletalMeshComponentConfig
// Size: 0x60 (Inherited: 0x30)
struct USkeletalMeshComponentConfig : UDataAsset {
	struct FSoftObjectPath AnimClass; // 0x30(0x18)
	struct FSoftObjectPath SkeletalMesh; // 0x48(0x18)
};

// Class Solarland.SkillBPAndExtraConfig
// Size: 0x98 (Inherited: 0x30)
struct USkillBPAndExtraConfig : UDataAsset {
	struct FSoftObjectPath SkillBlueprint; // 0x30(0x18)
	int32_t SkillLevel; // 0x48(0x04)
	int32_t SkillItemQuality; // 0x4c(0x04)
	int32_t InnerSkillDescription; // 0x50(0x04)
	int32_t ShortSkillDescription; // 0x54(0x04)
	int32_t SkillCD; // 0x58(0x04)
	int32_t BuffUIPriority; // 0x5c(0x04)
	float DynamicBuffRemainTime; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FSoftObjectPath SkillIcon; // 0x68(0x18)
	struct FSoftObjectPath GrowIcon; // 0x80(0x18)
};

// Class Solarland.SkillConfig
// Size: 0xc0 (Inherited: 0x30)
struct USkillConfig : UDataAsset {
	int32_t SkillName; // 0x30(0x04)
	int32_t SkillType; // 0x34(0x04)
	int32_t SkillDescription; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FSoftObjectPath SkillIcon; // 0x40(0x18)
	struct FString KillIcon; // 0x58(0x10)
	float SkillVoiceDelay; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct TMap<int32_t, struct USkillBPAndExtraConfig*> SkillExtraConfigByPlayerLevel; // 0x70(0x50)
};

// Class Solarland.SkillScanWidget
// Size: 0x340 (Inherited: 0x340)
struct USkillScanWidget : USolarUserWidget {

	void OnCameraRight(float Value); // Function Solarland.SkillScanWidget.OnCameraRight // (Final|Native|Public) // @ game+0x1cdb8a0
	void OnCameraForward(float Value); // Function Solarland.SkillScanWidget.OnCameraForward // (Final|Native|Public) // @ game+0x1cdb820
};

// Class Solarland.SkydiveConfig
// Size: 0x1c8 (Inherited: 0x30)
struct USkydiveConfig : UDataAsset {
	float DefaultFallingSpeed; // 0x30(0x04)
	float MinFallingSpeed; // 0x34(0x04)
	float FallingBrakingDeceleration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve FlyingForwardPitchMappingCurve; // 0x40(0x88)
	struct FRuntimeFloatCurve MaxFlyingForwardSpeedCurve; // 0xc8(0x88)
	float MaxFlyingSidewardSpeed; // 0x150(0x04)
	float MaxFlyingAcceleration; // 0x154(0x04)
	float MinFlyingBrakingDeceleration; // 0x158(0x04)
	float MaxFlyingBrakingDeceleration; // 0x15c(0x04)
	float FlyingRotationSmoothSpeedYaw; // 0x160(0x04)
	float FlyingRotationSmoothSpeedPitch; // 0x164(0x04)
	float FlyingRotationSmoothSpeedYawOnFollowing; // 0x168(0x04)
	float FlyingRotationSmoothSpeedPitchOnFollowing; // 0x16c(0x04)
	float LandingHeight; // 0x170(0x04)
	float LandingFallingSpeed; // 0x174(0x04)
	float LandingFallingBrakingDeceleration; // 0x178(0x04)
	float LandingMaxFlyingSpeed; // 0x17c(0x04)
	float LandingFlyingAcceleration; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct TArray<struct FName> LandingIgnoredActorTags; // 0x188(0x10)
	struct TArray<struct FVector> FollowFormation; // 0x198(0x10)
	float SmoothTimeToCatchUpWithLeaderOnBeginning; // 0x1a8(0x04)
	struct FCharacterMovementNetworkOptions NetworkOptions; // 0x1ac(0x0c)
	struct FCharacterMovementSimulationOptions SimulationOptions; // 0x1b8(0x10)
};

// Class Solarland.SolarAbility
// Size: 0x310 (Inherited: 0x228)
struct ASolarAbility : AActor {
	struct ASolarAbility* MyAbilityClass; // 0x228(0x08)
	struct TArray<struct USolarAbilityEffect*> AbilityEffectClasses; // 0x230(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> AbilitySourceCharacter; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct FTransform SpawnTransform; // 0x250(0x30)
	bool InstancedAbility; // 0x280(0x01)
	bool DoNotAutoApply; // 0x281(0x01)
	bool ApplyToSource; // 0x282(0x01)
	bool RadialAbility; // 0x283(0x01)
	float RadialAbilityRadius; // 0x284(0x04)
	bool bRadialIgnoreCollision; // 0x288(0x01)
	bool bRadialIgnoreVehicle; // 0x289(0x01)
	bool CheckSourceToTargetCollision; // 0x28a(0x01)
	bool EnableAbilityDebug; // 0x28b(0x01)
	bool bActivated; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FString ExtraInfo; // 0x290(0x10)
	struct AActor* InitiatorActor; // 0x2a0(0x08)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x2b0(0x08)
	struct TMap<struct FString, float> EffectParams; // 0x2b8(0x50)
	char pad_308[0x8]; // 0x308(0x08)

	void WeaponApplyAbility(struct UObject* WorldContextObject, struct ASolarAbility* SolarAbilityClass, struct AActor* SourceActor, struct AActor* TargetActor, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FRotator& ProjRotator, struct FString InExtarInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.WeaponApplyAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cdcd30
	void StopSound(); // Function Solarland.SolarAbility.StopSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void StaticRemoveSolarAbilityFrom(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor); // Function Solarland.SolarAbility.StaticRemoveSolarAbilityFrom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cdc8f0
	void StaticApplySolarAbilityToWithHitResult(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct FHitResult& HitResult, float Scale, struct FString InExtarInfo, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation); // Function Solarland.SolarAbility.StaticApplySolarAbilityToWithHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cdc5f0
	void StaticApplySolarAbilityTo(struct ASolarAbility* AbilityClass, struct AActor* AffectingActor, struct AActor* SourceAcotr, struct AActor* Initiator, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo, struct UPrimitiveComponent* HitComponent); // Function Solarland.SolarAbility.StaticApplySolarAbilityTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cdc2a0
	void ServerSetActivated(); // Function Solarland.SolarAbility.ServerSetActivated // (Net|Native|Event|Public|NetServer) // @ game+0x7e17a0
	void RestoreSound(); // Function Solarland.SolarAbility.RestoreSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RemoveSolarAbilityFrom(struct AActor* ApplyToActor); // Function Solarland.SolarAbility.RemoveSolarAbilityFrom // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdbd20
	void PlaySound(); // Function Solarland.SolarAbility.PlaySound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void PauseSound(); // Function Solarland.SolarAbility.PauseSound // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	bool IsLocalControl(); // Function Solarland.SolarAbility.IsLocalControl // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda660
	bool InSameTeam(); // Function Solarland.SolarAbility.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda560
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarAbility.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1cda590
	bool CheckActor(struct AActor* SourceActor, struct AActor* TargetActor); // Function Solarland.SolarAbility.CheckActor // (Native|Event|Public|BlueprintEvent) // @ game+0x1cda340
	void ApplySolarAbilityTo(struct AActor* ApplyToActor, struct AActor* SourceActor); // Function Solarland.SolarAbility.ApplySolarAbilityTo // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda060
};

// Class Solarland.SolarAbilityComponent
// Size: 0x1f0 (Inherited: 0xb0)
struct USolarAbilityComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectMap; // 0xb8(0x50)
	struct TMap<struct USolarAbilityEffect*, struct USolarAbilityEffect*> AppliedEffectsThisTick; // 0x108(0x50)
	struct TArray<struct FReplicateEffectData> ReplicateEffectDatas; // 0x158(0x10)
	struct TMap<struct ASolarAbilityEffectAccessory*, struct TWeakObjectPtr<struct ASolarAbilityEffectAccessory>> EffectAccessoryMap; // 0x168(0x50)
	char pad_1B8[0x8]; // 0x1b8(0x08)
	bool CharacterWeaponDisable; // 0x1c0(0x01)
	bool CharacterMarked; // 0x1c1(0x01)
	char pad_1C2[0x2]; // 0x1c2(0x02)
	float MoveSpeedCoeffient; // 0x1c4(0x04)
	struct UMaterialInterface* OriginalMaterial; // 0x1c8(0x08)
	float ShieldRechargeCostCoefficient; // 0x1d0(0x04)
	char pad_1D4[0x1c]; // 0x1d4(0x1c)

	void OnRep_SpeedCoeffient(); // Function Solarland.SolarAbilityComponent.OnRep_SpeedCoeffient // (Final|Native|Public) // @ game+0x1cdbd00
	void OnRep_ReplicateEffectData(); // Function Solarland.SolarAbilityComponent.OnRep_ReplicateEffectData // (Final|Native|Public) // @ game+0x1cdbce0
	int32_t GetCharacterLevel(); // Function Solarland.SolarAbilityComponent.GetCharacterLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cda410
};

// Class Solarland.SolarAbilityEffect
// Size: 0x1a8 (Inherited: 0x28)
struct USolarAbilityEffect : UObject {
	struct FSoftObjectPath EffectIconPath; // 0x28(0x18)
	struct TArray<struct FSolarAttributeModifier> AttributeModifiers; // 0x40(0x10)
	struct TArray<struct ASolarAbilityEffectAccessory*> AbilityEffectAccessoryClass; // 0x50(0x10)
	bool bAllowMultiple; // 0x60(0x01)
	char pad_61[0xbf]; // 0x61(0xbf)
	struct ASolarCharacterBase* AbilityEffectAffectingCharacter; // 0x120(0x08)
	struct USolarAbilityComponent* AbilityEffectAffectingAbilityComponent; // 0x128(0x08)
	struct ASolarAbility* AffectingAbility; // 0x130(0x08)
	struct FString ExtraInfo; // 0x138(0x10)
	struct TMap<struct FString, float> AttributeParamMap; // 0x148(0x50)
	char pad_198[0x10]; // 0x198(0x10)
};

// Class Solarland.SolarAbilityEffectAccessory
// Size: 0x238 (Inherited: 0x228)
struct ASolarAbilityEffectAccessory : AActor {
	struct TWeakObjectPtr<struct ASolarCharacterBase> EffectAffectingCharacter; // 0x228(0x08)
	enum class ESolarAbilityInstanceType EffectAccessoryInstanceType; // 0x230(0x01)
	bool SpawnAtHitLocation; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
};

// Class Solarland.SolarAbilitySummonItem
// Size: 0x320 (Inherited: 0x310)
struct ASolarAbilitySummonItem : ASolarAbility {
	bool bWaitSummonItemClassLoad; // 0x308(0x01)
	struct UObject* CachedLoadedVehicleClass; // 0x310(0x08)
	char pad_319[0x7]; // 0x319(0x07)

	void SummonItem(); // Function Solarland.SolarAbilitySummonItem.SummonItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cdc9a0
	void SetSolarVehicleID(struct AActor* InSource, int32_t InVehicleID); // Function Solarland.SolarAbilitySummonItem.SetSolarVehicleID // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdc1e0
	void OnSummonFinish(struct AActor* InSummonItem); // Function Solarland.SolarAbilitySummonItem.OnSummonFinish // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnAsyncVehicleObjectLoaded(struct UObject* AsyncLoadedObject); // Function Solarland.SolarAbilitySummonItem.OnAsyncVehicleObjectLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LoadAsyncVehicleObject(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarAbilitySummonItem.LoadAsyncVehicleObject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cdb610
	void InitializeWhenSpawnItem(struct AActor* Item); // Function Solarland.SolarAbilitySummonItem.InitializeWhenSpawnItem // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UObject* GetSummonItemClass(); // Function Solarland.SolarAbilitySummonItem.GetSummonItemClass // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetSolarVehicleID(); // Function Solarland.SolarAbilitySummonItem.GetSolarVehicleID // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UObject* GetSolarVehicleClass(int32_t InVehicleID); // Function Solarland.SolarAbilitySummonItem.GetSolarVehicleClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda440
	void Config(int32_t InSourceID, int32_t InSummonID, struct AActor* InPlaceholder); // Function Solarland.SolarAbilitySummonItem.Config // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarAbilitySystemComponent
// Size: 0x13a0 (Inherited: 0x12f8)
struct USolarAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x8]; // 0x12f8(0x08)
	struct USolarGameplayAbilitySet* DefaultAbilitySet; // 0x1300(0x08)
	char pad_1308[0x60]; // 0x1308(0x60)
	struct USkeletalMeshComponent* OptionMeshForRepMontage; // 0x1368(0x08)
	bool bPendingMontageRepForMesh; // 0x1370(0x01)
	char pad_1371[0x7]; // 0x1371(0x07)
	struct TArray<struct FGameplayAbilityLocalAnimMontageForMesh> LocalAnimMontageInfoForMeshes; // 0x1378(0x10)
	struct TArray<struct FGameplayAbilityRepAnimMontageForMesh> RepAnimMontageInfoForMeshes; // 0x1388(0x10)
	char pad_1398[0x8]; // 0x1398(0x08)

	struct FGameplayAbilitySpecHandle UpgradeAbilityLevelBySpec(struct FGameplayAbilitySpecHandle AbilitySpecHandle, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelBySpec // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdcc10
	void UpgradeAbilityLevelByClass(struct UGameplayAbility* AbilityClass, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevelByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdcb10
	void UpgradeAbilityLevel(struct FGameplayTagContainer AbilityTags, bool bForNextActivate, int32_t LevelUp); // Function Solarland.SolarAbilitySystemComponent.UpgradeAbilityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdc9c0
	void ServerCurrentMontageSetPlayRateForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float InPlayRate); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetPlayRateForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1cdc0a0
	void ServerCurrentMontageSetNextSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, float ClientPosition, struct FName SectionName, struct FName NextSectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageSetNextSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1cdbee0
	void ServerCurrentMontageJumpToSectionNameForMesh(struct USkeletalMeshComponent* InMesh, struct UAnimMontage* ClientAnimMontage, struct FName SectionName); // Function Solarland.SolarAbilitySystemComponent.ServerCurrentMontageJumpToSectionNameForMesh // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // @ game+0x1cdbda0
	void PostDefaultAbilitiesGranted(); // Function Solarland.SolarAbilitySystemComponent.PostDefaultAbilitiesGranted // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_ReplicatedAnimMontageForMesh(); // Function Solarland.SolarAbilitySystemComponent.OnRep_ReplicatedAnimMontageForMesh // (Native|Protected) // @ game+0x1259150
	void OnNotifiedTagChanged(struct FGameplayTag& Tag, bool bAdded); // Function Solarland.SolarAbilitySystemComponent.OnNotifiedTagChanged // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1cdbc00
	void OnInternalMetaAttributeUpdate(struct USolarMetaAttributeSet* MetaAttributeSet, struct FGameplayModifierEvaluatedData& EvaluatedData, struct FGameplayEffectSpec& EffectSpec, struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.OnInternalMetaAttributeUpdate // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1cdb920
	void NotifySourceMetaAttributeExecution(struct FMetaAttributeUpdateEvent& UpdateEvent); // Function Solarland.SolarAbilitySystemComponent.NotifySourceMetaAttributeExecution // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1cdb6c0
	void K2_RemoveGameplayCueLocalShared(struct UObject* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdb3f0
	void K2_RemoveGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdb210
	int32_t K2_RemoveActiveEffectsWithTag(struct FGameplayTag GameplayTag); // Function Solarland.SolarAbilitySystemComponent.K2_RemoveActiveEffectsWithTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdb180
	struct FGameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbilityAndActivateOnce // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdb0b0
	struct FGameplayAbilitySpecHandle K2_GiveAbility(struct UGameplayAbility* AbilityClass, int32_t Level); // Function Solarland.SolarAbilitySystemComponent.K2_GiveAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdafe0
	void K2_GetEffectMaxTimeRemainingAndDuration(struct FGameplayTag EffectTag, float& TimeRemaining, float& Duration); // Function Solarland.SolarAbilitySystemComponent.K2_GetEffectMaxTimeRemainingAndDuration // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cdaec0
	struct UAttributeSet* K2_FindOwnedAttributeSetByClass(struct UAttributeSet* Class); // Function Solarland.SolarAbilitySystemComponent.K2_FindOwnedAttributeSetByClass // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cdae30
	void K2_ExecuteGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_ExecuteGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdac50
	void K2_ClearAbility(struct FGameplayAbilitySpecHandle& Handle); // Function Solarland.SolarAbilitySystemComponent.K2_ClearAbility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cdabb0
	void K2_CancelAbilityByTag(struct FGameplayTag AbilityTag); // Function Solarland.SolarAbilitySystemComponent.K2_CancelAbilityByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1cdab30
	void K2_AddGameplayCueLocalShared(struct UObject* Instigator, struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocalShared // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda910
	void K2_AddGameplayCueLocal(struct FGameplayTag GameplayCueTag, struct FGameplayCueParameters GameplayCueParameters); // Function Solarland.SolarAbilitySystemComponent.K2_AddGameplayCueLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda730
	bool IsNotifiedTagAvailable(struct FGameplayTag& Tag); // Function Solarland.SolarAbilitySystemComponent.IsNotifiedTagAvailable // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cda690
	struct FGameplayAbilitySpecHandle GiveDefaultAbility(struct UGameplayAbility* AbilityClass); // Function Solarland.SolarAbilitySystemComponent.GiveDefaultAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda4d0
	struct FActiveGameplayEffectHandle ChangeActiveEffectRemainTime(struct FActiveGameplayEffectHandle InEffect, float InValue, enum class EGameplayModOp InOption); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectRemainTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda230
	struct FActiveGameplayEffectHandle ChangeActiveEffectDuration(struct FActiveGameplayEffectHandle InEffect, float InDuration, enum class EActiveEffectDurationChangeProxy InChangeProxy); // Function Solarland.SolarAbilitySystemComponent.ChangeActiveEffectDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x1cda120
};

// Class Solarland.SolarAbilitySystemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemInterface : UAbilitySystemInterface {

	struct USolarAbilitySystemComponent* GetSolarAbilitySystemComponent(); // Function Solarland.SolarAbilitySystemInterface.GetSolarAbilitySystemComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1ce2530
};

// Class Solarland.SolarAbilitySystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAbilitySystemLibrary : UBlueprintFunctionLibrary {

	bool MMC_GetCapturedAttributeMagnitude(struct FGameplayEffectAttributeCaptureDefinition& Def, struct FGameplayEffectSpec& Spec, struct FGameplayTagContainer SourceTags, struct FGameplayTagContainer TargetTags, float& Magnitude); // Function Solarland.SolarAbilitySystemLibrary.MMC_GetCapturedAttributeMagnitude // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce26b0
	void MarkStackCountHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkStackCountHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce3380
	void MarkGameplayCuesHandledManually(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkGameplayCuesHandledManually // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce32b0
	void MarkConditionalGameplayEffectsToTrigger(struct FGameplayEffectCustomExecutionOutput& Output); // Function Solarland.SolarAbilitySystemLibrary.MarkConditionalGameplayEffectsToTrigger // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce31e0
	struct FGameplayModifierInfo MakeSimpleGameplayModifierInfo(struct FGameplayAttribute InAttribute); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce2fd0
	struct FGameplayModifierEvaluatedData MakeSimpleGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude); // Function Solarland.SolarAbilitySystemLibrary.MakeSimpleGameplayModifierEvaluatedData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce2d50
	struct FGameplayModifierEvaluatedData MakeGameplayModifierEvaluatedData(struct FGameplayAttribute InAttribute, enum class EGameplayModOp InModOp, float InMagnitude, struct FActiveGameplayEffectHandle& InHandle); // Function Solarland.SolarAbilitySystemLibrary.MakeGameplayModifierEvaluatedData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce2a80
	struct FAttributeSubSetting MakeAttributeSubSetting(int32_t InAttributeSubID, float InValue); // Function Solarland.SolarAbilitySystemLibrary.MakeAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce29a0
	struct FGameplayEffectContextHandle GetEffectContext(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetEffectContext // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce23c0
	float GetCurrentValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetCurrentValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce2320
	struct FGameplayTagContainer GetCapturedTargetTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedTargetTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce21e0
	struct FGameplayTagContainer GetCapturedSourceTags(struct FGameplayEffectSpec& Spec); // Function Solarland.SolarAbilitySystemLibrary.GetCapturedSourceTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce20e0
	float GetBaseValueFromAttribute(struct FGameplayAttributeData& Attribute); // Function Solarland.SolarAbilitySystemLibrary.GetBaseValueFromAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce2040
	bool FindAttribute(struct FString CombinedName, struct FGameplayAttribute& OutAttribute); // Function Solarland.SolarAbilitySystemLibrary.FindAttribute // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce1c20
	struct UGameplayAbility* EffectContextHandle_GetAbility(struct FGameplayEffectContextHandle& Handle); // Function Solarland.SolarAbilitySystemLibrary.EffectContextHandle_GetAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce1b40
	struct UAbilitySystemComponent* CustomExecParams_GetTargetAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetTargetAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce1a00
	struct UAbilitySystemComponent* CustomExecParams_GetSourceAbilitySystemComponent(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetSourceAbilitySystemComponent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce18c0
	struct FGameplayTagContainer CustomExecParams_GetPassedInTags(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetPassedInTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce1750
	struct FGameplayEffectSpec CustomExecParams_GetOwningSpec(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetOwningSpec // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce15f0
	struct TArray<struct FActiveGameplayEffectHandle> CustomExecParams_GetIgnoreHandles(struct FGameplayEffectCustomExecutionParameters& Parameters); // Function Solarland.SolarAbilitySystemLibrary.CustomExecParams_GetIgnoreHandles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce1470
	struct FAttributeSubSetting CancelAttributeSubSetting(int32_t InAttributeSubID); // Function Solarland.SolarAbilitySystemLibrary.CancelAttributeSubSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce0ee0
	void BreakGameplayModifierInfo(struct FGameplayModifierInfo& InModifier, struct FGameplayAttribute& OutAttribute, enum class EGameplayModOp& OutModType, struct FGameplayTagRequirements& OutSourceTags, struct FGameplayTagRequirements& OutTargetTags); // Function Solarland.SolarAbilitySystemLibrary.BreakGameplayModifierInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ce0a40
	void AddOutputModifier(struct FGameplayEffectCustomExecutionOutput& Output, struct FGameplayModifierEvaluatedData& InOutputMod); // Function Solarland.SolarAbilitySystemLibrary.AddOutputModifier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce08b0
};

// Class Solarland.SolarAbilityTask_ActivateRoleAbility
// Size: 0x80 (Inherited: 0x80)
struct USolarAbilityTask_ActivateRoleAbility : USolarAbilityTask {

	struct USolarAbilityTask_ActivateRoleAbility* CreateTask(struct UGameplayAbility* OwningAbility); // Function Solarland.SolarAbilityTask_ActivateRoleAbility.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce0f70
};

// Class Solarland.SolarAbilityTask_ThrowProjectile
// Size: 0x98 (Inherited: 0x80)
struct USolarAbilityTask_ThrowProjectile : USolarAbilityTask {
	struct UObject* SpawnClass; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)

	struct USolarAbilityTask_ThrowProjectile* CreateTask(struct UGameplayAbility* OwningAbility, struct UObject* ProjClass, struct FVector& Velocity, float Speed); // Function Solarland.SolarAbilityTask_ThrowProjectile.CreateTask // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ce1230
};

// Class Solarland.SolarAbilityTask_ShowPreview
// Size: 0xa0 (Inherited: 0x80)
struct USolarAbilityTask_ShowPreview : USolarAbilityTask {
	struct FMulticastInlineDelegate OnHidden; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct USolarAbilityTask_ShowPreview* CreateTask(struct UGameplayAbility* OwningAbility, struct USolarSummonDetectionConfig* PreviewConfig, struct FName TaskInstanceName, float ProjectileRadius, float Speed); // Function Solarland.SolarAbilityTask_ShowPreview.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce0ff0
};

// Class Solarland.SolarAbilityTask_ShowSummonPreview
// Size: 0x98 (Inherited: 0x80)
struct USolarAbilityTask_ShowSummonPreview : USolarAbilityTask {
	struct FMulticastInlineDelegate OnHidden; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)

	struct USolarAbilityTask_ShowSummonPreview* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName); // Function Solarland.SolarAbilityTask_ShowSummonPreview.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce1170
};

// Class Solarland.SolarAbilityTask_WaitInputCommand
// Size: 0xa0 (Inherited: 0x80)
struct USolarAbilityTask_WaitInputCommand : USolarAbilityTask {
	struct FMulticastInlineDelegate OnCommand; // 0x80(0x10)
	char pad_90[0x10]; // 0x90(0x10)

	struct USolarAbilityTask_WaitInputCommand* CreateTask(struct UGameplayAbility* OwningAbility, struct FName ActionName, enum class EInputEvent InputEvent); // Function Solarland.SolarAbilityTask_WaitInputCommand.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce1380
};

// Class Solarland.SolarAbilityThermalImaging
// Size: 0x3f0 (Inherited: 0x310)
struct ASolarAbilityThermalImaging : ASolarAbility {
	bool IsRealeaseAtFoot; // 0x308(0x01)
	float SphereCollisionRadius; // 0x30c(0x04)
	float AbilityLifeTime; // 0x310(0x04)
	float EffectRadius; // 0x314(0x04)
	float EffectPlayRate; // 0x318(0x04)
	struct TArray<enum class EObjectTypeQuery> HitDetectableTypes; // 0x320(0x10)
	struct UMaterialInterface* ThermalImagingMaterial; // 0x330(0x08)
	char pad_339[0x7]; // 0x339(0x07)
	struct FTransform AbilityTransform; // 0x340(0x30)
	char pad_370[0x80]; // 0x370(0x80)
};

// Class Solarland.SolarAbstractModel
// Size: 0x30 (Inherited: 0x28)
struct USolarAbstractModel : UObject {
	struct USolarGameInstanceBase* OwnerGameInstance; // 0x28(0x08)

	void ReceiveModelIntialized(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarAbstractModel.ReceiveModelIntialized // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameManager
// Size: 0x30 (Inherited: 0x28)
struct USolarGameManager : UObject {
	struct USolarGameInstanceBase* OwnerGameInstance; // 0x28(0x08)

	void ReceiveManagerIntialized(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameManager.ReceiveManagerIntialized // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarABTestManager
// Size: 0x38 (Inherited: 0x30)
struct USolarABTestManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarAccessLuaDataUtils
// Size: 0x38 (Inherited: 0x28)
struct USolarAccessLuaDataUtils : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)

	void GetMatchResult(struct FMatchResult& MatchResult); // Function Solarland.SolarAccessLuaDataUtils.GetMatchResult // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.AchievementFormula
// Size: 0x228 (Inherited: 0x228)
struct AAchievementFormula : AActor {

	struct USolarAchievementComponent* GetAchievementComponent(); // Function Solarland.AchievementFormula.GetAchievementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce1f80
	int32_t GetAchievedTargetValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedTargetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce1ef0
	struct TArray<int32_t> GetAchievedConditionValue(int32_t InAchievementID); // Function Solarland.AchievementFormula.GetAchievedConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ce1e20
};

// Class Solarland.SolarAchievementComponent
// Size: 0x1c0 (Inherited: 0xb0)
struct USolarAchievementComponent : UActorComponent {
	struct UDataTable* AchievementHandleConfig; // 0xb0(0x08)
	struct AAchievementFormula* AchievementFormulaClass; // 0xb8(0x08)
	struct AAchievementFormula* AchievementFormula; // 0xc0(0x08)
	char pad_C8[0xa8]; // 0xc8(0xa8)
	struct TMap<int32_t, struct FAchievementResult> AllStatisticAchievement; // 0x170(0x50)

	void UnlockAchievement(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.UnlockAchievement // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce3750
	void SetAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.SetAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce3690
	bool IsAchievementCompleted(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.IsAchievementCompleted // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce2620
	void IncreaseAchievementValue(int32_t InAchievementID, int32_t InUpdateValue); // Function Solarland.SolarAchievementComponent.IncreaseAchievementValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce2560
	int32_t GetAchievementPorgressValue(int32_t InAchievementID); // Function Solarland.SolarAchievementComponent.GetAchievementPorgressValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce1fb0
};

// Class Solarland.SolarActivityManager
// Size: 0x38 (Inherited: 0x30)
struct USolarActivityManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarActorInterface : UInterface {

	struct FVector GetCenterLocation(); // Function Solarland.SolarActorInterface.GetCenterLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1ce22e0
};

// Class Solarland.SolarActorPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarActorPoolManager : UGameInstanceSubsystem {
	char pad_30[0xa0]; // 0x30(0xa0)

	bool PushActor(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.PushActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce3600
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarActorPoolManager.OnActorDestroyed // (Final|Native|Protected) // @ game+0x1ce3450
	struct USolarActorPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarActorPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce1da0
};

// Class Solarland.SolarAdapterSlotInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAdapterSlotInterface : UInterface {

	void OnLoadAdapterSlotWidgetFinished(); // Function Solarland.SolarAdapterSlotInterface.OnLoadAdapterSlotWidgetFinished // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xb5b260
	void OnChangeAdapterSlotWidgetParameters(struct TArray<struct FWidgetOverrideParam>& Params); // Function Solarland.SolarAdapterSlotInterface.OnChangeAdapterSlotWidgetParameters // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1ce34d0
};

// Class Solarland.SolarAdapterWidget
// Size: 0x1c8 (Inherited: 0x150)
struct USolarAdapterWidget : UContentWidget {
	enum class EWidgetLoadType WidgetLoadType; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct FSoftClassPath MobileWidgetPath; // 0x158(0x18)
	struct FSoftClassPath DesktopWidgetPath; // 0x170(0x18)
	struct TArray<struct FWidgetOverrideParam> OverrideParamList; // 0x188(0x10)
	struct FSoftClassPath CurWidgetPath; // 0x198(0x18)
	struct UUserWidget* AdapteeWidget; // 0x1b0(0x08)
	char pad_1B8[0x10]; // 0x1b8(0x10)

	void RefreshUIByOverrideParams(struct TArray<struct FWidgetOverrideParam>& WidgetOverrideParams); // Function Solarland.SolarAdapterWidget.RefreshUIByOverrideParams // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ce6cc0
	void LoadUserWidgetResource(); // Function Solarland.SolarAdapterWidget.LoadUserWidgetResource // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce67c0
	struct UUserWidget* GetAdapteeWidget(); // Function Solarland.SolarAdapterWidget.GetAdapteeWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ce62c0
};

// Class Solarland.SolarAdvProgressBoard
// Size: 0x2b8 (Inherited: 0x260)
struct USolarAdvProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	struct FLinearColor IncreaseColor; // 0x270(0x10)
	struct FLinearColor DecreaseColor; // 0x280(0x10)
	char pad_290[0x28]; // 0x290(0x28)
};

// Class Solarland.SolarAIControllerBase
// Size: 0x370 (Inherited: 0x348)
struct ASolarAIControllerBase : AAIController {
	char pad_348[0x8]; // 0x348(0x08)
	struct UBehaviorTree* BehaviorTree; // 0x350(0x08)
	struct UAISenseConfig_Sight* SightConfig; // 0x358(0x08)
	struct UAISenseConfig_Damage* DamageSenseConfig; // 0x360(0x08)
	int32_t aiCharacterID; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)

	void DestroyCharacterCorpse(); // Function Solarland.SolarAIControllerBase.DestroyCharacterCorpse // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258e10
};

// Class Solarland.SolarAILibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarAILibrary : UObject {

	bool IsLocationOnPlayerSight(struct UObject* WorldContextObject, struct FVector& TestLocation, float TraceStartOffsetZ, float MaxRange, bool bIgnoreSpectatePlayer); // Function Solarland.SolarAILibrary.IsLocationOnPlayerSight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ce6540
	bool HasPlayersInRange(struct UObject* WorldContextObject, struct FVector& TestLocation, int32_t& count, float RangeRadius, bool bIncludeBot, bool bOnlyDrivers); // Function Solarland.SolarAILibrary.HasPlayersInRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ce6320
	void ApplyDamageEventBetweenPreservedBot(struct ASolarBotAIController* Target, float DamageValue, struct FSolarPointDamageEvent DamageEvent, struct ASolarBotAIController* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarAILibrary.ApplyDamageEventBetweenPreservedBot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1549210
};

// Class Solarland.SolarItemSpawner
// Size: 0x390 (Inherited: 0x298)
struct ASolarItemSpawner : ASolarMapElementBase {
	int32_t SpawnerID; // 0x298(0x04)
	char pad_29C[0x2c]; // 0x29c(0x2c)
	enum class ESpawnerType SpawnerType; // 0x2c8(0x01)
	enum class ESpawnerLevel SpawnerLevel; // 0x2c9(0x01)
	char pad_2CA[0x2]; // 0x2ca(0x02)
	int32_t OutcomeID; // 0x2cc(0x04)
	struct FVector OriginPos; // 0x2d0(0x0c)
	struct FVector BoxExtent; // 0x2dc(0x0c)
	struct FBox SpawnerBox; // 0x2e8(0x1c)
	float RotateAngleRange; // 0x304(0x04)
	bool HasSpawnedItem; // 0x308(0x01)
	bool bActiveSpawner; // 0x309(0x01)
	char pad_30A[0x6]; // 0x30a(0x06)
	struct FString SyncItemId; // 0x310(0x10)
	bool BOpenLog; // 0x320(0x01)
	bool bRefresh; // 0x321(0x01)
	char pad_322[0x2]; // 0x322(0x02)
	float RefreshTime; // 0x324(0x04)
	bool bUseSpawnerTransform; // 0x328(0x01)
	bool bToTheGround; // 0x329(0x01)
	char pad_32A[0x2]; // 0x32a(0x02)
	int32_t NumberOfPoints; // 0x32c(0x04)
	float fScalarParams; // 0x330(0x04)
	enum class EItemAppearanceType AppearanceType; // 0x334(0x01)
	char pad_335[0x23]; // 0x335(0x23)
	struct FTimerHandle ItemLoadHandle; // 0x358(0x08)
	struct FTimerHandle ItemSpawnHandle; // 0x360(0x08)
	struct FTimerHandle ItemRefreshHandle; // 0x368(0x08)
	char pad_370[0x20]; // 0x370(0x20)

	void SpawnSingleItem(); // Function Solarland.SolarItemSpawner.SpawnSingleItem // (Final|Native|Private) // @ game+0x1db8bb0
	void SpawnInNextTick(); // Function Solarland.SolarItemSpawner.SpawnInNextTick // (Final|Native|Private) // @ game+0x1db8b90
	void SaveSpawnerRange(); // Function Solarland.SolarItemSpawner.SaveSpawnerRange // (Native|Public|BlueprintCallable) // @ game+0x7e16e0
	void RandomRotatorForItem(enum class EItemType ItemType, struct FQuat& TargetRotator); // Function Solarland.SolarItemSpawner.RandomRotatorForItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db8aa0
	void RandomPosInBoundingBox(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.RandomPosInBoundingBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db8a10
	void PlaceItemToTheGround(struct FVector& InOutLocation); // Function Solarland.SolarItemSpawner.PlaceItemToTheGround // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db8980
	void OnItemSpawned(struct AActor* Item); // Function Solarland.SolarItemSpawner.OnItemSpawned // (Final|Native|Public) // @ game+0x8e33f0
	void OnAsyncLoadComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData); // Function Solarland.SolarItemSpawner.OnAsyncLoadComplete // (Final|Native|Private|HasDefaults) // @ game+0x1db8610
	void NetStartSpawnItems(struct ASolarItemRootActor* OwnerActor); // Function Solarland.SolarItemSpawner.NetStartSpawnItems // (Native|Public|BlueprintCallable) // @ game+0x7b1630
	void LoadSingleWeaponAsset(struct FSolarItemData& ItemData); // Function Solarland.SolarItemSpawner.LoadSingleWeaponAsset // (Final|Native|Private|HasOutParms) // @ game+0x1db8520
	void LoadSingleItemAsset(); // Function Solarland.SolarItemSpawner.LoadSingleItemAsset // (Final|Native|Private) // @ game+0x1db8500
	void LoadInNextTick(); // Function Solarland.SolarItemSpawner.LoadInNextTick // (Final|Native|Private) // @ game+0x1db84e0
	void InitSpawnerBound(); // Function Solarland.SolarItemSpawner.InitSpawnerBound // (Final|Native|Public) // @ game+0x1db84c0
	void GetSuitableDropPos(struct FVector& TargetPos); // Function Solarland.SolarItemSpawner.GetSuitableDropPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db8430
	void GenerateDropPosition(); // Function Solarland.SolarItemSpawner.GenerateDropPosition // (Final|Native|Private) // @ game+0x1db8410
	void ClearUnpickedItems(); // Function Solarland.SolarItemSpawner.ClearUnpickedItems // (Final|Native|Public) // @ game+0x1db83f0
	void ClearLoopTimer(); // Function Solarland.SolarItemSpawner.ClearLoopTimer // (Final|Native|Private) // @ game+0x1db83d0
};

// Class Solarland.SolarAirDropSpawner
// Size: 0x3d0 (Inherited: 0x390)
struct ASolarAirDropSpawner : ASolarItemSpawner {
	bool IsActive; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float SpawnDelay; // 0x394(0x04)
	float AudioActorHeightOffset; // 0x398(0x04)
	float AudioActorFallSpeed; // 0x39c(0x04)
	struct FSoftClassPath PillarMeshBPClassPathName; // 0x3a0(0x18)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	int32_t ChestID; // 0x3c0(0x04)
	char pad_3C4[0xc]; // 0x3c4(0x0c)
};

// Class Solarland.SolarVehiclePawn
// Size: 0x14c0 (Inherited: 0x288)
struct ASolarVehiclePawn : APawn {
	char pad_288[0x30]; // 0x288(0x30)
	struct UPrimitiveComponent* VehicleRoot; // 0x2b8(0x08)
	struct USkeletalMeshComponentBudgeted* VehicleMesh; // 0x2c0(0x08)
	uint32_t VehicleID; // 0x2c8(0x04)
	bool bVehicleMeshAggregationTick; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0x2d0(0x28)
	struct USkeletalMeshComponentBudgeted* VehicleStencilNew; // 0x2f8(0x08)
	struct USolarNetMovementComponent* NetMovementComponent; // 0x300(0x08)
	struct UAkComponent* AkComponent; // 0x308(0x08)
	struct USolarVehicleAbilitySystemComponent* VehicleAbilitySystem; // 0x310(0x08)
	struct USolarVehicleSpringArmComponent* SpringArmComponent; // 0x318(0x08)
	struct USolarVehicleCameraComponent* CameraComponent; // 0x320(0x08)
	struct USolarVehicleAttributeSet* VehicleAttributeSet; // 0x328(0x08)
	struct FBasedMovement BasedMovement; // 0x330(0x28)
	struct TArray<struct FVehicleSeatSlot> SeatSlots; // 0x358(0x10)
	int32_t HealthUIID; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct TSoftObjectPtr<UTexture2D> VehicleBrandIcon; // 0x370(0x28)
	float OverlapWaterRadius; // 0x398(0x04)
	struct FVector OutVehicleOffset; // 0x39c(0x0c)
	float WaterDraftDepth; // 0x3a8(0x04)
	float CarpadProtectTime; // 0x3ac(0x04)
	float CarPadAccelerationMultiplier; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct TArray<struct FVector> DropPassengerLocations; // 0x3b8(0x10)
	struct FVector DropPassengerAtTop; // 0x3c8(0x0c)
	struct FName BodySocketName; // 0x3d4(0x08)
	struct FVector DamageBoxLocation; // 0x3dc(0x0c)
	struct FVector DamageBoxExtent; // 0x3e8(0x0c)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct TArray<struct FName> PenetrationDamageBones; // 0x3f8(0x10)
	float VehicleMaxSpeedOnUI; // 0x408(0x04)
	enum class EVehicleControlUIType VehicleControlUIType; // 0x40c(0x01)
	enum class EVehicleAnimationType VehicleAnimationType; // 0x40d(0x01)
	char pad_40E[0x2]; // 0x40e(0x02)
	struct FVehicleVFX NosCameraVFX; // 0x410(0x90)
	float NOSCameraEffectAngle; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> RaiseDustEffects; // 0x4a8(0x50)
	struct TArray<struct FVehicleVFX> NosVFXes; // 0x4f8(0x10)
	float SpeedThresholdForCollidingDamage; // 0x508(0x04)
	float SpeedThresholdForStandingOn; // 0x50c(0x04)
	float SpeedThresholdForGetOnVehicle; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct TSoftObjectPtr<UParticleSystem> EnterWaterVFX[0x4]; // 0x518(0xa0)
	float SprayVelocity; // 0x5b8(0x04)
	float HeavyInSpeed; // 0x5bc(0x04)
	float CriticalAngle; // 0x5c0(0x04)
	struct FVector OffsetBasedVechileLoction; // 0x5c4(0x0c)
	float CollisionSparkThreshold; // 0x5d0(0x04)
	char pad_5D4[0x4]; // 0x5d4(0x04)
	struct TSoftObjectPtr<UParticleSystem> CollisionSparkParticle; // 0x5d8(0x28)
	struct FName CollisionSparkParamNowel; // 0x600(0x08)
	struct FName CollisionSparkParamQuantity; // 0x608(0x08)
	float VehicleSpeedThresholdToPlayVFX; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToNowel; // 0x618(0x88)
	struct FRuntimeFloatCurve CollisionSparkCurveFromImpulseToQuantity; // 0x6a0(0x88)
	char pad_728[0x8]; // 0x728(0x08)
	struct FVehicleVFX SpeedParticle; // 0x730(0x90)
	struct TArray<struct FVehicleVFXMesh> DriverOnVFXMeshes; // 0x7c0(0x10)
	struct TArray<struct FVehicleVFX> DriverOnVFXs; // 0x7d0(0x10)
	struct FVector SpawnOffset; // 0x7e0(0x0c)
	struct FSeatCameraSetting DefaultCameraSetting; // 0x7ec(0x30)
	char pad_81C[0x4]; // 0x81c(0x04)
	struct FRuntimeFloatCurve CameraFovCurve; // 0x820(0x88)
	struct TMap<int32_t, float> VehicleOutShotFovCoefficients; // 0x8a8(0x50)
	float CameraFovInterpSpeed; // 0x8f8(0x04)
	char pad_8FC[0x4]; // 0x8fc(0x04)
	struct FRuntimeFloatCurve CameraDistanceMultiplierCurve; // 0x900(0x88)
	float CameraDistanceInterpSpeed; // 0x988(0x04)
	bool bCameraFollowVehicle; // 0x98c(0x01)
	char pad_98D[0x3]; // 0x98d(0x03)
	struct FRuntimeFloatCurve CameraFollowSpeedCurve; // 0x990(0x88)
	float CameraFollowTimeThreshold; // 0xa18(0x04)
	float CamearResetFollowSpeed; // 0xa1c(0x04)
	float CameraFollowSpeedThreshold; // 0xa20(0x04)
	char pad_A24[0x4]; // 0xa24(0x04)
	struct FRuntimeFloatCurve CameraZLagDistanceCurve; // 0xa28(0x88)
	bool bResetTargetPitchOffsetBasedOnVehicle; // 0xab0(0x01)
	char pad_AB1[0x7]; // 0xab1(0x07)
	struct FString SpeedVibrationHeString; // 0xab8(0x10)
	struct FRuntimeFloatCurve SpeedVibrationCurve; // 0xac8(0x88)
	float MinSpeedDifferenceForCollisionVibration; // 0xb50(0x04)
	char pad_B54[0x4]; // 0xb54(0x04)
	struct FString CollisionVibrationHeString; // 0xb58(0x10)
	struct FString LandingVibrationHeString; // 0xb68(0x10)
	struct FRuntimeFloatCurve LandingVibrationCurve; // 0xb78(0x88)
	float MaxSpeedDecelerationRate; // 0xc00(0x04)
	char pad_C04[0x4]; // 0xc04(0x04)
	struct FSolarVehicleMaterialData BackLampData; // 0xc08(0x28)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0xc30(0x10)
	struct USolarVehicleSoundDataAsset* VehicleSoundDataAsset; // 0xc40(0x08)
	struct UGameplayEffect* DefaultAttributes; // 0xc48(0x08)
	struct UGameplayEffect* CanDriveEffect; // 0xc50(0x08)
	struct UGameplayEffect* CanGetOnEffect; // 0xc58(0x08)
	struct UGameplayEffect* UnderWaterEffect; // 0xc60(0x08)
	struct ASolarAbility* ExplosionAbilityClass; // 0xc68(0x08)
	struct FVehicleVFX ExplosionVFX; // 0xc70(0x90)
	struct FVehicleVFXMesh VehicleBrokenMesh; // 0xd00(0x80)
	struct FVehicleVFX VehicleDamagedVFXs[0x5]; // 0xd80(0x2d0)
	struct UGameplayEffect* VehicleDamageStatusEffects[0x5]; // 0x1050(0x28)
	int32_t MaxLodLevelForUpdateVisual; // 0x1078(0x04)
	char pad_107C[0x4]; // 0x107c(0x04)
	struct TArray<struct FVehicleWeakPointSpec> VehicleWeakPointContainer; // 0x1080(0x10)
	struct UPrimitiveComponent* PlatformComponent; // 0x1090(0x08)
	bool bCanStandOnPlatform; // 0x1098(0x01)
	char pad_1099[0x3]; // 0x1099(0x03)
	float DistanceThresholdForAttachPlatform; // 0x109c(0x04)
	float DegreeThresholdForAttachPlatform; // 0x10a0(0x04)
	float SpeedThresholdForAttachPlatform; // 0x10a4(0x04)
	struct ASolarAbility* CollideDamageAbility; // 0x10a8(0x08)
	float CrashDamageWeight; // 0x10b0(0x04)
	float SelfCrashDamageRate; // 0x10b4(0x04)
	float PassengerDamageRatio; // 0x10b8(0x04)
	float MinPlayerDamageVelocity; // 0x10bc(0x04)
	float CollidedCharacterDmgRatio; // 0x10c0(0x04)
	float CollideUpBoundingRatio; // 0x10c4(0x04)
	struct UCurveFloat* CollidePushSpeedCurve; // 0x10c8(0x08)
	float CollidePushUpAngle; // 0x10d0(0x04)
	float CharacterProtectTime; // 0x10d4(0x04)
	float CollisionCompensationImpulseForSimulatedProxy; // 0x10d8(0x04)
	char pad_10DC[0x4]; // 0x10dc(0x04)
	struct TArray<int32_t> StealthHideMats; // 0x10e0(0x10)
	char pad_10F0[0x8]; // 0x10f0(0x08)
	bool bRemoveStencil; // 0x10f8(0x01)
	char pad_10F9[0x17]; // 0x10f9(0x17)
	bool IsLaunch; // 0x1110(0x01)
	char pad_1111[0x1f]; // 0x1111(0x1f)
	struct FMulticastSparseDelegate OnPlayerGetOnVehicle; // 0x1130(0x01)
	struct FMulticastSparseDelegate OnPlayerGetOffVehicle; // 0x1131(0x01)
	char pad_1132[0xfe]; // 0x1132(0xfe)
	struct TArray<int32_t> OccupiedSeats; // 0x1230(0x10)
	struct USolarInputActionContext* InputActionContext; // 0x1240(0x08)
	char pad_1248[0x4]; // 0x1248(0x04)
	struct FVector_NetQuantizeNormal ReplicatedPlayerInputVector; // 0x124c(0x0c)
	char pad_1258[0xc]; // 0x1258(0x0c)
	struct FVector_NetQuantize RepLocation; // 0x1264(0x0c)
	char pad_1270[0x40]; // 0x1270(0x40)
	struct TArray<struct AActor*> ActorsOnPlatform; // 0x12b0(0x10)
	char pad_12C0[0x24]; // 0x12c0(0x24)
	struct FSpawnedActorHandle CachedActorHandle; // 0x12e4(0x04)
	char CurPlayerInputMask; // 0x12e8(0x01)
	char ReplicatedPlayerInputMask; // 0x12e9(0x01)
	char pad_12EA[0x46]; // 0x12ea(0x46)
	struct USolarNavModifierComponent* SolarNavModifierComp; // 0x1330(0x08)
	bool bDynamicAffectNavigation; // 0x1338(0x01)
	char pad_1339[0x4f]; // 0x1339(0x4f)
	int32_t SkinId; // 0x1388(0x04)
	char pad_138C[0x14]; // 0x138c(0x14)
	struct TArray<struct FAbilityCooldownTimer> ActivedAbilityCooldownArray; // 0x13a0(0x10)
	char CurrentDamageStatus; // 0x13b0(0x01)
	bool bVehicleBurningStart; // 0x13b1(0x01)
	char pad_13B2[0xbe]; // 0x13b2(0xbe)
	float EnterWaterDuration; // 0x1470(0x04)
	char pad_1474[0x4]; // 0x1474(0x04)
	float WaterLineHeight; // 0x1478(0x04)
	char pad_147C[0x4]; // 0x147c(0x04)
	struct ASolarWaterActorNew* WaterActor; // 0x1480(0x08)
	char pad_1488[0x38]; // 0x1488(0x38)

	void StatVehicleAutoMove(int32_t MoveTime); // Function Solarland.SolarVehiclePawn.StatVehicleAutoMove // (Final|Native|Protected) // @ game+0x1ed1d90
	void SetWeakPointHealth(char WeakPointID, float InHealth); // Function Solarland.SolarVehiclePawn.SetWeakPointHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed1cd0
	void SetTakeMoveInput(bool bInTakeInput); // Function Solarland.SolarVehiclePawn.SetTakeMoveInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed1c50
	void SetPlayerInputVector(struct FVector2D& InputVector, float CameraYaw); // Function Solarland.SolarVehiclePawn.SetPlayerInputVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ed1b00
	void SetCurrentHealth(float InHealth); // Function Solarland.SolarVehiclePawn.SetCurrentHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed1a80
	void SetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.SetCrossCarpad // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed1a00
	void ServerSetPlayerInput(struct FVector_NetQuantizeNormal InputVector, char InputMask); // Function Solarland.SolarVehiclePawn.ServerSetPlayerInput // (Net|Native|Event|Protected|NetServer) // @ game+0x1ed1940
	void ServerSetCrossCarpad(struct ASolarCarPad* InCarpad); // Function Solarland.SolarVehiclePawn.ServerSetCrossCarpad // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ed18b0
	void ServerSendsTransformToEveryoneWithMovementBase(struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryoneWithMovementBase // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ed17d0
	void ServerSendsTransformToEveryone(struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ServerSendsTransformToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ed1730
	void ServerSendsTeleportStateToEveryone(struct FVector_NetQuantize InLocation, struct FVector_NetQuantizeNormal InNormalizeEuler, float InServerTimeStamp); // Function Solarland.SolarVehiclePawn.ServerSendsTeleportStateToEveryone // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ed1630
	void ServerSendCorrectionToClient(float ServerTimeStamp, struct FVector_NetQuantize WorldLocation, struct FVector_NetQuantizeNormal WorldRotationCompressed); // Function Solarland.SolarVehiclePawn.ServerSendCorrectionToClient // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ed1510
	void ServerHandleVehicleCollision(struct FVehicleCollisionInfo InVehicleCollisionInfo); // Function Solarland.SolarVehiclePawn.ServerHandleVehicleCollision // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ed1440
	void ServerDrawActorLocationAndRotationOnClient(struct FVector InLocation, struct FRotator InRotator); // Function Solarland.SolarVehiclePawn.ServerDrawActorLocationAndRotationOnClient // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x1ed1390
	void ServerApplyVehicleSkin(int32_t InSkinID); // Function Solarland.SolarVehiclePawn.ServerApplyVehicleSkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ed1300
	void ServerApplyDamageToVehilceAndPassenger(struct AActor* OtherActor, float DamageToSelf, float DamageToOther, struct FVector_NetQuantize HitLocation); // Function Solarland.SolarVehiclePawn.ServerApplyDamageToVehilceAndPassenger // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1ed11c0
	void ServerApplyAbilityDamageToTargets(struct TArray<struct APawn*> Targets, struct FGameplayAbilitySpecHandle AbilityHandle); // Function Solarland.SolarVehiclePawn.ServerApplyAbilityDamageToTargets // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ed10e0
	void RemoveSeatSlot(char SeatIndex); // Function Solarland.SolarVehiclePawn.RemoveSeatSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed1060
	void ReleaseDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.ReleaseDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0fe0
	void PlayVehicleEjectSound(struct ASolarCharacter* ejectedCharacter); // Function Solarland.SolarVehiclePawn.PlayVehicleEjectSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0f60
	void PlaySpeedboardSound(); // Function Solarland.SolarVehiclePawn.PlaySpeedboardSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0f40
	void PlayDamagedStatusVFX(enum class EVehicleDamageStatus InDamagedStatus); // Function Solarland.SolarVehiclePawn.PlayDamagedStatusVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0ea0
	void OverlapWater(); // Function Solarland.SolarVehiclePawn.OverlapWater // (Final|Native|Protected) // @ game+0x1ed0e80
	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarVehiclePawn.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1ed0cb0
	void OnStencilLoaded(); // Function Solarland.SolarVehiclePawn.OnStencilLoaded // (Final|Native|Public) // @ game+0x1ed0c90
	void OnSkinDataAssetLoadedNext(struct FSoftClassPath SkinVehiclePath); // Function Solarland.SolarVehiclePawn.OnSkinDataAssetLoadedNext // (Final|Native|Protected|HasDefaults) // @ game+0x1ed0ba0
	void OnRep_WeakPointHealthOrStateChanged(struct TArray<struct FVehicleWeakPointSpec> OldVehicleWeakPointDatas); // Function Solarland.SolarVehiclePawn.OnRep_WeakPointHealthOrStateChanged // (Final|Native|Protected) // @ game+0x1ed0a70
	void OnRep_VehicleBurning(); // Function Solarland.SolarVehiclePawn.OnRep_VehicleBurning // (Final|Native|Protected) // @ game+0x1ed0a50
	void OnRep_SkinId(); // Function Solarland.SolarVehiclePawn.OnRep_SkinId // (Final|Native|Protected) // @ game+0x1ed0a30
	void OnRep_ReplicatedPlayerInputMask(char OldReplicatedPlayerInputMask); // Function Solarland.SolarVehiclePawn.OnRep_ReplicatedPlayerInputMask // (Final|Native|Protected) // @ game+0x1ed09b0
	void OnRep_RemoveStencil(); // Function Solarland.SolarVehiclePawn.OnRep_RemoveStencil // (Final|Native|Public) // @ game+0x1ed0990
	void OnRep_CachedActorHandle(); // Function Solarland.SolarVehiclePawn.OnRep_CachedActorHandle // (Final|Native|Protected) // @ game+0x1ed0970
	bool IsVehicleFullHealth(); // Function Solarland.SolarVehiclePawn.IsVehicleFullHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ed0730
	bool IsVehicleDangerous(); // Function Solarland.SolarVehiclePawn.IsVehicleDangerous // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ed0700
	bool IsVehicleBroken(); // Function Solarland.SolarVehiclePawn.IsVehicleBroken // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ed06d0
	bool IsTeammateWith(struct APawn* Pawn); // Function Solarland.SolarVehiclePawn.IsTeammateWith // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed0640
	bool IsManuallyCancelAbilityActive(char SeatIndex); // Function Solarland.SolarVehiclePawn.IsManuallyCancelAbilityActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed05b0
	bool IsExistEnemy(struct ASolarCharacter* Character); // Function Solarland.SolarVehiclePawn.IsExistEnemy // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0520
	bool IsAbilityActive(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.IsAbilityActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0450
	bool InSameTeam(); // Function Solarland.SolarVehiclePawn.InSameTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0420
	struct TArray<struct FVehicleWeakPointSpec> GetVehicleWeakPoints(); // Function Solarland.SolarVehiclePawn.GetVehicleWeakPoints // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed0340
	int32_t GetVehicleTypeID(); // Function Solarland.SolarVehiclePawn.GetVehicleTypeID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed0310
	char GetVehicleTeamId(); // Function Solarland.SolarVehiclePawn.GetVehicleTeamId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed02e0
	struct UPhysicalMaterial* GetVehicleRootPhysMaterial(); // Function Solarland.SolarVehiclePawn.GetVehicleRootPhysMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed02b0
	int32_t GetVehicleGroupID(); // Function Solarland.SolarVehiclePawn.GetVehicleGroupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed0250
	float GetSpeedInKmh(); // Function Solarland.SolarVehiclePawn.GetSpeedInKmh // (Native|Public|BlueprintCallable) // @ game+0x1ed0210
	float GetSpeed(); // Function Solarland.SolarVehiclePawn.GetSpeed // (Native|Public|BlueprintCallable) // @ game+0x1ed01d0
	struct FVector GetSpawnOffset(); // Function Solarland.SolarVehiclePawn.GetSpawnOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1ed01a0
	struct FVector2D GetPlayerInputVector(); // Function Solarland.SolarVehiclePawn.GetPlayerInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1ed0160
	int32_t GetPassengerCount(); // Function Solarland.SolarVehiclePawn.GetPassengerCount // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed0010
	int32_t GetNextVacantSeat(int32_t InCurrentSeatIndex); // Function Solarland.SolarVehiclePawn.GetNextVacantSeat // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecff80
	float GetMaxHealth(); // Function Solarland.SolarVehiclePawn.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ecff50
	int32_t GetManuallyCancelAbilityIndex(char SeatIndex); // Function Solarland.SolarVehiclePawn.GetManuallyCancelAbilityIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecfec0
	int32_t GetHealthPercentInt(); // Function Solarland.SolarVehiclePawn.GetHealthPercentInt // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ecfe90
	struct ASolarCharacter* GetDriverCharacter(); // Function Solarland.SolarVehiclePawn.GetDriverCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ecfca0
	float GetDangerHealthPrecent(); // Function Solarland.SolarVehiclePawn.GetDangerHealthPrecent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ecfc70
	float GetCurrentHealth(); // Function Solarland.SolarVehiclePawn.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ecfc40
	bool DoesAbilitySatisfyTagRequirements(int32_t CurSeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.DoesAbilitySatisfyTagRequirements // (Final|Native|Public|Const) // @ game+0x1ecf9b0
	void DeleteStencilMesh(); // Function Solarland.SolarVehiclePawn.DeleteStencilMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecf990
	void ClientVehicleExplosion(); // Function Solarland.SolarVehiclePawn.ClientVehicleExplosion // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecf970
	void ClientVehicleBroken(); // Function Solarland.SolarVehiclePawn.ClientVehicleBroken // (Native|Public|BlueprintCallable) // @ game+0x1258f70
	void ClientSendsTransformToServerWithMovementBaseAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBaseAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ecf810
	void ClientSendsTransformToServerWithMovementBase(float DriverLocalTime, struct TArray<char> Value, struct ASolarVehiclePawn* InMovementBase); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerWithMovementBase // (Net|Native|Event|Public|NetServer) // @ game+0x1ecf6f0
	void ClientSendsTransformToServerAfterCorrection(float DriverLocalTime, float ServerTimeStamp, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServerAfterCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1ecf5d0
	void ClientSendsTransformToServer(float DriverLocalTime, struct TArray<char> Value); // Function Solarland.SolarVehiclePawn.ClientSendsTransformToServer // (Net|Native|Event|Public|NetServer) // @ game+0x1ecf4f0
	bool CheckUpdateVisual(); // Function Solarland.SolarVehiclePawn.CheckUpdateVisual // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecf490
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarVehiclePawn.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x1ecf400
	bool CanActivateAbility(char SeatIndex, char AbilityIndex); // Function Solarland.SolarVehiclePawn.CanActivateAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ecf330
	void ApplySkinFromCDO(struct ASolarVehiclePawn* SkinVehiclePawnCDO); // Function Solarland.SolarVehiclePawn.ApplySkinFromCDO // (Final|Native|Protected) // @ game+0x1ecf2b0
	char AddSeatSlot(struct FVehicleSeatSlot& SeatSlot); // Function Solarland.SolarVehiclePawn.AddSeatSlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ecf1b0
};

// Class Solarland.SolarHoverVehicle
// Size: 0x14e0 (Inherited: 0x14c0)
struct ASolarHoverVehicle : ASolarVehiclePawn {
	struct USolarHoverVehicleMovement* VehicleMovement; // 0x14b8(0x08)
	struct FVehicleBasedMovementInfo ReplicatedBasedMovement; // 0x14c0(0x20)

	void OnVehicleRootHitForAttachPlatform(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicle.OnVehicleRootHitForAttachPlatform // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d995b0
	void OnRep_ReplicatedBasedMovement(struct FVehicleBasedMovementInfo PreviousBasedMovement); // Function Solarland.SolarHoverVehicle.OnRep_ReplicatedBasedMovement // (Final|Native|Protected) // @ game+0x1d99350
	void OnPlatformActorEndplay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarHoverVehicle.OnPlatformActorEndplay // (Final|Native|Protected) // @ game+0x1d99290
};

// Class Solarland.SolarAirPlaneVehicle
// Size: 0x1560 (Inherited: 0x14e0)
struct ASolarAirPlaneVehicle : ASolarHoverVehicle {
	struct TMap<enum class EVehicleFlyRollType, struct UAnimMontage*> VehicleRollMontageAnims; // 0x14e0(0x50)
	struct UGameplayEffect* GlidingEffectClass; // 0x1530(0x08)
	struct UCameraShake* RollBackCameraShake; // 0x1538(0x08)
	float RollbackInputThreshold; // 0x1540(0x04)
	float GlideGravityScale; // 0x1544(0x04)
	char pad_1548[0x18]; // 0x1548(0x18)

	void SwitchGlideState(bool bEnter); // Function Solarland.SolarAirPlaneVehicle.SwitchGlideState // (Final|Native|Public) // @ game+0x1ce77a0
	void OnRollBackStoped(); // Function Solarland.SolarAirPlaneVehicle.OnRollBackStoped // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce69e0
	void OnRollBackStarted(); // Function Solarland.SolarAirPlaneVehicle.OnRollBackStarted // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce69c0
	struct UAnimMontage* GetCurrentRollMontage(); // Function Solarland.SolarAirPlaneVehicle.GetCurrentRollMontage // (Final|Native|Public) // @ game+0x1ce62f0
};

// Class Solarland.SolarAirship
// Size: 0x490 (Inherited: 0x228)
struct ASolarAirship : AActor {
	bool bShowDebug; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct UStaticMeshComponent* Mesh; // 0x238(0x08)
	struct TMap<int32_t, struct FAirshipConfig> AirshipConfigMap; // 0x240(0x50)
	struct FAirdropParas AirdropParas; // 0x290(0x18)
	struct FRotator RotationOffset; // 0x2a8(0x0c)
	float HatchOffset; // 0x2b4(0x04)
	float AirdropStartZOffset; // 0x2b8(0x04)
	float SpawnAirdropDelay; // 0x2bc(0x04)
	float DestoryDelay; // 0x2c0(0x04)
	float PointInSegmentTolerance; // 0x2c4(0x04)
	struct FMiniMapAirlineData AirlineData; // 0x2c8(0x30)
	struct FString AppearVoice; // 0x2f8(0x10)
	int32_t AppearNoticeID; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct UCurveFloat* AppearMatCurve; // 0x310(0x08)
	struct UCurveFloat* DisappearMatCurve; // 0x318(0x08)
	struct FString FlyLPSoundStartBeforeAirdrop; // 0x320(0x10)
	struct FString FlyLPSoundStopBeforeAirdrop; // 0x330(0x10)
	struct FString FlyLPSoundStartAfterAirdrop; // 0x340(0x10)
	struct FString FlyLPSoundStopAfterAirdrop; // 0x350(0x10)
	struct UParticleSystem* FlyEffect; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)
	struct FTransform FlyEffectTransform; // 0x370(0x30)
	struct UParticleSystem* AirScreenEffectBeforeAirdrop; // 0x3a0(0x08)
	struct UParticleSystem* AirScreenEffectAfterAirdrop; // 0x3a8(0x08)
	struct FTransform AirScreenEffectTransform_2; // 0x3b0(0x30)
	struct FTransform AirScreenEffectTransform_3; // 0x3e0(0x30)
	bool bAirdropDelivered; // 0x410(0x01)
	bool bDisappear; // 0x411(0x01)
	char pad_412[0x2]; // 0x412(0x02)
	struct FRouteInfo RouteInfo; // 0x414(0x34)
	char pad_448[0x20]; // 0x448(0x20)
	struct UParticleSystemComponent* FlyEffectHandle; // 0x468(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_2; // 0x470(0x08)
	struct UParticleSystemComponent* AirScreenEffectBeforeAirdropHandle_3; // 0x478(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_2; // 0x480(0x08)
	struct UParticleSystemComponent* AirScreenEffectAfterAirdropHandle_3; // 0x488(0x08)

	void OnRep_RouteInfo(); // Function Solarland.SolarAirship.OnRep_RouteInfo // (Final|Native|Private) // @ game+0x1ce69a0
	void OnRep_Disappear(); // Function Solarland.SolarAirship.OnRep_Disappear // (Final|Native|Private) // @ game+0x1ce6980
	void OnRep_AirdropDelivered(); // Function Solarland.SolarAirship.OnRep_AirdropDelivered // (Final|Native|Private) // @ game+0x1ce6960
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarAirship.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce66f0
	void DestorySelf(); // Function Solarland.SolarAirship.DestorySelf // (Final|Native|Private) // @ game+0x1ce62a0
};

// Class Solarland.SolarAISense_QueryTeammate
// Size: 0x90 (Inherited: 0x80)
struct USolarAISense_QueryTeammate : UAISense {
	struct TArray<struct FAIQueryTeammateEvent> RegisteredEvents; // 0x80(0x10)
};

// Class Solarland.SolarAISenseConfig_QueryTeammate
// Size: 0x50 (Inherited: 0x48)
struct USolarAISenseConfig_QueryTeammate : UAISenseConfig {
	struct USolarAISense_QueryTeammate* Implementation; // 0x48(0x08)
};

// Class Solarland.SolarAISense_Radar
// Size: 0xd8 (Inherited: 0x80)
struct USolarAISense_Radar : UAISense {
	char pad_80[0x58]; // 0x80(0x58)
};

// Class Solarland.SolarAISenseConfig_Radar
// Size: 0x60 (Inherited: 0x48)
struct USolarAISenseConfig_Radar : UAISenseConfig {
	struct USolarAISense_Radar* Implementation; // 0x48(0x08)
	struct TArray<struct FRadarDetectConfig> RadarConfigs; // 0x50(0x10)
};

// Class Solarland.SolarAITargetComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarAITargetComponent : UActorComponent {
	int32_t AIActorCapacity; // 0xb0(0x04)
	char pad_B4[0x2c]; // 0xb4(0x2c)
};

// Class Solarland.SolarAkAudioSettings
// Size: 0xd8 (Inherited: 0x38)
struct USolarAkAudioSettings : UDeveloperSettings {
	bool EnableBankLoadStrategy; // 0x38(0x01)
	bool EnableDebugMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float DelayReleaseBankTime; // 0x3c(0x04)
	struct TSoftObjectPtr<UDataTable> SoundBankEventTable; // 0x40(0x28)
	struct TArray<struct FName> InGameSceneName; // 0x68(0x10)
	struct TArray<struct FName> InLobbySceneName; // 0x78(0x10)
	struct TArray<struct FName> TutorialSceneName; // 0x88(0x10)
	struct TArray<struct FName> HomeSceneName; // 0x98(0x10)
	struct TArray<struct FName> WaitingLandSceneName; // 0xa8(0x10)
	struct TArray<struct FSolarAudioDetail> BankDetailsArray; // 0xb8(0x10)
	char pad_C8[0x10]; // 0xc8(0x10)
};

// Class Solarland.SolarAkGameObject
// Size: 0xd0 (Inherited: 0x28)
struct USolarAkGameObject : UObject {
	char pad_28[0xa0]; // 0x28(0xa0)
	bool bEnableTick; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	void Wakeup(); // Function Solarland.SolarAkGameObject.Wakeup // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce7830
	void UnloadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.UnloadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	void UnLoadAllBanks(); // Function Solarland.SolarAkGameObject.UnLoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x962e10
	void Suspend(bool in_bRenderAnyway); // Function Solarland.SolarAkGameObject.Suspend // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce7720
	int32_t StopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StopSoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce7670
	int32_t StaticStopSoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticStopSoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce75d0
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce7490
	int32_t StaticPostAkEventByName(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce73f0
	int32_t StaticPlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticPlaySoundByEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce7350
	int32_t StaticComponentPostAkEventByName(struct UAkComponent* AkComponent, struct FString in_EventName); // Function Solarland.SolarAkGameObject.StaticComponentPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce7270
	void SolarLoadAllBanks(); // Function Solarland.SolarAkGameObject.SolarLoadAllBanks // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void SetSwitch(struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarAkGameObject.SetSwitch // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce7160
	void SetRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetRTPCValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce7040
	void SetMasterRTPCValue(float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetMasterRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6f80
	void SetMasterRTPCMute(bool Mute); // Function Solarland.SolarAkGameObject.SetMasterRTPCMute // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6f00
	void SetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarAkGameObject.SetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6df0
	void ReceiveTick(float DeltaTime); // Function Solarland.SolarAkGameObject.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarAkGameObject.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBeginPlay(); // Function Solarland.SolarAkGameObject.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t PostAkEventByNameAndWaitForEnd(struct FString in_EventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarAkGameObject.PostAkEventByNameAndWaitForEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce6bb0
	int32_t PostAkEventByName(struct FString InEventName1, struct FString InEventName2); // Function Solarland.SolarAkGameObject.PostAkEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce6ab0
	int32_t PlaySoundByEvent(struct FString in_EventName); // Function Solarland.SolarAkGameObject.PlaySoundByEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce6a00
	void LoadBank(struct FString InBankName); // Function Solarland.SolarAkGameObject.LoadBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	void LoadAllBanks(); // Function Solarland.SolarAkGameObject.LoadAllBanks // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x962e10
};

// Class Solarland.SolarAkSoundManager
// Size: 0x238 (Inherited: 0x30)
struct USolarAkSoundManager : USolarGameManager {
	char pad_30[0x208]; // 0x30(0x208)

	void SetVoiceLanguage(); // Function Solarland.SolarAkSoundManager.SetVoiceLanguage // (Final|Native|Private) // @ game+0x1ce7250
	void OnAkBankUnloadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankUnloadedCallbackFunc // (Final|Native|Private) // @ game+0x1ce68a0
	void OnAkBankLoadedCallbackFunc(enum class EAkResult in_loadResult, uint32_t in_bankID); // Function Solarland.SolarAkSoundManager.OnAkBankLoadedCallbackFunc // (Final|Native|Private) // @ game+0x1ce67e0
};

// Class Solarland.SolarAngleViewWidget
// Size: 0x368 (Inherited: 0x138)
struct USolarAngleViewWidget : UWidget {
	struct FSlateBrush JoyStickThumb; // 0x138(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x1d0(0x98)
	struct FSlateBrush JoyStickBG; // 0x268(0x98)
	struct FVector2D VisualSize; // 0x300(0x08)
	struct FVector2D ThumbSize; // 0x308(0x08)
	struct FVector2D InputScale; // 0x310(0x08)
	float ActiveOpacity; // 0x318(0x04)
	float InactiveOpacity; // 0x31c(0x04)
	float TimeUntilDeactive; // 0x320(0x04)
	bool bPreventReCenter; // 0x324(0x01)
	char pad_325[0x13]; // 0x325(0x13)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x338(0x10)
	struct FMulticastInlineDelegate OnJoystickRelease; // 0x348(0x10)
	struct FMulticastInlineDelegate OnInputYawAndPitch; // 0x358(0x10)
};

// Class Solarland.SolarAnimInstance
// Size: 0x7a0 (Inherited: 0x270)
struct USolarAnimInstance : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	enum class ENetRole OwnerRole; // 0x270(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	struct FName LeftHandIKSocketName; // 0x27c(0x08)
	struct FName RightHandWeaponSocketName; // 0x284(0x08)
	char pad_28C[0x4]; // 0x28c(0x04)
	struct FTransform LeftHandIKSocket2BoneTrans; // 0x290(0x30)
	struct FVector LeftHandEffectorLocation; // 0x2c0(0x0c)
	struct FRotator LeftHandEffectorRotation; // 0x2cc(0x0c)
	char pad_2D8[0x24]; // 0x2d8(0x24)
	struct FVector CurrentLeftHandJointLocation; // 0x2fc(0x0c)
	struct FVector RightHandEffectorLocation; // 0x308(0x0c)
	struct FVector RightHandJointLocation; // 0x314(0x0c)
	float LeftIKHandWeight; // 0x320(0x04)
	float CurrentReloadTimeRate; // 0x324(0x04)
	float CurrentSwitchWeaponTimeRate; // 0x328(0x04)
	float CurrentBoltTimeRate; // 0x32c(0x04)
	bool IsJog; // 0x330(0x01)
	bool bInWater; // 0x331(0x01)
	char pad_332[0x2]; // 0x332(0x02)
	float ViewPitch; // 0x334(0x04)
	float ViewYaw; // 0x338(0x04)
	float SimulatedProxyViewSmoothSpeed; // 0x33c(0x04)
	char pad_340[0x8]; // 0x340(0x08)
	struct UBlendSpace* FireTPPBlendSpace; // 0x348(0x08)
	float FireTPPBlendSpaceX; // 0x350(0x04)
	float FIreTPPBlendSpaceY; // 0x354(0x04)
	float MinSwimSpeed; // 0x358(0x04)
	float Direction; // 0x35c(0x04)
	float Speed; // 0x360(0x04)
	float InputDirection; // 0x364(0x04)
	enum class EIdleTurnType IdleTurnType; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float TurnExplicitTime; // 0x36c(0x04)
	float DamageDirection; // 0x370(0x04)
	float DamageReactionAlpha; // 0x374(0x04)
	float DamageNomalizeTime; // 0x378(0x04)
	char pad_37C[0x108]; // 0x37c(0x108)
	struct FLeftHandGripConfig CurrentGripData; // 0x484(0x84)
	char pad_508[0x84]; // 0x508(0x84)
	float Fire2PlayRateStand; // 0x58c(0x04)
	float Fire2PlayRateCrouch; // 0x590(0x04)
	bool bHoldingShield; // 0x594(0x01)
	bool ShieldRechargeIK; // 0x595(0x01)
	char pad_596[0x36]; // 0x596(0x36)
	float FallingInputScale; // 0x5cc(0x04)
	struct FVector IKOffsetLeftFootVector; // 0x5d0(0x0c)
	struct FVector IKOffsetRightFootVector; // 0x5dc(0x0c)
	struct FVector JointTargetLeftFootVector; // 0x5e8(0x0c)
	struct FVector JointTargetRightFootVector; // 0x5f4(0x0c)
	struct FRotator LeftFootRotation; // 0x600(0x0c)
	struct FRotator RightFootRotation; // 0x60c(0x0c)
	struct FVector HipOffsetVector; // 0x618(0x0c)
	float FootIKTraceDistanceRate; // 0x624(0x04)
	float CrouchFootIKTraceDistanceRate; // 0x628(0x04)
	float FootIKInterpSpeed; // 0x62c(0x04)
	struct FName LeftFootSocket; // 0x630(0x08)
	struct FName RightFootSocket; // 0x638(0x08)
	bool AnimParam_LeftOrRight; // 0x640(0x01)
	bool bNeedJetLanding; // 0x641(0x01)
	char pad_642[0x2]; // 0x642(0x02)
	float LandingBlendWeight; // 0x644(0x04)
	float DefaultLeftHandWeaponAttachingBlendTime; // 0x648(0x04)
	float DefaultLeftHandWeaponDetachingBlendTime; // 0x64c(0x04)
	float CurrentLeftHandWeaponAttachingBlendTime; // 0x650(0x04)
	float CurrentLeftHandWeaponDetachingBlendTime; // 0x654(0x04)
	char pad_658[0x28]; // 0x658(0x28)
	float FootIKEnableDelayTime; // 0x680(0x04)
	bool bActiveFootIK; // 0x684(0x01)
	char pad_685[0x33]; // 0x685(0x33)
	float FlailRate; // 0x6b8(0x04)
	float ConfigPitchToZeroTime; // 0x6bc(0x04)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeX; // 0x6c0(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeY; // 0x6c8(0x08)
	struct FJetPackPoseSpeedRange JetPack2PoseSpeedRangeZ; // 0x6d0(0x08)
	float JetPack2PoseRestoreSmoothSpeed; // 0x6d8(0x04)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeX; // 0x6dc(0x08)
	struct FJetPackPoseSpeedRange JetPack2UnderWaterPoseSpeedRangeY; // 0x6e4(0x08)
	char pad_6EC[0xe]; // 0x6ec(0x0e)
	bool bNewJet; // 0x6fa(0x01)
	bool bIsJetFlying; // 0x6fb(0x01)
	int32_t DesirePeekDir; // 0x6fc(0x04)
	float PeekSpeed; // 0x700(0x04)
	float PeekDirection; // 0x704(0x04)
	char bEnableDamageReact : 1; // 0x708(0x01)
	char bEnableWeaponAdditiveA : 1; // 0x708(0x01)
	char bEnableHandIK : 1; // 0x708(0x01)
	char bEnableFootIK : 1; // 0x708(0x01)
	char bEnableWeaponAdditiveB : 1; // 0x708(0x01)
	char bEnableWeaponJitter : 1; // 0x708(0x01)
	char pad_708_6 : 2; // 0x708(0x01)
	char MaxLODDamageReact; // 0x709(0x01)
	char MaxLODWeaponAdditiveA; // 0x70a(0x01)
	char MaxLODHandIK; // 0x70b(0x01)
	char MaxLODFootIK; // 0x70c(0x01)
	char MaxLODWeaponAdditiveB; // 0x70d(0x01)
	char MaxLODWeaponJitter; // 0x70e(0x01)
	char bIsDead : 1; // 0x70f(0x01)
	char pad_70F_1 : 7; // 0x70f(0x01)
	float DeathAnimStartPosition; // 0x710(0x04)
	char pad_714[0x4]; // 0x714(0x04)
	struct TMap<enum class ESpecAnimInstType, struct UAnimInstance*> SpecAnimBPs; // 0x718(0x50)
	char bIsWalking : 1; // 0x768(0x01)
	char bIsCrouching : 1; // 0x768(0x01)
	char bIsFalling : 1; // 0x768(0x01)
	char bIsFlying : 1; // 0x768(0x01)
	char bIsSwimming : 1; // 0x768(0x01)
	char bIsSprinting : 1; // 0x768(0x01)
	char bIsSixDirRunForward : 1; // 0x768(0x01)
	char pad_768_7 : 1; // 0x768(0x01)
	enum class EWalkMode CurrentWalkMode; // 0x769(0x01)
	enum class EWalkMode LastWalkMode; // 0x76a(0x01)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x76b(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x76c(0x01)
	enum class ECruiseAnimState CurrentCruiseState; // 0x76d(0x01)
	char pad_76E[0x2]; // 0x76e(0x02)
	struct UAnimSequence* CruiseStartSequence; // 0x770(0x08)
	struct UAnimSequence* CruiseLoopSequence; // 0x778(0x08)
	struct UAnimSequence* CruiseEndSequence; // 0x780(0x08)
	float MinSpeedForSkydiveFlyingInputBonus; // 0x788(0x04)
	float MaxSpeedForSkydiveFlyingInputBonus; // 0x78c(0x04)
	float InputYThresholdToCalcInputYByCamera; // 0x790(0x04)
	float MinDeltaYawFromCameraToGetMaxInputY; // 0x794(0x04)
	enum class ESkydiveStage CurrentSkydiveStage; // 0x798(0x01)
	enum class EWeaponStatus WeaponStatus; // 0x799(0x01)
	char bIsBolting : 1; // 0x79a(0x01)
	char bIsReloading : 1; // 0x79a(0x01)
	char bIsLeftHandDetaching : 1; // 0x79a(0x01)
	char pad_79A_3 : 1; // 0x79a(0x01)
	char bIsInVehicle : 1; // 0x79a(0x01)
	char pad_79A_5 : 3; // 0x79a(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x79b(0x01)
	char pad_79C[0x4]; // 0x79c(0x04)

	void OnMontagePlayEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarAnimInstance.OnMontagePlayEnded // (Final|Native|Public) // @ game+0x1cea620
	bool NeedResolveWeaponJitter(); // Function Solarland.SolarAnimInstance.NeedResolveWeaponJitter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cea570
	bool JetPack2IsDashingCompletelyOver(); // Function Solarland.SolarAnimInstance.JetPack2IsDashingCompletelyOver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea540
	bool IsHoldingWeapon(); // Function Solarland.SolarAnimInstance.IsHoldingWeapon // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea510
	bool IsAiming(); // Function Solarland.SolarAnimInstance.IsAiming // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea4e0
	bool HasMatchingGameplayTag(struct FGameplayTag GameplayTag); // Function Solarland.SolarAnimInstance.HasMatchingGameplayTag // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea430
	bool HasAnyMatchingGameplayTags(struct FGameplayTagContainer& TagContainer); // Function Solarland.SolarAnimInstance.HasAnyMatchingGameplayTags // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea360
	bool HasAllMatchingGameplayTags(struct FGameplayTagContainer& TagContainer); // Function Solarland.SolarAnimInstance.HasAllMatchingGameplayTags // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea290
	struct FVector2D GetSkydiveFlyingInput(); // Function Solarland.SolarAnimInstance.GetSkydiveFlyingInput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea250
	int32_t GetOwnerGroupID(); // Function Solarland.SolarAnimInstance.GetOwnerGroupID // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cea220
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarAnimInstance.GetJetPackDashAnimationBlend // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cea1e0
	struct FVector GetInputVector(); // Function Solarland.SolarAnimInstance.GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea1a0
	struct FVector GetFallingInputVector(); // Function Solarland.SolarAnimInstance.GetFallingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea160
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea0d0
	float GenBackwardDirection(float InInputDirection); // Function Solarland.SolarAnimInstance.GenBackwardDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cea040
	bool CheckNewJetAndReset(); // Function Solarland.SolarAnimInstance.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1cea010
};

// Class Solarland.SolarAnimNotify_Damage
// Size: 0x38 (Inherited: 0x38)
struct USolarAnimNotify_Damage : UAnimNotify {
};

// Class Solarland.SolarAnoHelper
// Size: 0x38 (Inherited: 0x28)
struct USolarAnoHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bOpenAnoSDK; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void SendAntiDataToSsmOnDs(struct FString AntiDataLog, struct ASolarPlayerController* PC); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnDs // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SendAntiDataToSsmOnClientNative(struct FString ExtraParam, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClientNative // (Final|Native|Public|BlueprintCallable) // @ game+0x1cea770
	void SendAntiDataToSsmOnClient(struct FString Param, enum class EAnoAntiDataType AntiType); // Function Solarland.SolarAnoHelper.SendAntiDataToSsmOnClient // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void InitializeBind(); // Function Solarland.SolarAnoHelper.InitializeBind // (Final|Native|Public|BlueprintCallable) // @ game+0x1cea4c0
	struct FString GetAntiLogOnClient(enum class EAnoAntiDataType Type); // Function Solarland.SolarAnoHelper.GetAntiLogOnClient // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void AnoUnRegisterCallBack(); // Function Solarland.SolarAnoHelper.AnoUnRegisterCallBack // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void AnoSentDataToSvr(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoSentDataToSvr // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void AnoSentCoreTimeData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSentCoreTimeData // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce9f20
	void AnoSDKSendData(struct FAnoSDKAntiData AntiData); // Function Solarland.SolarAnoHelper.AnoSDKSendData // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce9e30
	void AnoSDKResume(); // Function Solarland.SolarAnoHelper.AnoSDKResume // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce9e10
	void AnoSDKPause(); // Function Solarland.SolarAnoHelper.AnoSDKPause // (Final|Native|Public|BlueprintCallable) // @ game+0x1ce9e10
	void AnoChangeAntiDataFlow(struct FAnoSDKAntiData Data); // Function Solarland.SolarAnoHelper.AnoChangeAntiDataFlow // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarApplicationLifetimeManager
// Size: 0x60 (Inherited: 0x30)
struct USolarApplicationLifetimeManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	int64_t AppWillDeactivateTimestamp; // 0x38(0x08)
	int64_t AppHasReactivatedTimestamp; // 0x40(0x08)
	char pad_48[0x18]; // 0x48(0x18)

	void ReceiveOnWindowMinimized(bool bIsMinimized); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnWindowMinimized // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnAppWillDeactivate(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppWillDeactivate // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnAppHasReactivated(int64_t InTimestamp); // Function Solarland.SolarApplicationLifetimeManager.ReceiveOnAppHasReactivated // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarAssetManager
// Size: 0x558 (Inherited: 0x438)
struct USolarAssetManager : UAssetManager {
	char pad_438[0x8]; // 0x438(0x08)
	struct USolarChunkAssignData* ChunkAssignDataCache; // 0x440(0x08)
	struct TMap<struct FString, struct UObject*> CachedObjMap; // 0x448(0x50)
	char pad_498[0xc0]; // 0x498(0xc0)

	void UnLoadPrimaryAssetByLabelPathForLua(struct FString PrimaryAssetPath); // Function Solarland.SolarAssetManager.UnLoadPrimaryAssetByLabelPathForLua // (Final|Native|Protected) // @ game+0x1cea850
	void PreloadGameNormalAssets(struct USolarGameInstanceBase* GameInstancePtr); // Function Solarland.SolarAssetManager.PreloadGameNormalAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x1cea6f0
	void OnBindingActorDestory(struct AActor* Actor); // Function Solarland.SolarAssetManager.OnBindingActorDestory // (Final|Native|Protected) // @ game+0x1cea5a0
};

// Class Solarland.SolarAssetManagerSettings
// Size: 0x248 (Inherited: 0x38)
struct USolarAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68(0x10)
	struct TMap<struct TSoftObjectPtr<UWorld>, enum class ESolarPlayStage> WorldPlayStageConfig; // 0x78(0x50)
	struct TMap<struct FString, enum class ESolarPlayStage> FolderDefaultPlayStageConfig; // 0xc8(0x50)
	bool bOnlyCookProductionAssets; // 0x118(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x119(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x11a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x11b(0x01)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x120(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x130(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0x140(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0x150(0x50)
	struct FSoftObjectPath ChunkAssignConfigPath; // 0x1a0(0x18)
	struct TArray<struct FPreloadBundle> PreloadBundles; // 0x1b8(0x10)
	struct TArray<struct FSoftObjectPath> PreloadAssets; // 0x1c8(0x10)
	struct TArray<struct FSoftClassPath> PreloadClassAssets; // 0x1d8(0x10)
	struct FSoftObjectPath ItemActorDataTable; // 0x1e8(0x18)
	struct FSoftObjectPath BackpackTrailAssemblingDataTable; // 0x200(0x18)
	struct FSoftObjectPath ItemResourceDataTable; // 0x218(0x18)
	struct FSoftObjectPath BuffEffectDataTable; // 0x230(0x18)
};

// Class Solarland.SolarAssistAimInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAssistAimInterface : UInterface {

	float GetThirdPersonCameraVerticalOffset(); // Function Solarland.SolarAssistAimInterface.GetThirdPersonCameraVerticalOffset // (Native|Public) // @ game+0x1cf0db0
	struct APlayerController* GetAssistAimController(); // Function Solarland.SolarAssistAimInterface.GetAssistAimController // (Native|Public) // @ game+0x1ce2530
	struct USolarCameraComponent* GetAssistAimCameraComponent(); // Function Solarland.SolarAssistAimInterface.GetAssistAimCameraComponent // (Native|Public) // @ game+0x1cefd80
};

// Class Solarland.SolarAttributeSubComponent
// Size: 0x168 (Inherited: 0xb0)
struct USolarAttributeSubComponent : UActorComponent {
	struct TMap<int32_t, struct USolarAttributeSubData*> AttributeSubs; // 0xb0(0x50)
	struct TArray<struct FSolarAttributeSubReplicateData> AttributeSubRepData; // 0x100(0x10)
	struct TMap<int32_t, float> ClientAttributeSubValues; // 0x110(0x50)
	char pad_160[0x8]; // 0x160(0x08)

	void RemoveModifier(int32_t AttributeSubID, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.RemoveModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf2e90
	void OnRep_AttributeSubRepDatas(); // Function Solarland.SolarAttributeSubComponent.OnRep_AttributeSubRepDatas // (Final|Native|Public) // @ game+0x1cf2b80
	void OnAttributeSubChanged(); // Function Solarland.SolarAttributeSubComponent.OnAttributeSubChanged // (Final|Native|Public) // @ game+0x1cf2870
	float GetValue(int32_t AttributeSubID); // Function Solarland.SolarAttributeSubComponent.GetValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf0de0
	struct USolarAttributeSubSystem* GetAttributeSubSystem(); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubSystem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cefe30
	struct USolarAttributeSubComponent* GetAttributeSubComponentFromActor(struct AActor* InActor); // Function Solarland.SolarAttributeSubComponent.GetAttributeSubComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cefdb0
	int32_t AddModifier(int32_t AttributeSubID, enum class EGameplayModOp InOpType, float Magnitude, struct FName& Name); // Function Solarland.SolarAttributeSubComponent.AddModifier // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cee810
};

// Class Solarland.SolarAttributeSubData
// Size: 0x68 (Inherited: 0x28)
struct USolarAttributeSubData : UObject {
	struct USolarAttributeSubModifierGroup* LocalModifier; // 0x28(0x08)
	struct USolarAttributeSubModifierGroup* GlobalModifier; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
	int32_t AttributeID; // 0x50(0x04)
	float CurrentValue; // 0x54(0x04)
	float MaxValue; // 0x58(0x04)
	float MinValue; // 0x5c(0x04)
	float BaseValue; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	void OnModifierChanged(); // Function Solarland.SolarAttributeSubData.OnModifierChanged // (Final|Native|Protected) // @ game+0x1cf2a90
};

// Class Solarland.SolarAttributeSubModifierGroup
// Size: 0x58 (Inherited: 0x28)
struct USolarAttributeSubModifierGroup : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Solarland.SolarAttributeSubSystem
// Size: 0xd8 (Inherited: 0x30)
struct USolarAttributeSubSystem : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<int32_t, struct FSolarAttributeConfig> AttributeDefaultData; // 0x38(0x50)
	struct TMap<int32_t, struct USolarAttributeSubModifierGroup*> GlobalModifiers; // 0x88(0x50)

	float CharacterTakeDamage(struct USolarAttributeSubComponent* AttributeSubComp, float& Damage); // Function Solarland.SolarAttributeSubSystem.CharacterTakeDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	float CalcWeaponFireDamage(struct USolarAttributeSubComponent* AttributeSet, int32_t& ModeIdx); // Function Solarland.SolarAttributeSubSystem.CalcWeaponFireDamage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarAutoFireInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarAutoFireInterface : UInterface {

	bool CanTriggerWeaponAutoFire(struct ASolarCharacter* InSourceCharacter, struct FVector& InStartLocation, struct FHitResult& InAutoFireHitResult); // Function Solarland.SolarAutoFireInterface.CanTriggerWeaponAutoFire // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1ceeab0
};

// Class Solarland.SolarAutoNavLinkVolume
// Size: 0x2a0 (Inherited: 0x260)
struct ASolarAutoNavLinkVolume : AVolume {
	bool bOverrideGlobalSetting; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	struct FAutoNavLinkSetting AutoNavLinkSetting; // 0x264(0x3c)
};

// Class Solarland.SolarAutoSaveDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarAutoSaveDataTable : UDataTable {
};

// Class Solarland.SolarBackpackActor
// Size: 0x318 (Inherited: 0x228)
struct ASolarBackpackActor : AActor {
	struct USceneComponent* BackpackRoot; // 0x228(0x08)
	struct UBackpackVertAnimMeshComponent* BackpackMesh; // 0x230(0x08)
	struct ASolarCharacter* BackPackActorOwner; // 0x238(0x08)
	struct TArray<struct ASolarBackpackSFX*> BackpackSFX; // 0x240(0x10)
	struct ASolarBackpackSFX* BackpackOffgasSFX; // 0x250(0x08)
	char pad_258[0xc]; // 0x258(0x0c)
	float OriginScale; // 0x264(0x04)
	char pad_268[0x20]; // 0x268(0x20)
	struct ASolarBackpackSFX* TrailClass; // 0x288(0x08)
	struct ASolarBackpackSFX* OffgasClass; // 0x290(0x08)
	struct TSet<struct UParticleSystemComponent*> ListenSet; // 0x298(0x50)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct FString AssemblingId; // 0x2f0(0x10)
	struct FName KnapsackFlySoundName; // 0x300(0x08)
	struct FName StartKnapsackLandingSoundName; // 0x308(0x08)
	struct FName StopKnapsackLandingSoundName; // 0x310(0x08)

	void SetRenderMode(enum class ERenderMode Mode); // Function Solarland.SolarBackpackActor.SetRenderMode // (Final|Native|Public) // @ game+0x1cf54d0
	void SetBackpackVisibilityByFlag(bool bNewVisibility, int32_t Flag); // Function Solarland.SolarBackpackActor.SetBackpackVisibilityByFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf52c0
	void RefreshActorEffect(); // Function Solarland.SolarBackpackActor.RefreshActorEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf2db0
	void OnMeshEffectFactorChange(); // Function Solarland.SolarBackpackActor.OnMeshEffectFactorChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnChildPSCompPreActive(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompPreActive // (Final|Native|Protected) // @ game+0x1cf2910
	void OnChildPSCompFinish(struct UParticleSystemComponent* PSComponent); // Function Solarland.SolarBackpackActor.OnChildPSCompFinish // (Final|Native|Protected) // @ game+0x1cf2890
	bool IsFly(); // Function Solarland.SolarBackpackActor.IsFly // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf1c90
	bool IsCharging(); // Function Solarland.SolarBackpackActor.IsCharging // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf19f0
	bool HasEnergy(); // Function Solarland.SolarBackpackActor.HasEnergy // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf1290
	float GetBackpackOrginScale(); // Function Solarland.SolarBackpackActor.GetBackpackOrginScale // (Final|Native|Public|BlueprintCallable) // @ game+0x1cefe60
};

// Class Solarland.SolarBackpackAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarBackpackAnimInstance : UAnimInstance {
	char bIsInRoom : 1; // 0x268(0x01)
	char bIsFlying : 1; // 0x268(0x01)
};

// Class Solarland.SolarBackpackCompInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarBackpackCompInterface : UInterface {

	struct USolarBackpackComponent* GetSolarBackpackComponent(); // Function Solarland.SolarBackpackCompInterface.GetSolarBackpackComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c2f2f0
};

// Class Solarland.SolarBackpackComponent
// Size: 0x3f8 (Inherited: 0xb0)
struct USolarBackpackComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	float DeathBoxEnergyRate; // 0xb8(0x04)
	float RebirthEnergyRate; // 0xbc(0x04)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FMulticastInlineDelegate OnWeaponCreateCompleteDelegate; // 0xc8(0x10)
	char pad_D8[0x78]; // 0xd8(0x78)
	float InitialSolarCharge; // 0x150(0x04)
	float SolarChargeInterval; // 0x154(0x04)
	float InitialEnergyLimit; // 0x158(0x04)
	float InitialExtraEnergyLimit; // 0x15c(0x04)
	float InitialExtraEnergyCharge; // 0x160(0x04)
	float InitialChargeCD; // 0x164(0x04)
	char pad_168[0x10]; // 0x168(0x10)
	float RechargeFrequencyFromSky; // 0x178(0x04)
	float RechargeFrequencyFromDeathBox; // 0x17c(0x04)
	float RechargeFrequencyFromPile; // 0x180(0x04)
	float RechargeQuantityFromSky; // 0x184(0x04)
	float RechargeQuantityFromDeathBox; // 0x188(0x04)
	float RechargeQuantityFromPile; // 0x18c(0x04)
	char pad_190[0x90]; // 0x190(0x90)
	float JetPackVerticalDashSpeedScale; // 0x220(0x04)
	float JetPackHorizontalDashSpeedScale; // 0x224(0x04)
	struct TMap<int32_t, struct UGameplayAbility*> ItemAbilities; // 0x228(0x50)
	struct TMap<int32_t, struct FGameplayAbilitySpecHandle> GivenAbilityHandles; // 0x278(0x50)
	char pad_2C8[0x54]; // 0x2c8(0x54)
	bool bWeaponPartPickable; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	struct TMap<int32_t, int32_t> defaultDeathBoxEnergyConfig; // 0x320(0x50)
	struct TMap<int32_t, struct FDateTime> DroppedItemIDMap; // 0x370(0x50)
	float DiscardItemDelayNoticeTime; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct TArray<float> GradeRankProportion; // 0x3c8(0x10)
	struct TArray<int32_t> InitialGridNum; // 0x3d8(0x10)
	struct TArray<int32_t> CustomMode_Hunt_InitialGridNum; // 0x3e8(0x10)

	void WeaponCreateCompleteDelegate__DelegateSignature(enum class EWeaponSlotType SlotType, struct ASolarPlayerWeapon* WeaponPtr, struct USolarBackpackComponent* SolarBackpackComponent); // DelegateFunction Solarland.SolarBackpackComponent.WeaponCreateCompleteDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void UpdateCurrentExtraEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentExtraEnergy // (Final|Native|Public) // @ game+0x1cf5880
	void UpdateCurrentEnergy(float UpdateValue, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.UpdateCurrentEnergy // (Final|Native|Public) // @ game+0x1cf57c0
	void UpdateConsumeSlotUI(); // Function Solarland.SolarBackpackComponent.UpdateConsumeSlotUI // (Final|Native|Public) // @ game+0x1cf57a0
	bool TryTriggerAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.TryTriggerAbility // (Final|Native|Protected) // @ game+0x1cf5710
	void TrySendDropItemTips(int32_t InDroppedItemID); // Function Solarland.SolarBackpackComponent.TrySendDropItemTips // (Final|Native|Public) // @ game+0x1cf5690
	float TakeDeathBoxEnergy(); // Function Solarland.SolarBackpackComponent.TakeDeathBoxEnergy // (Final|Native|Public) // @ game+0x1cf5660
	int32_t SupportWeaponSlotNum(); // Function Solarland.SolarBackpackComponent.SupportWeaponSlotNum // (Final|Native|Public) // @ game+0x1cf5630
	void StartCheckTutorials(); // Function Solarland.SolarBackpackComponent.StartCheckTutorials // (Final|Native|Public) // @ game+0x1cf5610
	void SmoothEnergy(float Amount); // Function Solarland.SolarBackpackComponent.SmoothEnergy // (Final|Native|Public) // @ game+0x1cf5590
	void SetSettlementsOnServer(); // Function Solarland.SolarBackpackComponent.SetSettlementsOnServer // (Final|Native|Protected) // @ game+0x1cf5570
	void SetRequirementBySetting(); // Function Solarland.SolarBackpackComponent.SetRequirementBySetting // (Final|Native|Public) // @ game+0x1cf5550
	void SetMaxPileMap(int32_t ItemID, int32_t MaxNum); // Function Solarland.SolarBackpackComponent.SetMaxPileMap // (Final|Native|Public) // @ game+0x1cf5410
	void SetBoxCharging(bool bSet); // Function Solarland.SolarBackpackComponent.SetBoxCharging // (Final|Native|Public) // @ game+0x1cf5380
	void SetBackPackGM(enum class EGmType gmtypy, int32_t ID, int32_t Num, int32_t Slot); // Function Solarland.SolarBackpackComponent.SetBackPackGM // (Final|Native|Public) // @ game+0x1cf3f60
	bool ServerUseItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerUseItem // (Final|Native|Public) // @ game+0x1cf5200
	void ServerSwapBagGrid(int32_t FromGrade, int32_t FromGridIndex, int32_t TargetGrade, int32_t TargetIndex); // Function Solarland.SolarBackpackComponent.ServerSwapBagGrid // (Final|Native|Public) // @ game+0x1cf50c0
	void ServerSetJetPackModule(int32_t NewJetPackModuleID, bool bForVertical); // Function Solarland.SolarBackpackComponent.ServerSetJetPackModule // (Final|Native|Public) // @ game+0x1cf5000
	void ServerSetEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerSetEnergyState // (Final|Native|Public) // @ game+0x1cf4f80
	bool ServerSendOutItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerSendOutItem // (Final|Native|Public) // @ game+0x1cf4ec0
	void ServerRPCUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeWeapon // (Final|Native|Public) // @ game+0x1cf3240
	void ServerRPCUpgradeShield(); // Function Solarland.SolarBackpackComponent.ServerRPCUpgradeShield // (Final|Native|Public) // @ game+0x1cf3220
	void ServerRPCUnLockBagGrid(int32_t Grade, int32_t NewUnLockNum); // Function Solarland.SolarBackpackComponent.ServerRPCUnLockBagGrid // (Final|Native|Public) // @ game+0x1cf4e00
	void ServerRPCTakeWeaponPartToBag(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeWeaponPartToBag // (Final|Native|Public) // @ game+0x1cf26e0
	void ServerRPCTakeBagPartToWeapon(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCTakeBagPartToWeapon // (Final|Native|Public) // @ game+0x1cf2620
	void ServerRPCSwitchWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCSwitchWeaponPart // (Final|Native|Public) // @ game+0x1cf2560
	void ServerRPCSwapBagGridLuaCall(int32_t FromGrade, int32_t FromGridIndex, int32_t TargetGrade, int32_t TargetIndex); // Function Solarland.SolarBackpackComponent.ServerRPCSwapBagGridLuaCall // (Final|Native|Public) // @ game+0x1cf4cc0
	void ServerRPCSwapBagGrid(int32_t FromGrade, int32_t FromGridIndex, int32_t TargetGrade, int32_t TargetIndex); // Function Solarland.SolarBackpackComponent.ServerRPCSwapBagGrid // (Final|Native|Public) // @ game+0x1cf4cc0
	void ServerRPCSetSettlements_Implementation(); // Function Solarland.SolarBackpackComponent.ServerRPCSetSettlements_Implementation // (Final|Native|Public) // @ game+0x1cf4ca0
	void ServerRPCSetBagRequirementArr(struct TArray<struct FBagRequirementData>& BagRequirements); // Function Solarland.SolarBackpackComponent.ServerRPCSetBagRequirementArr // (Final|Native|Public|HasOutParms) // @ game+0x1cf4bf0
	void ServerRPCPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ServerRPCPurchaseEShopItems // (Final|Native|Public) // @ game+0x1cf4af0
	void ServerRPCInitSettlementNeedRankArr(); // Function Solarland.SolarBackpackComponent.ServerRPCInitSettlementNeedRankArr // (Final|Native|Public) // @ game+0x1cf4ad0
	void ServerRPCInitBagGradeData(); // Function Solarland.SolarBackpackComponent.ServerRPCInitBagGradeData // (Final|Native|Public) // @ game+0x1cf4ad0
	void ServerRPCFixBagGrid(int32_t InGrade, int32_t InGridIndex); // Function Solarland.SolarBackpackComponent.ServerRPCFixBagGrid // (Final|Native|Public) // @ game+0x1cef970
	void ServerRPCDiscardWeaponPart(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeaponPart // (Final|Native|Public) // @ game+0x1cf24a0
	void ServerRPCDisCardWeaponLuaCall(int32_t Slot); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardWeaponLuaCall // (Final|Native|Public) // @ game+0x1cf4a50
	void ServerRPCDiscardWeapon(int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardWeapon // (Final|Native|Public) // @ game+0x1cf4a50
	void ServerRPCDisCardItemUICall(int32_t ID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardItemUICall // (Final|Native|Public) // @ game+0x1cf4990
	void ServerRPCDiscardItem(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardItem // (Final|Native|Public) // @ game+0x1cf4990
	void ServerRPCDisCardHomeItemLuaCall(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.ServerRPCDisCardHomeItemLuaCall // (Final|Native|Public) // @ game+0x1cf48d0
	void ServerRPCDiscardHomeItem(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.ServerRPCDiscardHomeItem // (Final|Native|Public) // @ game+0x1cf48d0
	void ServerRPCArrangeBag(); // Function Solarland.SolarBackpackComponent.ServerRPCArrangeBag // (Final|Native|Public) // @ game+0x1cee970
	void ServerPickUpHomeItemsGM(int32_t InItemID, int32_t InItemNum); // Function Solarland.SolarBackpackComponent.ServerPickUpHomeItemsGM // (Final|Native|Public) // @ game+0x1cf4810
	bool ServerPickUpHomeItems(int32_t ItemID, bool isAutoPick); // Function Solarland.SolarBackpackComponent.ServerPickUpHomeItems // (Final|Native|Public) // @ game+0x1cf4750
	int32_t ServerGetDefaultGridNum(int32_t Grade); // Function Solarland.SolarBackpackComponent.ServerGetDefaultGridNum // (Final|Native|Public) // @ game+0x1cf46c0
	void ServerFixBagGrid(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.ServerFixBagGrid // (Final|Native|Public) // @ game+0x1cf4600
	bool ServerDiscardWeapon(int32_t Slot, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardWeapon // (Final|Native|Public) // @ game+0x1cf4540
	bool ServerDiscardHomeItem(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.ServerDiscardHomeItem // (Final|Native|Public) // @ game+0x1cf4480
	bool ServerDiscardFromBackpackByType(enum class EItemType ItemType, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpackByType // (Final|Native|Public) // @ game+0x1cf4380
	bool ServerDiscardFromBackpack(int32_t ItemID, int32_t Num, bool InDropItem, int32_t InTriggerType); // Function Solarland.SolarBackpackComponent.ServerDiscardFromBackpack // (Final|Native|Public) // @ game+0x1cf4220
	void ServerConsumeExtraEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeExtraEnergy // (Final|Native|Public) // @ game+0x1cf4160
	void ServerConsumeEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ServerConsumeEnergy // (Final|Native|Public) // @ game+0x1cf2f60
	void ServerClearJetModule(); // Function Solarland.SolarBackpackComponent.ServerClearJetModule // (Final|Native|Public) // @ game+0x1cf4140
	void ServerClearEnergyState(enum class EEnergyState State); // Function Solarland.SolarBackpackComponent.ServerClearEnergyState // (Final|Native|Public) // @ game+0x1cf40c0
	void ServerClearAllItems(); // Function Solarland.SolarBackpackComponent.ServerClearAllItems // (Final|Native|Public) // @ game+0x1cf40a0
	void ServerBackpackGM(enum class EGmType InGmType, int32_t InItemID, int32_t InItemNum, int32_t InSlot); // Function Solarland.SolarBackpackComponent.ServerBackpackGM // (Final|Native|Public) // @ game+0x1cf3f60
	void ServerArrangeBag(); // Function Solarland.SolarBackpackComponent.ServerArrangeBag // (Final|Native|Public) // @ game+0x1cf3f40
	bool ServerAddWeaponToWeaponSysByDataCache(enum class EWeaponSlotType SlotType, struct FSolarItemData& WeaponData, bool bDestroyPrev, bool IsAutoPickup, int32_t InTriggerType, struct ASolarPlayerWeapon* WeaponActorExists); // Function Solarland.SolarBackpackComponent.ServerAddWeaponToWeaponSysByDataCache // (Final|Native|Public|HasOutParms) // @ game+0x1cf3d00
	int32_t ServerAddToItemMapByIdAndNumForced(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.ServerAddToItemMapByIdAndNumForced // (Final|Native|Public) // @ game+0x1cf3c40
	int32_t ServerAddToItemMap(struct FSolarItemData ItemData); // Function Solarland.SolarBackpackComponent.ServerAddToItemMap // (Final|Native|Public) // @ game+0x1cf3b40
	void ServerAddToEquipMap(struct FSolarItemData& ItemData, bool Bydefault, bool InDropItem); // Function Solarland.SolarBackpackComponent.ServerAddToEquipMap // (Final|Native|Public|HasOutParms) // @ game+0x1cf39a0
	int32_t ServerAddToBackpackByIdAndNum(int32_t ItemID, int32_t Num, bool Bydefault, float CurValue, bool NeedReset, int32_t UserId, int32_t TriggerType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpackByIdAndNum // (Final|Native|Public) // @ game+0x1cf37a0
	int32_t ServerAddToBackpack(struct FSolarItemData& ItemData, bool Bydefault, int32_t TriggerType); // Function Solarland.SolarBackpackComponent.ServerAddToBackpack // (Final|Native|Public|HasOutParms) // @ game+0x1cf3600
	bool ServerAddHomeItemToBagGrid(int32_t ItemID, int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.ServerAddHomeItemToBagGrid // (Final|Native|Public) // @ game+0x1cf3500
	void ReqUseEnergy(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ReqUseEnergy // (Final|Native|Public) // @ game+0x1cf2f60
	void RequestWeaponReplaceNotice(int32_t OldWeaponItemId, int32_t CurWeaponItemId, int32_t OldWeaponLevel, int32_t CurWeaponLevel); // Function Solarland.SolarBackpackComponent.RequestWeaponReplaceNotice // (Final|Native|Public) // @ game+0x1cf33c0
	void RequestWeaponPartReplaceNotice(int32_t OldWeaponPartId, int32_t NewWeaponPartId); // Function Solarland.SolarBackpackComponent.RequestWeaponPartReplaceNotice // (Final|Native|Public) // @ game+0x1cf3300
	void RequestUpgradeWeapon(struct ASolarElectricShop* InTargetShop, struct ASolarPlayerWeapon* InTargetWeapon); // Function Solarland.SolarBackpackComponent.RequestUpgradeWeapon // (Final|Native|Public) // @ game+0x1cf3240
	void RequestUpgradeShield(); // Function Solarland.SolarBackpackComponent.RequestUpgradeShield // (Final|Native|Public) // @ game+0x1cf3220
	void RequestEquipReplaceNotice(int32_t OldEquipItemId, int32_t CurEquipItemId, int32_t EquipType); // Function Solarland.SolarBackpackComponent.RequestEquipReplaceNotice // (Final|Native|Public) // @ game+0x1cf3120
	void ReqesutPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.ReqesutPurchaseEShopItems // (Final|Native|Public) // @ game+0x1cf3020
	void RefreshWeaponPartsInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponPartsInBackPackUI // (Final|Native|Public) // @ game+0x1cf2e70
	void RefreshWeaponInBackPackUIInternal(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUIInternal // (Final|Native|Protected) // @ game+0x1cf2e50
	void RefreshWeaponInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshWeaponInBackPackUI // (Final|Native|Public) // @ game+0x1cf2e30
	void RefreshItemInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshItemInBackPackUI // (Final|Native|Public) // @ game+0x1cf2e10
	void RefreshHomeItemBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshHomeItemBackPackUI // (Final|Native|Public) // @ game+0x8ba190
	void RefreshEquipInBackPackUI(); // Function Solarland.SolarBackpackComponent.RefreshEquipInBackPackUI // (Final|Native|Public) // @ game+0x1cf2df0
	void RefreshBackPackUIState(); // Function Solarland.SolarBackpackComponent.RefreshBackPackUIState // (Final|Native|Public) // @ game+0x1cf2dd0
	void PurchaseEShopItemsResponse_Implementation(int32_t InProductID, bool bSuccess, struct ASolarElectricShop* InTargetShop); // Function Solarland.SolarBackpackComponent.PurchaseEShopItemsResponse_Implementation // (Final|Native|Public) // @ game+0x1cf2cb0
	int32_t PredictEnergy(float Amount); // Function Solarland.SolarBackpackComponent.PredictEnergy // (Final|Native|Public) // @ game+0x1cf2c20
	void OnUnLockGrid(int32_t Grade); // Function Solarland.SolarBackpackComponent.OnUnLockGrid // (Final|Native|Protected) // @ game+0x1cf2ba0
	void OnReceiveItemAbilityCoolDown(struct FGameplayTag& Tags, bool bAdd); // Function Solarland.SolarBackpackComponent.OnReceiveItemAbilityCoolDown // (Final|Native|Public|HasOutParms) // @ game+0x1cf2ab0
	void OnGameModeGlobalSettingChanged(struct UGameModeGlobalSetting* InNewSettings); // Function Solarland.SolarBackpackComponent.OnGameModeGlobalSettingChanged // (Final|Native|Protected) // @ game+0x1cf2a10
	void OnDayNightChange(int32_t ID); // Function Solarland.SolarBackpackComponent.OnDayNightChange // (Final|Native|Public) // @ game+0x1cf2990
	bool NetUseEnergy(float InCostEnergy, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.NetUseEnergy // (Final|Native|Public) // @ game+0x1cf27a0
	void NetTakeWeaponPartToBagLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeWeaponPartToBagLuaCall // (Final|Native|Public) // @ game+0x1cf26e0
	void NetTakeBagPartToWeaponLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetTakeBagPartToWeaponLuaCall // (Final|Native|Public) // @ game+0x1cf2620
	void NetSwitchWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetSwitchWeaponPartLuaCall // (Final|Native|Public) // @ game+0x1cf2560
	void NetDiscardWeaponPartLuaCall(int32_t Slot, int32_t WeaponPartType); // Function Solarland.SolarBackpackComponent.NetDiscardWeaponPartLuaCall // (Final|Native|Public) // @ game+0x1cf24a0
	bool ModuleOverflow2(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow2 // (Final|Native|Public|Const) // @ game+0x1cf2380
	bool ModuleOverflow(int32_t ModuleMax); // Function Solarland.SolarBackpackComponent.ModuleOverflow // (Final|Native|Public|Const) // @ game+0x1cf2410
	struct TArray<struct FReplicateBagGridData> MergeAllGrade(); // Function Solarland.SolarBackpackComponent.MergeAllGrade // (Final|Native|Public) // @ game+0x1cf2220
	void LogBackPackItem(); // Function Solarland.SolarBackpackComponent.LogBackPackItem // (Final|Native|Public) // @ game+0x1cf2200
	bool IsReviveItemRecommend(); // Function Solarland.SolarBackpackComponent.IsReviveItemRecommend // (Final|Native|Public) // @ game+0x1cf1d80
	bool IsReviveItemPickable(); // Function Solarland.SolarBackpackComponent.IsReviveItemPickable // (Final|Native|Public) // @ game+0x1cf1d50
	bool IsReviveItem(int32_t InItemID); // Function Solarland.SolarBackpackComponent.IsReviveItem // (Final|Native|Public) // @ game+0x1cf1cc0
	bool IsExtraEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsExtraEnergyID // (Final|Native|Public) // @ game+0x1cf1c00
	bool IsEquippedWeapon(int32_t InThisID); // Function Solarland.SolarBackpackComponent.IsEquippedWeapon // (Final|Native|Public) // @ game+0x1cf1b70
	bool IsEquippedOrHasBetterPart(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsEquippedOrHasBetterPart // (Final|Native|Public) // @ game+0x1cf1ab0
	bool IsEnergyID(int32_t ID); // Function Solarland.SolarBackpackComponent.IsEnergyID // (Final|Native|Public) // @ game+0x1cf1a20
	int32_t IsBetterWeaponThanEquiped(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponThanEquiped // (Final|Native|Public|HasOutParms) // @ game+0x1cf1860
	bool IsBetterWeaponForBag(struct FSolarItemData& InItemData, int32_t InWeaponLevel, int32_t InWeaponExp); // Function Solarland.SolarBackpackComponent.IsBetterWeaponForBag // (Final|Native|Public|HasOutParms) // @ game+0x1cf16d0
	bool IsBetterScopeForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterScopeForBag // (Final|Native|Public) // @ game+0x1cf1610
	bool IsBetterPartForBag(int32_t PartType, int32_t Level); // Function Solarland.SolarBackpackComponent.IsBetterPartForBag // (Final|Native|Public) // @ game+0x1cf1550
	void InitSettlementNeedRankArrOnServer(); // Function Solarland.SolarBackpackComponent.InitSettlementNeedRankArrOnServer // (Final|Native|Public) // @ game+0x1cf1530
	void InitEquipItemUI(); // Function Solarland.SolarBackpackComponent.InitEquipItemUI // (Final|Native|Public) // @ game+0x1cf1510
	void InitDefaultItem(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.InitDefaultItem // (Final|Native|Public) // @ game+0x1cf1450
	void InitDefaultDayNight(int32_t GameModeID); // Function Solarland.SolarBackpackComponent.InitDefaultDayNight // (Final|Native|Public) // @ game+0x1cf13d0
	void InitDeathBoxEnergyRate(); // Function Solarland.SolarBackpackComponent.InitDeathBoxEnergyRate // (Final|Native|Public) // @ game+0x1cf13b0
	void InitBagGradeDataOnServer(); // Function Solarland.SolarBackpackComponent.InitBagGradeDataOnServer // (Final|Native|Public) // @ game+0x1cf1390
	bool HasPickEnoughItem(int32_t ItemID, int32_t& requirementIndex); // Function Solarland.SolarBackpackComponent.HasPickEnoughItem // (Final|Native|Public|HasOutParms) // @ game+0x1cf12c0
	bool HasEmptyWeaponSlot(); // Function Solarland.SolarBackpackComponent.HasEmptyWeaponSlot // (Final|Native|Public) // @ game+0x1cf1260
	bool GetWeaponSlotEmpty(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponSlotEmpty // (Final|Native|Public) // @ game+0x1cf11d0
	bool GetWeaponPartInBagClient(int32_t TargetPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetWeaponPartInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x1cf10b0
	struct FSolarItemData GetWeaponItemDataBySlot(int32_t Slot); // Function Solarland.SolarBackpackComponent.GetWeaponItemDataBySlot // (Final|Native|Public) // @ game+0x1cf0fb0
	bool GetWeaponDataBySolt(int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetWeaponDataBySolt // (Final|Native|Public|HasOutParms) // @ game+0x1cf0e70
	float GetTotalEnergy(); // Function Solarland.SolarBackpackComponent.GetTotalEnergy // (Final|Native|Protected) // @ game+0x1cf0120
	float GetQuantityFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetQuantityFrom // (Final|Native|Public) // @ game+0x1cf0d20
	int32_t GetPlayerRank(); // Function Solarland.SolarBackpackComponent.GetPlayerRank // (Final|Native|Public) // @ game+0x1cf0cf0
	struct FSolarItemData GetNewItemData(int32_t ItemID, int32_t Num); // Function Solarland.SolarBackpackComponent.GetNewItemData // (Final|Native|Public) // @ game+0x1cf0bb0
	int32_t GetNeedRankNumOnServer(int32_t Grade); // Function Solarland.SolarBackpackComponent.GetNeedRankNumOnServer // (Final|Native|Public) // @ game+0x1cf0b20
	float GetMaxExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxExtraEnergy // (Final|Native|Public|Const) // @ game+0x1cf0af0
	float GetMaxEnergy(); // Function Solarland.SolarBackpackComponent.GetMaxEnergy // (Final|Native|Public|Const) // @ game+0x1cf0af0
	float GetMaxDeathBoxEnergyFromConfig(); // Function Solarland.SolarBackpackComponent.GetMaxDeathBoxEnergyFromConfig // (Final|Native|Public) // @ game+0x1cf0ac0
	bool GetLastNormalGrid(int32_t& outGrade, int32_t& outGridIndex); // Function Solarland.SolarBackpackComponent.GetLastNormalGrid // (Final|Native|Public|HasOutParms) // @ game+0x1cf09d0
	int32_t GetItemNumById(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemNumById // (Final|Native|Public) // @ game+0x1cf0940
	int32_t GetItemMaxPile(int32_t ItemID); // Function Solarland.SolarBackpackComponent.GetItemMaxPile // (Final|Native|Public) // @ game+0x1cf08b0
	bool GetItemDataByType(enum class EItemType ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataByType // (Final|Native|Public|HasOutParms) // @ game+0x1cf0770
	bool GetItemDataById(int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarBackpackComponent.GetItemDataById // (Final|Native|Public|HasOutParms) // @ game+0x1cf0630
	int32_t GetHasUnLockGridNum(int32_t Grade); // Function Solarland.SolarBackpackComponent.GetHasUnLockGridNum // (Final|Native|Public) // @ game+0x1cf05a0
	float GetFrequencyFrom(enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.GetFrequencyFrom // (Final|Native|Public) // @ game+0x1cf0510
	struct FSolarItemData GetEquipItemDataByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipItemDataByType // (Final|Native|Public) // @ game+0x1cf0410
	int32_t GetEquipIdByType(enum class EItemType ItemType); // Function Solarland.SolarBackpackComponent.GetEquipIdByType // (Final|Native|Public) // @ game+0x1cf0380
	int32_t GetDefaultAddGrade(); // Function Solarland.SolarBackpackComponent.GetDefaultAddGrade // (Final|Native|Public) // @ game+0x1cf0350
	int32_t GetDafalutAddGrid(int32_t Grade); // Function Solarland.SolarBackpackComponent.GetDafalutAddGrid // (Final|Native|Public) // @ game+0x1cf02c0
	float GetCurrExtraEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrExtraEnergy // (Final|Native|Public|Const) // @ game+0x1cf0120
	struct FSolarItemData GetCurrentWeaponItemData(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponItemData // (Final|Native|Public) // @ game+0x1cf0230
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.SolarBackpackComponent.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x1cf0200
	void GetCurrentEquipItems(struct TArray<int32_t>& OutArray); // Function Solarland.SolarBackpackComponent.GetCurrentEquipItems // (Final|Native|Public|HasOutParms) // @ game+0x1cf0150
	float GetCurrEnergy(); // Function Solarland.SolarBackpackComponent.GetCurrEnergy // (Final|Native|Public|Const) // @ game+0x1cf0120
	struct ASolarCharacter* GetCharacterOwner(); // Function Solarland.SolarBackpackComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c71010
	enum class EWeaponSlotType GetBestSuitSlotForCandidateWeapon(struct FSolarItemData& WeaponData, bool IsAutoPickup); // Function Solarland.SolarBackpackComponent.GetBestSuitSlotForCandidateWeapon // (Final|Native|Public|HasOutParms) // @ game+0x1ceffd0
	void GetBagGridDatasByGrade(int32_t Grade, struct TArray<struct FReplicateBagGridData>& OutBagGridDataArray); // Function Solarland.SolarBackpackComponent.GetBagGridDatasByGrade // (Final|Native|Public|HasOutParms) // @ game+0x1cefe80
	bool GetAnyScopeInBagClient(int32_t& OutPartType, int32_t& OutPartLevel, int32_t& OutItemID); // Function Solarland.SolarBackpackComponent.GetAnyScopeInBagClient // (Final|Native|Public|HasOutParms) // @ game+0x1cefc40
	float GetAbilityRemainingCD(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityRemainingCD // (Final|Native|Public) // @ game+0x1cefbb0
	float GetAbilityDuration(int32_t InItemID); // Function Solarland.SolarBackpackComponent.GetAbilityDuration // (Final|Native|Public) // @ game+0x1cefb20
	void GameStatistics_ItemUseCount(struct FSolarItemData& InItemData); // Function Solarland.SolarBackpackComponent.GameStatistics_ItemUseCount // (Final|Native|Protected|HasOutParms) // @ game+0x1cefa30
	void FixBagGrid(int32_t Grade, int32_t gridIndex); // Function Solarland.SolarBackpackComponent.FixBagGrid // (Final|Native|Public) // @ game+0x1cef970
	void ExecuteGM(struct FString InStrGM); // Function Solarland.SolarBackpackComponent.ExecuteGM // (Final|Native|Public) // @ game+0x1cef8d0
	void EquipModuleByID(int32_t ModuleID); // Function Solarland.SolarBackpackComponent.EquipModuleByID // (Final|Native|Public) // @ game+0x1cef850
	int32_t EquipModule(int32_t ID, float ModuleMax); // Function Solarland.SolarBackpackComponent.EquipModule // (Final|Native|Public) // @ game+0x1cef780
	void EquipBatteryByID(int32_t BatteryID); // Function Solarland.SolarBackpackComponent.EquipBatteryByID // (Final|Native|Public) // @ game+0x1cef700
	int32_t EquipBattery(int32_t ID, float BatteryMax, float Charge, float CD); // Function Solarland.SolarBackpackComponent.EquipBattery // (Final|Native|Public) // @ game+0x1cef5c0
	void DiscardItemAndResetCharacterData(struct FSolarItemData& DiscardItem, bool DiscardDataOnly); // Function Solarland.SolarBackpackComponent.DiscardItemAndResetCharacterData // (Final|Native|Public|HasOutParms) // @ game+0x1cef470
	void DiscardItem(struct FSolarItemData DiscardItem); // Function Solarland.SolarBackpackComponent.DiscardItem // (Final|Native|Public) // @ game+0x1cef380
	void DelayCheckClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.DelayCheckClearAbility // (Final|Native|Protected) // @ game+0x1cef300
	void CompleteWholeRowOnServer(int32_t Grade); // Function Solarland.SolarBackpackComponent.CompleteWholeRowOnServer // (Final|Native|Protected) // @ game+0x1cef280
	void CommitEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CommitEnergy // (Final|Native|Public) // @ game+0x1ceec30
	void ClientWeaponPartReplaceNotice(int32_t OldWeaponPartId, int32_t NewWeaponPartId); // Function Solarland.SolarBackpackComponent.ClientWeaponPartReplaceNotice // (Final|Native|Public) // @ game+0x1cef1c0
	void ClientEquipReplaceNotice(int32_t OldEquipItemId, int32_t CurEquipItemId, int32_t EquipType); // Function Solarland.SolarBackpackComponent.ClientEquipReplaceNotice // (Final|Native|Public) // @ game+0x1cef0c0
	bool ClearBackpackItemByID(int32_t InItemID); // Function Solarland.SolarBackpackComponent.ClearBackpackItemByID // (Final|Native|Public) // @ game+0x1cef030
	void CheckToGiveAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToGiveAbility // (Final|Native|Protected) // @ game+0x1ceefb0
	void CheckToClearAbility(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CheckToClearAbility // (Final|Native|Protected) // @ game+0x1ceef30
	bool CheckIsRecWeaponParts(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckIsRecWeaponParts // (Final|Native|Public) // @ game+0x1ceeea0
	bool CheckIsEquippedDifferentScope(int32_t PartID); // Function Solarland.SolarBackpackComponent.CheckIsEquippedDifferentScope // (Final|Native|Public) // @ game+0x1ceee10
	bool CheckCanAutoPickupWeaponPart(int32_t ItemID); // Function Solarland.SolarBackpackComponent.CheckCanAutoPickupWeaponPart // (Final|Native|Public) // @ game+0x1ceed80
	float ChargeMain(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeMain // (Final|Native|Public) // @ game+0x1ceecb0
	float ChargeExtra(float Amount, enum class EEnergyUsage Usage); // Function Solarland.SolarBackpackComponent.ChargeExtra // (Final|Native|Public) // @ game+0x1ceecb0
	void CancelEnergy(int32_t ID); // Function Solarland.SolarBackpackComponent.CancelEnergy // (Final|Native|Public) // @ game+0x1ceec30
	bool CanAutoPickupHomeItem(int32_t InItemID); // Function Solarland.SolarBackpackComponent.CanAutoPickupHomeItem // (Final|Native|Public) // @ game+0x1ceea20
	bool BatteryOverflow(int32_t BatteryMax); // Function Solarland.SolarBackpackComponent.BatteryOverflow // (Final|Native|Public|Const) // @ game+0x1cee990
	void ArrangeBag(); // Function Solarland.SolarBackpackComponent.ArrangeBag // (Final|Native|Public) // @ game+0x1cee970
	enum class EItemModifyResult AddBackpackItemByID(int32_t InItemID, int32_t InItemNum, bool InDropItem); // Function Solarland.SolarBackpackComponent.AddBackpackItemByID // (Final|Native|Public) // @ game+0x1cee710
};

// Class Solarland.BackpackTrailAssemblingInterface
// Size: 0x28 (Inherited: 0x28)
struct UBackpackTrailAssemblingInterface : UInterface {

	void OnBackpackTrailAssembling(struct FBackpackTrailAssemblingParams& Params, enum class EBackpackPropellingMode PropellingMode); // Function Solarland.BackpackTrailAssemblingInterface.OnBackpackTrailAssembling // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarLeggedVehicle
// Size: 0x1500 (Inherited: 0x14c0)
struct ASolarLeggedVehicle : ASolarVehiclePawn {
	struct USolarLeggedVehicleMovement* LeggedVehicleMovement; // 0x14b8(0x08)
	struct UCapsuleComponent* VehicleCapsule; // 0x14c0(0x08)
	struct UPrimitiveComponent* BlockForVehicleComp; // 0x14c8(0x08)
	float BlockForVehicleCollisionDelay; // 0x14d0(0x04)
	char pad_14DC[0x4]; // 0x14dc(0x04)
	bool bReplicatedRequestJump; // 0x14e0(0x01)
	char pad_14E1[0x7]; // 0x14e1(0x07)
	struct TArray<struct FVector_NetQuantize> InitialFootIkLocations; // 0x14e8(0x10)
	float StandOnVehicleRadiusMultiplier; // 0x14f8(0x04)
	char pad_14FC[0x4]; // 0x14fc(0x04)

	void OnStandOnVehicle(bool bOnVehicle); // Function Solarland.SolarLeggedVehicle.OnStandOnVehicle // (Final|Native|Protected) // @ game+0x1db88f0
	void OnRep_ReplicatedJumpRequest(); // Function Solarland.SolarLeggedVehicle.OnRep_ReplicatedJumpRequest // (Final|Native|Protected) // @ game+0x1db88d0
	void OnRep_InitialFootIkLocations(); // Function Solarland.SolarLeggedVehicle.OnRep_InitialFootIkLocations // (Final|Native|Protected) // @ game+0x1db88b0
};

// Class Solarland.SolarBackpackerVehicle
// Size: 0x1560 (Inherited: 0x1500)
struct ASolarBackpackerVehicle : ASolarLeggedVehicle {
	struct UStaticMeshComponent* VehicleHitBox; // 0x1500(0x08)
	struct TSoftObjectPtr<UStaticMesh> BackpackMesh; // 0x1508(0x28)
	struct UStaticMesh* OriginalBackpackMesh; // 0x1530(0x08)
	int32_t BackpackerItemID; // 0x1538(0x04)
	char pad_153C[0x4]; // 0x153c(0x04)
	struct UGameplayEffect* SheildRecoverEffect; // 0x1540(0x08)
	struct ASolarCharacter* AttachedPlayer; // 0x1548(0x08)
	bool bShieldOpened; // 0x1550(0x01)
	bool bVehicleDroped; // 0x1551(0x01)
	char pad_1552[0xe]; // 0x1552(0x0e)

	void OnRep_VehicleDropped(); // Function Solarland.SolarBackpackerVehicle.OnRep_VehicleDropped // (Final|Native|Protected) // @ game+0x1cf9aa0
	void OnRep_ShieldChanged(); // Function Solarland.SolarBackpackerVehicle.OnRep_ShieldChanged // (Final|Native|Protected) // @ game+0x1cf9a80
	void OnRep_AttachedToPlayer(); // Function Solarland.SolarBackpackerVehicle.OnRep_AttachedToPlayer // (Final|Native|Protected) // @ game+0x1cf9a60
};

// Class Solarland.SolarBackpackSFX
// Size: 0x280 (Inherited: 0x228)
struct ASolarBackpackSFX : AActor {
	char pad_228[0x58]; // 0x228(0x58)

	void OnPropellingModeChanged(enum class EBackpackPropellingMode PropellingMode); // Function Solarland.SolarBackpackSFX.OnPropellingModeChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct UParticleSystemComponent* GetTrailEffectComponent(); // Function Solarland.SolarBackpackSFX.GetTrailEffectComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1cf9300
	void BackpackSFXLaunch(bool GroundDetected, struct FVector& GroundLocation, struct FVector& GroundNormal); // Function Solarland.SolarBackpackSFX.BackpackSFXLaunch // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1cf84a0
	void BackpackSFXEnd(); // Function Solarland.SolarBackpackSFX.BackpackSFXEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x1257f30
	void BackpackSFXBegin(enum class EFXJetType InJetType, bool GroundDetected); // Function Solarland.SolarBackpackSFX.BackpackSFXBegin // (Native|Event|Public|BlueprintEvent) // @ game+0x1cf83d0
};

// Class Solarland.SolarBattleModel
// Size: 0x38 (Inherited: 0x30)
struct USolarBattleModel : USolarAbstractModel {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.BattleSpectatorItemData
// Size: 0x80 (Inherited: 0x28)
struct UBattleSpectatorItemData : UObject {
	struct USolarBattleSpectatorWidget* SpectatorWidget; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)

	void Init(struct TMap<struct FString, struct FString> BattleData); // Function Solarland.BattleSpectatorItemData.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf9420
	void GetBattleData(struct FString InDataName, struct FText& OutText); // Function Solarland.BattleSpectatorItemData.GetBattleData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf8f20
};

// Class Solarland.SolarBattleSpectatorWidget
// Size: 0x340 (Inherited: 0x340)
struct USolarBattleSpectatorWidget : USolarUserWidget {

	void UpdatePageInfo(int32_t& CurrentPage, int32_t& TotalPage); // Function Solarland.SolarBattleSpectatorWidget.UpdatePageInfo // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetPageSize(int32_t PageSize); // Function Solarland.SolarBattleSpectatorWidget.SetPageSize // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.SetBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RequestStartPlayReplay(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.RequestStartPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RequestBattleData(int32_t PageIndex); // Function Solarland.SolarBattleSpectatorWidget.RequestBattleData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshBattleList(); // Function Solarland.SolarBattleSpectatorWidget.RefreshBattleList // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnStartPlayReplayFailed(struct FString BattleID); // Function Solarland.SolarBattleSpectatorWidget.OnStartPlayReplayFailed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void AddBattleDatas(struct TArray<struct UBattleSpectatorItemData*>& BattleDatas); // Function Solarland.SolarBattleSpectatorWidget.AddBattleDatas // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool WorldPosToWidgetPosForWorldMark(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos, float& AngleForArrow); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForWorldMark // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cfa4e0
	bool WorldPosToWidgetPosForEmoji(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPosForEmoji // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cfa3c0
	bool WorldPosToWidgetPos(struct APlayerController* Controller, struct FVector& Pos, struct FVector2D& ScreenPos); // Function Solarland.SolarBlueprintFunctionLibrary.WorldPosToWidgetPos // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cfa2a0
	void UnlockCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.UnlockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cfa190
	void TryGetLocalText(int32_t LocalTextId, bool& bSuccess, struct FString& LocalText); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetLocalText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfa060
	void TryGetHUDColorForPlayerLevel(struct UObject* WorldContext, int32_t PlayerLevel, bool& bFoundConfig, struct FLinearColor& BaseColor, struct FLinearColor& DecorateColor); // Function Solarland.SolarBlueprintFunctionLibrary.TryGetHUDColorForPlayerLevel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf9ea0
	void Test_SolarBlueprintFunctionLibrary(); // Function Solarland.SolarBlueprintFunctionLibrary.Test_SolarBlueprintFunctionLibrary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x962e10
	void SortObjectArrayByName(struct TArray<struct UObject*>& inArray); // Function Solarland.SolarBlueprintFunctionLibrary.SortObjectArrayByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf9de0
	void ReleaseFocus(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.ReleaseFocus // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf9b30
	void RebuildCursorWidgets(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.RebuildCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf9ac0
	void LockCursor(struct APlayerController* PlayerController, struct UWidget* TargetWidget); // Function Solarland.SolarBlueprintFunctionLibrary.LockCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf9980
	struct UPassiveSkillDataAsset* LoadPassiveSkillDataAssetForCharacter(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.LoadPassiveSkillDataAssetForCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf98c0
	float K2_GetAsyncLoadPercentage(struct FName& PackageName); // Function Solarland.SolarBlueprintFunctionLibrary.K2_GetAsyncLoadPercentage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf9830
	bool IsSteamVersion(); // Function Solarland.SolarBlueprintFunctionLibrary.IsSteamVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cf97d0
	bool IsRenderingMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsRenderingMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf97a0
	bool IsPlatformSupportLimChat(); // Function Solarland.SolarBlueprintFunctionLibrary.IsPlatformSupportLimChat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x993ec0
	bool IsMobilePlatform(); // Function Solarland.SolarBlueprintFunctionLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf9770
	bool IsLowMemoryDeivce(); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowMemoryDeivce // (Final|Native|Static|Public) // @ game+0x1cf9740
	bool IsLowLevelDevice(struct UObject* InObject); // Function Solarland.SolarBlueprintFunctionLibrary.IsLowLevelDevice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf96c0
	bool HasPassiveSkillDataAssetConfig(struct UObject* WorldContext, int32_t CharacterId); // Function Solarland.SolarBlueprintFunctionLibrary.HasPassiveSkillDataAssetConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf9360
	float GetViewportScale(); // Function Solarland.SolarBlueprintFunctionLibrary.GetViewportScale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1cf9330
	void GetTipsPosition(struct UObject* WorldContextObject, struct UWidget* FocusWidget, float Offset, struct FVector2D& FixedPos, int32_t& Dimsion); // Function Solarland.SolarBlueprintFunctionLibrary.GetTipsPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cf9160
	struct FVector2D GetScreenSize(); // Function Solarland.SolarBlueprintFunctionLibrary.GetScreenSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cf90e0
	struct TArray<struct FString> GetAssetDependencies(struct FName& Path); // Function Solarland.SolarBlueprintFunctionLibrary.GetAssetDependencies // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf8e00
	void GetActorsWithTagInSubLevelByName(struct UObject* WorldContextObject, struct FName& LevelName, struct FName& Tag, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarBlueprintFunctionLibrary.GetActorsWithTagInSubLevelByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf8c80
	void ExitGame(bool bForce); // Function Solarland.SolarBlueprintFunctionLibrary.ExitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8c00
	struct FString EnumToString(struct FString Enum, int32_t EnumValue); // Function Solarland.SolarBlueprintFunctionLibrary.EnumToString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8ae0
	void EnableInputAndHideCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.EnableInputAndHideCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8a70
	void EnableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.EnableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8a00
	void DisableInputAndShowCursor(struct ASolarPlayerController* Controller); // Function Solarland.SolarBlueprintFunctionLibrary.DisableInputAndShowCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8990
	void DisableAnalogCursor(struct APlayerController* PlayerController); // Function Solarland.SolarBlueprintFunctionLibrary.DisableAnalogCursor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cf8920
	void ChangeSessionMode(bool& IfChangeToPCSession); // Function Solarland.SolarBlueprintFunctionLibrary.ChangeSessionMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1cf8730
	void AbsoluteToViewport(struct UObject* WorldContextObject, struct FVector2D& AbsolutePosition, struct FVector2D& ViewPortPos); // Function Solarland.SolarBlueprintFunctionLibrary.AbsoluteToViewport // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1cf82c0
};

// Class Solarland.SolarBombActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarBombActor : AActor {
	bool bFireWater; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	struct FBombingZoneBomb BombConfig; // 0x22c(0x1c)
	bool bAutoDestroyAfterFire; // 0x248(0x01)
	char pad_249[0xb]; // 0x249(0x0b)
	float TargetLandingTime; // 0x254(0x04)
	struct UParticleSystem* WaterBombEffect; // 0x258(0x08)
	struct UParticleSystem* BombEffect; // 0x260(0x08)
	struct UMaterialInstanceDynamic* GuideLine; // 0x268(0x08)
	struct UAkComponent* AkAudioComponent; // 0x270(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x278(0x08)

	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarBombActor.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1cf9560
};

// Class Solarland.SolarBombingZoneManager
// Size: 0x260 (Inherited: 0x228)
struct ASolarBombingZoneManager : AActor {
	struct ASolarBombActor* BPClass; // 0x228(0x08)
	struct TArray<struct FBombingZone> ZoneArray; // 0x230(0x10)
	char pad_240[0x4]; // 0x240(0x04)
	int32_t WeightInCar; // 0x244(0x04)
	int32_t WeightInPoision; // 0x248(0x04)
	int32_t WeightInRoom; // 0x24c(0x04)
	struct FVector2D LocationLimit; // 0x250(0x08)
	float NotifyTime; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	void OnCreateBombingZone(int32_t ID, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.OnCreateBombingZone // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	struct FBombingZoneBomb GetBombData(int32_t ZoneId); // Function Solarland.SolarBombingZoneManager.GetBombData // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool CreateBombingZone(struct FBombingZone& Zone, bool bSpecificLocation, struct FVector TargetLocation); // Function Solarland.SolarBombingZoneManager.CreateBombingZone // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cf87b0
};

// Class Solarland.SolarBotAIController
// Size: 0x650 (Inherited: 0x370)
struct ASolarBotAIController : ASolarAIControllerBase {
	char pad_370[0x10]; // 0x370(0x10)
	struct USolarBotLootComponent* BotLootComponent; // 0x380(0x08)
	struct USolarPerceptionComponent* BotPerceptionComponent; // 0x388(0x08)
	struct FNavAgentProperties VehicleAgentProperties; // 0x390(0x30)
	int32_t UniqueSpawnerID; // 0x3c0(0x04)
	struct FGameplayTag BattleSubTreeTag; // 0x3c4(0x08)
	int32_t DefaultDifficultyLevel; // 0x3cc(0x04)
	int32_t CurrentDifficultyLevel; // 0x3d0(0x04)
	float CharacterLookAtInterpSpeed; // 0x3d4(0x04)
	float MinSpecVehicleDeltaPitch; // 0x3d8(0x04)
	bool bInitDefaultWeapon; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	int32_t BotDefaultWeaponId; // 0x3e0(0x04)
	bool bPreventFatalDamageToPlayer; // 0x3e4(0x01)
	bool bAimBoneWhenFire; // 0x3e5(0x01)
	char pad_3E6[0x2]; // 0x3e6(0x02)
	struct FName FireTargetBoneName; // 0x3e8(0x08)
	struct FBotFireConfig DefaultFireConfig; // 0x3f0(0x10)
	struct FBotFireConfig FireConfigToBot; // 0x400(0x10)
	struct FBotFireConfig VehicleFireConfig; // 0x410(0x10)
	struct FBotFireConfig VehicleFireConfigToBot; // 0x420(0x10)
	float DamageFactorToVehicle; // 0x430(0x04)
	float DamageFactorToBotVehicle; // 0x434(0x04)
	float DamageFactorToSummonItem; // 0x438(0x04)
	float DamageFactorToBotSummonItem; // 0x43c(0x04)
	float BotAIAttackRange; // 0x440(0x04)
	float BotAIAttackRangeUnArm; // 0x444(0x04)
	bool bSpawnDeathBox; // 0x448(0x01)
	char pad_449[0x3]; // 0x449(0x03)
	struct FBotBonusDropConfig BonusDropConfig; // 0x44c(0x18)
	float MinimumDistanceForRepeatedBoarding; // 0x464(0x04)
	enum class EBotAIType BotAIType; // 0x468(0x01)
	char pad_469[0x3]; // 0x469(0x03)
	int32_t BotFeature; // 0x46c(0x04)
	struct FVector2D MovementVector; // 0x470(0x08)
	struct UNavigationQueryFilter* BPDefaultNavigationFilterClass; // 0x478(0x08)
	char pad_480[0x30]; // 0x480(0x30)
	struct TMap<struct FGameplayTag, struct UBehaviorTree*> SubTreeMap; // 0x4b0(0x50)
	char pad_500[0x38]; // 0x500(0x38)
	struct TWeakObjectPtr<struct AActor> AITarget; // 0x538(0x08)
	struct USolarBotShootSimulater* ShootSimulater; // 0x540(0x08)
	bool bEnableShootSimulator; // 0x548(0x01)
	char pad_549[0x3]; // 0x549(0x03)
	struct FSolarBotShootConfig DefaultShootConfig; // 0x54c(0x58)
	char pad_5A4[0x64]; // 0x5a4(0x64)
	struct USolarWarmTargetComponent* WarmTargetComponent; // 0x608(0x08)
	struct FMulticastInlineDelegate OnBotAIDeath; // 0x610(0x10)
	char pad_620[0xc]; // 0x620(0x0c)
	struct TWeakObjectPtr<struct ASolarCharacter> PossessedCharacer; // 0x62c(0x08)
	char pad_634[0x4]; // 0x634(0x04)
	struct USolarFollowingComponent* PathFollowingComp; // 0x638(0x08)
	char pad_640[0x8]; // 0x640(0x08)
	struct UNgaiAIControllerComponent* NgaiComponent; // 0x648(0x08)

	void UpdateDynamicSubtree(); // Function Solarland.SolarBotAIController.UpdateDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfa280
	void UpdateCharacterRotate(float DeltaTime); // Function Solarland.SolarBotAIController.UpdateCharacterRotate // (Final|Native|Protected) // @ game+0x1cfa200
	void StopBehaviorTree(); // Function Solarland.SolarBotAIController.StopBehaviorTree // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf9e80
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Solarland.SolarBotAIController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x1cf9c60
	bool SetupBotAITargetSelectConfig(); // Function Solarland.SolarBotAIController.SetupBotAITargetSelectConfig // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool SetupBotAIDifficulty(int32_t DifficultyLevel, bool bAsDefault); // Function Solarland.SolarBotAIController.SetupBotAIDifficulty // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool SetupBotAICanUseCharacterData(int32_t CharacterId, int32_t SkinId); // Function Solarland.SolarBotAIController.SetupBotAICanUseCharacterData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetDynamicSubtree(struct FGameplayTag InjectTag, struct UBehaviorTree* BehaviorAsset); // Function Solarland.SolarBotAIController.SetDynamicSubtree // (Final|Native|Public|BlueprintCallable) // @ game+0x1cf9ba0
	void OnReset(); // Function Solarland.SolarBotAIController.OnReset // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnEnterLanding(); // Function Solarland.SolarBotAIController.OnEnterLanding // (Native|Public) // @ game+0x1cf9a30
	bool IsTeamLeader(); // Function Solarland.SolarBotAIController.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf9800
	bool IsInPlayerTeam(); // Function Solarland.SolarBotAIController.IsInPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf9660
	bool IsIndependent(); // Function Solarland.SolarBotAIController.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf9690
	bool IsAccompanyingPlayer(); // Function Solarland.SolarBotAIController.IsAccompanyingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf9630
	void InitBotAIConfig(); // Function Solarland.SolarBotAIController.InitBotAIConfig // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarBotAIController.GetSolarCharacter // (Native|Public|Const) // @ game+0x1cf9120
	char GetMyTeamID(); // Function Solarland.SolarBotAIController.GetMyTeamID // (Native|Public|Const) // @ game+0x1cf90a0
	bool CanActivateVehicleAbility(int32_t SeatIndex, int32_t AbilityIndex); // Function Solarland.SolarBotAIController.CanActivateVehicleAbility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cf8670
	float CalculateScoreForAITarget(struct AActor* AITargetActor); // Function Solarland.SolarBotAIController.CalculateScoreForAITarget // (Final|Native|Protected) // @ game+0x1cf85d0
};

// Class Solarland.SolarBotAIControllerInGuide
// Size: 0x670 (Inherited: 0x650)
struct ASolarBotAIControllerInGuide : ASolarBotAIController {
	struct TArray<struct FDeathBoxItemData> DeathBoxItems; // 0x650(0x10)
	char pad_660[0x10]; // 0x660(0x10)
};

// Class Solarland.SolarBotAIControllerOnVehicle
// Size: 0x690 (Inherited: 0x650)
struct ASolarBotAIControllerOnVehicle : ASolarBotAIController {
	char pad_650[0x40]; // 0x650(0x40)

	void SetMoveStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetMoveStop // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfdff0
	void SetFireStop(bool NeedStop); // Function Solarland.SolarBotAIControllerOnVehicle.SetFireStop // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfde60
	void OnVehicleDriverGetOff(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarBotAIControllerOnVehicle.OnVehicleDriverGetOff // (Final|Native|Public) // @ game+0x1cfdac0
};

// Class Solarland.SolarBotAITeamManager
// Size: 0x100 (Inherited: 0x28)
struct USolarBotAITeamManager : UObject {
	float UpdateInterval; // 0x28(0x04)
	float DefaultSeparateDistance; // 0x2c(0x04)
	float DefaultReturnDistance; // 0x30(0x04)
	char pad_34[0x5c]; // 0x34(0x5c)
	struct ASolarBotTeamVisualizer* DebugVisualizerClass; // 0x90(0x08)
	struct ASolarBotTeamVisualizer* DebugVisualizer; // 0x98(0x08)
	struct TMap<struct ASolarCharacter*, struct ASolarBotAIController*> AllocatedCharacters; // 0xa0(0x50)
	struct TArray<struct ASolarCharacter*> AbandonedCharacters; // 0xf0(0x10)

	void UpdateAllocatedList(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& AliveCharacterArray); // Function Solarland.SolarBotAITeamManager.UpdateAllocatedList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cff290
	bool TryCancelCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* CancelledCharacter); // Function Solarland.SolarBotAITeamManager.TryCancelCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1cff1d0
	bool ShouldTeamActivate(struct FSolarBotTeamInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.ShouldTeamActivate // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x1cff110
	void SetTeamBlackboardValueAsVector(int32_t TeamID, struct FName& KeyName, struct FVector VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cfef70
	void SetTeamBlackboardValueAsString(int32_t TeamID, struct FName& KeyName, struct FString StringValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfed80
	void SetTeamBlackboardValueAsRotator(int32_t TeamID, struct FName& KeyName, struct FRotator VectorValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsRotator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1cfebe0
	void SetTeamBlackboardValueAsObject(int32_t TeamID, struct FName& KeyName, struct UObject* ObjectValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsObject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfea40
	void SetTeamBlackboardValueAsName(int32_t TeamID, struct FName& KeyName, struct FName NameValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe8a0
	void SetTeamBlackboardValueAsInt(int32_t TeamID, struct FName& KeyName, int32_t IntValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsInt // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe710
	void SetTeamBlackboardValueAsFloat(int32_t TeamID, struct FName& KeyName, float FloatValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsFloat // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe570
	void SetTeamBlackboardValueAsEnum(int32_t TeamID, struct FName& KeyName, char EnumValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsEnum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe3d0
	void SetTeamBlackboardValueAsClass(int32_t TeamID, struct FName& KeyName, struct UObject* ClassValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe230
	void SetTeamBlackboardValueAsBool(int32_t TeamID, struct FName& KeyName, bool BoolValue, enum class ESolarBotMemberState InBotState, bool bSkipIndependent); // Function Solarland.SolarBotAITeamManager.SetTeamBlackboardValueAsBool // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfe080
	void SetBotDropOut(struct ASolarBotAIController* InController, bool bDropOut); // Function Solarland.SolarBotAITeamManager.SetBotDropOut // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfdd00
	void OnTeamDeactive(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamDeactive // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnTeamActivate(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.OnTeamActivate // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnBotUnRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotUnRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnBotStateChanged(struct FSolarBotMemberInfo& BotInfo, enum class ESolarBotMemberState OldState); // Function Solarland.SolarBotAITeamManager.OnBotStateChanged // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnBotRegister(struct FSolarBotMemberInfo& BotInfo); // Function Solarland.SolarBotAITeamManager.OnBotRegister // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	bool IsValidTeamID(int32_t InTeamId); // Function Solarland.SolarBotAITeamManager.IsValidTeamID // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1cfd610
	bool IsTeamLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsTeamLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfd580
	bool IsIndependent(struct ASolarBotAIController* InController); // Function Solarland.SolarBotAITeamManager.IsIndependent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfd460
	bool GetTeamPlayerInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& PlayerArray); // Function Solarland.SolarBotAITeamManager.GetTeamPlayerInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfd360
	bool GetRescueInfo(struct ASolarBotAIController* InController, struct TArray<struct ASolarCharacter*>& DyingPlayerArray, struct TArray<struct ASolarCharacter*>& DeadPlayerArray, struct TArray<struct ASolarCharacter*>& DyingBotArray, struct TArray<struct ASolarCharacter*>& DeadBotArray); // Function Solarland.SolarBotAITeamManager.GetRescueInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfd130
	bool GetBotTeamInfo(struct ASolarBotAIController* InController, struct FSolarBotTeamInfo& OutTeamInfo); // Function Solarland.SolarBotAITeamManager.GetBotTeamInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfd030
	bool GetBotMemberInfo(struct ASolarBotAIController* InController, struct FSolarBotMemberInfo& OutMemberInfo); // Function Solarland.SolarBotAITeamManager.GetBotMemberInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfcf40
	struct USolarBotAITeamManager* Get(struct UObject* Context); // Function Solarland.SolarBotAITeamManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1cfcec0
	bool CheckBotTeamState(struct ASolarBotAIController* InController, enum class ESolarBotMemberState MemberState); // Function Solarland.SolarBotAITeamManager.CheckBotTeamState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cfcd70
	struct FVector CalculateTeamPosition(struct FSolarBotTeamInfo& TeamInfo); // Function Solarland.SolarBotAITeamManager.CalculateTeamPosition // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x1cfcca0
	bool AllocatedRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* RescuedCharacter); // Function Solarland.SolarBotAITeamManager.AllocatedRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfcbe0
	void AbandonedCurrentRescueTarget(struct ASolarBotAIController* InController, struct ASolarCharacter* AbandonedCharacter); // Function Solarland.SolarBotAITeamManager.AbandonedCurrentRescueTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfca50
};

// Class Solarland.SolarBotLootComponent
// Size: 0x160 (Inherited: 0xb0)
struct USolarBotLootComponent : UActorComponent {
	struct FGameplayTag LootSubTreeTag; // 0xb0(0x08)
	float MoveCostFactor; // 0xb8(0x04)
	float DistSelfToSpawnerFactor; // 0xbc(0x04)
	float DistSpawnerOffsetFactor; // 0xc0(0x04)
	float AvgDistSpawnerToTeammatesFactor; // 0xc4(0x04)
	float AssualtRifleBaseValue; // 0xc8(0x04)
	float ShotgunBaseValue; // 0xcc(0x04)
	float SubmachinegunBaseValue; // 0xd0(0x04)
	float SniperBaseValue; // 0xd4(0x04)
	float WeaponQualityValue; // 0xd8(0x04)
	float AmmoBaseValue; // 0xdc(0x04)
	float AmmoMatchFactor; // 0xe0(0x04)
	float ShieldBaseValue; // 0xe4(0x04)
	float ShieldQualityValue; // 0xe8(0x04)
	float JetpackModuleBaseValue; // 0xec(0x04)
	float JetpackModuleQualityValue; // 0xf0(0x04)
	float MedkitBaseValue; // 0xf4(0x04)
	float MedkitHPRatioFactor; // 0xf8(0x04)
	char pad_FC[0x64]; // 0xfc(0x64)
};

// Class Solarland.SolarBotOnVehicleActionTrigger
// Size: 0x260 (Inherited: 0x230)
struct ASolarBotOnVehicleActionTrigger : ATriggerBox {
	int32_t VehicleStopAreaId; // 0x230(0x04)
	enum class EBotOnVehicleStopType StopType; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	float MoveStopDelayTime; // 0x238(0x04)
	enum class EBotOnVehicleFireType FireType; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	float FireOffDelayTime; // 0x240(0x04)
	int32_t ActivateVehicleAbilitySeatIndex; // 0x244(0x04)
	char pad_248[0x18]; // 0x248(0x18)

	void OnUpdatedComponentOverlapEnd(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapEnd // (Final|Native|Public) // @ game+0x1cfd980
	void OnUpdatedComponentOverlapBegin(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarBotOnVehicleActionTrigger.OnUpdatedComponentOverlapBegin // (Final|Native|Public|HasOutParms) // @ game+0x1cfd770
};

// Class Solarland.SolarBotOnVehicleOnLineCtrl
// Size: 0x690 (Inherited: 0x690)
struct ASolarBotOnVehicleOnLineCtrl : ASolarBotAIControllerOnVehicle {
};

// Class Solarland.SolarBotShootSimulater
// Size: 0xa8 (Inherited: 0x28)
struct USolarBotShootSimulater : UObject {
	struct ASolarBotAIController* OwnerController; // 0x28(0x08)
	struct AActor* LockedTargetActor; // 0x30(0x08)
	char pad_38[0x70]; // 0x38(0x70)
};

// Class Solarland.SolarBotTargetSelectComponent
// Size: 0x200 (Inherited: 0xb0)
struct USolarBotTargetSelectComponent : UActorComponent {
	struct TArray<struct FName> ForbiddenTags; // 0xb0(0x10)
	struct TArray<struct AActor*> AIStimulusChatacterList; // 0xc0(0x10)
	struct TWeakObjectPtr<struct AActor> GiftPlayer; // 0xd0(0x08)
	float ThreatUpdateTime; // 0xd8(0x04)
	float DistanceThreshold; // 0xdc(0x04)
	float MaxThreatValueInDistance; // 0xe0(0x04)
	float DistanceThreatValueRate; // 0xe4(0x04)
	float ThreatValueIncreasePerTick; // 0xe8(0x04)
	float ThreatValueDecreasePerTick; // 0xec(0x04)
	float AttackThreatValue; // 0xf0(0x04)
	float CancelAttackThreatValue; // 0xf4(0x04)
	int32_t AIThreatNumber; // 0xf8(0x04)
	int32_t MaxThreatValueInTimer; // 0xfc(0x04)
	float PeripheralVisionAngleDegrees; // 0x100(0x04)
	float ThreatDifferenceVelue; // 0x104(0x04)
	float BotThreatFactor; // 0x108(0x04)
	float PlayerThreatFactor; // 0x10c(0x04)
	struct ASolarBotAIController* BotAIController; // 0x110(0x08)
	char pad_118[0xe8]; // 0x118(0xe8)

	void UpdateTimerThreatValue(); // Function Solarland.SolarBotTargetSelectComponent.UpdateTimerThreatValue // (Final|Native|Protected) // @ game+0x1cff3e0
	void UpdateTargetThreat(); // Function Solarland.SolarBotTargetSelectComponent.UpdateTargetThreat // (Final|Native|Protected) // @ game+0x1cff3c0
	void UpdateRemoveList(); // Function Solarland.SolarBotTargetSelectComponent.UpdateRemoveList // (Final|Native|Protected) // @ game+0x1cff3a0
	void UpdateDistanceThreatValue(); // Function Solarland.SolarBotTargetSelectComponent.UpdateDistanceThreatValue // (Final|Native|Protected) // @ game+0x1cff380
	void SetForbiddenTags(struct TArray<struct FName>& Tags, bool bCleanExists); // Function Solarland.SolarBotTargetSelectComponent.SetForbiddenTags // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1cfdef0
	void SetEnabled(bool bInEnable); // Function Solarland.SolarBotTargetSelectComponent.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfddd0
	void RemoveFromStimulusList(struct AActor* StimulusActor); // Function Solarland.SolarBotTargetSelectComponent.RemoveFromStimulusList // (Final|Native|Public) // @ game+0x1cfdb80
	void RemoveFromePlayerList(int32_t ObjectId); // Function Solarland.SolarBotTargetSelectComponent.RemoveFromePlayerList // (Final|Native|Protected) // @ game+0x1cfdc80
	void RemoveFromeAIList(int32_t ObjectId); // Function Solarland.SolarBotTargetSelectComponent.RemoveFromeAIList // (Final|Native|Protected) // @ game+0x1cfdc00
	void OnOwnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarBotTargetSelectComponent.OnOwnerEndPlay // (Final|Native|Public) // @ game+0x1cfd6b0
	bool IsTargetInLineSight(struct AActor* StimulusActor); // Function Solarland.SolarBotTargetSelectComponent.IsTargetInLineSight // (Final|Native|Public) // @ game+0x1cfd4f0
	void ClearCurrentThreat(bool bCleanBestTarget); // Function Solarland.SolarBotTargetSelectComponent.ClearCurrentThreat // (Final|Native|Public|BlueprintCallable) // @ game+0x1cfce30
	void AddToStimulusList(struct AActor* StimulusActor, bool bSetToMaxTimerThreatValue); // Function Solarland.SolarBotTargetSelectComponent.AddToStimulusList // (Final|Native|Public) // @ game+0x1cfcb10
};

// Class Solarland.SolarBotTeamVisualizer
// Size: 0x250 (Inherited: 0x228)
struct ASolarBotTeamVisualizer : AInfo {
	struct TArray<struct FColor> DrawDebugColors; // 0x228(0x10)
	struct UFont* TextFont; // 0x238(0x08)
	struct TArray<struct FBotTeamDebugInfo> BotTeamDebugInfos; // 0x240(0x10)
};

// Class Solarland.SolarBT_RandomSelecter
// Size: 0x90 (Inherited: 0x90)
struct USolarBT_RandomSelecter : UBTCompositeNode {
};

// Class Solarland.SolarBTD_CheckSelectKeyType
// Size: 0x98 (Inherited: 0x90)
struct USolarBTD_CheckSelectKeyType : UBTDecorator_BlackboardBase {
	enum class ESolarCharacterType CheckType; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Solarland.SolarBTS_BotActionState
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotActionState : UBTService_BlackboardBase {
	enum class EBotActionState ActionState; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Solarland.SolarBTS_BotChangeQueryFilter
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTS_BotChangeQueryFilter : UBTService_BlackboardBase {
	struct UNavigationQueryFilter* TargetFilter; // 0x98(0x08)
};

// Class Solarland.SolarBTS_BotFocusTo
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTS_BotFocusTo : UBTService_BlackboardBase {
	float LookAtSpeed; // 0x98(0x04)
	bool bUseFocusDirection; // 0x9c(0x01)
	bool bLocalDirection; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FVector FocusDirection; // 0xa0(0x0c)
	struct FRotator DeltaRotation; // 0xac(0x0c)
	bool bRandomFocusDirection; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float RandomPitchDeviation; // 0xbc(0x04)
	float RandomYawDeviation; // 0xc0(0x04)
	bool bRestorePreviousFocusOnCeaseRelevant; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Solarland.SolarBTS_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTS_BotInputMove : UBTService {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTS_BotPrepareMode
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_BotPrepareMode : UBTService {
	float RatioWantWeapon; // 0x70(0x04)
	float RatioWantInteract; // 0x74(0x04)
};

// Class Solarland.SolarBTS_BotSearchSupplies
// Size: 0xe0 (Inherited: 0x70)
struct USolarBTS_BotSearchSupplies : UBTService {
	float HPRatioToUseMedicine; // 0x70(0x04)
	float ShieldRatioToRecharge; // 0x74(0x04)
	float MaxSearchRangeNearbyPlayer; // 0x78(0x04)
	float MinSearchRangeNearbyPlayer; // 0x7c(0x04)
	float RadiusTolerance; // 0x80(0x04)
	struct FVector2D NearbyEnemyOuterFactorRange; // 0x84(0x08)
	struct FVector2D NearbyEnemyInnerFactorRange; // 0x8c(0x08)
	struct FVector2D NearbyEnemyCountRange; // 0x94(0x08)
	struct FVector2D NearbySpawnerOuterFactorRange; // 0x9c(0x08)
	struct FVector2D NearbySpawnerInnerFactorRange; // 0xa4(0x08)
	struct FVector2D NearbySpawnerCountRange; // 0xac(0x08)
	bool bEnableWeaponFeeding; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	float MaxNoWeaponTime; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<int32_t> FeedWeaponIDs; // 0xc0(0x10)
	float CheckPlayerSightInterval; // 0xd0(0x04)
	bool bStartFeedAfterSearchedAnySpawner; // 0xd4(0x01)
	char pad_D5[0x3]; // 0xd5(0x03)
	float MaxDistanceToShieldUpgradeItemShop; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Solarland.SolarBTS_BotUpdateBunker
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTS_BotUpdateBunker : UBTService {
	struct FBlackboardKeySelector BlackboardKeyEnemy; // 0x70(0x28)
	float FullBunkerHeight; // 0x98(0x04)
	float HalfBunkerHeight; // 0x9c(0x04)
	float MaxDistanceToBunker; // 0xa0(0x04)
	float MaxDistanceToTarget; // 0xa4(0x04)
	float MinDistanceToTarget; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Solarland.SolarBTS_BotUpdateOnVehicle
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTS_BotUpdateOnVehicle : UBTService_BlackboardBase {
	bool bUsePathfindingDistance; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float MinDistanceTakePassenger; // 0x9c(0x04)
	float MaxWaitTimeSeconds; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Solarland.SolarBTS_BotUpdateSafeArea
// Size: 0xa8 (Inherited: 0x70)
struct USolarBTS_BotUpdateSafeArea : UBTService {
	float SafeAreaRadiusEx; // 0x70(0x04)
	struct FVector SafeAreaSnapExtent; // 0x74(0x0c)
	float EstimateAdjustFactor; // 0x80(0x04)
	bool bAllowUseSpaceDistance; // 0x84(0x01)
	char pad_85[0x23]; // 0x85(0x23)
};

// Class Solarland.SolarBTS_CheckCanAttack
// Size: 0xe8 (Inherited: 0x98)
struct USolarBTS_CheckCanAttack : UBTService_BlackboardBase {
	struct FBlackboardKeySelector BlackboardKeyInLineSight; // 0x98(0x28)
	struct FBlackboardKeySelector BlackboardKeyInLineSightEx; // 0xc0(0x28)
};

// Class Solarland.SolarBTS_CheckNeedFindVehicle
// Size: 0xf0 (Inherited: 0x98)
struct USolarBTS_CheckNeedFindVehicle : UBTService_BlackboardBase {
	bool bMarkOccupiedAfterVehicleSelected; // 0x98(0x01)
	bool bCleanTargetOnCeaseRelevant; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct TArray<struct ASolarVehiclePawn*> SolarWheeledVehicleClass; // 0xa0(0x10)
	bool bIgnoreVehicleInPoision; // 0xb0(0x01)
	bool bIgnoreVehicleOffNavmesh; // 0xb1(0x01)
	char pad_B2[0x2]; // 0xb2(0x02)
	struct FVector CheckOnNavmeshExtent; // 0xb4(0x0c)
	struct UNavigationQueryFilter* FilterClass; // 0xc0(0x08)
	struct TArray<int32_t> ExceptVehicleId; // 0xc8(0x10)
	float MoveToDistanceFindVehicle; // 0xd8(0x04)
	float RangeFindVehicle; // 0xdc(0x04)
	float HealthTakingVehicle; // 0xe0(0x04)
	float MaxDistanceFindTeamVehicle; // 0xe4(0x04)
	bool bCheckSameTarget; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float SameTargetDistThreshold; // 0xec(0x04)
};

// Class Solarland.SolarBTS_CheckNeedRunEQS
// Size: 0x98 (Inherited: 0x98)
struct USolarBTS_CheckNeedRunEQS : UBTService_BlackboardBase {
};

// Class Solarland.SolarBTS_NgaiNearbySupplies
// Size: 0x78 (Inherited: 0x70)
struct USolarBTS_NgaiNearbySupplies : UBTService {
	char pad_70[0x8]; // 0x70(0x08)
};

// Class Solarland.SolarBTS_TeamTaskAllocation
// Size: 0x168 (Inherited: 0x98)
struct USolarBTS_TeamTaskAllocation : UBTService_BlueprintBase {
	float RescueAllocateThresholdScore; // 0x98(0x04)
	float RescueAbandonThresholdScore; // 0x9c(0x04)
	float RescuePunishScore; // 0xa0(0x04)
	float RescueRewardScore; // 0xa4(0x04)
	bool bNeedToRebornBotInBotTeam; // 0xa8(0x01)
	bool bNeedToRebornBotInPlayerTeam; // 0xa9(0x01)
	bool bDebugTaskScore; // 0xaa(0x01)
	bool bDebugEachTaskScore; // 0xab(0x01)
	struct FVector PoisonSnapExtent; // 0xac(0x0c)
	struct FSolarTaskScoringItem CustomTaskScoringItemList; // 0xb8(0x50)
	char pad_108[0x50]; // 0x108(0x50)
	struct ASolarBotAIController* SelfController; // 0x158(0x08)
	struct ASolarCharacter* SelfCharacter; // 0x160(0x08)

	void PostGetCurrentTaskScore(struct FSolarScoringItemStruct& InScoringItemStruct); // Function Solarland.SolarBTS_TeamTaskAllocation.PostGetCurrentTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1d02b50
	float MoveToSafeAreaCostSec(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToSafeAreaCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d02ab0
	float MoveToRescueTargetCostSec(struct ASolarBotAIController* InController, struct AActor* TeammateInDanger); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToRescueTargetCostSec // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d029f0
	float MoveToPointCostSec(struct ASolarBotAIController* InController, struct FVector& CenterPoint, float InRadius); // Function Solarland.SolarBTS_TeamTaskAllocation.MoveToPointCostSec // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d028d0
	void DebugEachTaskScoreItem(struct FSolarScoringItemStruct& TaskScore, enum class ESolarTaskScoringItemType& ItemType, float Score, float Value); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugEachTaskScoreItem // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d02740
	void DebugAllTaskScore(struct TArray<struct FSolarScoringItemStruct>& TaskScoresList); // Function Solarland.SolarBTS_TeamTaskAllocation.DebugAllTaskScore // (Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d02690
	bool CheckIfCharacterInSafeArea(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInSafeArea // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d02600
	bool CheckIfCharacterInPoisonCircle(struct AActor* InActor); // Function Solarland.SolarBTS_TeamTaskAllocation.CheckIfCharacterInPoisonCircle // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d02570
	bool CheakIsLeader(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CheakIsLeader // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d024e0
	bool CanRescueCurrentTarget(struct ASolarCharacter* RescueTarget); // Function Solarland.SolarBTS_TeamTaskAllocation.CanRescueCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d02440
	bool CanAllocateCurrentTarget(struct ASolarBotAIController* InController); // Function Solarland.SolarBTS_TeamTaskAllocation.CanAllocateCurrentTarget // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1d023a0
};

// Class Solarland.SolarBTT_BotAltFire
// Size: 0xb0 (Inherited: 0x70)
struct USolarBTT_BotAltFire : UBTTaskNode {
	float TimeOutSec; // 0x70(0x04)
	bool bUseLocalParam; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct FVector2D LocalDirectionExpected; // 0x78(0x08)
	float LocalDistanceExpected; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct FBlackboardKeySelector LocationExpected; // 0x88(0x28)
};

// Class Solarland.SolarBTT_BotCharging
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotCharging : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotFire
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_BotFire : UBTTask_BlackboardBase {
	bool bEnableOffset; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float OffsetRadiusMax; // 0x9c(0x04)
	float OffsetRadiusMin; // 0xa0(0x04)
	float MaxFireDuration; // 0xa4(0x04)
	bool bEnableShootSimulator; // 0xa8(0x01)
	bool bForceReset; // 0xa9(0x01)
	bool bOverrideDefaultShootConfig; // 0xaa(0x01)
	char pad_AB[0x1]; // 0xab(0x01)
	struct FSolarBotShootConfig ShootConfig; // 0xac(0x58)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Solarland.SolarBTT_BotContinueFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotContinueFire : USolarBTT_BotFire {
	float FireDurationTime; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotCruise
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotCruise : UBTTaskNode {
	float SecDelayFollowJump; // 0x70(0x04)
	float SecDelayRandomDeviation; // 0x74(0x04)
};

// Class Solarland.SolarBTT_BotCruiseBehindTarget
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseBehindTarget : UBTTaskNode {
	struct FBlackboardKeySelector TargetToFollow; // 0x70(0x28)
	float SecDelayFollowJump; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotCruiseWhenNearest
// Size: 0xa0 (Inherited: 0x70)
struct USolarBTT_BotCruiseWhenNearest : UBTTaskNode {
	struct FBlackboardKeySelector TargetToCheck; // 0x70(0x28)
	float SecDelayRandomDeviation; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotInputMove
// Size: 0x80 (Inherited: 0x70)
struct USolarBTT_BotInputMove : UBTTaskNode {
	struct FVector2D InputDir; // 0x70(0x08)
	float DeviationAngle; // 0x78(0x04)
	bool bRandomInput; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Solarland.SolarBTT_BotInteractWithShieldUpgradeItemShop
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotInteractWithShieldUpgradeItemShop : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotJet
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotJet : UBTTask_BlackboardBase {
	enum class EJetPackMode JetPackMode; // 0x98(0x01)
	enum class EJetTaskFinishMode FinishMode; // 0x99(0x01)
	bool bTestBlock; // 0x9a(0x01)
	char pad_9B[0x1]; // 0x9b(0x01)
	float DisplacementExpected; // 0x9c(0x04)
	float MinDisplacementExpected; // 0xa0(0x04)
	bool bUseLocalInput; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FVector2D LocalInput; // 0xa8(0x08)
	bool bSelectorAsTarget; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class Solarland.SolarBTT_BotJump
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotJump : UBTTaskNode {
	enum class EJumpTaskFinishMode FinishMode; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotLookAt
// Size: 0xb8 (Inherited: 0x98)
struct USolarBTT_BotLookAt : UBTTask_BlackboardBase {
	struct FRotator DeltaRotator; // 0x98(0x0c)
	bool bRandomRot; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	float LookAtSpeed; // 0xa8(0x04)
	bool bFinishTaskAfterReachTarget; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	float ReachAngleTolerance; // 0xb0(0x04)
	float ReachTimeOut; // 0xb4(0x04)
};

// Class Solarland.SolarBTT_BotModifyShootParam
// Size: 0x88 (Inherited: 0x70)
struct USolarBTT_BotModifyShootParam : UBTTaskNode {
	enum class EBotShootTargetType ShootTargetType; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float ShootDisperse; // 0x74(0x04)
	float HitRate; // 0x78(0x04)
	float DamageRate; // 0x7c(0x04)
	float DamageFactor; // 0x80(0x04)
	bool bModifyShootDisperse; // 0x84(0x01)
	bool bModifyHitRate; // 0x85(0x01)
	bool bModifyDamageRate; // 0x86(0x01)
	bool bModifyDamageFactor; // 0x87(0x01)
};

// Class Solarland.SolarBTT_BotMoveTo
// Size: 0xe0 (Inherited: 0xb0)
struct USolarBTT_BotMoveTo : UBTTask_MoveTo {
	struct FBlackboardKeySelector BBK_AcceptanceRadius; // 0xb0(0x28)
	bool bMoveToGoalOnLastSegment; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
};

// Class Solarland.SolarBTT_BotOnceFire
// Size: 0x110 (Inherited: 0x108)
struct USolarBTT_BotOnceFire : USolarBTT_BotFire {
	int32_t OnceFireTimes; // 0x108(0x04)
	float OnceFireIntervalTime; // 0x10c(0x04)
};

// Class Solarland.SolarBTT_BotPickupItem
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotPickupItem : UBTTask_BlackboardBase {
	float MaxPickUpDistSq; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.SolarBTT_BotRechargeShield
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotRechargeShield : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotRescueTeammate
// Size: 0xc0 (Inherited: 0x70)
struct USolarBTT_BotRescueTeammate : UBTTaskNode {
	struct FBlackboardKeySelector CharacterToRescue; // 0x70(0x28)
	struct FBlackboardKeySelector TargetBox; // 0x98(0x28)
};

// Class Solarland.SolarBTT_BotRoleSkill
// Size: 0x138 (Inherited: 0x98)
struct USolarBTT_BotRoleSkill : UBTTask_BlackboardBase {
	struct FGameplayTag RoleAbilityTag; // 0x98(0x08)
	struct FBlackboardKeySelector LocationExpected; // 0xa0(0x28)
	float TimeOutSec; // 0xc8(0x04)
	float HoldSec; // 0xcc(0x04)
	struct FBlackboardKeySelector SummonItemLocation; // 0xd0(0x28)
	struct FBlackboardKeySelector SummonItemRadius; // 0xf8(0x28)
	struct FVector OffsetVec; // 0x120(0x0c)
	float SummonTestRadius; // 0x12c(0x04)
	char pad_130[0x8]; // 0x130(0x08)
};

// Class Solarland.SolarBTT_BotSkyDiving
// Size: 0xc0 (Inherited: 0x70)
struct USolarBTT_BotSkyDiving : UBTTaskNode {
	struct FBlackboardKeySelector ActorFocused; // 0x70(0x28)
	float DecisionAltitude; // 0x98(0x04)
	float RandomLandingRadius; // 0x9c(0x04)
	float FollowAcceptDistance; // 0xa0(0x04)
	float AbandonCheckAltitude; // 0xa4(0x04)
	float CheckEnemyRange; // 0xa8(0x04)
	int32_t CheckEnemyCount; // 0xac(0x04)
	float DelaySecPreserved; // 0xb0(0x04)
	float OuterRandomLandingRadius; // 0xb4(0x04)
	float InnerRandomLandingRadius; // 0xb8(0x04)
	float RandomDelayCancelFollow; // 0xbc(0x04)
};

// Class Solarland.SolarBTT_BotSprint
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSprint : UBTTaskNode {
	bool bEnterSprint; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotSwitchWeapon
// Size: 0x78 (Inherited: 0x70)
struct USolarBTT_BotSwitchWeapon : UBTTaskNode {
	enum class EWeaponType WeaponType; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Solarland.SolarBTT_BotTeleport
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotTeleport : UBTTask_BlackboardBase {
	bool bNoCheck; // 0x98(0x01)
	bool bTeleportVehicle; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
};

// Class Solarland.SolarBTT_BotTreatment
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_BotTreatment : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_BotUpgradeShield
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_BotUpgradeShield : UBTTask_BlackboardBase {
	struct FGameplayTag ShieldUpdateAbilityTag; // 0x98(0x08)
};

// Class Solarland.SolarBTT_BotVehicleFire
// Size: 0x118 (Inherited: 0x108)
struct USolarBTT_BotVehicleFire : USolarBTT_BotFire {
	float DurationTime; // 0x108(0x04)
	float ChargePercentMin; // 0x10c(0x04)
	float ChargePercentMax; // 0x110(0x04)
	float SecFireAfterAimLocked; // 0x114(0x04)
};

// Class Solarland.SolarBTT_BotVehicleSkill
// Size: 0xa8 (Inherited: 0x98)
struct USolarBTT_BotVehicleSkill : UBTTask_BlackboardBase {
	int32_t SeatIndex; // 0x98(0x04)
	int32_t AbilityIndex; // 0x9c(0x04)
	bool bCancel; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Solarland.SolarBTT_BotWaitCruiseEnd
// Size: 0x70 (Inherited: 0x70)
struct USolarBTT_BotWaitCruiseEnd : UBTTaskNode {
};

// Class Solarland.SolarBTT_BotWeaponFire
// Size: 0xf8 (Inherited: 0x98)
struct USolarBTT_BotWeaponFire : UBTTask_BlackboardBase {
	float MaxFireDuration; // 0x98(0x04)
	bool bOverrideDefaultShootConfig; // 0x9c(0x01)
	bool bForceReset; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
	struct FSolarBotShootConfig ShootConfig; // 0xa0(0x58)
};

// Class Solarland.SolarBTT_FindRandomLocation
// Size: 0xc8 (Inherited: 0x98)
struct USolarBTT_FindRandomLocation : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector CenterBlackboardSelector; // 0x98(0x28)
	float SearchRadius; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Solarland.SolarBTT_GetOnOrOffVehicle
// Size: 0xa0 (Inherited: 0x98)
struct USolarBTT_GetOnOrOffVehicle : UBTTask_BlackboardBase {
	bool bGetOnVehicle; // 0x98(0x01)
	bool bMarkBlockAfterOffVehicle; // 0x99(0x01)
	bool bProhibitionOfGettingOnOtherCar; // 0x9a(0x01)
	char pad_9B[0x5]; // 0x9b(0x05)
};

// Class Solarland.SolarBTT_RunBehaviorDynamic
// Size: 0x88 (Inherited: 0x88)
struct USolarBTT_RunBehaviorDynamic : UBTTask_RunBehaviorDynamic {
};

// Class Solarland.SolarBTT_SetBotAIEnemyTarget
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_SetBotAIEnemyTarget : UBTTask_BlackboardBase {
};

// Class Solarland.SolarBTT_SpawnVehicle
// Size: 0x108 (Inherited: 0x98)
struct USolarBTT_SpawnVehicle : UBTTask_BlackboardBase {
	struct TArray<int32_t> SpawnIds; // 0x98(0x10)
	bool bUsingSelectedSpawnId; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
	struct FBlackboardKeySelector SelectedSpawnId; // 0xb0(0x28)
	struct FBlackboardKeySelector SpawnedVehicle; // 0xd8(0x28)
	float SpawnHeightOffset; // 0x100(0x04)
	float SpawnFailedSec; // 0x104(0x04)
};

// Class Solarland.SolarBullet
// Size: 0x378 (Inherited: 0x228)
struct ASolarBullet : AActor {
	float TotalEffectTime; // 0x228(0x04)
	bool bAttached; // 0x22c(0x01)
	bool bShowHitCharacter; // 0x22d(0x01)
	bool bShowHitToTeammate; // 0x22e(0x01)
	bool bShowHitWater; // 0x22f(0x01)
	struct UParticleSystem* BulletEffect; // 0x230(0x08)
	struct UParticleSystem* TrajectoryEffect; // 0x238(0x08)
	struct UParticleSystem* TrajectoryEffectOther; // 0x240(0x08)
	struct FSoftObjectPath SimpleCanisterShotEffectPath; // 0x248(0x18)
	struct UParticleSystem* TrajectoryBeamEffect; // 0x260(0x08)
	struct UParticleSystem* TrajectoryBeamEffectOther; // 0x268(0x08)
	struct UParticleSystem* HitEffect; // 0x270(0x08)
	struct UParticleSystem* MuzzleEffect; // 0x278(0x08)
	bool bKeepOneActivate; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct UParticleSystem* MuzzleEffectScope; // 0x288(0x08)
	struct UParticleSystem* MuzzleEffectOther; // 0x290(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffect; // 0x298(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectScope; // 0x2a0(0x08)
	struct UParticleSystem* FlameArresterMuzzleEffectOther; // 0x2a8(0x08)
	struct UParticleSystem* SpecialEffect; // 0x2b0(0x08)
	struct UParticleSystem* DecalEffect; // 0x2b8(0x08)
	struct UParticleSystem* DecalEffect2; // 0x2c0(0x08)
	struct FSoftObjectPath ShieldEffect; // 0x2c8(0x18)
	struct TMap<enum class EPhysicalSurface, struct FSoftObjectPath> PhysicsHitEffects; // 0x2e0(0x50)
	float DecalLifeSpan; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct UParticleSystem* ShellCaseEffect; // 0x338(0x08)
	struct UParticleSystem* ShellCaseEffectOnScope; // 0x340(0x08)
	float ProjectTileSummonDistance; // 0x348(0x04)
	bool CanExplodeWhenOutRange; // 0x34c(0x01)
	char pad_34D[0x3]; // 0x34d(0x03)
	struct FString HoldingPreViewSound_1P; // 0x350(0x10)
	struct FString HoldingPreViewSound_3P; // 0x360(0x10)
	char BulletCollisionType; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)

	void OnPlayImpactEffect(struct UParticleSystemComponent* PSC); // Function Solarland.SolarBullet.OnPlayImpactEffect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct FSoftObjectPath GetHitPhysicEffectPath(enum class EPhysicalSurface& HitSurface); // Function Solarland.SolarBullet.GetHitPhysicEffectPath // (Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x1d053f0
};

// Class Solarland.SolarBulletDecal
// Size: 0x238 (Inherited: 0x228)
struct ASolarBulletDecal : AActor {
	struct UParticleSystemComponent* DecalParticle; // 0x228(0x08)
	char pad_230[0x8]; // 0x230(0x08)
};

// Class Solarland.SolarBurstRocketBullet
// Size: 0x378 (Inherited: 0x228)
struct ASolarBurstRocketBullet : AActor {
	int32_t BurstSum; // 0x228(0x04)
	float BurstInterval; // 0x22c(0x04)
	float DamageRadius; // 0x230(0x04)
	float DamagePerBullet; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x238(0x10)
	float SpawnerAnimTime; // 0x248(0x04)
	struct FName SpawnerMeshMaterialParamName; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	struct UAmmoConfig* Ammo; // 0x258(0x08)
	struct FVector RocketSpawnerMeshOffset; // 0x260(0x0c)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TArray<struct FName> MuzzleSocketNames; // 0x270(0x10)
	float SpawnerMoveInterpSpeed; // 0x280(0x04)
	float SpawnerMoveInterpMinSpeed; // 0x284(0x04)
	struct USkeletalMesh* SpawnerTemplateMesh; // 0x288(0x08)
	bool bUseForwardAxisY; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct USkeletalMeshComponent* SpawnerMesh; // 0x298(0x08)
	struct UAnimationAsset* SpawnerIdleAnim; // 0x2a0(0x08)
	struct UAnimationAsset* SpawnerFireAnim; // 0x2a8(0x08)
	struct FString SpawnerStartSoundName1P; // 0x2b0(0x10)
	struct FString SpawnerStartSoundName3P; // 0x2c0(0x10)
	struct FString SpawnerEndSoundName1P; // 0x2d0(0x10)
	struct FString SpawnerEndSoundName3P; // 0x2e0(0x10)
	struct FString FireSoundName1P; // 0x2f0(0x10)
	struct FString FireSoundName3P; // 0x300(0x10)
	struct FString FireImpactSoundName; // 0x310(0x10)
	bool bTeammateDamage; // 0x320(0x01)
	bool bDrawDebugAimLine; // 0x321(0x01)
	bool bDrawDebugExplodeSphere; // 0x322(0x01)
	bool bDrawDebugHitActor; // 0x323(0x01)
	char pad_324[0x4]; // 0x324(0x04)
	struct ASolarCharacter* OwnerCharacter; // 0x328(0x08)
	struct USolarWeaponGA_Rocket* OwnerRocketGA; // 0x330(0x08)
	struct UAkComponent* HitAkObj; // 0x338(0x08)
	struct FRotator PlayerRotation; // 0x340(0x0c)
	char pad_34C[0x14]; // 0x34c(0x14)
	struct TArray<struct ASolarProjBullet*> FiredBullets; // 0x360(0x10)
	char pad_370[0x8]; // 0x370(0x08)

	void ServerUpdateCharacterRotation(struct FRotator InRotation); // Function Solarland.SolarBurstRocketBullet.ServerUpdateCharacterRotation // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x1d05720
	void OnSingleRocketFire(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnSingleRocketFire // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnServerSpawnFireRocket(struct FSpawnProjParam& InParam); // Function Solarland.SolarBurstRocketBullet.OnServerSpawnFireRocket // (Final|Native|Protected|HasOutParms) // @ game+0x1d05640
	void OnBurstRocketDeactive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketDeactive // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBurstRocketActive(struct ASolarCharacter* InOwnerCharacter, bool bIsLocalPlayer); // Function Solarland.SolarBurstRocketBullet.OnBurstRocketActive // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBulletStopMove(struct FHitResult& HitResult, bool bBlocking); // Function Solarland.SolarBurstRocketBullet.OnBulletStopMove // (Final|Native|Protected|HasOutParms) // @ game+0x1d05510
	void ExplodeAndDamageDirectly(struct FHitResult& HitResult); // Function Solarland.SolarBurstRocketBullet.ExplodeAndDamageDirectly // (Final|Native|Protected|HasOutParms) // @ game+0x1d05310
};

// Class Solarland.SolarBusinessCardCharacter
// Size: 0x228 (Inherited: 0x228)
struct ASolarBusinessCardCharacter : AActor {

	void SetSkin(struct USkeletalMesh* LoadedSkinRes, struct UMaterialInterface* LoadedCharaSkinRes); // Function Solarland.SolarBusinessCardCharacter.SetSkin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarButton
// Size: 0x4d8 (Inherited: 0x150)
struct USolarButton : UContentWidget {
	struct USlateWidgetStyleAsset* Style; // 0x150(0x08)
	struct FButtonStyle WidgetStyle; // 0x158(0x2b8)
	enum class ESolarImageFillType ImageFillType; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	float ImageFillRatioHorizontal; // 0x414(0x04)
	float ImageFillRatioVertical; // 0x418(0x04)
	float ImageFillPixelLeft; // 0x41c(0x04)
	float ImageFillPixelTop; // 0x420(0x04)
	float ImageFillPixelRight; // 0x424(0x04)
	float ImageFillPixelBottom; // 0x428(0x04)
	struct FLinearColor ColorAndOpacity; // 0x42c(0x10)
	struct FLinearColor BackgroundColor; // 0x43c(0x10)
	bool bReleaseUnfocus; // 0x44c(0x01)
	bool bEnableClickSound; // 0x44d(0x01)
	char pad_44E[0x2]; // 0x44e(0x02)
	struct FString ClickSoundEventName; // 0x450(0x10)
	enum class EButtonClickMethod ClickMethod; // 0x460(0x01)
	enum class EButtonTouchMethod TouchMethod; // 0x461(0x01)
	enum class EButtonPressMethod PressMethod; // 0x462(0x01)
	bool IsFocusable; // 0x463(0x01)
	char pad_464[0x4]; // 0x464(0x04)
	struct FMulticastInlineDelegate OnClicked; // 0x468(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x478(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x488(0x10)
	struct FMulticastInlineDelegate OnHovered; // 0x498(0x10)
	struct FMulticastInlineDelegate OnUnhovered; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnFocusLosted; // 0x4b8(0x10)
	char pad_4C8[0x10]; // 0x4c8(0x10)

	void SetTouchMethod(enum class EButtonTouchMethod InTouchMethod); // Function Solarland.SolarButton.SetTouchMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05c10
	void SetStyle(struct FButtonStyle& InStyle); // Function Solarland.SolarButton.SetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d05b30
	void SetPressMethod(enum class EButtonPressMethod InPressMethod); // Function Solarland.SolarButton.SetPressMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05ab0
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarButton.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x1d059a0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarButton.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d058a0
	void SetClickMethod(enum class EButtonClickMethod InClickMethod); // Function Solarland.SolarButton.SetClickMethod // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05820
	void SetBackgroundColor(struct FLinearColor InBackgroundColor); // Function Solarland.SolarButton.SetBackgroundColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d057a0
	bool IsPressed(); // Function Solarland.SolarButton.IsPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d054e0
};

// Class Solarland.SolarButtonSlot
// Size: 0x60 (Inherited: 0x38)
struct USolarButtonSlot : UPanelSlot {
	struct FMargin Padding; // 0x38(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x48(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x49(0x01)
	char pad_4A[0x16]; // 0x4a(0x16)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function Solarland.SolarButtonSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05c90
	void SetPadding(struct FMargin InPadding); // Function Solarland.SolarButtonSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05a20
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function Solarland.SolarButtonSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d05920
};

// Class Solarland.SolarCameraActor
// Size: 0x280 (Inherited: 0x228)
struct ASolarCameraActor : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct ASolarPlayerController* MasterPlayerController; // 0x230(0x08)
	char pad_238[0x48]; // 0x238(0x48)

	void SetViewTarget(struct AActor* InTarget); // Function Solarland.SolarCameraActor.SetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21b80
	struct AActor* GetViewTarget(); // Function Solarland.SolarCameraActor.GetViewTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d195f0
	struct USolarNoSpringCameraComponent* GetCameraComponent(); // Function Solarland.SolarCameraActor.GetCameraComponent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarCameraComponent
// Size: 0x9c0 (Inherited: 0x930)
struct USolarCameraComponent : UCameraComponent {
	char pad_930[0x50]; // 0x930(0x50)
	float ConfigDistanceToTarget; // 0x980(0x04)
	struct FVector ConfigCameraOffset; // 0x984(0x0c)
	struct FVector ConfigTargetOffset; // 0x990(0x0c)
	float ConfigFOV; // 0x99c(0x04)
	float ViewPitchMax; // 0x9a0(0x04)
	float ViewPitchMin; // 0x9a4(0x04)
	float ViewYawMax; // 0x9a8(0x04)
	float ViewYawMin; // 0x9ac(0x04)
	float CameraOccupiedRoom; // 0x9b0(0x04)
	bool EnableDistanceSmooth; // 0x9b4(0x01)
	bool EnableFOVSmooth; // 0x9b5(0x01)
	char pad_9B6[0xa]; // 0x9b6(0x0a)

	struct USolarCameraComponent* GetCameraComponentFromActor(struct AActor* InActor); // Function Solarland.SolarCameraComponent.GetCameraComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d17800
};

// Class Solarland.SolarCameraCompsInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCameraCompsInterface : UInterface {

	struct USolarSpringArmComponent* GetSolarSpringArmComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarSpringArmComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1c2f2f0
	struct USolarCameraComponent* GetSolarCameraComponent(); // Function Solarland.SolarCameraCompsInterface.GetSolarCameraComponent // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1d18e60
};

// Class Solarland.SolarCapsuleActor
// Size: 0x350 (Inherited: 0x228)
struct ASolarCapsuleActor : AActor {
	struct FSoftObjectPath StartCruisingPath; // 0x228(0x18)
	struct FSoftObjectPath StopCruisingPath; // 0x240(0x18)
	struct FName CruiseCharacterBindingName; // 0x258(0x08)
	struct FName CruiseCapsuleBindingName; // 0x260(0x08)
	struct FName CruiseCameraBindingName; // 0x268(0x08)
	float SequenceCameraBlendDuration; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct UAnimationAsset* CapsuleCruisingLoopAnim; // 0x278(0x08)
	struct UAnimSequence* CharacterCruiseLoopAnim; // 0x280(0x08)
	struct FSoftObjectPath CapsuleCruisingStopAnimPath; // 0x288(0x18)
	struct UAnimSequence* CharacterCruiseEndAnim; // 0x2a0(0x08)
	struct USkeletalMeshComponent* CapsuleSkeletalMesh; // 0x2a8(0x08)
	struct TArray<struct UStaticMeshComponent*> AirflowMeshEffects; // 0x2b0(0x10)
	struct TArray<struct UParticleSystemComponent*> AirflowParticleEffects; // 0x2c0(0x10)
	struct ALevelSequenceActor* SequenceActor; // 0x2d0(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x2d8(0x08)
	struct ULevelSequence* StartCruisingSequence; // 0x2e0(0x08)
	struct ULevelSequence* StopCruisingSequence; // 0x2e8(0x08)
	struct UAnimationAsset* CapsuleCruisingEndAnim; // 0x2f0(0x08)
	struct ASolarCharacter* BoardedCharacterPrivate; // 0x2f8(0x08)
	struct UParticleSystemComponent* CloudParticleComponent; // 0x300(0x08)
	struct FSoftObjectPath CloudParticlePath; // 0x308(0x18)
	char pad_320[0x20]; // 0x320(0x20)
	struct UParticleSystem* CloudParticleAsset; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)

	void StopCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StopCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x1d22d70
	void StartCruiseSequenceFinished(); // Function Solarland.SolarCapsuleActor.StartCruiseSequenceFinished // (Final|Native|Protected) // @ game+0x1d22900
	void PlayStopCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d190
	void PlayStopCruiseAnimation(); // Function Solarland.SolarCapsuleActor.PlayStopCruiseAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d170
	void PlayStartCruiseSequence(); // Function Solarland.SolarCapsuleActor.PlayStartCruiseSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1d150
	void PlayCruiseLoopAnimation(); // Function Solarland.SolarCapsuleActor.PlayCruiseLoopAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1cfe0
	void HideCapsuleAirflowVFX(); // Function Solarland.SolarCapsuleActor.HideCapsuleAirflowVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x1d19a80
	struct ASolarCapsuleActor* CreateCapsuleActorForBoarder(struct ASolarCharacter* InBoarder, struct ASolarCapsuleActor* CapsuleActorClass); // Function Solarland.SolarCapsuleActor.CreateCapsuleActorForBoarder // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d162b0
};

// Class Solarland.SolarCapsuleRoot
// Size: 0x400 (Inherited: 0x228)
struct ASolarCapsuleRoot : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct USceneComponent* RootComp; // 0x230(0x08)
	struct UWidgetComponent* LocationSign; // 0x238(0x08)
	char pad_240[0x10]; // 0x240(0x10)
	float CatchupDuration; // 0x250(0x04)
	float CatchupBaseLerp; // 0x254(0x04)
	char pad_258[0x24]; // 0x258(0x24)
	struct FMiniMapAirlineData MiniMapData; // 0x27c(0x30)
	struct FUsingAirlineData CurrentAirline; // 0x2ac(0x44)
	float CruiseStartTime; // 0x2f0(0x04)
	struct FVector CruiseStartLoc; // 0x2f4(0x0c)
	struct FRotator CruiseStartRot; // 0x300(0x0c)
	int32_t ForceParachuteWarningTime; // 0x30c(0x04)
	float MaxAllowedSmoothDistance; // 0x310(0x04)
	float ClientSpeedScale; // 0x314(0x04)
	float ClientRotationSmoothSpeed; // 0x318(0x04)
	char pad_31C[0x1c]; // 0x31c(0x1c)
	struct UCapsuleFormationData* CapsuleFormationData; // 0x338(0x08)
	struct TMap<struct FVector, struct FTeamFormationUnit> CruiseFormation; // 0x340(0x50)
	struct TArray<struct FBoarderInfo> BoardingPlayerList; // 0x390(0x10)
	char pad_3A0[0x60]; // 0x3a0(0x60)

	void ServerUnBoardCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarCapsuleRoot.ServerUnBoardCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d21250
	void OnRep_MiniMapAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_MiniMapAirline // (Final|Native|Protected) // @ game+0x1d1c360
	void OnRep_CurrentAirline(); // Function Solarland.SolarCapsuleRoot.OnRep_CurrentAirline // (Final|Native|Protected) // @ game+0x1d1c080
	struct FMiniMapAirlineData K2_GetAirlineData(); // Function Solarland.SolarCapsuleRoot.K2_GetAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d1ab10
	struct ASolarCapsuleRoot* GetSolarCapsuleRoot(struct UObject* WorldContextObject); // Function Solarland.SolarCapsuleRoot.GetSolarCapsuleRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d18e90
	float GetCruiseProgress(); // Function Solarland.SolarCapsuleRoot.GetCruiseProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1d17ba0
	int32_t BoardingCharacter(struct FBoarderInfo& BoarderInfo); // Function Solarland.SolarCapsuleRoot.BoardingCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d144c0
};

// Class Solarland.SolarInteractableActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarInteractableActor : AActor {
	enum class EInteractableType InteractType; // 0x228(0x01)
	char pad_229[0xb]; // 0x229(0x0b)
	char bUseSceneActorOptimization; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)

	void SetUserActor(struct AActor* InUser); // Function Solarland.SolarInteractableActor.SetUserActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1da4c10
	void InteractWithActor(struct AActor* InActor); // Function Solarland.SolarInteractableActor.InteractWithActor // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct AActor* GetUserActor(); // Function Solarland.SolarInteractableActor.GetUserActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1da3b90
};

// Class Solarland.SolarCarPad
// Size: 0x248 (Inherited: 0x238)
struct ASolarCarPad : ASolarInteractableActor {
	float Duration; // 0x238(0x04)
	float SpeedMultiplier; // 0x23c(0x04)
	float DistanceThresholdForValidation; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
};

// Class Solarland.SolarCharacterAbility
// Size: 0x350 (Inherited: 0x310)
struct ASolarCharacterAbility : ASolarAbility {
	struct TArray<enum class ESolarCharacterAbilityConditionType> Conditions; // 0x310(0x10)
	enum class ESolarCharacterAbilityTriggerType TriggerType; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	float CoolDown; // 0x324(0x04)
	int32_t CharacterId; // 0x328(0x04)
	int32_t Level; // 0x32c(0x04)
	int32_t LevelOutside; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
	struct TArray<struct USolarCharacterAbilityCondition*> ConditionInsts; // 0x338(0x10)
	char pad_348[0x8]; // 0x348(0x08)

	void UpdateParamsFromConfig(); // Function Solarland.SolarCharacterAbility.UpdateParamsFromConfig // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateParam(struct FString ParamKey, float ParamValue); // Function Solarland.SolarCharacterAbility.UpdateParam // (Final|Native|Public) // @ game+0x1d26c10
	void PrepareConfigData(); // Function Solarland.SolarCharacterAbility.PrepareConfigData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GiveCharacterAbility(struct ASolarCharacterAbility* AbilityClass, struct ASolarCharacter* SolarCharacter); // Function Solarland.SolarCharacterAbility.GiveCharacterAbility // (Final|Native|Static|Public) // @ game+0x1d26390
};

// Class Solarland.SolarCharacterAbilityCondition
// Size: 0x30 (Inherited: 0x28)
struct USolarCharacterAbilityCondition : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarCharacterAbilityCondition_ShieldEquiped
// Size: 0x30 (Inherited: 0x30)
struct USolarCharacterAbilityCondition_ShieldEquiped : USolarCharacterAbilityCondition {
};

// Class Solarland.SolarCharacterAIController
// Size: 0x378 (Inherited: 0x370)
struct ASolarCharacterAIController : ASolarAIControllerBase {
	char pad_370[0x8]; // 0x370(0x08)

	struct ASolarCharacter* GetSolarCharacter(); // Function Solarland.SolarCharacterAIController.GetSolarCharacter // (Native|Public|Const) // @ game+0x1cf9120
};

// Class Solarland.SolarCharacterCameraComponent
// Size: 0xdf0 (Inherited: 0x9c0)
struct USolarCharacterCameraComponent : USolarCameraComponent {
	struct ASolarCharacter* Character; // 0x9b8(0x08)
	float ThirdPersonVerticalOffset; // 0x9c4(0x04)
	float ThirdPersonVerticalOffsetWhenCrouched; // 0x9c8(0x04)
	float ThirdPersonVerticalOffsetWhenCrouchMoving; // 0x9cc(0x04)
	float ThirdPersonHorizontalOffset; // 0x9d0(0x04)
	struct UCurveFloat* FollowForwardOffsetCurve; // 0x9d8(0x08)
	float FollowForwardOffsetMultiplier; // 0x9e0(0x04)
	float CrouchCameraLagTime; // 0x9e4(0x04)
	float UnCrouchCameraLagTime; // 0x9e8(0x04)
	float ShoulderShotVerticalOffset; // 0x9ec(0x04)
	float ShoulderShotVerticalOffsetWhenCrouched; // 0x9f0(0x04)
	float ShoulderShotHorizontalOffset; // 0x9f4(0x04)
	float ShoulderShotDistanceToTarget; // 0x9f8(0x04)
	char pad_9FC[0x4]; // 0x9fc(0x04)
	struct UCurveFloat* ShoulderShotFollowDistanceCurve; // 0xa00(0x08)
	float ShoulderShotCameraFOV; // 0xa08(0x04)
	float ShoulderShotCameraZoomInOutTime; // 0xa0c(0x04)
	float ScopeShotVerticalOffsetWithStanding; // 0xa10(0x04)
	float ScopeShotVerticalOffsetWhenCrouch; // 0xa14(0x04)
	float DistanceToScopePivot; // 0xa18(0x04)
	float ArmDistanceToCamera; // 0xa1c(0x04)
	float ScopeHorizontalOffset; // 0xa20(0x04)
	float ThirdPeekVerticalOffset; // 0xa24(0x04)
	float ThirdPeekHorizontalOffset; // 0xa28(0x04)
	float FirstPeekAngle; // 0xa2c(0x04)
	float SwimDistanceToTarget; // 0xa30(0x04)
	float SwimDistSwitchSpeed; // 0xa34(0x04)
	struct FVector CuriseCameraOffset; // 0xa38(0x0c)
	struct FVector CuriseTargetOffset; // 0xa44(0x0c)
	float CuriseDistanceToTarget; // 0xa50(0x04)
	struct FVector SkydiveCameraOffset; // 0xa54(0x0c)
	struct FVector SkydiveTargetOffset; // 0xa60(0x0c)
	float SkydiveDistanceToTarget; // 0xa6c(0x04)
	float SkydiveDistanceToTargetOnBoosting; // 0xa70(0x04)
	float SkydiveViewPitchMax; // 0xa74(0x04)
	float SkydiveViewPitchMin; // 0xa78(0x04)
	struct FCameraSettings JetFlySettingsVertical; // 0xa7c(0x20)
	struct FCameraSettings JetFlySettingsFront; // 0xa9c(0x20)
	struct FCameraSettings JetFlySettingsBack; // 0xabc(0x20)
	struct FCameraSettings JetFlySettingsLeft; // 0xadc(0x20)
	struct FCameraSettings JetFlySettingsRight; // 0xafc(0x20)
	char pad_B1C[0x4]; // 0xb1c(0x04)
	struct FRuntimeFloatCurve JetFlyFadeInCurve; // 0xb20(0x88)
	struct FRuntimeFloatCurve JetFlyFadeOutCurve; // 0xba8(0x88)
	struct UCameraShake* CameraShakeSkydiveFlying; // 0xc30(0x08)
	float CameraShakeSkydiveFlyingSpeedMin; // 0xc38(0x04)
	float CameraShakeSkydiveFlyingSpeedMax; // 0xc3c(0x04)
	struct UCameraShake* CameraShakeJetPackLaunch; // 0xc40(0x08)
	struct UCameraShake* CameraShakeLand; // 0xc48(0x08)
	struct UCameraShake* CameraShakeVehicleEjectLaunch; // 0xc50(0x08)
	float CameraShakeLandDistanceMin; // 0xc58(0x04)
	float CameraShakeLandDistanceMax; // 0xc5c(0x04)
	float TakeOffCamPitchMin; // 0xc60(0x04)
	float TakeOffCamPitchMax; // 0xc64(0x04)
	float LandingSpeedThreshold; // 0xc68(0x04)
	char pad_C6C[0x4]; // 0xc6c(0x04)
	struct FCamEffectSettings ParkourCamSettings; // 0xc70(0x38)
	char pad_CA8[0x98]; // 0xca8(0x98)
	struct TMap<enum class ECamShakeType, struct UCameraShake*> CamShakeConfig; // 0xd40(0x50)
	char pad_D90[0x60]; // 0xd90(0x60)
};

// Class Solarland.SolarCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarCharacterController : UInterface {

	void OnEnterLanding(); // Function Solarland.SolarCharacterController.OnEnterLanding // (Native|Public) // @ game+0x1d2afb0
	struct FString GetPlayerID(); // Function Solarland.SolarCharacterController.GetPlayerID // (Native|Public|Const) // @ game+0x1d2acc0
};

// Class Solarland.SolarControllerCommon
// Size: 0x28 (Inherited: 0x28)
struct USolarControllerCommon : UInterface {
};

// Class Solarland.SolarDefaultCharacterController
// Size: 0x28 (Inherited: 0x28)
struct USolarDefaultCharacterController : USolarCharacterController {
};

// Class Solarland.SolarCharacterGASComponent
// Size: 0x1408 (Inherited: 0x13a0)
struct USolarCharacterGASComponent : USolarAbilitySystemComponent {
	char pad_13A0[0x68]; // 0x13a0(0x68)

	void NotifyTalentState(enum class EPlayerStateRepType InRepType, struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.NotifyTalentState // (Final|Native|Protected) // @ game+0x1d2aef0
	void GrantTalentWithPlayerState(struct APlayerState* InPlayerState); // Function Solarland.SolarCharacterGASComponent.GrantTalentWithPlayerState // (Final|Native|Protected) // @ game+0x1d2ad80
};

// Class Solarland.SolarCharacterSettings
// Size: 0x150 (Inherited: 0x38)
struct USolarCharacterSettings : UDeveloperSettings {
	struct TSoftObjectPtr<UCharacterGlobalConfig> CharacterGlobalConfig; // 0x38(0x28)
	struct TSoftObjectPtr<UCharacterGameplayTagsConfig> CharacterGameplayTagsConfig; // 0x60(0x28)
	struct TSoftObjectPtr<UMaterialChangePriorityTags> MaterialChangePriorityTags; // 0x88(0x28)
	struct TSoftObjectPtr<UVisibilityFlagTags> VisibilityFlagTags; // 0xb0(0x28)
	struct TSoftObjectPtr<UCharacterMontageTags> CharacterMontageTags; // 0xd8(0x28)
	struct TSoftObjectPtr<UDataTable> CharacterMontageMappingTable; // 0x100(0x28)
	struct TSoftObjectPtr<UCharacterBodyScaleConfigDataAsset> CharacterBodyScaleConfig; // 0x128(0x28)
};

// Class Solarland.SolarCharacterSettingsRuntime
// Size: 0xb8 (Inherited: 0x30)
struct USolarCharacterSettingsRuntime : UWorldSubsystem {
	struct UCharacterGlobalConfig* CharacterGlobalConfigInstance; // 0x30(0x08)
	struct UCharacterGameplayTagsConfig* CharacterGameplayTagsConfigInstance; // 0x38(0x08)
	struct UMaterialChangePriorityTags* MaterialChangePriorityTagsInstance; // 0x40(0x08)
	struct UVisibilityFlagTags* VisibilityFlagTagsInstance; // 0x48(0x08)
	struct UCharacterMontageTags* CharacterMontageTagsInstance; // 0x50(0x08)
	struct UDataTable* CharacterMontageMappingDataTable; // 0x58(0x08)
	char pad_60[0x50]; // 0x60(0x50)
	struct UCharacterBodyScaleConfigDataAsset* CharacterBodyScaleConfigInstance; // 0xb0(0x08)
};

// Class Solarland.SolarSpringArmComponent
// Size: 0x400 (Inherited: 0x3a0)
struct USolarSpringArmComponent : USpringArmComponent {
	char pad_3A0[0x10]; // 0x3a0(0x10)
	float CameraLocationLagTime; // 0x3b0(0x04)
	bool HandleTargetOffsetAsRelativeValue; // 0x3b4(0x01)
	char pad_3B5[0x4b]; // 0x3b5(0x4b)

	struct USolarSpringArmComponent* GetSpringArmComponentFromActor(struct AActor* InActor); // Function Solarland.SolarSpringArmComponent.GetSpringArmComponentFromActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e1dc20
};

// Class Solarland.SolarCharacterSpringArmComponent
// Size: 0x430 (Inherited: 0x400)
struct USolarCharacterSpringArmComponent : USolarSpringArmComponent {
	struct USolarCharacterCameraComponent* Camera; // 0x3f8(0x08)
	struct ASolarCharacter* OwnerCharacter; // 0x400(0x08)
	char pad_410[0x20]; // 0x410(0x20)

	void UnregisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.UnregisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x1d2fe40
	void RegisterOverlappingObstacle(struct AActor* InObstacle); // Function Solarland.SolarCharacterSpringArmComponent.RegisterOverlappingObstacle // (Final|Native|Public|BlueprintCallable) // @ game+0x1d2fc80
};

// Class Solarland.SolarCharacterUpgradeComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USolarCharacterUpgradeComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* Owner; // 0xb8(0x08)
	int32_t Experience; // 0xc0(0x04)
	int32_t Level; // 0xc4(0x04)
	int32_t CharacterId; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	void ServerExecuteGMLua(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGMLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ServerExecuteGM(struct FString GMType, struct FString Param1, struct FString Param2); // Function Solarland.SolarCharacterUpgradeComponent.ServerExecuteGM // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d2fd00
	void PrepareConfigData(); // Function Solarland.SolarCharacterUpgradeComponent.PrepareConfigData // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyLevelUp(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.NotifyLevelUp // (Final|Native|Public) // @ game+0x1d2fbc0
	void ClientOnLevelUpRpc(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpRpc // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d2fb00
	void ClientOnLevelUpLua(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnLevelUpLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ClientOnAddNewExpLua(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExpLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ClientOnAddNewExp_LuaCall(int32_t OldLevel, int32_t NewLevel); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp_LuaCall // (Final|Native|Public) // @ game+0x1d2fa40
	void ClientOnAddNewExp(int32_t BehaviorType, int32_t AddExp); // Function Solarland.SolarCharacterUpgradeComponent.ClientOnAddNewExp // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d2f980
	void CalculateCharacterExp(int32_t EventType, float InValue); // Function Solarland.SolarCharacterUpgradeComponent.CalculateCharacterExp // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarPile
// Size: 0x550 (Inherited: 0x298)
struct ASolarPile : ASolarMapElementBase {
	char pad_298[0x18]; // 0x298(0x18)
	struct UStaticMeshComponent* NormalMesh; // 0x2b0(0x08)
	struct USphereComponent* CollisionComp; // 0x2b8(0x08)
	struct TArray<struct UActorComponent*> ExtraChargingVFXComps; // 0x2c0(0x10)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2d0(0x04)
	char pad_2D4[0x18]; // 0x2d4(0x18)
	enum class EChargingChannel Channel; // 0x2ec(0x01)
	enum class ESolarPileType PileType; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	int32_t Zone; // 0x2f0(0x04)
	float MaxEnergy; // 0x2f4(0x04)
	float PowerRecoveryCD; // 0x2f8(0x04)
	float PowerRecoveryFrequency; // 0x2fc(0x04)
	float PowerRecoveryQuantity; // 0x300(0x04)
	bool bEnable; // 0x304(0x01)
	bool bBroken; // 0x305(0x01)
	bool bCanRecover; // 0x306(0x01)
	bool bIsActivated; // 0x307(0x01)
	int32_t Level; // 0x308(0x04)
	bool bIsLosingEnergy; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	int32_t OwnerTeam; // 0x310(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> OwnerCharacter; // 0x314(0x08)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct FChargingInfo defaultChargingInfo; // 0x320(0x30)
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x350(0x10)
	float CurrentEnergy; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)
	float SphereRadius; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct FTimerHandle RecoveryHandle; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
	struct FTimerHandle ServerChargingTimerHandle; // 0x380(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x388(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x390(0x10)
	struct UAkComponent* AkAudioComponent; // 0x3a0(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x3a8(0x08)
	char pad_3B0[0x2]; // 0x3b0(0x02)
	bool bEnableHealth; // 0x3b2(0x01)
	char pad_3B3[0x1]; // 0x3b3(0x01)
	float MaxHealth; // 0x3b4(0x04)
	float ReducedHealth; // 0x3b8(0x04)
	float CurrentHealth; // 0x3bc(0x04)
	float TweenTimeSpeed; // 0x3c0(0x04)
	float RestTweenTime; // 0x3c4(0x04)
	float TargetOpacity; // 0x3c8(0x04)
	float CurrentOpacity; // 0x3cc(0x04)
	float OpacityTweenTime; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct UMaterialInstanceDynamic* DynamicMatChargingCircle; // 0x3d8(0x08)
	struct FChargingPilePreset ChargingPilePreset; // 0x3e0(0x150)
	struct UStaticMeshComponent* RangeRingMeshComp; // 0x530(0x08)
	struct UStaticMeshComponent* ChargeCircleMeshComp; // 0x538(0x08)
	bool bCharging; // 0x540(0x01)
	char pad_541[0xf]; // 0x541(0x0f)

	void ToggleExtraChargingVFX(bool Toggle); // Function Solarland.SolarPile.ToggleExtraChargingVFX // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd7100
	void SetIsActivated(bool bActivated); // Function Solarland.SolarPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.RemoveChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x1dd7020
	void RemoveAllEffects(); // Function Solarland.SolarPile.RemoveAllEffects // (Final|Native|Protected|BlueprintCallable) // @ game+0x1dd7000
	void ReceivePileExpired(); // Function Solarland.SolarPile.ReceivePileExpired // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveEnergyChanged(); // Function Solarland.SolarPile.ReceiveEnergyChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveChargingPileInitialize(); // Function Solarland.SolarPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveCharacterShowEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterShowEffect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveCharacterHideEffect(struct AActor* Other); // Function Solarland.SolarPile.ReceiveCharacterHideEffect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlaySkillStartSound(); // Function Solarland.SolarPile.PlaySkillStartSound // (Native|Public|BlueprintCallable) // @ game+0x7b0ed0
	void PlaySkillEndSound(); // Function Solarland.SolarPile.PlaySkillEndSound // (Native|Public|BlueprintCallable) // @ game+0x1257b90
	void PlayRecoveryAnim(bool bStart); // Function Solarland.SolarPile.PlayRecoveryAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlayChargingAnimation(bool Reverse); // Function Solarland.SolarPile.PlayChargingAnimation // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarPile.OnUntrigger // (Final|Native|Protected) // @ game+0x1dd6ec0
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarPile.OnTrigger // (Final|Native|Protected|HasOutParms) // @ game+0x1dd6cb0
	void OnRep_IsLosingEnergyChanged(); // Function Solarland.SolarPile.OnRep_IsLosingEnergyChanged // (Final|Native|Public) // @ game+0x1dd6c90
	void OnRep_Energy(); // Function Solarland.SolarPile.OnRep_Energy // (Final|Native|Public) // @ game+0x1dd6c70
	void OnRep_Enable(); // Function Solarland.SolarPile.OnRep_Enable // (Final|Native|Public) // @ game+0x1dd6c50
	void OnRep_CurrentHealth(); // Function Solarland.SolarPile.OnRep_CurrentHealth // (Final|Native|Public) // @ game+0x1dd6c30
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SolarPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x1dd6c10
	void OnRep_CanRecover(); // Function Solarland.SolarPile.OnRep_CanRecover // (Final|Native|Public) // @ game+0x1dd6bf0
	void OnRep_Broken(); // Function Solarland.SolarPile.OnRep_Broken // (Final|Native|Public) // @ game+0x1dd6bd0
	void OnRefreshRangeRing(); // Function Solarland.SolarPile.OnRefreshRangeRing // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd6bb0
	void OnRefreshChargeCircle(bool InCharging); // Function Solarland.SolarPile.OnRefreshChargeCircle // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd6b20
	void OnCharacterBatteryIdChanged(struct ASolarCharacter* InCharacter, float Frequency, float Quantity); // Function Solarland.SolarPile.OnCharacterBatteryIdChanged // (Final|Native|Public) // @ game+0x1dd6a20
	bool IsCharacterInRange(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.IsCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd6930
	bool IsAnyCharacterInRange(); // Function Solarland.SolarPile.IsAnyCharacterInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd6900
	struct FChargingInfo GetChargingInfoByCharacter(struct ASolarCharacter* Character); // Function Solarland.SolarPile.GetChargingInfoByCharacter // (Final|Native|Public) // @ game+0x1dd5f20
	void GameStatisticsChargingPile(struct FChargingInfo& ChargingInfo, int32_t pileLevel, struct FVector Location, float energyUse); // Function Solarland.SolarPile.GameStatisticsChargingPile // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1dd5c80
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SolarPile.CreateChargeParticle // (Final|Native|Protected|BlueprintCallable) // @ game+0x1dd5be0
	void ChangeColor(); // Function Solarland.SolarPile.ChangeColor // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool CanWork(); // Function Solarland.SolarPile.CanWork // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dd5b80
};

// Class Solarland.SolarChargingPile
// Size: 0x550 (Inherited: 0x550)
struct ASolarChargingPile : ASolarPile {
};

// Class Solarland.PSOGatherVolume
// Size: 0x230 (Inherited: 0x228)
struct APSOGatherVolume : AActor {
	struct UBoxComponent* BoxComponent; // 0x228(0x08)
};

// Class Solarland.SolarCheatManager
// Size: 0x470 (Inherited: 0x78)
struct USolarCheatManager : UCheatManager {
	char pad_78[0x358]; // 0x78(0x358)
	struct FSoftObjectPath PSOGatherCubeBPAssetPath; // 0x3d0(0x18)
	float PSOGatherCubeDistanceToCamera; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct FString PSOGatherBPHuntAssetPath; // 0x3f0(0x10)
	struct FString PSOGatherBPTutorialAssetPath; // 0x400(0x10)
	char pad_410[0x48]; // 0x410(0x48)
	struct FSoftObjectPath AirShipBPAssetPath; // 0x458(0x18)

	void StopEffectScreen(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectScreen // (Final|Exec|Native|Public) // @ game+0x1d35130
	void StopEffectActor(int32_t InHandle); // Function Solarland.SolarCheatManager.StopEffectActor // (Final|Exec|Native|Public) // @ game+0x1d350b0
	void StartPSOGatheringiOSTutorial(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSTutorial // (Final|Exec|Native|Public) // @ game+0x8ba190
	void StartPSOGatheringiOSHunt(); // Function Solarland.SolarCheatManager.StartPSOGatheringiOSHunt // (Final|Exec|Native|Public) // @ game+0x8ba190
	void StartPSOGathering(); // Function Solarland.SolarCheatManager.StartPSOGathering // (Final|Exec|Native|Public) // @ game+0x1d35090
	void StartEffectScreen(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectScreen // (Final|Exec|Native|Public) // @ game+0x1d34ff0
	void StartEffectActor(struct FString RowName); // Function Solarland.SolarCheatManager.StartEffectActor // (Final|Exec|Native|Public) // @ game+0x1d34f50
	void SpawnVehicleWithVehicleID(int32_t VehicleID); // Function Solarland.SolarCheatManager.SpawnVehicleWithVehicleID // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34ed0
	void SpawnVehicle(int32_t SpawnID); // Function Solarland.SolarCheatManager.SpawnVehicle // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34e50
	void SpawnTreasureBox(int32_t TreasureBoxID); // Function Solarland.SolarCheatManager.SpawnTreasureBox // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34dd0
	void SpawnSolarRadar(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnSolarRadar // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34d30
	void SpawnPSOGatherCube(); // Function Solarland.SolarCheatManager.SpawnPSOGatherCube // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34d10
	void SpawnOutcomeContent(int32_t OutcomeID); // Function Solarland.SolarCheatManager.SpawnOutcomeContent // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34c90
	void SpawnChargingPile(struct FString BpPath); // Function Solarland.SolarCheatManager.SpawnChargingPile // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34bf0
	void SpawnAirdrop(int32_t AirdropID); // Function Solarland.SolarCheatManager.SpawnAirdrop // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34b70
	void SolarWeaponSpreadForWeapon(float MaxSpeed, float MinSpread, float HipFireBaseSpread, float ADSBaseSpread, float VhADSBaseSpread, float SpreadStatuSpeed); // Function Solarland.SolarCheatManager.SolarWeaponSpreadForWeapon // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34990
	void SolarWeaponReload(int32_t PrimaryAmmoCap, int32_t SecondaryAmmoCap); // Function Solarland.SolarCheatManager.SolarWeaponReload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d348d0
	void SolarWeaponOverload(bool CanOverload, float OverloadMaxValue, float NormalOverloadCoolingRate, float OverloadCoolingPeriod); // Function Solarland.SolarCheatManager.SolarWeaponOverload // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d34780
	void SolarWeaponFiringMode(bool bSingleFire, bool bBurst, bool bAuto, bool OneKeyFire, float HitHead); // Function Solarland.SolarCheatManager.SolarWeaponFiringMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d345c0
	void SolarTestReportAbnormalPlayerWeapon(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerWeapon // (Final|Exec|Native|Public) // @ game+0x1d34330
	void SolarTestReportAbnormalPlayerVehicle(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayerVehicle // (Final|Exec|Native|Public) // @ game+0x1d340f0
	void SolarTestReportAbnormalPlayer(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarCheatManager.SolarTestReportAbnormalPlayer // (Final|Exec|Native|Public) // @ game+0x1d33fb0
	void SolarTeleport(float DestLocationX, float DestLocationY, float DestLocationZ); // Function Solarland.SolarCheatManager.SolarTeleport // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d33ea0
	void SolarServerCmd(struct FString Cmd); // Function Solarland.SolarCheatManager.SolarServerCmd // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d33e00
	void SolarGMSetPlayerValueInternal(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGMSetPlayerValueInternal // (Final|Native|Public) // @ game+0x1d32f60
	void SolarGM_ValidateAirline(float InBufferX, float InBufferY, float InBufferZ); // Function Solarland.SolarCheatManager.SolarGM_ValidateAirline // (Final|Exec|Native|Public) // @ game+0x1d33cf0
	void SolarGM_UnforbidCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_UnforbidCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_TestCrash(); // Function Solarland.SolarCheatManager.SolarGM_TestCrash // (Final|Exec|Native|Public) // @ game+0x1d33cd0
	void SolarGM_TeleportToBotAI(uint32_t CtrlIndex); // Function Solarland.SolarCheatManager.SolarGM_TeleportToBotAI // (Final|Exec|Native|Public) // @ game+0x1d33c50
	void SolarGM_StopBotAIBehaviorTree(bool bStop); // Function Solarland.SolarCheatManager.SolarGM_StopBotAIBehaviorTree // (Final|Exec|Native|Public) // @ game+0x1d33bc0
	void SolarGM_SpawnBotAIAtCrosshairByNum(int32_t Num); // Function Solarland.SolarCheatManager.SolarGM_SpawnBotAIAtCrosshairByNum // (Final|Exec|Native|Public) // @ game+0x1d33b40
	void SolarGM_ShowEmojiBubble(int32_t EmojiID); // Function Solarland.SolarCheatManager.SolarGM_ShowEmojiBubble // (Final|Exec|Native|Public) // @ game+0x1d33ac0
	void SolarGM_SetPlayerValue(struct FString InType, struct FString InValue); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerValue // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d339d0
	void SolarGM_SetPlayerLevel(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_SetPlayerLevel // (Final|Exec|Native|Public) // @ game+0x1d33950
	void SolarGM_SetEMPForceFieldTestRange(float InRadius, float InHeight); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldTestRange // (Final|Exec|Native|Public) // @ game+0x1d33890
	void SolarGM_SetEMPForceFieldCoreSize(float InX, float InY, float InZ); // Function Solarland.SolarCheatManager.SolarGM_SetEMPForceFieldCoreSize // (Final|Exec|Native|Public) // @ game+0x1d33460
	void SolarGM_SetCharacterRoleAbilitySkillCDDuration(float InCD); // Function Solarland.SolarCheatManager.SolarGM_SetCharacterRoleAbilitySkillCDDuration // (Final|Exec|Native|Public) // @ game+0xae7e70
	void SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed(float MaxHorizontalSpeed, float MaxVerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetVelocityFollowMaxSpeed // (Final|Exec|Native|Public) // @ game+0x1d33890
	void SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_TargetVelocityFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x1d33720
	void SolarGM_SetAssistAimTargetConfig_LockAimingExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_LockAimingExtent // (Final|Exec|Native|Public) // @ game+0x1d33720
	void SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent(struct FString BodyType, struct FString status, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_GlobalSensitivityScaleTriggerExtent // (Final|Exec|Native|Public) // @ game+0x1d33720
	void SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowTriggerExtent // (Final|Exec|Native|Public) // @ game+0x1d33570
	void SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent(struct FString BodyType, struct FString status, struct FString CharacterTagStr, float ExtentX, float ExtentY); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimTargetConfig_BaseFollowStopExtent // (Final|Exec|Native|Public) // @ game+0x1d33570
	void SolarGM_SetAssistAimCurveScales(float TargetVelocityFollowHorizontalRatioCurveScale, float TargetVelocityFollowVerticalRatioCurveScale, float GlobalSensitivityScaleCurveScale); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimCurveScales // (Final|Exec|Native|Public) // @ game+0x1d33460
	void SolarGM_SetAssistAimBaseFollowSpeed(struct FString StatusTagStr, float HorizontalSpeed, float VerticalSpeed); // Function Solarland.SolarCheatManager.SolarGM_SetAssistAimBaseFollowSpeed // (Final|Exec|Native|Public) // @ game+0x1d33340
	void SolarGM_RestoreRecommend(); // Function Solarland.SolarCheatManager.SolarGM_RestoreRecommend // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_ResetCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ResetCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_PlayerUpgrade(int32_t InLv); // Function Solarland.SolarCheatManager.SolarGM_PlayerUpgrade // (Final|Exec|Native|Public) // @ game+0x1d332c0
	void SolarGM_KillAllAI(bool KillBot); // Function Solarland.SolarCheatManager.SolarGM_KillAllAI // (Final|Exec|Native|Public) // @ game+0x1d33230
	void SolarGM_GainExperience(int32_t InExp); // Function Solarland.SolarCheatManager.SolarGM_GainExperience // (Final|Exec|Native|Public) // @ game+0x1d331b0
	void SolarGM_EnableNewAssistAim(bool bEnabled); // Function Solarland.SolarCheatManager.SolarGM_EnableNewAssistAim // (Final|Exec|Native|Public) // @ game+0x1c89360
	void SolarGM_ClearCharacterUniqueSkillCD(); // Function Solarland.SolarCheatManager.SolarGM_ClearCharacterUniqueSkillCD // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_CallAirdropByAirShipHere(); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShipHere // (Final|Exec|Native|Public) // @ game+0x1d33190
	void SolarGM_CallAirdropByAirShip(float Loc_X, float Loc_Y); // Function Solarland.SolarCheatManager.SolarGM_CallAirdropByAirShip // (Final|Exec|Native|Public) // @ game+0x1d330d0
	void SolarGM_ApplyVehicleSkin(int32_t SkinId); // Function Solarland.SolarCheatManager.SolarGM_ApplyVehicleSkin // (Final|Exec|Native|Public) // @ game+0x1d33050
	void SolarAsyncLoad(struct FString ResPath); // Function Solarland.SolarCheatManager.SolarAsyncLoad // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32ec0
	void SolarAmmoSpreadPerBullet(int32_t AmmoIndex, float ADSSpreadCOP, float VhADSSpreadCOP, float SpreadFirePreTime, float SpreadPostFireSpeed, float SpreadRestorePreTime, float SpreadRestoreSpeed); // Function Solarland.SolarCheatManager.SolarAmmoSpreadPerBullet // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32cc0
	void SolarAmmoRangeSpeedDamage(int32_t AmmoIndex, float MaxRange, float EffRange, float Radius, float InitSpeed, float FireStreakBreakTime, float DamageMaxRange, float DamageEffRange, float PostFireOverload); // Function Solarland.SolarCheatManager.SolarAmmoRangeSpeedDamage // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32a40
	void SolarAmmoFiring(int32_t AmmoIndex, int32_t FireCostType, int32_t FireCostPerAttack, int32_t FireSpeedChangeTime, float FireSpeedChangeCOP, float FastestFireInterval, float BaseInterval, float SlowestFireInterval); // Function Solarland.SolarCheatManager.SolarAmmoFiring // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32810
	void SolarAmmoBoltAndMag(int32_t AmmoIndex, float BoltActionTime, float StartBoltDuration, bool UsePrimaryModeAmmoCap, bool UseBag); // Function Solarland.SolarCheatManager.SolarAmmoBoltAndMag // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32680
	void SolarAmmoBasicMovement(int32_t AmmoIndex, int32_t TimedExplode, int32_t BounceTimes, float Lifetime, float BaseReloadTime, int32_t TrajectoryType, float CustomValue); // Function Solarland.SolarCheatManager.SolarAmmoBasicMovement // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d32490
	void SetGameplayVibrateIntensity(struct FString Category, struct FString Intensity); // Function Solarland.SolarCheatManager.SetGameplayVibrateIntensity // (Final|Exec|Native|Public) // @ game+0x1d32320
	void ExecuteGMCommandsInCustomMode(struct FString CommandParameters, struct FString ArgsStr); // Function Solarland.SolarCheatManager.ExecuteGMCommandsInCustomMode // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1d31af0
	void BookmarkEnd(struct FString Message); // Function Solarland.SolarCheatManager.BookmarkEnd // (Final|Exec|Native|Public) // @ game+0x1d31a50
	void BookmarkBegin(struct FString Message); // Function Solarland.SolarCheatManager.BookmarkBegin // (Final|Exec|Native|Public) // @ game+0x1d319b0
};

// Class Solarland.SolarCheckBox
// Size: 0x858 (Inherited: 0x830)
struct USolarCheckBox : UCheckBox {
	char pad_830[0x10]; // 0x830(0x10)
	struct UWidget* OnGroup; // 0x840(0x08)
	struct UWidget* OffGroup; // 0x848(0x08)
	enum class ESlateVisibility CheckedGroupVisibility; // 0x850(0x01)
	enum class ESlateVisibility UncheckedGroupVisibility; // 0x851(0x01)
	char pad_852[0x6]; // 0x852(0x06)

	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckBox.OnStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d31f00
	void ManualSetIsChecked(bool InIsChecked); // Function Solarland.SolarCheckBox.ManualSetIsChecked // (Final|Native|Public|BlueprintCallable) // @ game+0x1d31df0
};

// Class Solarland.SolarCheckButton
// Size: 0x4c8 (Inherited: 0x498)
struct USolarCheckButton : UButton {
	char pad_498[0x8]; // 0x498(0x08)
	struct FMulticastInlineDelegate OnClickedEvent; // 0x4a0(0x10)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct UWidget* OnGroup; // 0x4b8(0x08)
	struct UWidget* OffGroup; // 0x4c0(0x08)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButton.SetButtonIndex // (Native|Public) // @ game+0x1d32170
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButton.OnStateChanged // (Native|Protected|BlueprintCallable) // @ game+0x1d31f90
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButton.GetOnClickedEvent // (Native|Public) // @ game+0x1d31ce0
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButton.GetButtonIndex // (Native|Public|Const) // @ game+0x1d31c60
};

// Class Solarland.SolarCheckButtonGroup
// Size: 0x190 (Inherited: 0x160)
struct USolarCheckButtonGroup : UNamedSlot {
	struct FMulticastInlineDelegate OnStateChangedEvent; // 0x160(0x10)
	bool IsChildrenAutoSetState; // 0x170(0x01)
	bool bDelayStateChanged; // 0x171(0x01)
	char pad_172[0x6]; // 0x172(0x06)
	struct UPanelWidget* GroupRoot; // 0x178(0x08)
	char pad_180[0x10]; // 0x180(0x10)

	void SetSelectIndex(int32_t Index); // Function Solarland.SolarCheckButtonGroup.SetSelectIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32410
	void SetChildrenAutoSetState(bool InEnable); // Function Solarland.SolarCheckButtonGroup.SetChildrenAutoSetState // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32290
	void RevertLastCheck(); // Function Solarland.SolarCheckButtonGroup.RevertLastCheck // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32150
	void OnStateChanged(int32_t ButtonIndex); // Function Solarland.SolarCheckButtonGroup.OnStateChanged // (Final|Native|Public) // @ game+0x1d32020
	void OnCheckButtonGroupStateChangedEvent__DelegateSignature(int32_t InLastButtonIndex); // DelegateFunction Solarland.SolarCheckButtonGroup.OnCheckButtonGroupStateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
};

// Class Solarland.SolarCheckButtonInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCheckButtonInterface : UInterface {

	void OnStateChange(int32_t InIndex); // Function Solarland.SolarCheckButtonInterface.OnStateChange // (Native|Public) // @ game+0x1d31e80
	void ManualChangeState(bool bIsChecked); // Function Solarland.SolarCheckButtonInterface.ManualChangeState // (Native|Public) // @ game+0x1d31d60
};

// Class Solarland.SolarCheckButtonWidget
// Size: 0x360 (Inherited: 0x340)
struct USolarCheckButtonWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct FMulticastInlineDelegate OnClickedEvent; // 0x348(0x10)
	char pad_358[0x8]; // 0x358(0x08)

	void SetButtonIndex(int32_t InButtonIndex); // Function Solarland.SolarCheckButtonWidget.SetButtonIndex // (Native|Public) // @ game+0x1d32200
	void PostClickedEvent(); // Function Solarland.SolarCheckButtonWidget.PostClickedEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d32130
	void OnStateChanged(bool bIsChecked); // Function Solarland.SolarCheckButtonWidget.OnStateChanged // (Native|Protected) // @ game+0x1d320a0
	void OnSelected(bool bSelected); // Function Solarland.SolarCheckButtonWidget.OnSelected // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct FMulticastInlineDelegate GetOnClickedEvent(); // Function Solarland.SolarCheckButtonWidget.GetOnClickedEvent // (Native|Public) // @ game+0x1d31d20
	int32_t GetButtonIndex(); // Function Solarland.SolarCheckButtonWidget.GetButtonIndex // (Native|Public|Const) // @ game+0x1d31ca0
};

// Class Solarland.SolarChunkAssignData
// Size: 0x90 (Inherited: 0x30)
struct USolarChunkAssignData : UDataAsset {
	struct TArray<struct FDirectoryPath> DirectoriesToNeverClean; // 0x30(0x10)
	struct TMap<struct FString, struct FChunkAssignRule> Rules; // 0x40(0x50)
};

// Class Solarland.SolarSafeArea
// Size: 0x378 (Inherited: 0x280)
struct ASolarSafeArea : ASCMMapElementBase {
	char pad_280[0x8]; // 0x280(0x08)
	struct TArray<struct AActor*> AffectedActorArr; // 0x288(0x10)
	int32_t CurrentIndex; // 0x298(0x04)
	float TargetTime; // 0x29c(0x04)
	float BeginShrinkTime; // 0x2a0(0x04)
	float DamageValue; // 0x2a4(0x04)
	struct FVector BeginLocation; // 0x2a8(0x0c)
	float BeginScale; // 0x2b4(0x04)
	enum class ESafeAreaStatus AreaStatus; // 0x2b8(0x01)
	char pad_2B9[0x10]; // 0x2b9(0x10)
	enum class EActorInSafeAreaStatus LocalPlayerCameraInSafeAreaState; // 0x2c9(0x01)
	enum class EActorInSafeAreaStatus LocalViewFocusedCharacterInSafeAreaState; // 0x2ca(0x01)
	char pad_2CB[0x55]; // 0x2cb(0x55)
	struct FString LeaveSafeAreaSoundName; // 0x320(0x10)
	struct FString EnterSafeAreaSoundName; // 0x330(0x10)
	struct FString InPoisonPerSecSoundName; // 0x340(0x10)
	float InPoisonSoundSecond; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
	struct UGameplayAbility* GAAbilityClass; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
	struct ASolarPlayerController* LocalController; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)

	void StartShrink(); // Function Solarland.SolarSafeArea.StartShrink // (Native|Protected|BlueprintCallable) // @ game+0x1258550
	void ShowPoisonPerSecond(); // Function Solarland.SolarSafeArea.ShowPoisonPerSecond // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1257850
	void ShowPoisonEffect(bool bShow); // Function Solarland.SolarSafeArea.ShowPoisonEffect // (BlueprintCosmetic|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1e0c3b0
	void ShowEffectInside(bool bInside); // Function Solarland.SolarSafeArea.ShowEffectInside // (BlueprintCosmetic|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void Resume(); // Function Solarland.SolarSafeArea.Resume // (Exec|Native|Public) // @ game+0x7e1a10
	void ReceiveShrinkEnd(); // Function Solarland.SolarSafeArea.ReceiveShrinkEnd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveActorLeaveSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorLeaveSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveActorLeavePoisonCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorLeavePoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveActorEnterSafeAreaCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorEnterSafeAreaCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveActorEnterPoisonCircle(struct AActor* Actor); // Function Solarland.SolarSafeArea.ReceiveActorEnterPoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void Pause(); // Function Solarland.SolarSafeArea.Pause // (Exec|Native|Public|BlueprintCallable) // @ game+0x7e16e0
	void LocalPlayerCameraLeavePoisonCircle(); // Function Solarland.SolarSafeArea.LocalPlayerCameraLeavePoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void LocalPlayerCameraEnterPoisonCircle(); // Function Solarland.SolarSafeArea.LocalPlayerCameraEnterPoisonCircle // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsPause(); // Function Solarland.SolarSafeArea.IsPause // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b920
	bool IsLocationInSafeArea(struct FVector& Pos); // Function Solarland.SolarSafeArea.IsLocationInSafeArea // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e0b880
	bool IsLocationInPoisonCircle(struct FVector& InLocation); // Function Solarland.SolarSafeArea.IsLocationInPoisonCircle // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1e0b7e0
	bool IsInSafeArea(struct AActor* Actor); // Function Solarland.SolarSafeArea.IsInSafeArea // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e0b740
	void GMStartShrinkArea(); // Function Solarland.SolarSafeArea.GMStartShrinkArea // (Final|Exec|Native|Public) // @ game+0x1e0aca0
	enum class ESafeAreaStatus GetSafeAreaStatus(); // Function Solarland.SolarSafeArea.GetSafeAreaStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xb56400
	struct FVector GetNextAreaLocation(); // Function Solarland.SolarSafeArea.GetNextAreaLocation // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1e0b5c0
	float GetCurrentDamage(); // Function Solarland.SolarSafeArea.GetCurrentDamage // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e0ad50
	void AddAffectedActors(struct TArray<struct AActor*> Actors); // Function Solarland.SolarSafeArea.AddAffectedActors // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0aaa0
};

// Class Solarland.SolarCircleSafeArea
// Size: 0x3d8 (Inherited: 0x378)
struct ASolarCircleSafeArea : ASolarSafeArea {
	struct TMap<float, struct UCurveFloat*> MiniMapScaleMap; // 0x378(0x50)
	struct TArray<struct FCircleSafeAreaInfo> SafeAreaConfigArr; // 0x3c8(0x10)

	void SetNextSafeArea(struct FCircleSafeAreaInfo& AreaInfo); // Function Solarland.SolarCircleSafeArea.SetNextSafeArea // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d39b40
	void Init(struct FVector& InSafeAreaCenterPos, float InPoisonCircleRadius); // Function Solarland.SolarCircleSafeArea.Init // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d38e40
	float GetNextSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetNextSafeAreaRadius // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1d38e00
	struct UCurveFloat* GetMiniMapFOVCurveByRadius(float InRadius); // Function Solarland.SolarCircleSafeArea.GetMiniMapFOVCurveByRadius // (Final|Native|Public) // @ game+0x1d38d70
	float GetCurrentSafeAreaRadius(); // Function Solarland.SolarCircleSafeArea.GetCurrentSafeAreaRadius // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d38d30
};

// Class Solarland.SolarCityName
// Size: 0x288 (Inherited: 0x228)
struct ASolarCityName : AActor {
	struct USolarStrongholdNamesConfig* NameConfigCN; // 0x228(0x08)
	struct USolarStrongholdNamesConfig* NameConfigEN; // 0x230(0x08)
	struct UTexture* NameTextureCN; // 0x238(0x08)
	struct UTexture* NameTextureEN; // 0x240(0x08)
	struct UMaterialInterface* NameMaterial; // 0x248(0x08)
	float BaseScale; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FString PointName; // 0x258(0x10)
	float HightLimit; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct UMaterialInstanceDynamic* MaterialDynamic; // 0x270(0x08)
	char pad_278[0x10]; // 0x278(0x10)

	void OnCharacterOnRep(); // Function Solarland.SolarCityName.OnCharacterOnRep // (Final|Native|Protected) // @ game+0x1d39060
};

// Class Solarland.SolarCombatRegenerationInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCombatRegenerationInterface : UInterface {
};

// Class Solarland.SolarCommonTextBlock
// Size: 0x360 (Inherited: 0x318)
struct USolarCommonTextBlock : UCommonTextBlock {
	bool bEnableLocText; // 0x318(0x01)
	char pad_319[0x3]; // 0x319(0x03)
	int32_t LocTextID; // 0x31c(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x328(0x18)
	char pad_340[0x20]; // 0x340(0x20)

	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarCommonTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0xb61060
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarCommonTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x1d398f0
};

// Class Solarland.SolarComponentKeyWidget
// Size: 0x2a0 (Inherited: 0x260)
struct USolarComponentKeyWidget : UUserWidget {
	struct FString ActionName; // 0x260(0x10)
	struct FString KeyBoardText; // 0x270(0x10)
	struct TArray<struct FString> KeyBoardTextArray; // 0x280(0x10)
	struct FMulticastInlineDelegate UpdateKeyboardMappingDelegate; // 0x290(0x10)

	void UpdateKeyboardMappingInternal(struct FString ModifyActionName); // Function Solarland.SolarComponentKeyWidget.UpdateKeyboardMappingInternal // (Final|Native|Public|BlueprintCallable) // @ game+0x1d13fc0
	void OnUpdateKeyboardMapping(struct TSet<struct FString>& ActionNames); // Function Solarland.SolarComponentKeyWidget.OnUpdateKeyboardMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d39350
};

// Class Solarland.ControllerRelevancyInterface
// Size: 0x28 (Inherited: 0x28)
struct UControllerRelevancyInterface : UInterface {
};

// Class Solarland.SolarControllerRelevancySubsystem
// Size: 0x188 (Inherited: 0x30)
struct USolarControllerRelevancySubsystem : UWorldSubsystem {
	char pad_30[0x158]; // 0x30(0x158)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarControllerRelevancySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x1d38f20
};

// Class Solarland.SolarCrosshairSubsystem
// Size: 0xf8 (Inherited: 0x30)
struct USolarCrosshairSubsystem : UWorldSubsystem {
	struct TMap<enum class ESolarCrosshairType, struct TWeakObjectPtr<struct UUserWidget>> ActivedCrosshairArray; // 0x30(0x50)
	struct TWeakObjectPtr<struct UCrossHairWidget> ActivedCrosshairWidget; // 0x80(0x08)
	struct TWeakObjectPtr<struct UFeedbackWidget> ActivedFeedbackWidget; // 0x88(0x08)
	struct TWeakObjectPtr<struct AActor> CrosshairOwner; // 0x90(0x08)
	struct TWeakObjectPtr<struct ASolarWeapon> ActivedWeapon; // 0x98(0x08)
	bool bReloading; // 0xa0(0x01)
	bool bOpenScope; // 0xa1(0x01)
	bool bOpenScopeLastState; // 0xa2(0x01)
	char pad_A3[0x1]; // 0xa3(0x01)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> ActivedPlayerWeapon; // 0xa4(0x08)
	struct TWeakObjectPtr<struct ASolarVehicleWeapon> ActivedVehicleWeapon; // 0xac(0x08)
	struct FVehicleWeaponCrossHairInfo CachedVehicleCrossHairInfo; // 0xb4(0x24)
	struct TArray<struct UVehicleWeaponScopeWidget*> CachedVehicleWeaponScopes; // 0xd8(0x10)
	struct TWeakObjectPtr<struct UVehicleWeaponScopeWidget> VehicleWeaponScopeUI; // 0xe8(0x08)
	char pad_F0[0x8]; // 0xf0(0x08)

	void VehicleWeaponForbid(bool InbEntry); // Function Solarland.SolarCrosshairSubsystem.VehicleWeaponForbid // (Final|Native|Private) // @ game+0x1d39c50
	void ClearVehicleScopeUI(); // Function Solarland.SolarCrosshairSubsystem.ClearVehicleScopeUI // (Final|Native|Public) // @ game+0x1d38d10
};

// Class Solarland.SolarCrosshairWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarCrosshairWidgetInterface : UInterface {

	void OnUpdateReload(float InReloadProgress, int32_t InReloadAmmo, int32_t InMaxAmmo); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateReload // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d39480
	void OnUpdateOverload(float InOverloadProgress, float InOverloadWarningRate, bool InbOverloadState); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateOverload // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateCoolDown(float InReloadProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCoolDown // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateCharge(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateCharge // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateAmmo(int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress, bool InbFirst); // Function Solarland.SolarCrosshairWidgetInterface.OnUpdateAmmo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d39210
	void OnReloadFinish(bool InbReloadSuccess, int32_t InReloadAmmo, int32_t InReservedAmmo, int32_t InMaxAmmo, float InAmmoProgress); // Function Solarland.SolarCrosshairWidgetInterface.OnReloadFinish // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1d39080
	void OnChangeReloadState(bool InbQuitState, bool bReloadSpeedup); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeReloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnChangeOverloadState(bool InbQuitState); // Function Solarland.SolarCrosshairWidgetInterface.OnChangeOverloadState // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnActiveCrosshair(struct UUserWidget* InActiveCrosshair); // Function Solarland.SolarCrosshairWidgetInterface.OnActiveCrosshair // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarCustomModeBoxSafeArea
// Size: 0x378 (Inherited: 0x378)
struct ASolarCustomModeBoxSafeArea : ASolarSafeArea {

	bool PointInBox(struct FVector& Pos, struct UBoxComponent* Box); // Function Solarland.SolarCustomModeBoxSafeArea.PointInBox // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d39580
};

// Class Solarland.SolarDamageTextInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarDamageTextInterface : UInterface {

	void RequestPlayDamageTextByDatas(struct TArray<struct FSolarDamageText>& InSolarDamageTextDatas); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageTextByDatas // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d39840
	void RequestPlayDamageText(struct FSolarDamageText& InSolarDamageText); // Function Solarland.SolarDamageTextInterface.RequestPlayDamageText // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1d39750
};

// Class Solarland.SolarDamageTextSlotWidget
// Size: 0x430 (Inherited: 0x340)
struct USolarDamageTextSlotWidget : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextAnimationData> AnimationDatas; // 0x350(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextAnimationData> IconAnimationDatas; // 0x3a0(0x50)
	struct TArray<struct UImage*> HitIconArray; // 0x3f0(0x10)
	struct USolarTextBlock* DamageText; // 0x400(0x08)
	struct UImage* Img_Crit; // 0x408(0x08)
	struct UHorizontalBox* Box_Group; // 0x410(0x08)
	struct UWidgetAnimation* Text_Common_Anim; // 0x418(0x08)
	struct UWidgetAnimation* Crit_Anim; // 0x420(0x08)
	uint32_t UniqueId; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	void OnCharacterDeath(struct ASolarCharacter* InCharacter); // Function Solarland.SolarDamageTextSlotWidget.OnCharacterDeath // (Final|Native|Protected) // @ game+0x1d38fe0
};

// Class Solarland.SolarDamageTextWidget
// Size: 0x620 (Inherited: 0x340)
struct USolarDamageTextWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> FloatDamageTextConfig; // 0x348(0x50)
	struct TMap<enum class ESolarDamageTextType, struct FSolarDamageTextStyle> StackDamageTextConfig; // 0x398(0x50)
	struct FVector2D HitCharacterPositionOffset; // 0x3e8(0x08)
	struct FVector2D CommonHitPositionOffset; // 0x3f0(0x08)
	struct FVector2D FloatDamageTextOffset; // 0x3f8(0x08)
	struct FVector2D DamageTextDisplayAreaRatio; // 0x400(0x08)
	int32_t FloatDamageTextMaxinum; // 0x408(0x04)
	float FloatDamageTextScaleMaximum; // 0x40c(0x04)
	float FloatDamageTextScaleMinimum; // 0x410(0x04)
	float StackDamageTextScaleMaximum; // 0x414(0x04)
	float StackDamageTextScaleMinimum; // 0x418(0x04)
	float StackDamageTextHitScaleRatio; // 0x41c(0x04)
	float HeadShotDamageTextScaleRatio; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct TArray<struct USolarDamageTextSlotWidget*> AllDamageTextSlotWidget; // 0x428(0x10)
	struct TArray<struct UVerticalBox*> DamageTextGroups; // 0x438(0x10)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> DamageTextGroupDatas; // 0x448(0x50)
	struct TMap<uint32_t, struct FSolarDamageTextGroupData> PendingSlotWidgetDatas; // 0x498(0x50)
	struct FRuntimeFloatCurve OBSlotScaleCurve; // 0x4e8(0x88)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextMaxinumBasedOnDetailMode; // 0x570(0x50)
	struct TMap<enum class ESlateDetailMode, int32_t> FloatDamageTextWidgetPoolBasedOnDetailMode; // 0x5c0(0x50)
	struct USolarDamageTextSlotWidget* FloatDamageTextWidget; // 0x610(0x08)
	char pad_618[0x8]; // 0x618(0x08)

	void UpdatePendingSlotWidgetDatas(uint32_t UniqueId); // Function Solarland.SolarDamageTextWidget.UpdatePendingSlotWidgetDatas // (Final|Native|Protected) // @ game+0x1d39bd0
	void RequestDisplayDamageText(struct FSolarDamageText& InDamageTextData); // Function Solarland.SolarDamageTextWidget.RequestDisplayDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d39660
};

// Class Solarland.SolarDeathViewSkillWidget
// Size: 0x3b0 (Inherited: 0x340)
struct USolarDeathViewSkillWidget : USolarUserWidget {
	struct UOverlay* WeaponSkill; // 0x340(0x08)
	struct UImage* Img_BG; // 0x348(0x08)
	struct UImage* img_Light; // 0x350(0x08)
	struct UImage* ProgressCD; // 0x358(0x08)
	struct UImage* icon_WeaponSkill; // 0x360(0x08)
	struct FLinearColor CurrentProgressState; // 0x368(0x10)
	struct FName ProgressParameterName; // 0x378(0x08)
	struct FLinearColor OnCDColor; // 0x380(0x10)
	struct FLinearColor UnCDColor; // 0x390(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentPlayerWeapon; // 0x3a0(0x08)
	bool bCoolDown; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)

	void UpdateSkillVisibility(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillVisibility // (Final|Native|Protected) // @ game+0x1d3d6a0
	void UpdateSkillIcon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateSkillIcon // (Final|Native|Protected) // @ game+0x1d3d680
	void UpdateCurrentPlayerWeapon(); // Function Solarland.SolarDeathViewSkillWidget.UpdateCurrentPlayerWeapon // (Final|Native|Protected) // @ game+0x1d3d660
	void UpdateCDProgress(bool bForceUpdate); // Function Solarland.SolarDeathViewSkillWidget.UpdateCDProgress // (Final|Native|Protected) // @ game+0x1d3d5d0
	void SwitchSkillState(bool InbCD); // Function Solarland.SolarDeathViewSkillWidget.SwitchSkillState // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d3d520
};

// Class Solarland.SolarDeathViewWeaponPanelWidget
// Size: 0x380 (Inherited: 0x340)
struct USolarDeathViewWeaponPanelWidget : USolarUserWidget {
	struct USolarDeathViewWeaponWidget* Weapon_2; // 0x340(0x08)
	struct USolarDeathViewWeaponWidget* Weapon_3; // 0x348(0x08)
	struct USolarDeathViewWeaponWidget* Weapon_4; // 0x350(0x08)
	char pad_358[0x18]; // 0x358(0x18)
	struct TArray<struct USolarDeathViewWeaponWidget*> WeaponWidgetArray; // 0x370(0x10)

	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnUpdateAmmo // (Final|Native|Private) // @ game+0x1d3c580
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnEquipWeapon // (Final|Native|Private) // @ game+0x1d3c410
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActivedWeapon); // Function Solarland.SolarDeathViewWeaponPanelWidget.OnActiveWeapon // (Final|Native|Private) // @ game+0x1d3bf30
};

// Class Solarland.SolarDeathViewWeaponWidget
// Size: 0x3e8 (Inherited: 0x340)
struct USolarDeathViewWeaponWidget : USolarUserWidget {
	struct UCanvasPanel* Panel_Empty; // 0x340(0x08)
	struct UCanvasPanel* Panel_Weapon; // 0x348(0x08)
	struct UCanvasPanel* Panel_Hold; // 0x350(0x08)
	struct UImage* img_Mask; // 0x358(0x08)
	struct UImage* Img_Weapon; // 0x360(0x08)
	struct UImage* img_WeaponBg_2; // 0x368(0x08)
	struct UImage* img_WeaponBg; // 0x370(0x08)
	struct UImage* img_WeaponBg_3; // 0x378(0x08)
	struct UTextBlock* Txt_Bullets; // 0x380(0x08)
	struct UTextBlock* Txt_Bullets_1; // 0x388(0x08)
	struct USizeBox* SizeBox_1; // 0x390(0x08)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> OwnerPlayerWeapon; // 0x398(0x08)
	struct FTimerHandle LoadWeaponDataTimerHandle; // 0x3a0(0x08)
	char pad_3A8[0x10]; // 0x3a8(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x3b8(0x10)
	struct FLinearColor AmmoDefaultColor; // 0x3c8(0x10)
	float WeaponActiveWidgetWidth; // 0x3d8(0x04)
	float WeaponInactiveWidgetWidth; // 0x3dc(0x04)
	float NoWeaponActiveWidgetWidth; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)

	void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpgrade // (Final|Native|Private) // @ game+0x1d3c760
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarDeathViewWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Private) // @ game+0x1d3c6a0
	void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel, struct FString InDynamicTip); // Function Solarland.SolarDeathViewWeaponWidget.OnCharacterLevelUp // (Final|Native|Private) // @ game+0x1d3c170
	void AsyncLoadWeaponData(); // Function Solarland.SolarDeathViewWeaponWidget.AsyncLoadWeaponData // (Final|Native|Private) // @ game+0x1d3bc20
};

// Class Solarland.SolarDebugDrawer
// Size: 0x28 (Inherited: 0x28)
struct USolarDebugDrawer : UInterface {
};

// Class Solarland.SolarDebugDrawerManager
// Size: 0x2a0 (Inherited: 0x228)
struct ASolarDebugDrawerManager : AActor {
	char pad_228[0x78]; // 0x228(0x78)
};

// Class Solarland.SolarDecorationActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarDecorationActor : AActor {
};

// Class Solarland.SolarDecorationComponent
// Size: 0x370 (Inherited: 0x320)
struct USolarDecorationComponent : USceneComponent {
	struct FSoftObjectPath ChildActorPath; // 0x318(0x18)
	bool bHideAllDecorationComponents; // 0x330(0x01)
	struct AActor* ChildActorClass; // 0x338(0x08)
	struct UChildActorComponent* ChildActorComponent; // 0x340(0x08)
	char pad_349[0x7]; // 0x349(0x07)
	struct FSoftClassPath ChildActorClassPath; // 0x350(0x18)
	char pad_368[0x8]; // 0x368(0x08)
};

// Class Solarland.SolarDemoNetDriver
// Size: 0x1558 (Inherited: 0x1508)
struct USolarDemoNetDriver : UDemoNetDriver {
	struct TSet<struct UObject*> AlwaysRecordClasses; // 0x1508(0x50)
};

// Class Solarland.SolarDestructibleActor
// Size: 0x258 (Inherited: 0x238)
struct ASolarDestructibleActor : AStaticMeshActor {
	struct TArray<enum class ECollisionChannel> OnHitIgnoreChannels; // 0x238(0x10)
	float AddForceCoefficient; // 0x248(0x04)
	float BrokenDestroyTime; // 0x24c(0x04)
	bool bChildDetachOnBroken; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)

	void OnDestructibleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FHitResult& Hit, float SpeedDifference); // Function Solarland.SolarDestructibleActor.OnDestructibleActorHit // (Final|Native|Public|HasOutParms) // @ game+0x1d3c280
	void OnClientBrokenEffect(); // Function Solarland.SolarDestructibleActor.OnClientBrokenEffect // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnBroken(struct ASolarVehiclePawn* VehiclePawn, float SpeedDifference, struct FVector Impulse, struct FVector ImpactPoint); // Function Solarland.SolarDestructibleActor.OnBroken // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1d3bff0
};

// Class Solarland.SolarDownloadManager
// Size: 0x160 (Inherited: 0x30)
struct USolarDownloadManager : UGameInstanceSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnCDNURLSelectionChanged; // 0x38(0x10)
	char pad_48[0x18]; // 0x48(0x18)
	struct FString CDNResBaseURL; // 0x60(0x10)
	struct TMap<struct FName, struct USolarlandFileDownloader*> ActivedFileDownloaders; // 0x70(0x50)
	struct TMap<struct FName, struct USolarlandContentStringDownloader*> ActivedContentStringDownloaders; // 0xc0(0x50)
	struct TMap<struct FName, struct USolarlandPakMounter*> ActiveMounters; // 0x110(0x50)

	void SetNextCDNURL(); // Function Solarland.SolarDownloadManager.SetNextCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3d3b0
	void SetCurrentCDNURL(struct FString CDNURL); // Function Solarland.SolarDownloadManager.SetCurrentCDNURL // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3d310
	void SetCDNURLList(struct TArray<struct FString>& InCDNURLList); // Function Solarland.SolarDownloadManager.SetCDNURLList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3d240
	struct USolarlandPakMounter* RequirePaksMount(struct TArray<struct FLocalFileInfo>& InPakInfos, struct FName& InMountTag, int32_t InMountOrder, bool bInIncreasedOrder); // Function Solarland.SolarDownloadManager.RequirePaksMount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3cfe0
	struct USolarlandFileDownloader* RequireFilesDownload(struct TArray<struct FDownloadFileInfo>& InFileInfos, struct FString InLocalDir, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireFilesDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3cdc0
	struct USolarlandContentStringDownloader* RequireContentStringDownload(struct FString InUrl, struct FName& InDownloadTag, bool bInUseChunk, bool bInForceRedownload); // Function Solarland.SolarDownloadManager.RequireContentStringDownload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3cc30
	void OnCDNURLSelectionChanged__DelegateSignature(struct FString CurrentCDNURL); // DelegateFunction Solarland.SolarDownloadManager.OnCDNURLSelectionChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool IsLocalBuild(); // Function Solarland.SolarDownloadManager.IsLocalBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d3bf00
	bool IsCurrentCDNURLAvailable(); // Function Solarland.SolarDownloadManager.IsCurrentCDNURLAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3bed0
	struct USolarlandPakMounter* GetMounterByTag(struct FName& InMountTag); // Function Solarland.SolarDownloadManager.GetMounterByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3be30
	struct USolarlandFileDownloader* GetFileDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetFileDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3bd90
	struct USolarDownloadManager* GetDownloadManager(struct UObject* WorldContextObject); // Function Solarland.SolarDownloadManager.GetDownloadManager // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d3bd10
	struct FString GetCurrentCDNURL(); // Function Solarland.SolarDownloadManager.GetCurrentCDNURL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d3bce0
	struct USolarlandContentStringDownloader* GetContentStringDownloaderByTag(struct FName& InDownloadTag); // Function Solarland.SolarDownloadManager.GetContentStringDownloaderByTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d3bc40
};

// Class Solarland.SolarDragDropOperation
// Size: 0xd0 (Inherited: 0x88)
struct USolarDragDropOperation : UDragDropOperation {
	int32_t dropId; // 0x88(0x04)
	int32_t DropNum; // 0x8c(0x04)
	int32_t DropWeaponSlot; // 0x90(0x04)
	int32_t DropItemType; // 0x94(0x04)
	struct FString DropName; // 0x98(0x10)
	int32_t DropFromGridType; // 0xa8(0x04)
	int32_t DropFromIndex; // 0xac(0x04)
	struct AActor* DropActor; // 0xb0(0x08)
	int32_t DropGrade; // 0xb8(0x04)
	int32_t DropFromPickupType; // 0xbc(0x04)
	int32_t DropFromThisID; // 0xc0(0x04)
	int32_t DropWeaponPartType; // 0xc4(0x04)
	int32_t DropLevel; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Solarland.SolarDriveControlBase
// Size: 0x4f8 (Inherited: 0x340)
struct USolarDriveControlBase : USolarUserWidget {
	struct ASolarPlayerController* SolarPC; // 0x340(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x348(0x08)
	char pad_350[0x8]; // 0x350(0x08)
	struct FLinearColor TxtSpeedOriginColor; // 0x358(0x10)
	struct FLinearColor TxtSpeedFinalColor; // 0x368(0x10)
	struct UProgressBar* ProgressBar_Speed; // 0x378(0x08)
	struct UTextBlock* Txt_Speed_1; // 0x380(0x08)
	struct UTextBlock* Txt_Speed; // 0x388(0x08)
	struct USolarTextBlock* Txt_BrandName; // 0x390(0x08)
	struct UImage* img_Brand; // 0x398(0x08)
	struct UCanvasPanel* Panel_Speed; // 0x3a0(0x08)
	struct UCanvasPanel* Panel_SwitchSeat; // 0x3a8(0x08)
	struct UCheckBoxGroup* SeatFlag; // 0x3b0(0x08)
	char pad_3B8[0x18]; // 0x3b8(0x18)
	struct USolarVehicleHealthWidget* UI_Vehicle_Health; // 0x3d0(0x08)
	char pad_3D8[0x38]; // 0x3d8(0x38)
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x410(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x418(0x08)
	struct UCanvasPanel* Panel_Warning_Danger; // 0x420(0x08)
	struct UImage* Img_Danger_Mask; // 0x428(0x08)
	struct UProgressBar* ProgressBar_Danger; // 0x430(0x08)
	struct UCanvasPanel* Panel_ProgressBar_Danger; // 0x438(0x08)
	char pad_440[0x48]; // 0x440(0x48)
	struct UCanvasPanel* Panel_ScopeUI; // 0x488(0x08)
	struct UCanvasPanel* Panel_Prep; // 0x490(0x08)
	struct UCanvasPanel* Panel_PrepEmpty; // 0x498(0x08)
	struct UProgressBar* ProgressBar_Prep; // 0x4a0(0x08)
	struct UTextBlock* Txt_Bullet_1; // 0x4a8(0x08)
	struct UTextBlock* Txt_Bullet; // 0x4b0(0x08)
	struct UWidgetAnimation* Anim_PrepEmpty; // 0x4b8(0x08)
	struct FLinearColor EmptyBulletColor; // 0x4c0(0x10)
	struct FLinearColor NomalBulletColor; // 0x4d0(0x10)
	char pad_4E0[0x18]; // 0x4e0(0x18)

	void TriggerNoAmmoAlert(); // Function Solarland.SolarDriveControlBase.TriggerNoAmmoAlert // (Final|Native|Protected) // @ game+0x1d3d5b0
	void ShowDriveControl(enum class EDriveState InDriveState, struct FVehicleControlUserSettings& InDriverSettings); // Function Solarland.SolarDriveControlBase.ShowDriveControl // (Native|Public|HasOutParms) // @ game+0x1d3d450
	void SetOnVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.SetOnVehicleUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1d3d3d0
	void ScopeUIStateChanged(bool BOpened); // Function Solarland.SolarDriveControlBase.ScopeUIStateChanged // (Native|Public) // @ game+0x1d3d1b0
	void RefreshVehicleWeakPoints(); // Function Solarland.SolarDriveControlBase.RefreshVehicleWeakPoints // (Final|Native|Protected) // @ game+0x1d3cc10
	void RefreshVehicleBrokenDangerUI(float DangerRate, float TweenSpeed, float InDeltaTime); // Function Solarland.SolarDriveControlBase.RefreshVehicleBrokenDangerUI // (Native|Protected) // @ game+0x1d3cb00
	void RefreshOccupiedSeats(bool bSwtichVehicleSeatPlayer); // Function Solarland.SolarDriveControlBase.RefreshOccupiedSeats // (Native|Protected) // @ game+0x1d3ca70
	void RefreshHealthPercentUI(); // Function Solarland.SolarDriveControlBase.RefreshHealthPercentUI // (Final|Native|Protected) // @ game+0x1d3ca50
	void RefreshBlockedAbilityUI(struct FGameplayTag BlockTag, bool bTagActive); // Function Solarland.SolarDriveControlBase.RefreshBlockedAbilityUI // (Final|Native|Protected) // @ game+0x1d3c980
	void RefreshAbilityActivation(bool bInActivated, bool bCanCancel, char InAbilityIndex, float InDurationTime); // Function Solarland.SolarDriveControlBase.RefreshAbilityActivation // (Native|Protected) // @ game+0x1d3c820
	void OnVehicleWeaponChanged(); // Function Solarland.SolarDriveControlBase.OnVehicleWeaponChanged // (Final|Native|Protected) // @ game+0x1d3c680
	void OnVehicleTypeChange(); // Function Solarland.SolarDriveControlBase.OnVehicleTypeChange // (Native|Public) // @ game+0x1257770
	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* VehicleComp); // Function Solarland.SolarDriveControlBase.OnVehicleSkinUpdate // (Final|Native|Protected) // @ game+0x1d3c600
	void OnSelfHealingChanged(bool bActived); // Function Solarland.SolarDriveControlBase.OnSelfHealingChanged // (Final|Native|Protected) // @ game+0x1d3c4f0
	void OnLocalWeaponSystemVehicleInitialized(); // Function Solarland.SolarDriveControlBase.OnLocalWeaponSystemVehicleInitialized // (Final|Native|Protected) // @ game+0x1d3c4d0
	void HiddenDriveControl(); // Function Solarland.SolarDriveControlBase.HiddenDriveControl // (Native|Public|BlueprintCallable) // @ game+0x1257790
	void ClearVehicleHandle(); // Function Solarland.SolarDriveControlBase.ClearVehicleHandle // (Native|Public) // @ game+0xb56310
	void BP_ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.BP_ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ApplyVehicleUI(enum class EDriveState InDriveState); // Function Solarland.SolarDriveControlBase.ApplyVehicleUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void AddScopeToPanel(struct UUserWidget* InChildWidget, bool bInSpectate); // Function Solarland.SolarDriveControlBase.AddScopeToPanel // (Final|Native|Public) // @ game+0x1d3bb50
};

// Class Solarland.SolarDriveControlWidgetPC
// Size: 0x500 (Inherited: 0x4f8)
struct USolarDriveControlWidgetPC : USolarDriveControlBase {
	struct UWidgetSwitcher* WidgetSwitcher_GetOff; // 0x4f8(0x08)
};

// Class Solarland.SolarDriveControWidgetMobile
// Size: 0x6a0 (Inherited: 0x4f8)
struct USolarDriveControWidgetMobile : USolarDriveControlBase {
	char pad_4F8[0x20]; // 0x4f8(0x20)
	struct UVehicleMoveWidget* Joy_Mode1_D; // 0x518(0x08)
	struct UVehicleMoveWidget* Joy_Mode2_D; // 0x520(0x08)
	struct UCanvasPanel* Sprint; // 0x528(0x08)
	char pad_530[0x8]; // 0x530(0x08)
	struct UImage* Img_SprintActive; // 0x538(0x08)
	struct USolarTextBlock* Txt_Sprint; // 0x540(0x08)
	struct UCanvasPanel* SprintActiveOncePanel; // 0x548(0x08)
	struct UImage* Img_SprintLock; // 0x550(0x08)
	struct UImage* FX_CircleLoop; // 0x558(0x08)
	char pad_560[0x8]; // 0x560(0x08)
	struct UCheckBoxGroup* SeatFlag_Expand; // 0x568(0x08)
	struct UCanvasPanel* BT_Switch_Normal; // 0x570(0x08)
	struct UCanvasPanel* BT_Switch_Expand; // 0x578(0x08)
	struct USolarButton* BT_ChangeSeat; // 0x580(0x08)
	struct UButton* Btn_SeatClose; // 0x588(0x08)
	char pad_590[0x10]; // 0x590(0x10)
	struct UCanvasPanel* Panel_VehicleFire; // 0x5a0(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x5a8(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x5b0(0x08)
	struct USolarInputButton* BT_Drive_Shot; // 0x5b8(0x08)
	char pad_5C0[0x10]; // 0x5c0(0x10)
	struct USolarInputButton* BT_Weapon_Exit; // 0x5d0(0x08)
	struct UButton* BT_Drive_Out; // 0x5d8(0x08)
	struct UButton* BT_Jet_Out; // 0x5e0(0x08)
	struct UWidgetAnimation* Anim_Drive_Out_Enter; // 0x5e8(0x08)
	struct UCanvasPanel* Panel_Drive_Out; // 0x5f0(0x08)
	struct UImage* Img_vx_Circle; // 0x5f8(0x08)
	char pad_600[0x8]; // 0x600(0x08)
	struct UCanvasPanel* Panel_DriveCarup; // 0x608(0x08)
	char pad_610[0x8]; // 0x610(0x08)
	struct UCanvasPanel* Panel_DriveCardown; // 0x618(0x08)
	char pad_620[0x8]; // 0x620(0x08)
	struct UCanvasPanel* Container_Driver; // 0x628(0x08)
	struct USolarInputButton* BT_Trumpet_Shot; // 0x630(0x08)
	struct USolarInputButton* BT_Drive_Drift; // 0x638(0x08)
	struct UCanvasPanel* Car_Control_UI_Vehicle; // 0x640(0x08)
	struct UCanvasPanel* Drive_Mode_2; // 0x648(0x08)
	struct UCanvasPanel* Drive_Mode_3; // 0x650(0x08)
	struct USolarInputButton* BT_Drive_R; // 0x658(0x08)
	struct USolarInputButton* BT_Drive_Return; // 0x660(0x08)
	struct UWalkWidgetNew* SteeringJoyStick; // 0x668(0x08)
	struct UImage* Img_Steering; // 0x670(0x08)
	struct UCheckBox* CheckBox_Steeting_Right; // 0x678(0x08)
	struct UCheckBox* CheckBox_Steeting_Left; // 0x680(0x08)
	float EjectionBtnScaleMagnification; // 0x688(0x04)
	struct FVector2D EjectionBtnMaxScale; // 0x68c(0x08)
	char pad_694[0xc]; // 0x694(0x0c)

	void StopAutoMove(bool bResetJoy); // Function Solarland.SolarDriveControWidgetMobile.StopAutoMove // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d42310
	void ResetDriverControlInput(bool bIgnoreSprint); // Function Solarland.SolarDriveControWidgetMobile.ResetDriverControlInput // (Final|Native|Public|BlueprintCallable) // @ game+0x1d41d70
	void OnSwitchRotateInAir(bool bOpen); // Function Solarland.SolarDriveControWidgetMobile.OnSwitchRotateInAir // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d419b0
	void OnSteeringInput(float Offset); // Function Solarland.SolarDriveControWidgetMobile.OnSteeringInput // (Final|Native|Protected) // @ game+0x1d41930
	void OnSprintLockIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintLockIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d418a0
	void OnSprintIconHideFunc(); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconHideFunc // (Final|Native|Protected) // @ game+0x1d41880
	void OnSprintIconActiveFunc(struct FVector2D& SprintPosition); // Function Solarland.SolarDriveControWidgetMobile.OnSprintIconActiveFunc // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d417f0
	void OnJetEnterAnimFinished(); // Function Solarland.SolarDriveControWidgetMobile.OnJetEnterAnimFinished // (Final|Native|Protected) // @ game+0x1d416f0
	void OnExpandSeatFlagChanged(struct TArray<struct UCheckBox*>& ChildChangedArray, int32_t CheckedChildIndex); // Function Solarland.SolarDriveControWidgetMobile.OnExpandSeatFlagChanged // (Final|Native|Protected|HasOutParms) // @ game+0x1d41600
	void OnDriverVehicleHit(float SpeedDifferenceInKM); // Function Solarland.SolarDriveControWidgetMobile.OnDriverVehicleHit // (Final|Native|Protected) // @ game+0x1d41440
	void OnDriverSettingSaved(); // Function Solarland.SolarDriveControWidgetMobile.OnDriverSettingSaved // (Final|Native|Protected) // @ game+0x1d41420
	void OnDriveDownPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnDriveDownPressed // (Final|Native|Protected) // @ game+0x1d41400
	void OnCloseExpandSwitchClicked(); // Function Solarland.SolarDriveControWidgetMobile.OnCloseExpandSwitchClicked // (Final|Native|Protected) // @ game+0x1d413c0
	void OnChangeSeatReleased(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatReleased // (Final|Native|Protected) // @ game+0x1d413a0
	void OnChangeSeatPressed(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatPressed // (Final|Native|Protected) // @ game+0x1d41380
	void OnChangeSeatHolding(); // Function Solarland.SolarDriveControWidgetMobile.OnChangeSeatHolding // (Final|Native|Protected) // @ game+0x1d41360
	void InputSprintLockStart(); // Function Solarland.SolarDriveControWidgetMobile.InputSprintLockStart // (Final|Native|Protected) // @ game+0x1d40fb0
	bool CanSwitchVehicleSeatByTags(); // Function Solarland.SolarDriveControWidgetMobile.CanSwitchVehicleSeatByTags // (Final|Native|Protected) // @ game+0x1d40340
	void BeginAutoMove(); // Function Solarland.SolarDriveControWidgetMobile.BeginAutoMove // (Final|Native|Protected) // @ game+0x1d40320
	void ApplyCustomizeLayoutEx(int32_t LayoutType, enum class EVehicleControlUIType VehicleControlUIType); // Function Solarland.SolarDriveControWidgetMobile.ApplyCustomizeLayoutEx // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarEasyAntiCheatComponent
// Size: 0xd0 (Inherited: 0xb0)
struct USolarEasyAntiCheatComponent : UActorComponent {
	char pad_B0[0x20]; // 0xb0(0x20)

	void ServerOnUnRegisterClient(); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnUnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x124bc20
	void ServerOnRegisterClient(struct FString ProductID); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnRegisterClient // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d41ee0
	void ServerOnReceiveClientNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ServerOnReceiveClientNotifyMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d41e00
	void ClientOnReceiveServerNotifyMessage(uint32_t DataLenBytes, struct FString Data); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnReceiveServerNotifyMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d40810
	void ClientOnActionRequired(int32_t ClientAction, int32_t ActionReason, struct FString Details); // Function Solarland.SolarEasyAntiCheatComponent.ClientOnActionRequired // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1d406f0
};

// Class Solarland.SolarEasyAntiCheatManager
// Size: 0xd0 (Inherited: 0x28)
struct USolarEasyAntiCheatManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool EnableAntiCheat; // 0x30(0x01)
	bool bEnableAntiCheatLauncherCheck; // 0x31(0x01)
	char pad_32[0x9e]; // 0x32(0x9e)

	void TestSendDSAction(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarEasyAntiCheatManager.TestSendDSAction // (Final|Native|Public|BlueprintCallable) // @ game+0x1d423a0
	void SwitchAntiCheatState(); // Function Solarland.SolarEasyAntiCheatManager.SwitchAntiCheatState // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SendSteamAntiCheatRequest(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.SendSteamAntiCheatRequest // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ReportAntiCheatBI(int32_t ErrorCode); // Function Solarland.SolarEasyAntiCheatManager.ReportAntiCheatBI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool IsLaunchbyEOSBootstrapper(); // Function Solarland.SolarEasyAntiCheatManager.IsLaunchbyEOSBootstrapper // (Final|Native|Public|BlueprintCallable) // @ game+0x1d41090
	bool IsEOSSettingChanged(); // Function Solarland.SolarEasyAntiCheatManager.IsEOSSettingChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d40fd0
	void EasyAntiCheatLogin(struct FString AppToken); // Function Solarland.SolarEasyAntiCheatManager.EasyAntiCheatLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x1d409f0
	void AntiCheatLauncherCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatLauncherCheck // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool AntiCheatEosSettingCheck(); // Function Solarland.SolarEasyAntiCheatManager.AntiCheatEosSettingCheck // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarEffectExecution
// Size: 0x68 (Inherited: 0x40)
struct USolarEffectExecution : UGameplayEffectExecutionCalculation {
	struct USolarEffectExecutionProxy* CDOProxyClass; // 0x40(0x08)
	struct USolarEffectExecutionProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarEffectExecutionProxy
// Size: 0x30 (Inherited: 0x28)
struct USolarEffectExecutionProxy : UObject {
	struct TWeakObjectPtr<struct USolarEffectExecution> CDOOwner; // 0x28(0x08)

	void Execute(struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput& OutExecutionOutput); // Function Solarland.SolarEffectExecutionProxy.Execute // (Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x224bbb0
	struct USolarEffectExecutionProxy* CreateProxy(struct USolarEffectExecution* InCDOOwner, struct USolarEffectExecutionProxy* ProxyClass); // Function Solarland.SolarEffectExecutionProxy.CreateProxy // (Final|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1d40930
};

// Class Solarland.SolarEffectInitiatorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectInitiatorInterface : UInterface {
};

// Class Solarland.SolarEffectRecipientInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarEffectRecipientInterface : UInterface {

	void ResponseAbilityEffectHitResult(struct AActor* InEffectInitiator, struct FHitResult& InHitResult, float InDamage); // Function Solarland.SolarEffectRecipientInterface.ResponseAbilityEffectHitResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarElectricShop
// Size: 0x450 (Inherited: 0x238)
struct ASolarElectricShop : ASolarInteractableActor {
	int32_t MaxWeaponLevel; // 0x238(0x04)
	int32_t MaxShieldLevel; // 0x23c(0x04)
	struct TArray<float> UpgradeEnergyCosts; // 0x240(0x10)
	struct UStaticMeshComponent* ShopMesh; // 0x250(0x08)
	struct USphereComponent* CollisionComp; // 0x258(0x08)
	int32_t SpawnID; // 0x260(0x04)
	bool bSpecificShopID; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct TSoftObjectPtr<UDataTable> ShopMeshPathTable; // 0x268(0x28)
	bool bIfShowInMap; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
	struct TSoftClassPtr<UObject> MapIcon; // 0x298(0x28)
	int32_t MapIconID; // 0x2c0(0x04)
	float MaxTirggerAngle; // 0x2c4(0x04)
	int32_t ShopID; // 0x2c8(0x04)
	bool bIsBroken; // 0x2cc(0x01)
	char pad_2CD[0x3]; // 0x2cd(0x03)
	float TirggerDistance; // 0x2d0(0x04)
	enum class EShopModelAnimType CurrentModeAnimType; // 0x2d4(0x01)
	enum class EShopModelAnimType WantedModeAnimType; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> InstigateCharacters; // 0x2d8(0x10)
	struct UDataTable* ShopMeshDataTable; // 0x2e8(0x08)
	struct TArray<struct FElectricShopSection> ItemSections; // 0x2f0(0x10)
	struct TArray<struct FElectricShopCDRecord> ItemCDRecords; // 0x300(0x10)
	struct TArray<float> PoolRefreshTimeList; // 0x310(0x10)
	struct TArray<struct FPoolRefreshInfo> PoolRefreshInfoList; // 0x320(0x10)
	int32_t CurPoolGroupID; // 0x330(0x04)
	char pad_334[0x14]; // 0x334(0x14)
	struct TArray<struct UMapMarkBase*> MapMarkArray; // 0x348(0x10)
	struct TArray<struct FTimerHandle> CachedHandles; // 0x358(0x10)
	float DemoRotationSpeed; // 0x368(0x04)
	float DemoSwtichTime; // 0x36c(0x04)
	float DemoOffsetFromZ; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct TSoftObjectPtr<UDataTable> ItemDemoBPTable; // 0x378(0x28)
	struct UDataTable* ItemDemoBPDataTable; // 0x3a0(0x08)
	struct TMap<struct FSoftObjectPath, struct AElectricShopItemDemo*> DemoActorMap; // 0x3a8(0x50)
	struct AElectricShopItemDemo* CurDemo; // 0x3f8(0x08)
	struct FTimerHandle DemoLoopPlaybackHandle; // 0x400(0x08)
	struct TArray<struct AElectricShopItemDemo*> SpawnedDemoActorList; // 0x408(0x10)
	char pad_418[0x28]; // 0x418(0x28)
	struct TArray<struct UObject*> CachedDemoItemsClass; // 0x440(0x10)

	void UpgradeWeaponResponse(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeWeaponResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d42480
	void UpgradeShieldResponse(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.UpgradeShieldResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x127a2a0
	bool ServerUpgradeWeapon(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeWeapon // (Final|Native|Public) // @ game+0x1d42250
	bool ServerUpgradeShield(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerUpgradeShield // (Final|Native|Public) // @ game+0x1d421c0
	void ServerStatisticElectricShop(struct ASolarCharacter* ActivateCharacter, enum class EShopStatisticType StatisticType, int32_t InValueA, int32_t InValueB); // Function Solarland.SolarElectricShop.ServerStatisticElectricShop // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1d42080
	bool ServerPurchaseEShopItems(int32_t InProductID, bool bIsRecommend, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ServerPurchaseEShopItems // (Final|Native|Public) // @ game+0x1d41f80
	bool RemoveInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.RemoveInstigator // (Final|Native|Public) // @ game+0x1d41ce0
	bool RefreshSellingItem(int32_t InProductID); // Function Solarland.SolarElectricShop.RefreshSellingItem // (Final|Native|Protected) // @ game+0x1d41c50
	void RefreshItemCDRecords(struct FElectricShopItem& InItem, struct FString InPlayerID); // Function Solarland.SolarElectricShop.RefreshItemCDRecords // (Final|Native|Protected|HasOutParms) // @ game+0x1d41b50
	void PurchaseEShopItemsResponse(int32_t InProductID, bool bSuccess, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.PurchaseEShopItemsResponse // (Net|Native|Event|NetMulticast|Public) // @ game+0x1d41a40
	void OnShopIDReplicatedBP(); // Function Solarland.SolarElectricShop.OnShopIDReplicatedBP // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_ShopID(); // Function Solarland.SolarElectricShop.OnRep_ShopID // (Final|Native|Protected) // @ game+0x1d417d0
	void OnRep_ItemSections(); // Function Solarland.SolarElectricShop.OnRep_ItemSections // (Final|Native|Protected) // @ game+0x1d417b0
	void OnRep_ItemCDRecords(); // Function Solarland.SolarElectricShop.OnRep_ItemCDRecords // (Final|Native|Protected) // @ game+0x1d41790
	void OnRep_CurPoolGroupID(int32_t PrePoolGroupID); // Function Solarland.SolarElectricShop.OnRep_CurPoolGroupID // (Final|Native|Protected) // @ game+0x1d41710
	void OnPlayWeaponUpgradeAnim(); // Function Solarland.SolarElectricShop.OnPlayWeaponUpgradeAnim // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayPurchaseAnim(); // Function Solarland.SolarElectricShop.OnPlayPurchaseAnim // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayIdleAnim(); // Function Solarland.SolarElectricShop.OnPlayIdleAnim // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarElectricShop.OnEndOverlap // (Final|Native|Protected) // @ game+0x1d414c0
	void OnCurrentAnimFinish(); // Function Solarland.SolarElectricShop.OnCurrentAnimFinish // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d413e0
	void OnBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarElectricShop.OnBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1d41150
	bool IsProductRecommendEquipType(enum class EItemType ProductType); // Function Solarland.SolarElectricShop.IsProductRecommendEquipType // (Final|Native|Public) // @ game+0x1d410c0
	bool IsInteractable(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.IsInteractable // (Final|Native|Public) // @ game+0x1d41000
	void InitWeaponUpgradeEnergyCost(); // Function Solarland.SolarElectricShop.InitWeaponUpgradeEnergyCost // (Final|Native|Public) // @ game+0x1d40f70
	void InitializeElectricShop(); // Function Solarland.SolarElectricShop.InitializeElectricShop // (Final|Native|Public) // @ game+0x1d40f90
	float GetServerWorldTime(); // Function Solarland.SolarElectricShop.GetServerWorldTime // (Final|Native|Protected) // @ game+0x1d40f40
	float GetRemainingCD(int32_t ProductID); // Function Solarland.SolarElectricShop.GetRemainingCD // (Final|Native|Public) // @ game+0x1d40eb0
	float GetDiscountedPrice(struct ASolarCharacter* BuyerCharacter, float Price); // Function Solarland.SolarElectricShop.GetDiscountedPrice // (Final|Native|Public) // @ game+0x1d40de0
	void GetDiscountedItem(struct ASolarCharacter* BuyerCharacter, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetDiscountedItem // (Final|Native|Public|HasOutParms) // @ game+0x1d40d00
	bool GetCurrentItem(int32_t InProductID, struct FElectricShopItem& OutItem); // Function Solarland.SolarElectricShop.GetCurrentItem // (Final|Native|Public|HasOutParms) // @ game+0x1d40c10
	struct FString GetBuyerID(int32_t ProductID); // Function Solarland.SolarElectricShop.GetBuyerID // (Final|Native|Public) // @ game+0x1d40b40
	struct FElectricShopItem GenerateNewItem(int32_t InProductID); // Function Solarland.SolarElectricShop.GenerateNewItem // (Final|Native|Protected) // @ game+0x1d40a90
	void ClientUpgradeWeaponSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x1d40910
	void ClientUpgradeShieldSuccess(); // Function Solarland.SolarElectricShop.ClientUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x1d40910
	void ClientUpdateModelAnim(); // Function Solarland.SolarElectricShop.ClientUpdateModelAnim // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ClientPurchaseSuccess(); // Function Solarland.SolarElectricShop.ClientPurchaseSuccess // (Final|Native|Protected) // @ game+0x1d408f0
	void ClientHUDUpgradeWeaponSuccess(struct ASolarPlayerWeapon* InWeapon, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeWeaponSuccess // (Final|Native|Protected) // @ game+0x1d40630
	void ClientHUDUpgradeShieldSuccess(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDUpgradeShieldSuccess // (Final|Native|Protected) // @ game+0x1d405b0
	void ClientHUDPurchaseSuccess(int32_t InProductID, struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPurchaseSuccess // (Final|Native|Protected) // @ game+0x1d404f0
	void ClientHUDPoolRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDPoolRefresh // (Final|Native|Protected) // @ game+0x1d40470
	void ClientHUDItemRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDItemRefresh // (Final|Native|Protected) // @ game+0x1d403f0
	void ClientHUDCDRefresh(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.ClientHUDCDRefresh // (Final|Native|Protected) // @ game+0x1d40370
	void AddInstigator(struct ASolarCharacter* InCharacter); // Function Solarland.SolarElectricShop.AddInstigator // (Final|Native|Public) // @ game+0x1d402a0
};

// Class Solarland.ElectricShopItemDemo
// Size: 0x230 (Inherited: 0x228)
struct AElectricShopItemDemo : AActor {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SummonItemBase
// Size: 0x398 (Inherited: 0x288)
struct ASummonItemBase : APawn {
	char pad_288[0x20]; // 0x288(0x20)
	struct UAkComponent* AkAudioComponent; // 0x2a8(0x08)
	struct UStaticMeshComponent* HPBar; // 0x2b0(0x08)
	struct FSpawnedActorHandle CachedActorHandle; // 0x2b8(0x04)
	struct TWeakObjectPtr<struct ASolarCharacter> SourceSummoner; // 0x2bc(0x08)
	float CurrentHealth; // 0x2c4(0x04)
	struct TWeakObjectPtr<struct AActor> EffectingNightComesActor; // 0x2c8(0x08)
	bool bDead; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	float TimerMaxTime; // 0x2d4(0x04)
	float Timer; // 0x2d8(0x04)
	char pad_2DC[0xc]; // 0x2dc(0x0c)
	float MaxHealth; // 0x2e8(0x04)
	float ReducedHealth; // 0x2ec(0x04)
	float DelayDestroyTime; // 0x2f0(0x04)
	bool bTeammateDamage; // 0x2f4(0x01)
	bool bSuicideWithSummonerChange; // 0x2f5(0x01)
	bool bEnableTimer; // 0x2f6(0x01)
	bool bOnlyOne; // 0x2f7(0x01)
	bool bEnableHPBar; // 0x2f8(0x01)
	bool bHPDefaultVisible; // 0x2f9(0x01)
	char pad_2FA[0x2]; // 0x2fa(0x02)
	struct FName HPBarTagName; // 0x2fc(0x08)
	struct FName HPBarPercentName; // 0x304(0x08)
	struct FName HPBarColorName; // 0x30c(0x08)
	struct FLinearColor HPBarColorTeammate; // 0x314(0x10)
	struct FLinearColor HPBarColorEnemy; // 0x324(0x10)
	int32_t HPBarMaterialIndex; // 0x334(0x04)
	struct FVector CenterLocationOffset; // 0x338(0x0c)
	bool bSupportAssistAim; // 0x344(0x01)
	char pad_345[0x3]; // 0x345(0x03)
	struct FWeaponAssistAimTargetConfig AssistAimTargetConfig; // 0x348(0x48)
	bool bCanAffectedByEMP; // 0x390(0x01)
	bool bDebug; // 0x391(0x01)
	char pad_392[0x6]; // 0x392(0x06)

	void SwitchTimer(bool InbEnable, float InMaxTime); // Function Solarland.SummonItemBase.SwitchTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f04a20
	void Suicide(); // Function Solarland.SummonItemBase.Suicide // (Final|Native|Public|BlueprintCallable) // @ game+0x1f04a00
	bool RequestPlaySoundByTeam(struct TMap<enum class ESolarSummonSoundType, struct FSolarSummonSoundData>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySoundByTeam // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f048a0
	bool RequestPlaySound(struct TArray<struct FString>& InSoundData); // Function Solarland.SummonItemBase.RequestPlaySound // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f047c0
	void ReceiveUpdateTimerEvent(float InTimerRate); // Function Solarland.SummonItemBase.ReceiveUpdateTimerEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveUpdateHealthEvent(float InCurrentHealthRate); // Function Solarland.SummonItemBase.ReceiveUpdateHealthEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveDeathEvent(); // Function Solarland.SummonItemBase.ReceiveDeathEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnSourceCharacterChange(); // Function Solarland.SummonItemBase.OnSourceCharacterChange // (Native|Protected) // @ game+0x12577b0
	void OnRep_CurrentHealth(); // Function Solarland.SummonItemBase.OnRep_CurrentHealth // (Final|Native|Protected) // @ game+0x1f045b0
	bool IsDead(); // Function Solarland.SummonItemBase.IsDead // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dbbc40
	struct TWeakObjectPtr<struct ASolarCharacter> GetSourceSummoner(); // Function Solarland.SummonItemBase.GetSourceSummoner // (Final|Native|Public|Const) // @ game+0x1f04540
	float GetMaxHealth(); // Function Solarland.SummonItemBase.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f04510
	float GetCurrentHealth(); // Function Solarland.SummonItemBase.GetCurrentHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f044e0
	struct UObject* GetClassType(); // Function Solarland.SummonItemBase.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1f044b0
};

// Class Solarland.SolarEnergyShield
// Size: 0x5d0 (Inherited: 0x398)
struct ASolarEnergyShield : ASummonItemBase {
	char pad_398[0x8]; // 0x398(0x08)
	struct UParticleSystem* HitEffect; // 0x3a0(0x08)
	struct TSoftObjectPtr<UParticleSystem> VehicleWholeShieldBrokenEffect; // 0x3a8(0x28)
	struct FVector HitEffectScale; // 0x3d0(0x0c)
	char OwnerTeam; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	struct TMap<enum class ESolarSummonSoundType, struct FString> StartSoundMap; // 0x3e0(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> LoopSoundMap; // 0x430(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> HitSoundMap; // 0x480(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> EndSoundMap; // 0x4d0(0x50)
	struct TMap<enum class ESolarSummonSoundType, struct FString> BrokenSoundMap; // 0x520(0x50)
	char pad_570[0x8]; // 0x570(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, float> OverlapActorsTimeMap; // 0x578(0x50)
	float OverlapActorIntervalTime; // 0x5c8(0x04)
	float BounceForceToUniqueSkill; // 0x5cc(0x04)

	void PlaySkillStartSound(); // Function Solarland.SolarEnergyShield.PlaySkillStartSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4c3d0
	void PlaySkillEndSound(); // Function Solarland.SolarEnergyShield.PlaySkillEndSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4c3b0
	void PlayHitSound(); // Function Solarland.SolarEnergyShield.PlayHitSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4c390
	void PlayHitEffectOnVehicleWholeShield(int32_t IndexToPlayHitEffect, struct FVector& HitLocation); // Function Solarland.SolarEnergyShield.PlayHitEffectOnVehicleWholeShield // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void PlayHitEffect(struct FHitResult& HitResult); // Function Solarland.SolarEnergyShield.PlayHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x1d4c2b0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarEnergyShield.OnUntrigger // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4bf90
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarEnergyShield.OnTrigger // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1d4bd80
	void ChangeColor(bool IsChanged); // Function Solarland.SolarEnergyShield.ChangeColor // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarEngine
// Size: 0xe60 (Inherited: 0xe60)
struct USolarEngine : UGameEngine {
};

// Class Solarland.SolarEQC_GetAITarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_GetAITarget : UEnvQueryContext {

	void ProvideSingleActor(struct UObject* QuerierObject, struct AActor* QuerierActor, struct AActor*& ResultingActor); // Function Solarland.SolarEQC_GetAITarget.ProvideSingleActor // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x224bbb0
};

// Class Solarland.SolarEQC_OwnerBackRotation
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_OwnerBackRotation : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTarget
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTarget : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetTrailCenter
// Size: 0x28 (Inherited: 0x28)
struct USolarEQC_WarmTargetTrailCenter : UEnvQueryContext {
};

// Class Solarland.SolarEQC_WarmTargetNearbyPlayers
// Size: 0x30 (Inherited: 0x28)
struct USolarEQC_WarmTargetNearbyPlayers : UEnvQueryContext {
	float DistanceThreshold; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarEQT_AgentPathFinding
// Size: 0x2c8 (Inherited: 0x280)
struct USolarEQT_AgentPathFinding : UEnvQueryTest_Pathfinding {
	bool bOverrideOwnerAgentProperty; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FNavAgentProperties NavAgentProperties; // 0x288(0x30)
	bool bUseCustomRecastQueryExtent; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	struct FVector CustomRecastQueryExtent; // 0x2bc(0x0c)
};

// Class Solarland.SolarEQT_CheckInEffectArea
// Size: 0x260 (Inherited: 0x1f8)
struct USolarEQT_CheckInEffectArea : UEnvQueryTest {
	bool bOverridePerceptionConfig; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct FPerceivableEAInfluenceConfig InfluenceConfig; // 0x200(0x60)
};

// Class Solarland.SolarEQT_CheckInSafeArea
// Size: 0x1f8 (Inherited: 0x1f8)
struct USolarEQT_CheckInSafeArea : UEnvQueryTest {
};

// Class Solarland.SolarEQT_TraceLimit
// Size: 0x318 (Inherited: 0x2d8)
struct USolarEQT_TraceLimit : UEnvQueryTest_Trace {
	bool bWantsHit; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FAIDataProviderBoolValue StartPenetratingValid; // 0x2e0(0x38)
};

// Class Solarland.SolarEQTHavePlayerInRange
// Size: 0x218 (Inherited: 0x1f8)
struct USolarEQTHavePlayerInRange : UEnvQueryTest {
	float TraceRange; // 0x1f8(0x04)
	bool bIgnoreSpectatePlayer; // 0x1fc(0x01)
	char pad_1FD[0x3]; // 0x1fd(0x03)
	float TraceStartOffsetZ; // 0x200(0x04)
	char pad_204[0x14]; // 0x204(0x14)
};

// Class Solarland.SolarEventSubsystem
// Size: 0x80 (Inherited: 0x30)
struct USolarEventSubsystem : UGameInstanceSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.SolarExternalToolsWidget
// Size: 0x340 (Inherited: 0x340)
struct USolarExternalToolsWidget : USolarUserWidget {

	struct UWidget* GetTopWidget(struct UWidget* InWidget); // Function Solarland.SolarExternalToolsWidget.GetTopWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d4b8a0
};

// Class Solarland.SolarFireCircle
// Size: 0x248 (Inherited: 0x238)
struct ASolarFireCircle : ASolarInteractableActor {
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)
	struct UAkComponent* AkAudioComponent; // 0x240(0x08)

	void InitializeSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarFireCircle.InitializeSolarAkGameObject // (Final|Native|Private) // @ game+0x1d4b920
};

// Class Solarland.SolarTrailEffect
// Size: 0x230 (Inherited: 0x228)
struct ASolarTrailEffect : AActor {
	struct FName AttachSocket; // 0x228(0x08)

	void OnFinished(); // Function Solarland.SolarTrailEffect.OnFinished // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarTrailProxyComponent
// Size: 0x340 (Inherited: 0x320)
struct USolarTrailProxyComponent : USceneComponent {
	struct TWeakObjectPtr<struct ASolarCharacter> PlayerBeingTracked; // 0x318(0x08)
	char pad_328[0x18]; // 0x328(0x18)
};

// Class Solarland.SkydiveTrailEffect
// Size: 0x230 (Inherited: 0x228)
struct ASkydiveTrailEffect : AActor {
	struct ASolarFlyTrail* FlyTrailManager; // 0x228(0x08)

	void UpdateTrailEffect(float CurrentTime); // Function Solarland.SkydiveTrailEffect.UpdateTrailEffect // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1d4c500
	void InitEffectAppearance(bool IsDefender, bool IsSameTeamWithLocalPlayer); // Function Solarland.SkydiveTrailEffect.InitEffectAppearance // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void InitAppearanceByPlayerState(struct ASolarPlayerState* PlayerState); // Function Solarland.SkydiveTrailEffect.InitAppearanceByPlayerState // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x7e17c0
	void AddTrailPoint(float Timestamp, struct FVector& Location, struct FRotator& Rotation, struct FVector& Velocity); // Function Solarland.SkydiveTrailEffect.AddTrailPoint // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1d4b240
};

// Class Solarland.SolarFlyTrail
// Size: 0x5a0 (Inherited: 0x228)
struct ASolarFlyTrail : AActor {
	struct TArray<struct USolarTrailProxyComponent*> CachedProxyComponents; // 0x228(0x10)
	struct FSoftObjectPath TrailEffectClass; // 0x238(0x18)
	struct UObject* CachedTrailEffectClass; // 0x250(0x08)
	char pad_258[0xa8]; // 0x258(0xa8)
	struct FCharacterSkydiveTrailStaticInfoContainer SkydiveTrailStaticInfo; // 0x300(0x120)
	struct FPackedSkydiveTrailFrameInfoContainer SkydiveTrailFrameInfo; // 0x420(0x120)
	struct ASkydiveTrailEffect* SkydiveTrailEffectClass; // 0x540(0x08)
	struct TMap<struct ASolarPlayerState*, struct FCharacterSkydiveTrailData> SkydiveTrailData; // 0x548(0x50)
	struct ASolarPlayerState* LocalPlayerSkydiveTrailProxy; // 0x598(0x08)

	void OnTrailEffectActorDestroyed(struct AActor* DestroyedActor); // Function Solarland.SolarFlyTrail.OnTrailEffectActorDestroyed // (Final|Native|Protected) // @ game+0x1d4bd00
	void OnTracingCharacterSkydivingStageChanged(struct ASolarCharacter* Character, enum class ESkydiveStage LastStage, enum class ESkydiveStage CurrentStage); // Function Solarland.SolarFlyTrail.OnTracingCharacterSkydivingStageChanged // (Final|Native|Protected) // @ game+0x1d4bc00
	void OnRep_TrailEffectClass(); // Function Solarland.SolarFlyTrail.OnRep_TrailEffectClass // (Final|Native|Protected) // @ game+0x1d4bbe0
};

// Class Solarland.SolarFollowingComponent
// Size: 0x3c0 (Inherited: 0x2a0)
struct USolarFollowingComponent : UCrowdFollowingComponent {
	bool bEnableOffmeshDetect; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float MinDetectInterval; // 0x2a4(0x04)
	uint32_t MaxDetectIteration; // 0x2a8(0x04)
	struct FVector InitialOffmeshSolveExtent; // 0x2ac(0x0c)
	float MinZDiffDetectUndergroud; // 0x2b8(0x04)
	float AgentSwimingHalfHeightPct; // 0x2bc(0x04)
	float AgentNormalHalfHeightPct; // 0x2c0(0x04)
	float ReachTestCheckAngleWV; // 0x2c4(0x04)
	float MinSpeedLastSegmentWV; // 0x2c8(0x04)
	float TurningSpeedWV; // 0x2cc(0x04)
	float TurningSteeringThresholdWV; // 0x2d0(0x04)
	float BlockDetectionDistanceCharacter; // 0x2d4(0x04)
	float BlockDetectionDistanceVehicle; // 0x2d8(0x04)
	char pad_2DC[0x10]; // 0x2dc(0x10)
	bool bEnableSolveBlock; // 0x2ec(0x01)
	char pad_2ED[0x3b]; // 0x2ed(0x3b)
	struct ASolarVehiclePawn* VehicleActor; // 0x328(0x08)
	char pad_330[0xc]; // 0x330(0x0c)
	float SensorTraceDistance; // 0x33c(0x04)
	bool bEnableDebug; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float RightSensorAlpha; // 0x344(0x04)
	float CentralSensorAlpha; // 0x348(0x04)
	float LeftSensorAlpha; // 0x34c(0x04)
	float SteeringAngle; // 0x350(0x04)
	float VehicleSteeringSensitivity; // 0x354(0x04)
	float BrakingForce; // 0x358(0x04)
	float DecelerationDistance; // 0x35c(0x04)
	float VehicleDecelerationSpeed; // 0x360(0x04)
	float VehicleTurningSpeed; // 0x364(0x04)
	float CheckReverseDistance; // 0x368(0x04)
	float HoverCheckBlockSpeed; // 0x36c(0x04)
	float WheeledCheckBlockSpeed; // 0x370(0x04)
	float LeggedVehicleCheckBlockSpeed; // 0x374(0x04)
	char pad_378[0x4]; // 0x378(0x04)
	float CheckBlockTime; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	int32_t TryReverseTimes; // 0x388(0x04)
	float TryReverseDurationTime; // 0x38c(0x04)
	char pad_390[0x8]; // 0x390(0x08)
	float SolveBlockGoFrontTime; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	bool bPathFinish; // 0x3a0(0x01)
	char pad_3A1[0x1f]; // 0x3a1(0x1f)

	void SetVehicle(struct AActor* VehicleActorIn); // Function Solarland.SolarFollowingComponent.SetVehicle // (Final|Native|Public) // @ game+0x1d4c480
	void OnUpdatedCharacterMovementModeChanged(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterMovementModeChanged // (Native|Protected) // @ game+0x1d4c1b0
	void OnUpdatedCharacterLanded(struct FHitResult& Hit); // Function Solarland.SolarFollowingComponent.OnUpdatedCharacterLanded // (Native|Protected|HasOutParms) // @ game+0x1d4c0d0
};

// Class Solarland.SolarFontManager
// Size: 0x38 (Inherited: 0x28)
struct USolarFontManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* ChineseFont; // 0x30(0x08)

	void SaveChineseFontSetting(bool bHasLoad); // Function Solarland.SolarFontManager.SaveChineseFontSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4c3f0
	bool MergeCompositeFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.MergeCompositeFont // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4bb30
	struct UFont* LoadNewFont(struct FString NewFontAssetPath); // Function Solarland.SolarFontManager.LoadNewFont // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4ba80
	bool IsNeedMergeChineseFont(bool bAutoLoad); // Function Solarland.SolarFontManager.IsNeedMergeChineseFont // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4b9f0
	void Init(); // Function Solarland.SolarFontManager.Init // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarGameConfigManager
// Size: 0xe8 (Inherited: 0x28)
struct USolarGameConfigManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* WeaponDTInstance; // 0x30(0x08)
	struct UDataTable* WeaponAppearanceDTInstance; // 0x38(0x08)
	struct UDataTable* ItemActorDTInstance; // 0x40(0x08)
	struct UDataTable* BackpackTrailAssembingDTInstance; // 0x48(0x08)
	struct UDataTable* CharacterDTInstance; // 0x50(0x08)
	struct UDataTable* ItemResourceDTInstance; // 0x58(0x08)
	struct UDataTable* BuffEffectDTInstance; // 0x60(0x08)
	struct UGlobalWeaponConfig* WeaponsConfigAsset; // 0x68(0x08)
	struct UGlobalVehicleWeaponConfig* GlobalVehicleWeaponConfigAsset; // 0x70(0x08)
	struct USolarRoleSkillDataConfig* RoleConfigAsset; // 0x78(0x08)
	float HeadHitValue; // 0x80(0x04)
	float ShieldReducePhy; // 0x84(0x04)
	float ShieldReduceEn; // 0x88(0x04)
	float ArmorReducePhy; // 0x8c(0x04)
	float ArmorReduceEn; // 0x90(0x04)
	float BaseHeadShotAddit; // 0x94(0x04)
	int32_t BackpackEnergyID; // 0x98(0x04)
	int32_t BackpackExtraEnergyID; // 0x9c(0x04)
	int32_t MedicineItemId; // 0xa0(0x04)
	int32_t RadarItemId; // 0xa4(0x04)
	int32_t ShieldRechargerItemId; // 0xa8(0x04)
	int32_t ShieldBigRechargerItemId; // 0xac(0x04)
	float UnPickupItemTime; // 0xb0(0x04)
	float UnAutoPickupItemTime; // 0xb4(0x04)
	float AutoPickupTime; // 0xb8(0x04)
	float AutoMarkCDTime; // 0xbc(0x04)
	struct TArray<int32_t> AutoMarkItemTypeList; // 0xc0(0x10)
	float AutoMarkTeammateDistance; // 0xd0(0x04)
	float PickupCapsuleRadius; // 0xd4(0x04)
	float PickupCapsuleHalfHeight; // 0xd8(0x04)
	float MapVoiceSurviveTime; // 0xdc(0x04)
	float MapVoiceDataRefreshTime; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void OnInitialized(); // Function Solarland.SolarGameConfigManager.OnInitialized // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct USolarRoleSkillDataConfig* GetSolarRoleSkillDataConfig(); // Function Solarland.SolarGameConfigManager.GetSolarRoleSkillDataConfig // (Final|Native|Public|Const) // @ game+0x1d4b880
	struct FLinearColor GetLowQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetLowQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b7e0
	struct FLinearColor GetHUDDecorateColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDDecorateColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b6a0
	struct FLinearColor GetHUDColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b600
	struct FLinearColor GetHUDBGColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHUDBGColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b560
	struct FLinearColor GetHighQualityColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetHighQualityColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b740
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x8ed110
	struct UGlobalVehicleWeaponConfig* GetGlobalVehicleWeaponConfig(); // Function Solarland.SolarGameConfigManager.GetGlobalVehicleWeaponConfig // (Final|Native|Public|Const) // @ game+0x1d4b530
	struct FString GetFGByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetFGByQuality // (Final|Native|Public) // @ game+0x1d4b460
	struct FLinearColor GetColorByQuality(int32_t Quality); // Function Solarland.SolarGameConfigManager.GetColorByQuality // (Final|Native|Public|HasDefaults) // @ game+0x1d4b3c0
};

// Class Solarland.SolarGameInstanceBase
// Size: 0x7f8 (Inherited: 0x1d0)
struct USolarGameInstanceBase : UQFrameworkArchitecture {
	char pad_1D0[0x8]; // 0x1d0(0x08)
	struct FSoftObjectPath LoginMap; // 0x1d8(0x18)
	struct FSoftObjectPath LobbyMap; // 0x1f0(0x18)
	struct FSoftObjectPath EntryMap; // 0x208(0x18)
	struct FSoftObjectPath GameMap; // 0x220(0x18)
	struct FSoftObjectPath SettlementMap; // 0x238(0x18)
	struct FSoftObjectPath ConfigServerMap; // 0x250(0x18)
	struct FString ConfigBattleAddr; // 0x268(0x10)
	int32_t ConfigBattlePort; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct FString ConfigBackendAddr; // 0x280(0x10)
	int32_t ConfigBackendPort; // 0x290(0x04)
	int32_t BuildNumber; // 0x294(0x04)
	struct TSoftClassPtr<UObject> SaveGameClass; // 0x298(0x28)
	struct FSoftClassPath DefaultOperationLayout; // 0x2c0(0x18)
	struct FSoftClassPath DefaultLockSettings; // 0x2d8(0x18)
	struct FSoftClassPath ReplayManagerClass; // 0x2f0(0x18)
	struct FSoftClassPath DefaultGameModeLockSettings; // 0x308(0x18)
	bool bNeedRebootButNot; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	int32_t LastChoosedVoiceLangID; // 0x324(0x04)
	struct FString CachedNetworkErrorString; // 0x328(0x10)
	struct USolarOperationUIElement* CachedDefaultOperationLayout; // 0x338(0x08)
	bool bBaseManagersInit; // 0x340(0x01)
	bool bGameManagersInit; // 0x341(0x01)
	bool bLuaManagersInit; // 0x342(0x01)
	char pad_343[0x5]; // 0x343(0x05)
	struct FMulticastInlineDelegate OnBaseManagersInit; // 0x348(0x10)
	struct FMulticastInlineDelegate OnGameManagersInit; // 0x358(0x10)
	struct FMulticastInlineDelegate OnLuaManagersInit; // 0x368(0x10)
	char pad_378[0x178]; // 0x378(0x178)
	struct UGameArgs* GameArgsManager; // 0x4f0(0x08)
	struct UUIManager* UIManager; // 0x4f8(0x08)
	struct UUINavigationManager* UINavigationManager; // 0x500(0x08)
	struct USolarInputMappingManager* SolarInputMappingManager; // 0x508(0x08)
	struct USolarTimerManager* SolarTimerManager; // 0x510(0x08)
	struct USolarMainPlayerModel* MainPlayerModel; // 0x518(0x08)
	struct USolarGameConfigManager* GameConfigManager; // 0x520(0x08)
	struct UBattlePassConfigInfo* BattlePassConfigInfo; // 0x528(0x08)
	struct USolarLuaHelper* SolarLuaHelper; // 0x530(0x08)
	struct USolarAnoHelper* SolarAnoHelper; // 0x538(0x08)
	struct USolarTableManager* SolarTableManager; // 0x540(0x08)
	struct USolarTcpNetworkManager* SolarTcpNetworkManager; // 0x548(0x08)
	struct USolarUDPManager* SolarUDPManager; // 0x550(0x08)
	struct USolarAssetManager* SolarAssetManager; // 0x558(0x08)
	struct USolarItemManager* SolarItemManager; // 0x560(0x08)
	struct USolarInteractableManager* SolarInteractableManager; // 0x568(0x08)
	struct USolarPlatformHelper* SolarPlatformHelper; // 0x570(0x08)
	struct USolarMapManager* SolarMapManager; // 0x578(0x08)
	struct UWeaponGrowthManager* WeaponGrowthManager; // 0x580(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x588(0x08)
	struct UIMChatObject* SolarIMChatObject; // 0x590(0x08)
	struct USolarLuaManager* SolarLuaManager; // 0x598(0x08)
	struct USolarGameStatistics* SolarGameStatistics; // 0x5a0(0x08)
	struct USolarWeaponMergeMeshManager* WeaponMergeMeshManager; // 0x5a8(0x08)
	struct UCrashReportManager* CrashReportManager; // 0x5b0(0x08)
	struct USolarPopPanelManager* SolarPopPanelManager; // 0x5b8(0x08)
	struct USolarApplicationLifetimeManager* SolarApplicationLifetimeManager; // 0x5c0(0x08)
	struct USolarHomeActorManager* SolarHomeActorManager; // 0x5c8(0x08)
	struct USolarGameplayLogger* SolarGameplayLoggger; // 0x5d0(0x08)
	struct USolarAttributeSubSystem* SolarAttributeSubSystem; // 0x5d8(0x08)
	struct USCustomizedGameModeManager* CustomizedGameManager; // 0x5e0(0x08)
	struct USolarRedHintManager* SolarRedHintMgr; // 0x5e8(0x08)
	struct USolarGameModeSelectionManager* SolarGameModeSelectionMgr; // 0x5f0(0x08)
	struct USolarPingFpsManager* SolarPingFpsMgr; // 0x5f8(0x08)
	struct USolarGameUserSettingsMgr* SolarGameUserSettingsMgr; // 0x600(0x08)
	struct USolarLoginManager* SolarLoginManager; // 0x608(0x08)
	struct USolarLockSettingsMgr* SolarLockSettingsMgr; // 0x610(0x08)
	struct USolarGameProgressManager* SolarGameProgressMgr; // 0x618(0x08)
	struct USolarABTestManager* SolarABTestManager; // 0x620(0x08)
	struct USolarHttpManager* SolarHttpManager; // 0x628(0x08)
	struct USolarActivityManager* SolarActivityManager; // 0x630(0x08)
	struct USolarTutorialManager* SolarTutorialManager; // 0x638(0x08)
	struct USolarVibrateManager* SolarVibrateManager; // 0x640(0x08)
	struct USolarReplayManager* SolarReplayManager; // 0x648(0x08)
	struct USolarSaveGame* SolarSaveGame; // 0x650(0x08)
	struct TSoftClassPtr<UObject> SettlementManagerClass; // 0x658(0x28)
	struct USettlementStageManager* SettlementManager; // 0x680(0x08)
	struct UCGMCrossLevelDataMgr* CrossLevelDataMgr; // 0x688(0x08)
	char pad_690[0x18]; // 0x690(0x18)
	struct TSoftClassPtr<UObject> SolarGraphicSettingsClass; // 0x6a8(0x28)
	struct USolarAccessLuaDataUtils* LuaDataAccessUtils; // 0x6d0(0x08)
	struct USolarAkSoundManager* SolarAkSoundManager; // 0x6d8(0x08)
	bool bIsDedicatedServerStressTest; // 0x6e0(0x01)
	char pad_6E1[0x7]; // 0x6e1(0x07)
	struct UKeyMappingManager* KeyMappingManager; // 0x6e8(0x08)
	struct USolarEasyAntiCheatManager* SolarEasyAntiCheatManager; // 0x6f0(0x08)
	struct USolarSpecialEffectsMgr* SolarSpecialEffectsManager; // 0x6f8(0x08)
	struct UPakHashManager* SolarPakHashManager; // 0x700(0x08)
	struct USolarFontManager* SolarFontManager; // 0x708(0x08)
	struct USolarGraphicSettings* SolarGraphicSettings; // 0x710(0x08)
	struct UAndroidInputManager* AndroidInputManager; // 0x718(0x08)
	char pad_720[0x10]; // 0x720(0x10)
	struct FMulticastInlineDelegate OnPatchComplete; // 0x730(0x10)
	struct FMulticastInlineDelegate OnTouchInputDelegate; // 0x740(0x10)
	struct FRegistedActorContainer CachedRegistedActors; // 0x750(0x50)
	char pad_7A0[0x18]; // 0x7a0(0x18)
	bool IsHotPatched; // 0x7b8(0x01)
	char pad_7B9[0x3]; // 0x7b9(0x03)
	bool bCheatedInGame; // 0x7bc(0x01)
	char pad_7BD[0x3]; // 0x7bd(0x03)
	struct FText KickOutReason; // 0x7c0(0x18)
	struct FMulticastInlineDelegate OnSsmDSGetConfigSuccess; // 0x7d8(0x10)
	struct TArray<struct FAntiCheatSetting> AntiCheatSettings; // 0x7e8(0x10)

	void UpdateAntiCheatSetting(); // Function Solarland.SolarGameInstanceBase.UpdateAntiCheatSetting // (Final|Native|Public) // @ game+0x1d50e20
	void SolarGm_UploadLogFile(); // Function Solarland.SolarGameInstanceBase.SolarGm_UploadLogFile // (Final|Exec|Native|Public) // @ game+0x8ba190
	void SolarGM_Tut(struct FString Cmd, struct TArray<struct FString>& Args); // Function Solarland.SolarGameInstanceBase.SolarGM_Tut // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d507e0
	void SolarGM_TriggerSteamAntiCheat(int32_t ActionReason, struct FString ActionDetials); // Function Solarland.SolarGameInstanceBase.SolarGM_TriggerSteamAntiCheat // (Final|Exec|Native|Public) // @ game+0x1d50700
	void SolarGM_TransmitGMLua(struct FString playerName, struct TArray<struct FString>& GmArray); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGMLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_TransmitGM(struct FString playerName, struct TArray<struct FString>& transmitGm); // Function Solarland.SolarGameInstanceBase.SolarGM_TransmitGM // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d505e0
	void SolarGm_SwitchFastFont(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_SwitchFastFont // (Final|Exec|Native|Public) // @ game+0x1d50d90
	void SolarGm_StopRecordingRePlay(); // Function Solarland.SolarGameInstanceBase.SolarGm_StopRecordingRePlay // (Final|Exec|Native|Public) // @ game+0x1d50d70
	void SolarGm_StopPlayingReplay(); // Function Solarland.SolarGameInstanceBase.SolarGm_StopPlayingReplay // (Final|Exec|Native|Public) // @ game+0x1d50d50
	void SolarGm_StartRecordingLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGm_StartRecordingLocalReplay // (Final|Exec|Native|Public) // @ game+0x1d50cb0
	void SolarGM_SetQuality(int32_t InQuality); // Function Solarland.SolarGameInstanceBase.SolarGM_SetQuality // (Final|Exec|Native|Public) // @ game+0x1d50560
	void SolarGm_RequestReplayList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarGameInstanceBase.SolarGm_RequestReplayList // (Final|Exec|Native|Public) // @ game+0x1d50bf0
	void SolarGm_RequestPlayReplayByIdx(uint32_t Index); // Function Solarland.SolarGameInstanceBase.SolarGm_RequestPlayReplayByIdx // (Final|Exec|Native|Public) // @ game+0x1d50b70
	void SolarGm_RequestPlayReplayByBattleID(struct FString BattleID, bool IsLive); // Function Solarland.SolarGameInstanceBase.SolarGm_RequestPlayReplayByBattleID // (Final|Exec|Native|Public) // @ game+0x1d50a90
	void SolarGm_RequestPlayReplay(struct FString BattleID, struct FString DownloadUrl); // Function Solarland.SolarGameInstanceBase.SolarGm_RequestPlayReplay // (Final|Exec|Native|Public) // @ game+0x1d509a0
	void SolarGm_PlayLocalReplay(struct FString Filename); // Function Solarland.SolarGameInstanceBase.SolarGm_PlayLocalReplay // (Final|Exec|Native|Public) // @ game+0x1d50900
	void SolarGM_LobbyLua(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_LobbyLua // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_Lobby(struct FString CmdName, struct TArray<struct FString>& Params); // Function Solarland.SolarGameInstanceBase.SolarGM_Lobby // (Final|Exec|Native|Public|HasOutParms) // @ game+0x1d50440
	void SolarGM_GoHome(); // Function Solarland.SolarGameInstanceBase.SolarGM_GoHome // (Final|Exec|Native|Public) // @ game+0x1d50420
	void SolarGm_EnableLuaCallStackProfile(bool bIsEnable); // Function Solarland.SolarGameInstanceBase.SolarGm_EnableLuaCallStackProfile // (Final|Exec|Native|Public) // @ game+0x1c89360
	void SolarGM_AddWeaponExpLua(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExpLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_AddWeaponExp(int32_t weaponid, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddWeaponExp // (Final|Exec|Native|Public) // @ game+0x1d50360
	void SolarGM_AddItemLua(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItemLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SolarGM_AddItem(int32_t ItemID, int32_t count); // Function Solarland.SolarGameInstanceBase.SolarGM_AddItem // (Final|Exec|Native|Public) // @ game+0x1d502a0
	void ShutDownLimSdk(); // Function Solarland.SolarGameInstanceBase.ShutDownLimSdk // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ShutdownAnoSDK(); // Function Solarland.SolarGameInstanceBase.ShutdownAnoSDK // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SetIsFirstLaunch(bool bIsFirst); // Function Solarland.SolarGameInstanceBase.SetIsFirstLaunch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d50210
	void SetCleanUpfile(bool bCleanCache); // Function Solarland.SolarGameInstanceBase.SetCleanUpfile // (Final|Native|Public|BlueprintCallable) // @ game+0x1d50180
	bool ServerTravel(struct FString Map, int32_t ListenPort, bool bSpectator, bool bSkipGameNotify, struct FString options); // Function Solarland.SolarGameInstanceBase.ServerTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4ffd0
	void SaveGame(); // Function Solarland.SolarGameInstanceBase.SaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4ffb0
	void RequestShutDown(struct FString Reason); // Function Solarland.SolarGameInstanceBase.RequestShutDown // (Final|Exec|Native|Public) // @ game+0x1d4ff10
	void ReportLoadingInfoToBI(struct TArray<struct FString>& LoadingInfo, float LoadingTime, bool bIsFinished); // Function Solarland.SolarGameInstanceBase.ReportLoadingInfoToBI // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void RegisterNetworkManager(); // Function Solarland.SolarGameInstanceBase.RegisterNetworkManager // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnStartBattle(struct FString BattleID); // Function Solarland.SolarGameInstanceBase.OnStartBattle // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fe70
	void OnSsmDSGetConfigSuccess__DelegateSignature(); // DelegateFunction Solarland.SolarGameInstanceBase.OnSsmDSGetConfigSuccess__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnManagersInitialized__DelegateSignature(); // DelegateFunction Solarland.SolarGameInstanceBase.OnManagersInitialized__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnHotPatchComplete(); // Function Solarland.SolarGameInstanceBase.OnHotPatchComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fe50
	void OnDisconnect(); // Function Solarland.SolarGameInstanceBase.OnDisconnect // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaStartGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaStartGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void LuaInitGameFrameWork(); // Function Solarland.SolarGameInstanceBase.LuaInitGameFrameWork // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsStandalone(); // Function Solarland.SolarGameInstanceBase.IsStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fe20
	bool IsSolarServer(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.IsSolarServer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d4fda0
	bool IsSkipLogin(); // Function Solarland.SolarGameInstanceBase.IsSkipLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fd70
	bool IsServerOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsServerOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fd40
	bool IsListenServer(); // Function Solarland.SolarGameInstanceBase.IsListenServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fd10
	bool IsGIsEditor(); // Function Solarland.SolarGameInstanceBase.IsGIsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d147e0
	bool IsFirstLaunchAfterVersionUpdate(); // Function Solarland.SolarGameInstanceBase.IsFirstLaunchAfterVersionUpdate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fcf0
	bool IsEditor(); // Function Solarland.SolarGameInstanceBase.IsEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d147e0
	bool IsDedicatedServerStressTest(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServerStressTest // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fcd0
	bool IsDedicatedServer(); // Function Solarland.SolarGameInstanceBase.IsDedicatedServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fca0
	bool IsClientOrStandalone(); // Function Solarland.SolarGameInstanceBase.IsClientOrStandalone // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fc70
	bool IsClient(); // Function Solarland.SolarGameInstanceBase.IsClient // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fc40
	void InitLuaClasses(); // Function Solarland.SolarGameInstanceBase.InitLuaClasses // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitGameManagers(); // Function Solarland.SolarGameInstanceBase.InitGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4fc20
	bool IfUseSteamSDKLogin(); // Function Solarland.SolarGameInstanceBase.IfUseSteamSDKLogin // (Final|Native|Public) // @ game+0x1d4fbf0
	bool HasCommandlineParam(struct FString Param); // Function Solarland.SolarGameInstanceBase.HasCommandlineParam // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4fb40
	void GoHomeLuaCall(); // Function Solarland.SolarGameInstanceBase.GoHomeLuaCall // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USolarWeaponMergeMeshManager* GetWeaponMergeMeshManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponMergeMeshManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fb10
	struct UWeaponGrowthManager* GetWeaponGrowthManager(); // Function Solarland.SolarGameInstanceBase.GetWeaponGrowthManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1499bf0
	struct UUINavigationManager* GetUINavigationManager(); // Function Solarland.SolarGameInstanceBase.GetUINavigationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fae0
	struct USolarVibrateManager* GetSolarVibrateManager(); // Function Solarland.SolarGameInstanceBase.GetSolarVibrateManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fab0
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTutorialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fa80
	struct USolarTimerManager* GetSolarTimerManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTimerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fa50
	struct USolarTcpNetworkManager* GetSolarTcpNetworkManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTcpNetworkManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4fa20
	struct USolarTableManager* GetSolarTableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarTableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f9f0
	struct USolarSaveGame* GetSolarSaveGame(); // Function Solarland.SolarGameInstanceBase.GetSolarSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f9c0
	struct USolarReplayManager* GetSolarReplayManager(); // Function Solarland.SolarGameInstanceBase.GetSolarReplayManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f990
	struct USolarRedHintManager* GetSolarRedHintManager(); // Function Solarland.SolarGameInstanceBase.GetSolarRedHintManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f960
	struct USolarPopPanelManager* GetSolarPopPanelManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPopPanelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f930
	struct USolarPlatformHelper* GetSolarPlatformHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarPlatformHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f900
	struct USolarPingFpsManager* GetSolarPingFpsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarPingFpsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f8d0
	struct USolarMapManager* GetSolarMapManager(); // Function Solarland.SolarGameInstanceBase.GetSolarMapManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d18e30
	struct USolarMainPlayerModel* GetSolarMainPlayerModel(); // Function Solarland.SolarGameInstanceBase.GetSolarMainPlayerModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f8a0
	struct USolarLuaManager* GetSolarLuaManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f870
	struct USolarLuaHelper* GetSolarLuaHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarLuaHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f840
	struct USolarLoginManager* GetSolarLoginManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLoginManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f820
	struct USolarLockSettingsMgr* GetSolarLockSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarLockSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f7f0
	struct USolarItemManager* GetSolarItemManager(); // Function Solarland.SolarGameInstanceBase.GetSolarItemManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f7c0
	struct USolarInteractableManager* GetSolarInteractableManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInteractableManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f790
	struct USolarInputMappingManager* GetSolarInputMappingManager(); // Function Solarland.SolarGameInstanceBase.GetSolarInputMappingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f760
	struct UIMChatObject* GetSolarIMChatObject(); // Function Solarland.SolarGameInstanceBase.GetSolarIMChatObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f730
	struct USolarHttpManager* GetSolarHttpManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHttpManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f710
	struct USolarHomeActorManager* GetSolarHomeActorManager(); // Function Solarland.SolarGameInstanceBase.GetSolarHomeActorManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f6e0
	struct USolarGameUserSettingsMgr* GetSolarGameUserSettingsManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameUserSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f680
	struct USolarGameplayLogger* GetSolarGameplayLogger(); // Function Solarland.SolarGameInstanceBase.GetSolarGameplayLogger // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f6b0
	struct USolarGameModeSelectionManager* GetSolarGameModeSelectionManager(); // Function Solarland.SolarGameInstanceBase.GetSolarGameModeSelectionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f650
	struct USolarGameInstanceBase* GetSolarGameInstanceBase(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarGameInstanceBase // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d4f5d0
	struct USolarEasyAntiCheatManager* GetSolarEasyAntiCheatManager(); // Function Solarland.SolarGameInstanceBase.GetSolarEasyAntiCheatManager // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f5a0
	struct USolarAnoHelper* GetSolarAnoHelperStatic(struct UObject* WorldContextObject); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelperStatic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d4f520
	struct USolarAnoHelper* GetSolarAnoHelper(); // Function Solarland.SolarGameInstanceBase.GetSolarAnoHelper // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f4f0
	struct USolarAkSoundManager* GetSolarAkSoundManager(); // Function Solarland.SolarGameInstanceBase.GetSolarAkSoundManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f4d0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarGameInstanceBase.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f4a0
	struct USolarActivityManager* GetSolarActivityManager(); // Function Solarland.SolarGameInstanceBase.GetSolarActivityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f480
	struct USolarABTestManager* GetSolarABTestManager(); // Function Solarland.SolarGameInstanceBase.GetSolarABTestManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f460
	struct USettlementStageManager* GetSettlementStageManager(); // Function Solarland.SolarGameInstanceBase.GetSettlementStageManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f440
	enum class ESolarPlayStage GetPlayStage(); // Function Solarland.SolarGameInstanceBase.GetPlayStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f3f0
	struct ASolarCharacter* GetPlayerCharacter(); // Function Solarland.SolarGameInstanceBase.GetPlayerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f410
	struct FString GetPIEServerURL(); // Function Solarland.SolarGameInstanceBase.GetPIEServerURL // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f370
	int32_t GetPIEInstance(); // Function Solarland.SolarGameInstanceBase.GetPIEInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f340
	struct FString GetNetModeString(); // Function Solarland.SolarGameInstanceBase.GetNetModeString // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f2c0
	enum class ESolarNetMode GetNetMode(); // Function Solarland.SolarGameInstanceBase.GetNetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f290
	struct UKeyMappingManager* GetKeyMappingManager(); // Function Solarland.SolarGameInstanceBase.GetKeyMappingManager // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f260
	bool GetIsMutiPlayer(); // Function Solarland.SolarGameInstanceBase.GetIsMutiPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f230
	struct USolarGameStatistics* GetGameStatistics(); // Function Solarland.SolarGameInstanceBase.GetGameStatistics // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f200
	struct USolarGameConfigManager* GetGameConfigManager(); // Function Solarland.SolarGameInstanceBase.GetGameConfigManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f1d0
	struct USolarOperationUIElement* GetDefaultOperationLayout(); // Function Solarland.SolarGameInstanceBase.GetDefaultOperationLayout // (Final|Native|Public) // @ game+0x1d4f1a0
	struct USCustomizedGameModeManager* GetCustomizedGameManager(); // Function Solarland.SolarGameInstanceBase.GetCustomizedGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f170
	struct UCGMCrossLevelDataMgr* GetCrossLevelDataMgr(); // Function Solarland.SolarGameInstanceBase.GetCrossLevelDataMgr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f150
	struct UCrashReportManager* GetCrashReportManager(); // Function Solarland.SolarGameInstanceBase.GetCrashReportManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4f120
	int32_t GetClientNumber(); // Function Solarland.SolarGameInstanceBase.GetClientNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4f0f0
	void GetCategorizedActorsOfType(struct UObject* WorldContextObject, enum class EActorRegisterType InActorType, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsOfType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d4efd0
	void GetCategorizedActorsByBits(struct UObject* WorldContextObject, char InActorBit, struct TArray<struct AActor*>& OutActors); // Function Solarland.SolarGameInstanceBase.GetCategorizedActorsByBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d4eeb0
	struct UBattlePassConfigInfo* GetBattlePassConfigInfo(); // Function Solarland.SolarGameInstanceBase.GetBattlePassConfigInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4ee80
	struct USolarAssetManager* GetAssetManager(); // Function Solarland.SolarGameInstanceBase.GetAssetManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d4ee50
	int64_t GetAppActiveTimestampInterval(); // Function Solarland.SolarGameInstanceBase.GetAppActiveTimestampInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4ee20
	void ExecuteCommandArray(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarGameInstanceBase.ExecuteCommandArray // (Final|Native|Public|HasOutParms) // @ game+0x1d4ed50
	void ExecuteCommand(struct FString Cmd); // Function Solarland.SolarGameInstanceBase.ExecuteCommand // (Final|Native|Public) // @ game+0x1d4ecb0
	void ExecuteBackKeyLuaCall(); // Function Solarland.SolarGameInstanceBase.ExecuteBackKeyLuaCall // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ExecGameArgs(struct FString Args, struct FString& FailReason, enum class EBoolean& Branches); // Function Solarland.SolarGameInstanceBase.ExecGameArgs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d4eb50
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, int32_t FGuid_A, int32_t FGuid_B, int32_t FGuid_C, int32_t FGuid_D); // Function Solarland.SolarGameInstanceBase.ClientTravel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4e940
	void ClearGameManagers(); // Function Solarland.SolarGameInstanceBase.ClearGameManagers // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d4e920
	void CheckSavedDirFiles(struct TArray<struct FString>& Files); // Function Solarland.SolarGameInstanceBase.CheckSavedDirFiles // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void Browse(struct FString URL, enum class ETravelType TravelType); // Function Solarland.SolarGameInstanceBase.Browse // (Final|Native|Public|BlueprintCallable) // @ game+0x1d4e840
};

// Class Solarland.SolarGameMode_Assist
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_Assist : UActorComponent {

	void OnAssist(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* AssistCharacter, struct ASolarCharacter* KilledCharacter, struct FSolarPointDamageEvent DamageEvent); // Function Solarland.SolarGameMode_Assist.OnAssist // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_CommonLogic
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_CommonLogic : UActorComponent {

	void OnUpdateViewportFocusedCharacter(); // Function Solarland.SolarGameMode_CommonLogic.OnUpdateViewportFocusedCharacter // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_Die
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_Die : UActorComponent {

	void OnDeathSpectateEnd(); // Function Solarland.SolarGameMode_Die.OnDeathSpectateEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCharacterDieByPlayer(struct ASolarCharacter* BindCharacter, struct ASolarPlayerController* KillerPlayer, struct ASolarCharacter* KillerCharacter, struct FSolarPointDamageEvent DamageEvent, float Damage, bool IsDyingDeath); // Function Solarland.SolarGameMode_Die.OnCharacterDieByPlayer // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCharacterDieByElement(struct ASolarCharacter* BindCharacter, struct ASolarMapElementBase* KillerElement, struct FSolarPointDamageEvent DamageEvent, float Damage, bool IsDyingDeath); // Function Solarland.SolarGameMode_Die.OnCharacterDieByElement // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsSupportHandleDying(); // Function Solarland.SolarGameMode_Die.IsSupportHandleDying // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1d54ae0
	bool IsSpawnDeathBox(); // Function Solarland.SolarGameMode_Die.IsSpawnDeathBox // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1d54ab0
	bool CanRebirth(); // Function Solarland.SolarGameMode_Die.CanRebirth // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x1d549d0
};

// Class Solarland.SolarGameMode_GetHitComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_GetHitComponent : UActorComponent {

	void OnGetHitByWeapon(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByVhicleExplosion(struct ASolarCharacter* HostCharacter, struct APawn* CasuerCharacter, struct FString HitBoneName, struct FVhicleExplosionDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByVhicleExplosion // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByVehicleWeapon(struct ASolarCharacter* HostCharacter, struct APawn* CasuerCharacter, struct FString HitBoneName, struct FVehicleWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByVehicleWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByVehicleHit(struct ASolarCharacter* HostCharacter, struct APawn* CasuerCharacter, struct FString HitBoneName, struct FVehicleHitDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByVehicleHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByUnarm(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FUnarmWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByUnarm // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitBySystem(struct ASolarCharacter* HostActor, struct AActor* CasuerCharacter, struct FString HitBoneName, struct FSolarSystemDamage& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitBySystem // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitBySummonWeapon(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSummonWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitBySummonWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByPoison(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarPoisonDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByPoison // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByPoint(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByPoint // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByDying(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FDyingDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByDying // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByBomb(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarBombDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByBomb // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHitByAirDrop(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarAirDropDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHitByAirDrop // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnGetHit(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* CasuerCharacter, struct FString HitBoneName, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_GetHitComponent.OnGetHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_HandleElementRPC
// Size: 0xb8 (Inherited: 0xb0)
struct USolarGameMode_HandleElementRPC : UActorComponent {
	struct FName ComponentTagName; // 0xb0(0x08)

	void OnRep_ComponentName(); // Function Solarland.SolarGameMode_HandleElementRPC.OnRep_ComponentName // (Final|Native|Public) // @ game+0x1d54ce0
};

// Class Solarland.SolarGameMode_JobDeploy
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_JobDeploy : UActorComponent {

	void OnCharacterDeploy(struct ASolarPlayerController* PlayerController, struct ASolarCharacter* Character, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, struct APlayerStart* SpawnPoint, struct FTransform SpawnPosition); // Function Solarland.SolarGameMode_JobDeploy.OnCharacterDeploy // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_JobEventHitComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_JobEventHitComponent : UActorComponent {

	void OnHitTarget(struct APawn* HostPawn, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarPointDamageEvent& DamageEvent, float Damage); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitTarget // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByWeapon(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByVhicleExplosion(struct APawn* HostPawn, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FVhicleExplosionDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByVhicleExplosion // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByVehicleWeapon(struct APawn* HostPawn, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FVehicleWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByVehicleWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByVehicle(struct APawn* HostPawn, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FVehicleHitDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByVehicle // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByUnarm(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FUnarmWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByUnarm // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitBySystem(struct AActor* HostActor, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarSystemDamage& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitBySystem // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitBySummonWeapon(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSummonWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitBySummonWeapon // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByPoison(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarPoisonDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByPoison // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByPoint(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByPoint // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByDying(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FDyingDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByDying // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByBomb(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarBombDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByBomb // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHitByAirDrop(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarAirDropDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHitByAirDrop // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnHit(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* HitCharacter, struct FString HitBoneName, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameMode_JobEventHitComponent.OnHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_LogicComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_LogicComponent : UActorComponent {

	void OnPlayerQuit(struct USGameMode_Player* QuitPlayer); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerQuit // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerPlacedFinished(struct USGameMode_Player* Player, struct FString LevelName); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerPlacedFinished // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerOfflineTimeOut(struct USGameMode_Player* OfflineTimeoutPlayer); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerOfflineTimeOut // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerLevelLoaded(struct USGameMode_Player* Player, struct FString LevelName); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerLevelLoaded // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerJoin(struct USGameMode_Player* NewPlayer); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerJoin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerJobChange(struct USGameMode_Player* Player, struct FString OldSide, struct FString OldJob, struct FString NewSide, struct FString NewJob); // Function Solarland.SolarGameMode_LogicComponent.OnPlayerJobChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnOpenSupplement(); // Function Solarland.SolarGameMode_LogicComponent.OnOpenSupplement // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnMatchEnd(int32_t RPCID); // Function Solarland.SolarGameMode_LogicComponent.OnMatchEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnGameModeInit(); // Function Solarland.SolarGameMode_LogicComponent.OnGameModeInit // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCloseSupplement(); // Function Solarland.SolarGameMode_LogicComponent.OnCloseSupplement // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBotAIDataReady(); // Function Solarland.SolarGameMode_LogicComponent.OnBotAIDataReady // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBattleTick(float BattleTime); // Function Solarland.SolarGameMode_LogicComponent.OnBattleTick // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBattleBegin(); // Function Solarland.SolarGameMode_LogicComponent.OnBattleBegin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_RewardComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_RewardComponent : UActorComponent {

	void OnPlayerOut(struct USGameMode_Player* Player, enum class ESolarGameMode_PlayerOutType PlayerOutType); // Function Solarland.SolarGameMode_RewardComponent.OnPlayerOut // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ClientOnPlayerOut(struct USGameMode_Player* Player, enum class ESolarGameMode_PlayerOutType PlayerOutType); // Function Solarland.SolarGameMode_RewardComponent.ClientOnPlayerOut // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_SlayComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarGameMode_SlayComponent : UActorComponent {

	void OnSlay(struct ASolarCharacter* HostCharacter, struct ASolarCharacter* KilledCharacter, struct FSolarPointDamageEvent DamageEvent, float Damage); // Function Solarland.SolarGameMode_SlayComponent.OnSlay // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRecordKillNum(struct ASolarCharacter* KillerCharacter, struct ASolarCharacter* KilledCharacter); // Function Solarland.SolarGameMode_SlayComponent.OnRecordKillNum // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarGameMode_CharacterManager
// Size: 0x40 (Inherited: 0x28)
struct USolarGameMode_CharacterManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarCharacter*> Characters; // 0x30(0x10)

	void PlaceCharacterAtStart(struct ASolarCharacter* Character, struct APlayerStart* PlayerStart, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons); // Function Solarland.SolarGameMode_CharacterManager.PlaceCharacterAtStart // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d5b640
	void PlaceCharacterAtLocation(struct ASolarCharacter* Character, struct FVector& Location); // Function Solarland.SolarGameMode_CharacterManager.PlaceCharacterAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d5b580
};

// Class Solarland.SGameMode_ModeConfig
// Size: 0x1d8 (Inherited: 0x30)
struct USGameMode_ModeConfig : UDataAsset {
	struct FSoftObjectPath BP_Mode; // 0x30(0x18)
	struct FSoftObjectPath BP_Reward; // 0x48(0x18)
	struct FSoftObjectPath RewardMap; // 0x60(0x18)
	struct FSoftObjectPath JobStructure; // 0x78(0x18)
	struct FSoftObjectPath DataStructure; // 0x90(0x18)
	struct FSoftObjectPath AttributeModifier; // 0xa8(0x18)
	struct FSoftObjectPath WellEffectJobRelationTable; // 0xc0(0x18)
	struct FSoftObjectPath BadEffectJobRelationTable; // 0xd8(0x18)
	struct FString UIConfig; // 0xf0(0x10)
	struct FSCustomMode_GameModeSetting GameModeSetting; // 0x100(0x68)
	struct TArray<struct FSGameMode_LevelConfig> Levels; // 0x168(0x10)
	struct TMap<struct FString, struct FString> Arguments; // 0x178(0x50)
	bool bDestroyItemOnDiscard; // 0x1c8(0x01)
	bool bDestroyWeaponOnDiscard; // 0x1c9(0x01)
	char pad_1CA[0x2]; // 0x1ca(0x02)
	float AllowJoinBattleLifeTime; // 0x1cc(0x04)
	bool bAllowJoinAITeammate; // 0x1d0(0x01)
	bool bConsiderPotentialPlayerWhenSpawnAI; // 0x1d1(0x01)
	char pad_1D2[0x6]; // 0x1d2(0x06)
};

// Class Solarland.SGameMode_EditorSaveData
// Size: 0x38 (Inherited: 0x28)
struct USGameMode_EditorSaveData : USaveGame {
	struct FString ConfigPath; // 0x28(0x10)
};

// Class Solarland.SolarGameModeData
// Size: 0xf8 (Inherited: 0x28)
struct USolarGameModeData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t GameModeID; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct USGameMode_ModeConfig* CurrentModeData; // 0x38(0x08)
	struct FString ModeConfigPath; // 0x40(0x10)
	struct FString ModeParamsStr; // 0x50(0x10)
	struct UDataTable* JobDataTable; // 0x60(0x08)
	struct UDataTable* BoardDataTable; // 0x68(0x08)
	struct UDataTable* AttributeDataTable; // 0x70(0x08)
	char pad_78[0x30]; // 0x78(0x30)
	struct TMap<struct FString, struct FString> ModeParams; // 0xa8(0x50)

	void ReadConfigData(); // Function Solarland.SolarGameModeData.ReadConfigData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void InitModeParams(struct FString ParamStr); // Function Solarland.SolarGameModeData.InitModeParams // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SidesOperationAuthorityConfig
// Size: 0x80 (Inherited: 0x30)
struct USidesOperationAuthorityConfig : UDataAsset {
	struct TMap<struct FString, bool> OperationAuthority; // 0x30(0x50)

	bool GetOperationAuthority(struct FString SelfSide, struct FString OtherSide); // Function Solarland.SidesOperationAuthorityConfig.GetOperationAuthority // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1d5af00
};

// Class Solarland.SolarGameMode_RankManager
// Size: 0xf0 (Inherited: 0x28)
struct USolarGameMode_RankManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FSolarGameMode_RankData> NewRanking; // 0x30(0x10)
	struct TArray<struct FSolarGameMode_RankData> OldRanking; // 0x40(0x10)
	struct TMap<struct FString, struct FSolarGameMode_RankDataMap> RankObjectList; // 0x50(0x50)
	char pad_A0[0x50]; // 0xa0(0x50)

	void RemoveRangeEvent(struct FString RankDataName); // Function Solarland.SolarGameMode_RankManager.RemoveRangeEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5ba10
	void BindEvent(struct FString RankDataName, struct FDelegate Delegate); // Function Solarland.SolarGameMode_RankManager.BindEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5a320
};

// Class Solarland.SolarGameMode_CustomData
// Size: 0xe8 (Inherited: 0x28)
struct USolarGameMode_CustomData : UObject {
	char pad_28[0x78]; // 0x28(0x78)
	struct TArray<struct FString> ReadAccess; // 0xa0(0x10)
	struct TArray<struct FString> WriteAccess; // 0xb0(0x10)
	char pad_C0[0x28]; // 0xc0(0x28)

	void UnBindChangeEvent(struct UObject* TargetObject); // Function Solarland.SolarGameMode_CustomData.UnBindChangeEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d5bc90
	void GetVector3(struct FString Tag, bool bDefaultData, struct FVector& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetVector3 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d5b330
	void GetVector2(struct FString Tag, bool bDefaultData, struct FVector2D& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetVector2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d5b180
	void GetString(struct FString Tag, bool bDefaultData, struct FString& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetString // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d5b000
	void GetObject(struct FString Tag, bool bDefaultData, struct UObject*& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetObject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d5ad70
	void GetInt(struct FString Tag, bool bDefaultData, int32_t& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d5abe0
	void GetFloat(struct FString Tag, bool bDefaultData, float& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d5aa30
	void GetBool(struct FString Tag, bool bDefaultData, bool& CurrentValue); // Function Solarland.SolarGameMode_CustomData.GetBool // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d5a6a0
};

// Class Solarland.SolarGameMode_DataAccessorBase
// Size: 0x80 (Inherited: 0x28)
struct USolarGameMode_DataAccessorBase : UObject {
	char pad_28[0x50]; // 0x28(0x50)
	struct USolarGameMode_RankManager* RankManager; // 0x78(0x08)
};

// Class Solarland.SolarGameMode_GlobalDataAccessor
// Size: 0xd0 (Inherited: 0x80)
struct USolarGameMode_GlobalDataAccessor : USolarGameMode_DataAccessorBase {
	struct TMap<struct FString, struct USolarGameMode_CustomData*> Datas; // 0x80(0x50)
};

// Class Solarland.SolarGameMode_GroupDataAccessor
// Size: 0xd0 (Inherited: 0x80)
struct USolarGameMode_GroupDataAccessor : USolarGameMode_DataAccessorBase {
	struct TMap<struct FString, struct FSolarGroupDataMap> Datas; // 0x80(0x50)
};

// Class Solarland.SolarGameMode_JobDataAccessor
// Size: 0xd0 (Inherited: 0x80)
struct USolarGameMode_JobDataAccessor : USolarGameMode_DataAccessorBase {
	struct TMap<struct FString, struct FSolarJobDataMap> Datas; // 0x80(0x50)
};

// Class Solarland.SolarGameMode_PlayerDataAccessor
// Size: 0xd0 (Inherited: 0x80)
struct USolarGameMode_PlayerDataAccessor : USolarGameMode_DataAccessorBase {
	struct TMap<struct FString, struct FSolarPlayerDataMap> Datas; // 0x80(0x50)
};

// Class Solarland.SolarGameMode_DataManager
// Size: 0xb8 (Inherited: 0x28)
struct USolarGameMode_DataManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct TMap<enum class ESolarGameModeHostType, struct USolarGameMode_DataAccessorBase*> Accessors; // 0x40(0x50)
	char pad_90[0x8]; // 0x90(0x08)
	struct USolarGameMode_JobManager* JobManager; // 0x98(0x08)
	struct ASCustomizedGameMode* CurrentGameMode; // 0xa0(0x08)
	struct USCustomizedMode_ModeDataReady* ModeDataReadyAction; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)
};

// Class Solarland.EffectJobAsset
// Size: 0x40 (Inherited: 0x30)
struct UEffectJobAsset : UDataAsset {
	struct TArray<struct FEffectJobElementList> RelationMap; // 0x30(0x10)
};

// Class Solarland.SolarGameMode_EffectJobManager
// Size: 0x190 (Inherited: 0x28)
struct USolarGameMode_EffectJobManager : UObject {
	char pad_28[0x168]; // 0x28(0x168)
};

// Class Solarland.SolarGameMode_ElementManager
// Size: 0x110 (Inherited: 0x28)
struct USolarGameMode_ElementManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarMapElementBase*> ElementsList; // 0x30(0x10)
	struct TArray<struct ASolarPlayerStart*> PlayerStartList; // 0x40(0x10)
	struct TMap<struct FName, struct USolarGameMode_HandleElementRPC*> HandleActorRPCBPs; // 0x50(0x50)
	struct TMap<struct FString, struct ASolarMapElementBase*> ElementMap; // 0xa0(0x50)
	char pad_F0[0x20]; // 0xf0(0x20)
};

// Class Solarland.GameMode_JobData
// Size: 0x180 (Inherited: 0x28)
struct UGameMode_JobData : UObject {
	struct TArray<struct USGameMode_Player*> PlayerList; // 0x28(0x10)
	struct FString Name; // 0x38(0x10)
	struct TArray<struct FString> Tags; // 0x48(0x10)
	struct FGameMode_JobManagerRow JobData; // 0x58(0x120)
	int32_t MatchCount; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
};

// Class Solarland.GameMode_SideData
// Size: 0xa0 (Inherited: 0x28)
struct UGameMode_SideData : UObject {
	struct TMap<struct FString, struct UGameMode_JobData*> JobList; // 0x28(0x50)
	struct TArray<struct USGameMode_Player*> PlayerList; // 0x78(0x10)
	struct FString Name; // 0x88(0x10)
	int32_t SideIndex; // 0x98(0x04)
	int32_t MatchCount; // 0x9c(0x04)
};

// Class Solarland.SolarGameMode_JobManager
// Size: 0xa0 (Inherited: 0x28)
struct USolarGameMode_JobManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TMap<struct FString, struct UGameMode_SideData*> SideList; // 0x38(0x50)
	struct ASCustomizedGameMode* CurrentGameMode; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct UDataTable* CurrentModeJobData; // 0x98(0x08)
};

// Class Solarland.SolarGameMode_LevelManager
// Size: 0x278 (Inherited: 0x28)
struct USolarGameMode_LevelManager : UObject {
	char pad_28[0xa0]; // 0x28(0xa0)
	struct TMap<struct FString, struct FSGameMode_LevelConfig> LevelConfigs; // 0xc8(0x50)
	struct TMap<struct FString, struct ULevelStreamingDynamic*> LevelKeyToObject; // 0x118(0x50)
	struct TSet<struct ASolarCharacter*> MovementDisabledCharacters; // 0x168(0x50)
	char pad_1B8[0x50]; // 0x1b8(0x50)
	struct TMap<struct FString, struct FElementLevelStreaming> PersistentElementLevelStreamings; // 0x208(0x50)
	struct TArray<struct FString> LoadingElementLevelNames; // 0x258(0x10)
	struct TArray<struct FString> UnLoadingElementLevelNames; // 0x268(0x10)

	void ShowTransitionUI(); // Function Solarland.SolarGameMode_LevelManager.ShowTransitionUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SetMinimapFootprintVisible(bool bVisible); // Function Solarland.SolarGameMode_LevelManager.SetMinimapFootprintVisible // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnStreamingLevelLoaded(); // Function Solarland.SolarGameMode_LevelManager.OnStreamingLevelLoaded // (Final|Native|Public) // @ game+0x1d69540
	void OnLevelLoaded(); // Function Solarland.SolarGameMode_LevelManager.OnLevelLoaded // (Final|Native|Public) // @ game+0x1d69520
	void OnElementStreamingLevelUnLoaded(); // Function Solarland.SolarGameMode_LevelManager.OnElementStreamingLevelUnLoaded // (Final|Native|Public) // @ game+0x1d69500
	void OnElementStreamingLevelLoaded(); // Function Solarland.SolarGameMode_LevelManager.OnElementStreamingLevelLoaded // (Final|Native|Public) // @ game+0x1d694e0
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarGameMode_LevelManager.OnCharacterEndPlay // (Final|Native|Private) // @ game+0x1d69420
	void HideTransitionUI(); // Function Solarland.SolarGameMode_LevelManager.HideTransitionUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarGameModeLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameModeLibrary : UObject {

	void UpdateCharacterDamageData(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.UpdateCharacterDamageData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f960
	void UnBindEventToModeDataChange(struct UObject* WorldContextObject, struct USolarGameMode_CustomData* CustomData); // Function Solarland.SolarGameModeLibrary.UnBindEventToModeDataChange // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6f8b0
	void UnBindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.UnBindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f7d0
	bool UnBindEffectJobRelationChangeEvent(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.UnBindEffectJobRelationChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f6e0
	void TakeWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f4c0
	void TakeVehicleWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVehicleWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeVehicleWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f2a0
	void TakeVehicleHitDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVehicleHitDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeVehicleHitDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6f080
	void TakeVehicleExplosionDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVhicleExplosionDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeVehicleExplosionDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6ee60
	void TakeUnarmDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FUnarmWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeUnarmDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6ec40
	void TakeSummonWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* Casuer, struct FSummonWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeSummonWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6e9d0
	void TakePoisonDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarPoisonDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakePoisonDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6e7a0
	void TakePointDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* Casuer, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakePointDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6e590
	void TakeDyingDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* Casuer, struct FDyingDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeDyingDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6e360
	void TakeBombDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarBombDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.TakeBombDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6e130
	void SwitchWeapon(struct ASolarCharacter* TargetPlayer, enum class EWeaponSlotType InWeaponSlot); // Function Solarland.SolarGameModeLibrary.SwitchWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6e080
	void StopLoadingScreen(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.StopLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d6e010
	void StaticCastAbility(struct AActor* SourceActor, struct ASolarCharacter* TargetActor, struct ASolarAbility* Ability, bool ValidSourceLocation, struct FVector& SourceLocation, struct FVector& HitLocation, struct FName& HitBoneName, float Scale, struct FString InExtraInfo); // Function Solarland.SolarGameModeLibrary.StaticCastAbility // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6dd40
	struct ULoadingWidgetBase* StartLoadingScreen(struct UObject* WorldContextObject, struct ULoadingWidgetBase* LoadingScreenClass); // Function Solarland.SolarGameModeLibrary.StartLoadingScreen // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x1d6dc80
	void StartBattle(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.StartBattle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6dc10
	void SpawnItemAtTransform(struct UObject* WorldContextObject, int32_t ItemID, int32_t ItemNum, struct FTransform& trans); // Function Solarland.SolarGameModeLibrary.SpawnItemAtTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6da90
	void SolarButtonCallReleased(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6da20
	void SolarButtonCallPressed(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6d9b0
	void SolarButtonCallClick(struct USolarButton* Button); // Function Solarland.SolarGameModeLibrary.SolarButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6d940
	void SolarApplyDamage(struct APawn* HitPawn, float DamageTaken, struct FSolarPointDamageEvent& DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.SolarApplyDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6d770
	void ShowWidget(struct UObject* WorldContextObject, struct USolarUserWidget* WidgetClass, struct USolarUserWidget*& OutWidget, enum class EUIRoot UILayer); // Function Solarland.SolarGameModeLibrary.ShowWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6d620
	void ShowWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.ShowWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6d5b0
	void ShowNoticeWithoutLocalization(struct UObject* WorldContextObject, struct TArray<struct ASolarCharacter*>& Targets, struct UUINoticeBase* InNoticeClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarGameModeLibrary.ShowNoticeWithoutLocalization // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6d380
	void ShowNoticeWithLocalization(struct UObject* WorldContextObject, struct TArray<struct ASolarCharacter*>& Targets, int32_t NoticeId); // Function Solarland.SolarGameModeLibrary.ShowNoticeWithLocalization // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6d260
	void ShowNoticeOnLocalWithoutLocalization(struct UObject* WorldContextObject, struct UUINoticeBase* InNoticeClass, float InTime, struct FString InText, struct UObject* InIcon, int32_t InNoticeColor); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithoutLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6d090
	void ShowNoticeOnLocalWithLocalization(struct UObject* WorldContextObject, int32_t NoticeId); // Function Solarland.SolarGameModeLibrary.ShowNoticeOnLocalWithLocalization // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6cfe0
	void ShowDeathNotice(struct UObject* WorldContextObject, struct ASolarPlayerController* InKillerPlayer, struct ASolarCharacter* InKilledPawn, struct FSolarPointDamageEvent DamageEvent, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ShowDeathNotice // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6cca0
	void SetupBotDifficulty(struct UObject* WorldContextObject, struct TArray<struct USGameMode_Player*>& BotPlayers, int32_t Difficulty); // Function Solarland.SolarGameModeLibrary.SetupBotDifficulty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6cb80
	void SetModifierValue(struct UObject* WorldContextObject, struct FName& Name, float NewValue); // Function Solarland.SolarGameModeLibrary.SetModifierValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6ca70
	void SetModifierEnabled(struct UObject* WorldContextObject, struct FName& Name, bool bEnabled); // Function Solarland.SolarGameModeLibrary.SetModifierEnabled // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6c960
	void SetModeDataWriteAccess(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* Host, struct FString Name, struct TArray<struct FString>& NewAccesses, bool SetTypeAllData); // Function Solarland.SolarGameModeLibrary.SetModeDataWriteAccess // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6c750
	void SetModeDataReplicationState(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct TArray<struct FString>& DataNames, bool bReplication); // Function Solarland.SolarGameModeLibrary.SetModeDataReplicationState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6c5c0
	void SetModeDataReadAccess(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* Host, struct FString Name, struct TArray<struct FString>& NewAccesses, bool SetTypeAllData); // Function Solarland.SolarGameModeLibrary.SetModeDataReadAccess // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6c3b0
	void SetMiniMapFOV(struct UObject* WorldContextObject, float TargetFOV, float PlayTime, bool WithIconScale); // Function Solarland.SolarGameModeLibrary.SetMiniMapFOV // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6c280
	void SetEffectJobRelation(struct UObject* WorldContextObject, enum class ESolarGameMode_EffectJobRelationType EffectType, struct FString RowName, struct FString ColName, bool NewValue, bool bDefaultValue); // Function Solarland.SolarGameModeLibrary.SetEffectJobRelation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6c0b0
	void SetDataModuleVector3Value(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FVector& NewValue, bool bResetValue, struct FVector& CurrentValue, struct FVector& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleVector3Value // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6bdf0
	void SetDataModuleVector2Value(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FVector2D NewValue, bool bResetValue, struct FVector2D& CurrentValue, struct FVector2D& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleVector2Value // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6bb30
	void SetDataModuleStringValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FString NewValue, bool bResetValue, struct FString& CurrentValue, struct FString& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleStringValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6b830
	void SetDataModuleObjectValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct UObject* NewObject, bool bResetValue, struct UObject*& CurrentValue, struct UObject*& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleObjectValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6b570
	void SetDataModuleIntValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, int32_t Increament, bool bSetValue, int32_t NewValue, bool bResetValue, int32_t& CurrentValue, int32_t& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleIntValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6b230
	void SetDataModuleFloatValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, float Increament, bool bSetValue, float NewValue, bool bResetValue, float& CurrentValue, float& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6aef0
	void SetDataModuleBoolValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, bool NewValue, bool bResetValue, bool& CurrentValue, bool& DefaultValue); // Function Solarland.SolarGameModeLibrary.SetDataModuleBoolValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6ac30
	void SetCharacterMeleeAttackState(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, bool CanAttack); // Function Solarland.SolarGameModeLibrary.SetCharacterMeleeAttackState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6ab30
	void SetActorOwnerToLocalController(struct UObject* TargetObject); // Function Solarland.SolarGameModeLibrary.SetActorOwnerToLocalController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6aac0
	void SearchRanking(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString Name, struct UObject* Host, int32_t& Ranking, float& Score); // Function Solarland.SolarGameModeLibrary.SearchRanking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d6a8e0
	void ReSetEffectJobRelation(struct UObject* WorldContextObject, enum class ESolarGameMode_EffectJobRelationType EffectType); // Function Solarland.SolarGameModeLibrary.ReSetEffectJobRelation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69a10
	void RequestGetModeData(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo, enum class ESolarGameModeGetDataResult& GetDataResult, enum class ESolarGameModeHostType HostType, struct UObject* DataObject, struct FString DataName); // Function Solarland.SolarGameModeLibrary.RequestGetModeData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d6a6e0
	void RemoveMarkFromRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6a630
	void RemoveMarkFromMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMark); // Function Solarland.SolarGameModeLibrary.RemoveMarkFromMap // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6a580
	bool RemoveMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* Target); // Function Solarland.SolarGameModeLibrary.RemoveMapElement // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6a4c0
	void RemoveDotLineToMapFrame(struct UObject* WorldContextObject, int32_t DotLineID); // Function Solarland.SolarGameModeLibrary.RemoveDotLineToMapFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6a410
	void RemoveActorWorldMark(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMark); // Function Solarland.SolarGameModeLibrary.RemoveActorWorldMark // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d6a360
	struct URotationBarMarkWidget* RegisterMarkToRotationBar(struct UObject* WorldContextObject, struct URotationBarMarkWidget* InRotationBarMarkClass, struct FVector& InMarkPos, int32_t InZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToRotationBar // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6a210
	struct UMapMarkBase* RegisterMarkToMapFrame(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d6a0c0
	struct TArray<struct UMapMarkBase*> RegisterMarkToMap(struct UObject* WorldContextObject, struct UMapMarkBase* InMapMarkClass, struct FVector& InMarkPos, bool EdgeSupport, bool EdgeSupportWithBigMap, int32_t ZOrder); // Function Solarland.SolarGameModeLibrary.RegisterMarkToMap // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d69eb0
	int32_t RegisterDotLineToMapFrame(struct UObject* WorldContextObject, struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor& DotLineColor); // Function Solarland.SolarGameModeLibrary.RegisterDotLineToMapFrame // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d69d70
	struct UActorMarkBase* RegisterActorMarkOnActor(struct UObject* WorldContextObject, struct UActorMarkBase* InActorMarkClass, struct AActor* FollowActor); // Function Solarland.SolarGameModeLibrary.RegisterActorMarkOnActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69c80
	void RecordPlayerReward(struct USGameMode_Player* Player, struct TMap<int32_t, int32_t>& RewardItems); // Function Solarland.SolarGameModeLibrary.RecordPlayerReward // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d69ac0
	void PlayVoiceOnMiniMap(struct UObject* WorldContextObject, enum class EMarkerType InVoiceType, struct FVector InPlayerPosition, struct FVector InSoundPosition); // Function Solarland.SolarGameModeLibrary.PlayVoiceOnMiniMap // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1d69840
	void PlayerOutBySelf(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.PlayerOutBySelf // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d699a0
	void PlayAudioInGame(struct FString InAudioName); // Function Solarland.SolarGameModeLibrary.PlayAudioInGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d697b0
	void PlaceCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* Character, struct APlayerStart* PlayerStart, bool bClearAllItems, bool bEmptyEnergy, bool bReChargeJetToFull, bool bClearWeapons, bool bIsRebirth); // Function Solarland.SolarGameModeLibrary.PlaceCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69560
	void MarkVictory(struct ASolarPlayerState* InPlayerState, int32_t Result); // Function Solarland.SolarGameModeLibrary.MarkVictory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69370
	void MarkPlayerSettlementEnded(struct UObject* WorldContextObject, struct USGameMode_Player* Player); // Function Solarland.SolarGameModeLibrary.MarkPlayerSettlementEnded // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d692c0
	void LetPlayerOut(struct UObject* WorldContextObject, struct TArray<struct USGameMode_Player*>& TargetPlayers); // Function Solarland.SolarGameModeLibrary.LetPlayerOut // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d691e0
	void LetAllPlayersOut(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.LetAllPlayersOut // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69170
	void KillCharacter(struct UObject* Killer, struct ASolarCharacter* TargetCharacter, struct ASolarAbility* AbilityClass); // Function Solarland.SolarGameModeLibrary.KillCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d69080
	bool IsValidJob(struct UObject* WorldContextObject, struct FString JobName); // Function Solarland.SolarGameModeLibrary.IsValidJob // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68fa0
	bool IsSecondCustomGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.IsSecondCustomGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68f20
	bool IsCustomGameMode(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.IsCustomGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68ea0
	bool IsBattlePlaying(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.IsBattlePlaying // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68e20
	void HideRotationBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideRotationBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68db0
	void HidePowerBar(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HidePowerBar // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68d40
	void HideBattle(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideBattle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68cd0
	void HideAllPlayerNav(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HideAllPlayerNav // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68c60
	void HiddenWeapon(struct ASolarCharacter* TargetPlayer); // Function Solarland.SolarGameModeLibrary.HiddenWeapon // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68bf0
	bool HasModeDataInitialized(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.HasModeDataInitialized // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68b70
	void GotoLobby(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GotoLobby // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d68b00
	void GlobalLogGameStateStatistics(struct UObject* WorldContextObject, struct FString InLogName, struct TMap<struct FString, struct FString>& LogValues); // Function Solarland.SolarGameModeLibrary.GlobalLogGameStateStatistics // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d68960
	int32_t GetWramGameType(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetWramGameType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d688e0
	struct USkeletalMesh* GetWeaponMesh(struct UObject* WorldContextObject, int32_t WeaponItemID, float& SpawnOffset); // Function Solarland.SolarGameModeLibrary.GetWeaponMesh // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d687e0
	int32_t GetRequiredBotNumber(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetRequiredBotNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d68760
	bool GetPlayersBySideAndJob(struct UObject* WorldContextObject, struct FString SideName, struct FString JobName, struct TArray<struct USGameMode_Player*>& Players); // Function Solarland.SolarGameModeLibrary.GetPlayersBySideAndJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d685e0
	void GetPlayerProperties(struct UObject* WorldContextObject, struct USGameMode_Player* TargetPlayer, struct ASolarCharacter* TargetCharacter, struct USGameMode_Player*& Player, struct ASolarCharacter*& DefaultCharacter, struct ASolarCharacter*& BindedCharacter, struct UGameMode_SideData*& SideData, struct UGameMode_JobData*& JobData, struct FTransform& Postion, struct FString& playerName); // Function Solarland.SolarGameModeLibrary.GetPlayerProperties // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d68250
	struct USolarGameMode_PlayerManager* GetPlayerManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetPlayerManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d681d0
	void GetPlayerInfo(struct UObject* WorldContextObject, struct USGameMode_Player* TargetPlayer, struct UTexture2D*& OutAvatar, int32_t& PlayerGender); // Function Solarland.SolarGameModeLibrary.GetPlayerInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d68070
	struct USGameMode_Player* GetPlayerBySolarPlayerId(struct UObject* WorldContextObject, struct FString InPlayerID); // Function Solarland.SolarGameModeLibrary.GetPlayerBySolarPlayerId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67f90
	struct USGameMode_Player* GetPlayerByPlayerID(struct UObject* WorldContextObject, int32_t InPlayerID); // Function Solarland.SolarGameModeLibrary.GetPlayerByPlayerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67ed0
	struct FString GetNoticeFormatText(struct UObject* WorldContextObject, int32_t InLocalizationID, struct TMap<struct FString, struct FString>& FormatContext); // Function Solarland.SolarGameModeLibrary.GetNoticeFormatText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d67d00
	struct FString GetModeParam(struct UObject* WorldContextObject, struct FString ParamName); // Function Solarland.SolarGameModeLibrary.GetModeParam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67be0
	void GetModeDataRankRange(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, int32_t StartIndx, int32_t EndIndx, struct TArray<struct FSolarGameMode_RankData>& RankData); // Function Solarland.SolarGameModeLibrary.GetModeDataRankRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d679c0
	void GetModeDataObject(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* Host, struct FString Name, struct USolarGameMode_CustomData*& DataObj, struct TArray<struct FString>& ReadAccess, struct TArray<struct FString>& WriteAccess); // Function Solarland.SolarGameModeLibrary.GetModeDataObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d67710
	struct USolarGameModeData* GetModeData(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetModeData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67690
	int32_t GetMapIdByLevel(struct UObject* WorldContextObject, struct FString LevelName); // Function Solarland.SolarGameModeLibrary.GetMapIdByLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d675b0
	struct USGameMode_Player* GetLocalPlayer(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetLocalPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67530
	struct APawn* GetLocalCharacter(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d674b0
	struct USolarGameMode_LevelManager* GetLevelManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetLevelManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67430
	struct USolarGameMode_JobManager* GetJobManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetJobManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d673b0
	bool GetJobDataBySideAndJob(struct UObject* WorldContextObject, struct FString SideName, struct FString JobName, struct FGameMode_JobManagerRow& JobStructure); // Function Solarland.SolarGameModeLibrary.GetJobDataBySideAndJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d670a0
	struct USolarItemManager* GetItemManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetItemManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d67020
	struct USGameMode_Player* GetHostPlayerByPlayerState(struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SolarGameModeLibrary.GetHostPlayerByPlayerState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d66fa0
	struct USGameMode_Player* GetHostPlayer(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarGameModeLibrary.GetHostPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d66ee0
	struct USolarGameMode_ElementManager* GetElementManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d66e60
	struct USolarGameMode_HandleElementRPC* GetElementHandleRPCComponent(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetElementHandleRPCComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d66de0
	bool GetElementByID(struct UObject* WorldContextObject, struct FString ElementID, struct ASolarMapElementBase*& TargetElement); // Function Solarland.SolarGameModeLibrary.GetElementByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d66cc0
	void GetEffectJobRelation(struct UObject* WorldContextObject, enum class ESolarGameMode_EffectJobRelationType EffectType, struct FString RowName, struct FString ColName, bool& CurrentValue, bool& DefaultValue); // Function Solarland.SolarGameModeLibrary.GetEffectJobRelation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d66ad0
	struct USolarGameMode_EffectJobManager* GetEffectJobManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetEffectJobManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d66a50
	void GetDropItemDataByOutComeData(struct UObject* WorldContextObject, struct TArray<struct FSolarGameMode_DropItemData>& OutcomeData, struct TArray<struct FSolarGameMode_DropItemData>& TargetData); // Function Solarland.SolarGameModeLibrary.GetDropItemDataByOutComeData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d66900
	void GetDataModuleVectorValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FVector& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleVectorValue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d66720
	void GetDataModuleVector2DValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FVector2D& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleVector2DValue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d66540
	void GetDataModuleStringValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct FString& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleStringValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d66340
	void GetDataModuleObjectValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, struct UObject*& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleObjectValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d66160
	void GetDataModuleIntValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, int32_t& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleIntValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d65f80
	void GetDataModuleFloatValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, float& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d65d90
	void GetDataModuleBoolValue(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct UObject* HostObject, struct FString DataName, struct FString Tag, bool& CurrentValue); // Function Solarland.SolarGameModeLibrary.GetDataModuleBoolValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d65bb0
	struct USolarGameMode_DataManager* GetDataManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetDataManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65b30
	struct FString GetCustomModeConfigName(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetCustomModeConfigName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65a60
	struct USolarGameMode_CharacterManager* GetCharacterManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetCharacterManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d659e0
	void GetCharacterID(struct ASolarCharacter* Character, int32_t& CharacterId, int32_t& SkinId, int32_t& ColorID); // Function Solarland.SolarGameModeLibrary.GetCharacterID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d65870
	struct UUserWidget* GetBattleControlWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleControlWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d657f0
	struct UUserWidget* GetBattleBackpackWidget(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetBattleBackpackWidget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65770
	bool GetBackpackWeaponBySlot(struct ASolarCharacter* Character, int32_t Slot, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackWeaponBySlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d655f0
	bool GetBackpackItemDataByType(struct ASolarCharacter* Character, int32_t ItemType, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d65470
	bool GetBackpackItemDataByID(struct ASolarCharacter* Character, int32_t ItemID, struct FSolarItemData& ItemData); // Function Solarland.SolarGameModeLibrary.GetBackpackItemDataByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d652f0
	struct USCustomizedMode_AttributeManager* GetAttributeManager(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetAttributeManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65270
	void GetAllSideName(struct UObject* WorldContextObject, bool IgnoreEmpty, bool InHasAlive, struct TArray<struct FString>& SideList); // Function Solarland.SolarGameModeLibrary.GetAllSideName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d650e0
	int32_t GetAILevelCurrentMatch(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.GetAILevelCurrentMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d65060
	struct ASolarMapElementBase* GenerateMapElement(struct UObject* WorldContextObject, struct ASolarMapElementBase* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner, struct APawn* Instigator, struct FString ElementID, struct FString Side, struct FString Job, struct TArray<struct FName>& Tags, enum class ESGameMode_ElementType ElementType, enum class EElementStateType State, enum class EElementVisibilityType Visibility, bool IsPersistent); // Function Solarland.SolarGameModeLibrary.GenerateMapElement // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d64be0
	void GameStatisticsModeData(struct UObject* WorldContextObject, struct USGameMode_Player* TargetPlayer, struct FString InLogType, struct TMap<struct FString, struct FString>& RecordContext); // Function Solarland.SolarGameModeLibrary.GameStatisticsModeData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d64a00
	struct UGameMode_SideData* FindSide(struct UObject* WorldContextObject, struct FString Name); // Function Solarland.SolarGameModeLibrary.FindSide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d64920
	struct TArray<struct ASolarPlayerStart*> FindPlayerStart(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindPlayerStart // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d643e0
	struct TArray<struct USGameMode_Player*> FindPlayers(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags, struct TArray<enum class ESGameMode_PlayerState>& States); // Function Solarland.SolarGameModeLibrary.FindPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d64650
	bool FindJob(struct UObject* WorldContextObject, struct FString SideName, struct FString JobName, struct UGameMode_JobData*& JobData); // Function Solarland.SolarGameModeLibrary.FindJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d64260
	struct TArray<struct ASolarMapElementBase*> FindElementsByClass(struct UObject* WorldContextObject, struct TArray<struct UObject*>& ElementClasses, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElementsByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d63f90
	struct TArray<struct ASolarMapElementBase*> FindElements(struct UObject* WorldContextObject, struct TArray<struct FString>& ElementTypes, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags); // Function Solarland.SolarGameModeLibrary.FindElements // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d63ca0
	struct ASolarMapElementBase* FindElementByID(struct UObject* WorldContextObject, struct FString InElementID); // Function Solarland.SolarGameModeLibrary.FindElementByID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d63bc0
	struct TArray<struct USGameMode_Player*> FindBotAI(struct UObject* WorldContextObject, struct TArray<struct FString>& Sides, struct TArray<struct FString>& Jobs, struct TArray<struct FString>& Tags, struct TArray<enum class ESGameMode_PlayerState>& States); // Function Solarland.SolarGameModeLibrary.FindBotAI // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d638f0
	void EnterSpectate(struct UObject* WorldContextObject, struct USGameMode_Player* InKilledPlayer); // Function Solarland.SolarGameModeLibrary.EnterSpectate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d63840
	bool DestoryDeadCharacter(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarGameModeLibrary.DestoryDeadCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d637c0
	bool CreateRemainingAI(struct UObject* WorldContextObject); // Function Solarland.SolarGameModeLibrary.CreateRemainingAI // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d63740
	struct USGameMode_Player* CreateBotAISingle(struct UObject* WorldContextObject, int32_t CharacterId, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAutoSideAndJob, bool bReplaceTeamPos, struct FString Side, struct FString Job); // Function Solarland.SolarGameModeLibrary.CreateBotAISingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d63490
	struct TArray<struct USGameMode_Player*> CreateBotAI(struct UObject* WorldContextObject, struct TMap<int32_t, int32_t>& TempleteMap, int32_t SpawnNum, struct FVector& SpawnLocation, struct ASolarBotAIController* ControllerClass, int32_t Difficulty, bool bAutoSideAndJob, bool bReplaceTeamPos, struct FString Side, struct FString Job); // Function Solarland.SolarGameModeLibrary.CreateBotAI // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d63030
	void CharacterEnterDeath(struct ASolarCharacter* TargetCharacter, struct FSolarPointDamageEvent& DamageEvent, bool bEnterDying, bool bSpawnDeathBox, enum class EHealthChangeType ChangeType, struct AController* EventInstigator, float DamageValue); // Function Solarland.SolarGameModeLibrary.CharacterEnterDeath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d62dd0
	void ChangePlayerTeamID(struct UObject* WorldContextObject, struct USGameMode_Player* Player, int32_t NewTeamID); // Function Solarland.SolarGameModeLibrary.ChangePlayerTeamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d62ce0
	void ChangePlayerSide(struct UObject* WorldContextObject, struct USGameMode_Player* Player, struct FString NewSide, struct FString NewJob); // Function Solarland.SolarGameModeLibrary.ChangePlayerSide // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d62b80
	void ChangeMiniMapToTargetID(struct UObject* WorldContextObject, int32_t InMapID); // Function Solarland.SolarGameModeLibrary.ChangeMiniMapToTargetID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d62ad0
	void ButtonCallReleased(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallReleased // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d62a60
	void ButtonCallPressed(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d629f0
	void ButtonCallClick(struct UButton* Button); // Function Solarland.SolarGameModeLibrary.ButtonCallClick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d62980
	void BindWidgetVisibilityChanged(struct UObject* WorldContextObject, struct FDelegate& Event); // Function Solarland.SolarGameModeLibrary.BindWidgetVisibilityChanged // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d628a0
	void BindEventToModeOnBigMapVisiblityChanged(struct UObject* WorldContextObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeOnBigMapVisiblityChanged // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d627c0
	void BindEventToModeOnBigMapOpen(struct UObject* WorldContextObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeOnBigMapOpen // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d626e0
	struct USolarGameMode_RankManager* BindEventToModeDataRankChanged(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataRankChanged // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d62560
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Vector3(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Vector3 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Vector2(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Vector2 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_String(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_String // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Object(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Object // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Int(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Int // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Float(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	struct USolarGameMode_CustomData* BindEventToModeDataChange_Bool(struct UObject* WorldContextObject, enum class ESolarGameModeHostType HostType, struct FString DataName, struct UObject* DataObject, struct FDelegate& Delegate); // Function Solarland.SolarGameModeLibrary.BindEventToModeDataChange_Bool // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d623b0
	void BindEventOnItemUsed(struct UObject* WorldContextObject, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.BindEventOnItemUsed // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d622d0
	bool BindEffectJobRelationChangeEvent(struct UObject* WorldContextObject, enum class ESolarGameMode_EffectJobRelationType EffectType, struct FDelegate& Deletage); // Function Solarland.SolarGameModeLibrary.BindEffectJobRelationChangeEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d621a0
	void ApplyWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61f80
	void ApplyVehicleWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVehicleWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyVehicleWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61d60
	void ApplyVehicleHitDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVehicleHitDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyVehicleHitDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61b40
	void ApplyVehicleExplosionDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct APawn* Casuer, struct FVhicleExplosionDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyVehicleExplosionDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61920
	void ApplyUnarmDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FUnarmWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyUnarmDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61700
	void ApplySummonWeaponDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSummonWeaponDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplySummonWeaponDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61490
	void ApplyPoisonDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarPoisonDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyPoisonDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61260
	void ApplyPointDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyPointDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d61050
	void ApplyDyingDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FDyingDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyDyingDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d60e20
	void ApplyDamageDataToCharacter(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarPointDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyDamageDataToCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d60c10
	void ApplyBombDamage(struct UObject* WorldContextObject, struct ASolarCharacter* TargetCharacter, struct ASolarCharacter* CasuerCharacter, struct FSolarBombDamageEvent& DamageEvent, float Damage, struct AActor* DamageCauser); // Function Solarland.SolarGameModeLibrary.ApplyBombDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d609e0
	void ApplyAbility(struct UObject* SourceObject, struct TArray<struct ASolarCharacter*>& TargetCharacters, struct TArray<struct ASolarAbility*>& Abilities); // Function Solarland.SolarGameModeLibrary.ApplyAbility // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d60890
	void AddItem(struct ASolarCharacter* SolarCharacter, int32_t ItemID, int32_t ItemNum); // Function Solarland.SolarGameModeLibrary.AddItem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d607a0
};

// Class Solarland.SolarGameModeLockSettings
// Size: 0x98 (Inherited: 0x28)
struct USolarGameModeLockSettings : USaveGame {
	struct TMap<int32_t, bool> GameModeLockStatus; // 0x28(0x50)
	struct TArray<int32_t> LobbyGameModeRecIDs; // 0x78(0x10)
	struct TArray<int32_t> GameModeGuideIDs; // 0x88(0x10)

	void CopyFrom(struct USolarGameModeLockSettings* InLockSettings); // Function Solarland.SolarGameModeLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x1d73980
};

// Class Solarland.SGameMode_Player
// Size: 0xa0 (Inherited: 0x28)
struct USGameMode_Player : UObject {
	struct AController* Controller; // 0x28(0x08)
	int32_t PlayerId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString SolarPlayerId; // 0x38(0x10)
	char SolarTeamId; // 0x48(0x01)
	char PosInTeam; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	int32_t Gender; // 0x4c(0x04)
	int32_t AvatarID; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct FString SideName; // 0x58(0x10)
	struct FString JobName; // 0x68(0x10)
	struct FString SolarNickName; // 0x78(0x10)
	struct FString OS; // 0x88(0x10)
	int32_t UserId; // 0x98(0x04)
	bool bIsAIPlayer; // 0x9c(0x01)
	enum class ESGameMode_PlayerState PlayerState; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)

	void OnRep_PlayerController(); // Function Solarland.SGameMode_Player.OnRep_PlayerController // (Final|Native|Public) // @ game+0x1d757d0
	struct ASolarPlayerState* GetBindedPlayerState(); // Function Solarland.SGameMode_Player.GetBindedPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d73f00
	struct APawn* GetBindedPawn(); // Function Solarland.SGameMode_Player.GetBindedPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d73ed0
	struct ASolarCharacter* GetBindedCharacter(); // Function Solarland.SGameMode_Player.GetBindedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d73ea0
	void ClientShowUI(struct FString WidgetPath, struct FString UIName); // Function Solarland.SGameMode_Player.ClientShowUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1d73890
	void ClientCloseUI(struct FString UIName); // Function Solarland.SGameMode_Player.ClientCloseUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1d737f0
	void BindNewCharacter(struct ASolarCharacter* NewCharacter); // Function Solarland.SGameMode_Player.BindNewCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x8e33f0
};

// Class Solarland.SolarGameMode_PlayerManager
// Size: 0xa0 (Inherited: 0x28)
struct USolarGameMode_PlayerManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct USGameMode_Player*> Players; // 0x30(0x10)
	struct TMap<struct AController*, struct USGameMode_Player*> ControllerMap; // 0x40(0x50)
	struct USGameMode_Player* LocalPlayer; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)
};

// Class Solarland.SolarGameModeSelectionManager
// Size: 0x60 (Inherited: 0x30)
struct USolarGameModeSelectionManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct USolarGameModeLockSettings* CurGameModeLockSettings; // 0x38(0x08)
	char pad_40[0x18]; // 0x40(0x18)
	struct USolarGameModeLockSettings* DefaultGameModeLockSettings; // 0x58(0x08)

	void SaveGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.SaveGameModeLockSettings // (Final|Native|Public) // @ game+0x1d75a10
	void LoadGameModeLockSettings(); // Function Solarland.SolarGameModeSelectionManager.LoadGameModeLockSettings // (Final|Native|Public) // @ game+0x1d75250
};

// Class Solarland.PlayerStatisticsData
// Size: 0xb8 (Inherited: 0x28)
struct UPlayerStatisticsData : UObject {
	struct FMulticastInlineDelegate OnPlayerStatDataUpdate; // 0x28(0x10)
	struct FMulticastInlineDelegate OnIncreaseWeaponKillNum; // 0x38(0x10)
	char pad_48[0x70]; // 0x48(0x70)

	struct FVector GetValue_Vector(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Vector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1d74a50
	void GetValue_MapKeyWithValueInt(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueInt // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d74960
	void GetValue_MapKeyWithValueFloat(enum class EStatisticsType InType, struct TArray<int32_t>& OutValue); // Function Solarland.PlayerStatisticsData.GetValue_MapKeyWithValueFloat // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d74870
	int32_t GetValue_IntFromMap(enum class EStatisticsType InType, int32_t IntKey); // Function Solarland.PlayerStatisticsData.GetValue_IntFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d747b0
	void GetValue_IntArray(enum class EStatisticsType InType, struct TArray<int32_t>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_IntArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d745c0
	int32_t GetValue_Int(enum class EStatisticsType InType); // Function Solarland.PlayerStatisticsData.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d74440
	float GetValue_FloatFromMap(enum class EStatisticsType InType, int32_t IntKey, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_FloatFromMap // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d74330
	void GetValue_FloatArray(enum class EStatisticsType InType, struct TArray<float>& OutResult); // Function Solarland.PlayerStatisticsData.GetValue_FloatArray // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d74240
	float GetValue_Float(enum class EStatisticsType InType, bool Floor); // Function Solarland.PlayerStatisticsData.GetValue_Float // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d74170
};

// Class Solarland.SideStatisticsData
// Size: 0x78 (Inherited: 0x28)
struct USideStatisticsData : UObject {
	char pad_28[0x50]; // 0x28(0x50)
};

// Class Solarland.SolarGameModeStatisticsComponent
// Size: 0x148 (Inherited: 0xd0)
struct USolarGameModeStatisticsComponent : UGameModeCompBase {
	char pad_D0[0x8]; // 0xd0(0x08)
	struct TMap<struct FString, struct UPlayerStatisticsData*> AllPlayerStatData; // 0xd8(0x50)
	struct TArray<enum class EStatisticsType> SpecialFuncTag; // 0x128(0x10)
	char pad_138[0x10]; // 0x138(0x10)

	struct TArray<int32_t> GetValue_IntArray(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_IntArray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d746b0
	int32_t GetValue_Int(struct FString InPlayerID, enum class EStatisticsType InType); // Function Solarland.SolarGameModeStatisticsComponent.GetValue_Int // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1d744d0
	struct UPlayerStatisticsData* GetPlayerStatData(struct FString InPlayerID); // Function Solarland.SolarGameModeStatisticsComponent.GetPlayerStatData // (Final|Native|Public) // @ game+0x1d740c0
};

// Class Solarland.SolarGameplayAbilitySet
// Size: 0x40 (Inherited: 0x30)
struct USolarGameplayAbilitySet : UDataAsset {
	struct TArray<struct UGameplayAbility*> Abilities; // 0x30(0x10)
};

// Class Solarland.SolarGameplayCueManager
// Size: 0x310 (Inherited: 0x310)
struct USolarGameplayCueManager : UGameplayCueManager {
};

// Class Solarland.SolarGameplayLogger
// Size: 0x38 (Inherited: 0x28)
struct USolarGameplayLogger : UObject {
	struct TArray<enum class ELogChannel> DefaultChannels; // 0x28(0x10)

	void SolarDebugLog(enum class ELogChannel Channel, struct FString Message); // Function Solarland.SolarGameplayLogger.SolarDebugLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d75ac0
	void EnableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.EnableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d73bf0
	void DisableDebugLogChannel(enum class ELogChannel Channel); // Function Solarland.SolarGameplayLogger.DisableDebugLogChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d73b80
};

// Class Solarland.SolarGameplaySmokeComponent
// Size: 0x100 (Inherited: 0xb0)
struct USolarGameplaySmokeComponent : UActorComponent {
	float SmokeRadius; // 0xb0(0x04)
	float LocalPlayerCheckRadiusWithCamera; // 0xb4(0x04)
	float DetectDistance; // 0xb8(0x04)
	struct FGameplayCueTag TeamPerspectiveCueTag; // 0xbc(0x08)
	struct FGameplayCueTag HawkeyePerspectiveCueTag; // 0xc4(0x08)
	bool bEnableSmokeDamage; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	float DamageDistance; // 0xd0(0x04)
	float DamagePerTime; // 0xd4(0x04)
	float DamageFreq; // 0xd8(0x04)
	char pad_DC[0x24]; // 0xdc(0x24)

	void SetIsValid(bool bInIsValid); // Function Solarland.SolarGameplaySmokeComponent.SetIsValid // (Final|Native|Public|BlueprintCallable) // @ game+0x1d75a30
};

// Class Solarland.SolarGameplayTagLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGameplayTagLibrary : UBlueprintFunctionLibrary {

	bool K2_RequestGameplayTag(struct FName TagName, struct FGameplayTag& OutTagFound); // Function Solarland.SolarGameplayTagLibrary.K2_RequestGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d75180
	struct FGameplayTagContainer DiffTags(struct FGameplayTagContainer TagsA, struct FGameplayTagContainer& TagsB); // Function Solarland.SolarGameplayTagLibrary.DiffTags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d73a00
};

// Class Solarland.SolarGameplayTagSystem
// Size: 0x80 (Inherited: 0x30)
struct USolarGameplayTagSystem : UEngineSubsystem {
	struct TMap<struct FName, struct UDataAsset*> LoadedTagReflectors; // 0x30(0x50)
};

// Class Solarland.SolarGameProgressManager
// Size: 0x128 (Inherited: 0x30)
struct USolarGameProgressManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnGameStart; // 0x38(0x10)
	char pad_48[0xe0]; // 0x48(0xe0)

	void OnWorldConditionsCompleted(); // Function Solarland.SolarGameProgressManager.OnWorldConditionsCompleted // (Final|Native|Protected) // @ game+0x1d75830
	void OnStreamingLevelComplete(); // Function Solarland.SolarGameProgressManager.OnStreamingLevelComplete // (Final|Native|Protected) // @ game+0x1d75810
	void OnShadersCompileComplete(); // Function Solarland.SolarGameProgressManager.OnShadersCompileComplete // (Final|Native|Protected) // @ game+0x1d757f0
	void OnGameStart__DelegateSignature(); // DelegateFunction Solarland.SolarGameProgressManager.OnGameStart__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void K2_ReceiveGlobalConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveGlobalConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d750d0
	void K2_ReceiveConditionCompleted(struct UObject* WorldContextObject, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_ReceiveConditionCompleted // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d75020
	void K2_OnGlobalConditionCompleted(struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnGlobalConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d74fa0
	void K2_OnConditionCompleted(struct UWorld* CurrentWorld, struct FGameplayTag CompletedCondition); // Function Solarland.SolarGameProgressManager.K2_OnConditionCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d74ee0
	bool IsGameStartNeedCondition(struct UObject* WorldContextObject, struct FGameplayTag& InCondition); // Function Solarland.SolarGameProgressManager.IsGameStartNeedCondition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d74e10
	bool IsConditionInList(struct FGameplayTag& InCondition, struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsConditionInList // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74d30
	bool IsAllStartGameConditionCompleted(struct UWorld* WorldCheck); // Function Solarland.SolarGameProgressManager.IsAllStartGameConditionCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d74ca0
	bool InitGameStartCondition(struct UWorld* CurrentWorld, struct FGameplayTagContainer ConditionList); // Function Solarland.SolarGameProgressManager.InitGameStartCondition // (Final|Native|Public|BlueprintCallable) // @ game+0x1d74b70
	bool HasGameStarted(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.HasGameStarted // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d74af0
	struct USolarGameProgressManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarGameProgressManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d73e20
};

// Class Solarland.SolarGameSession
// Size: 0x240 (Inherited: 0x240)
struct ASolarGameSession : AGameSession {
};

// Class Solarland.SolarGameSettingsRange
// Size: 0x168 (Inherited: 0x28)
struct USolarGameSettingsRange : UObject {
	struct FSoundSettingsRange SoundSettings; // 0x28(0x20)
	struct FSensitivitySettingsRange SensitivitySettings; // 0x48(0x118)
	struct FGraphicsSettingsRange GraphicsSettings; // 0x160(0x08)
};

// Class Solarland.SolarGameSettingsRangePC
// Size: 0x180 (Inherited: 0x168)
struct USolarGameSettingsRangePC : USolarGameSettingsRange {
	struct FMouseAndKeyboardSettingsRange KeyboardControlSettings; // 0x168(0x08)
	struct FGamepadSettingsRange GamepadSettings; // 0x170(0x10)
};

// Class Solarland.SolarGameStateBase
// Size: 0x2e0 (Inherited: 0x278)
struct ASolarGameStateBase : AGameStateBase {
	char pad_278[0x8]; // 0x278(0x08)
	struct FGameStartConditionList GameStartConditions; // 0x280(0x58)
	struct USolarGameplayConfigComponent* GameplayConfigComponent; // 0x2d8(0x08)
};

// Class Solarland.SolarGameStatistics
// Size: 0x80 (Inherited: 0x28)
struct USolarGameStatistics : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString PlayerIdName; // 0x30(0x10)
	struct FString LogTypeName; // 0x40(0x10)
	struct USolarGameInstanceBase* Owner; // 0x50(0x08)
	struct FSolarGameStatisticsLogHeadInfo LogHeadInfo; // 0x58(0x28)

	struct FSolarGameStatisticsLogHeadInfo StaticGetLogHeadInfo(); // Function Solarland.SolarGameStatistics.StaticGetLogHeadInfo // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d7af60
	void SetSwapLogFileSize(int32_t InSize); // Function Solarland.SolarGameStatistics.SetSwapLogFileSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7ae20
	void SetSwapLogFileInterval(int32_t InInterval); // Function Solarland.SolarGameStatistics.SetSwapLogFileInterval // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7adb0
	void SetLogValueSeparater(struct FString InValueSeparater); // Function Solarland.SolarGameStatistics.SetLogValueSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7ac50
	void SetLogTerminator(struct FString InTerminator); // Function Solarland.SolarGameStatistics.SetLogTerminator // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7ab70
	void SetLogFileNameSuffix(struct FString InLogFileNameSuffix); // Function Solarland.SolarGameStatistics.SetLogFileNameSuffix // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7aa90
	void SetLogFileNamePrefix(struct FString InLogFileNamePrefix); // Function Solarland.SolarGameStatistics.SetLogFileNamePrefix // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7a9b0
	void SetLogFileExtension(struct FString InLogFileExtension); // Function Solarland.SolarGameStatistics.SetLogFileExtension // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7a8d0
	void SetLogFileDir(struct FString InLogFileDir); // Function Solarland.SolarGameStatistics.SetLogFileDir // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7a7f0
	void SetLogElementSeparater(struct FString InElementSeparater); // Function Solarland.SolarGameStatistics.SetLogElementSeparater // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7a710
	void SetLogCheckIntervalMS(int32_t InLogCheckIntervalMS); // Function Solarland.SolarGameStatistics.SetLogCheckIntervalMS // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d7a6a0
	void ReceiveShutdown(); // Function Solarland.SolarGameStatistics.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveInit(); // Function Solarland.SolarGameStatistics.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void NotifyBattleStart(struct FString InBattleID); // Function Solarland.SolarGameStatistics.NotifyBattleStart // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7a3f0
	void NotifyBattleEnd(); // Function Solarland.SolarGameStatistics.NotifyBattleEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1d7a3d0
	void LogInternal(struct FString InLog); // Function Solarland.SolarGameStatistics.LogInternal // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d7a240
	void LogGameStats_KeyValues(struct FString InKey, struct TArray<struct FString>& InValues); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1d7a120
	void LogGameStats_KeyValue(struct FString InKey, struct FString InValue); // Function Solarland.SolarGameStatistics.LogGameStats_KeyValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d7a040
	void LogGameStats_Key(struct FString InKey); // Function Solarland.SolarGameStatistics.LogGameStats_Key // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d79fb0
	bool IsUseEmptyHeadData(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.IsUseEmptyHeadData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetSwapLogFileSize(); // Function Solarland.SolarGameStatistics.GetSwapLogFileSize // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79b30
	int32_t GetSwapLogFileInterval(); // Function Solarland.SolarGameStatistics.GetSwapLogFileInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79b10
	struct FString GetSCMLogDataString(bool bIncludeStatistics, struct ASolarPlayerState* InPS); // Function Solarland.SolarGameStatistics.GetSCMLogDataString // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetProperLogElement(struct FString InElement); // Function Solarland.SolarGameStatistics.GetProperLogElement // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1d797a0
	struct FString GetLogValueSeparater(); // Function Solarland.SolarGameStatistics.GetLogValueSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79490
	struct FString GetLogTerminator(); // Function Solarland.SolarGameStatistics.GetLogTerminator // (Final|Native|Public|BlueprintCallable) // @ game+0x1d793d0
	struct FSolarGameStatisticsLogHeadInfo GetLogHeadInfo(); // Function Solarland.SolarGameStatistics.GetLogHeadInfo // (Final|Native|Protected|BlueprintCallable) // @ game+0x1d79370
	struct FString GetLogFileNameSuffix(); // Function Solarland.SolarGameStatistics.GetLogFileNameSuffix // (Final|Native|Public|BlueprintCallable) // @ game+0x1d792b0
	struct FString GetLogFileNamePrefix(); // Function Solarland.SolarGameStatistics.GetLogFileNamePrefix // (Final|Native|Public|BlueprintCallable) // @ game+0x1d791f0
	struct FString GetLogFileExtension(); // Function Solarland.SolarGameStatistics.GetLogFileExtension // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79130
	struct FString GetLogFileDir(); // Function Solarland.SolarGameStatistics.GetLogFileDir // (Final|Native|Public|BlueprintCallable) // @ game+0x1d79070
	struct FString GetLogElementSeparater(); // Function Solarland.SolarGameStatistics.GetLogElementSeparater // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78fb0
	struct FString GetLogDataString(bool bIncludeStatistics, struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetLogDataString // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetLogCheckIntervalMS(); // Function Solarland.SolarGameStatistics.GetLogCheckIntervalMS // (Final|Native|Public|BlueprintCallable) // @ game+0x1d78f90
	struct FString GetHeadDataString(struct FString InPlayerID); // Function Solarland.SolarGameStatistics.GetHeadDataString // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetEmptyHeadDataString(); // Function Solarland.SolarGameStatistics.GetEmptyHeadDataString // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CanReportBIWrapper(struct FString InLogType); // Function Solarland.SolarGameStatistics.CanReportBIWrapper // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarGameUserSettings
// Size: 0x198 (Inherited: 0x38)
struct USolarGameUserSettings : UDeveloperSettings {
	struct FPickupUserSettings PickupSettings; // 0x38(0x18)
	struct FGraphicsUserSettings GraphicsSettings; // 0x50(0x38)
	struct FWeaponUserSettings WeaponSettings; // 0x88(0x20)
	struct FLanguageUserSettings LanguageSettings; // 0xa8(0x03)
	struct FCharacterVoiceUserSettings CharacterVoiceSettings; // 0xab(0x01)
	struct FSoundUserSettings SoundSettings; // 0xac(0x2c)
	struct FBasicUserSettings BasicSettings; // 0xd8(0x07)
	char pad_DF[0x1]; // 0xdf(0x01)
	struct FSensitivityUserSettings SensitivitySettings; // 0xe0(0x8c)
	struct FShakeUserSettings ShakeSettings; // 0x16c(0x01)
	struct FVehicleControlUserSettings DriverSettings; // 0x16d(0x04)
	struct FChatOperatorUserSettings ChatOperatorSettings; // 0x171(0x02)
	char pad_173[0x5]; // 0x173(0x05)
	struct FSoftClassPath DefaultSettingsRangePath; // 0x178(0x18)
	bool bIsSynchronized; // 0x190(0x01)
	enum class EConfigVersion ConfigVersion; // 0x191(0x01)
	bool bFirstTimeLanunchGame; // 0x192(0x01)
	char pad_193[0x5]; // 0x193(0x05)

	struct FString ToJsonObjectString(); // Function Solarland.SolarGameUserSettings.ToJsonObjectString // (Final|Native|Public|Const) // @ game+0x1d84af0
	struct FWeaponUserSettings GetWeaponSettings(); // Function Solarland.SolarGameUserSettings.GetWeaponSettings // (Native|Public|Const) // @ game+0x1d84810
	struct FSoundUserSettings GetSoundSettings(); // Function Solarland.SolarGameUserSettings.GetSoundSettings // (Native|Public|Const) // @ game+0x1d847c0
	struct FShakeUserSettings GetShakeSettings(); // Function Solarland.SolarGameUserSettings.GetShakeSettings // (Native|Public|Const) // @ game+0x1d84780
	struct FSensitivityUserSettings GetSensitivitySettings(); // Function Solarland.SolarGameUserSettings.GetSensitivitySettings // (Native|Public|Const) // @ game+0x1d846f0
	struct FPickupUserSettings GetPickupSettings(); // Function Solarland.SolarGameUserSettings.GetPickupSettings // (Native|Public|Const) // @ game+0x1d846b0
	struct FLanguageUserSettings GetLanguageSettings(); // Function Solarland.SolarGameUserSettings.GetLanguageSettings // (Native|Public|Const) // @ game+0x1d84670
	struct FGraphicsUserSettings GetGraphicsSettings(); // Function Solarland.SolarGameUserSettings.GetGraphicsSettings // (Native|Public|Const) // @ game+0x1d84630
	struct FVehicleControlUserSettings GetDriverSettings(); // Function Solarland.SolarGameUserSettings.GetDriverSettings // (Native|Public|Const) // @ game+0x1d845f0
	struct FChatOperatorUserSettings GetChatOperatorSettings(); // Function Solarland.SolarGameUserSettings.GetChatOperatorSettings // (Native|Public|Const) // @ game+0x1d845b0
	struct FCharacterVoiceUserSettings GetCharacterVoiceSettings(); // Function Solarland.SolarGameUserSettings.GetCharacterVoiceSettings // (Native|Public|Const) // @ game+0x1d84570
	struct FBasicUserSettings GetBasicSettings(); // Function Solarland.SolarGameUserSettings.GetBasicSettings // (Native|Public|Const) // @ game+0x1d84530
	void FromJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.FromJsonObjectString // (Final|Native|Public) // @ game+0x1d84490
	bool CheckJsonObjectString(struct FString JsonStr); // Function Solarland.SolarGameUserSettings.CheckJsonObjectString // (Final|Native|Public|Const) // @ game+0x1d843b0
};

// Class Solarland.SolarGameUserSettingsMgr
// Size: 0x68 (Inherited: 0x28)
struct USolarGameUserSettingsMgr : UObject {
	struct USolarGameUserSettings* CurGameUserSettings; // 0x28(0x08)
	struct USolarGameSettingsRange* DefaultGameSettingsRange; // 0x30(0x08)
	bool bIsDefalutSettings; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x40(0x08)
	char pad_48[0x20]; // 0x48(0x20)

	void SynchronizeInputSettings(); // Function Solarland.SolarGameUserSettingsMgr.SynchronizeInputSettings // (Final|Native|Private) // @ game+0x1d84ad0
	void SaveGameSettings(); // Function Solarland.SolarGameUserSettingsMgr.SaveGameSettings // (Final|Native|Public) // @ game+0x1d84ab0
	void ResetToDefault(enum class ESolarGameUserSettingPart SettingPart); // Function Solarland.SolarGameUserSettingsMgr.ResetToDefault // (Final|Native|Public) // @ game+0x1d84a30
	void RefreshValid(struct USolarGameInstanceBase* GameInstance, bool SaveIfDirty); // Function Solarland.SolarGameUserSettingsMgr.RefreshValid // (Final|Native|Public) // @ game+0x1d84960
	void RefreshAnalogCursorSpeed(); // Function Solarland.SolarGameUserSettingsMgr.RefreshAnalogCursorSpeed // (Final|Native|Public) // @ game+0x1d84940
	void OnSettingConfigSaved(); // Function Solarland.SolarGameUserSettingsMgr.OnSettingConfigSaved // (Final|Native|Public) // @ game+0x1d84920
	void OnPickupSettingChanged(); // Function Solarland.SolarGameUserSettingsMgr.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x1d84900
	bool IsLowLevelDevice(); // Function Solarland.SolarGameUserSettingsMgr.IsLowLevelDevice // (Final|Native|Public) // @ game+0x1d848d0
	void InitializeSettings(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.InitializeSettings // (Final|Native|Public) // @ game+0x8e33f0
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarGameUserSettingsMgr.Init // (Final|Native|Public) // @ game+0x1d84850
	bool FixConfigVersion(); // Function Solarland.SolarGameUserSettingsMgr.FixConfigVersion // (Final|Native|Public) // @ game+0x1d84460
};

// Class Solarland.SolarGameUserSettingsPC
// Size: 0x388 (Inherited: 0x198)
struct USolarGameUserSettingsPC : USolarGameUserSettings {
	struct FSensitivityUserSettings SensitivitySettingsKeyboard; // 0x198(0x8c)
	struct FSensitivityUserSettings SensitivitySettingsGamepad; // 0x224(0x8c)
	struct FMouseAndKeyboardSettings KeyboardControlSettings; // 0x2b0(0x08)
	struct FGamepadSettings GamepadSettings; // 0x2b8(0xc8)
	bool bEnableCursorNoticePanel; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
};

// Class Solarland.SolarVehicleAnimInstance
// Size: 0x2f0 (Inherited: 0x270)
struct USolarVehicleAnimInstance : UAnimInstance {
	struct FRotator VehicleRudderRotator; // 0x270(0x0c)
	float VehicleRotationValue; // 0x27c(0x04)
	float VehicleRotationPercent; // 0x280(0x04)
	float VehicleCameraYaw; // 0x284(0x04)
	float VehicleCameraPitch; // 0x288(0x04)
	bool bWithDriver; // 0x28c(0x01)
	bool bAbilityActivated; // 0x28d(0x01)
	char pad_28E[0x2]; // 0x28e(0x02)
	float Speed; // 0x290(0x04)
	float VelocityDegree; // 0x294(0x04)
	struct FVector2D PlayerInputVector; // 0x298(0x08)
	bool bVehicleInAir; // 0x2a0(0x01)
	bool bEquipWeapon; // 0x2a1(0x01)
	char pad_2A2[0x6]; // 0x2a2(0x06)
	struct UAnimMontage* VehicleWeaponFireMontage; // 0x2a8(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2b0(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2bc(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2c8(0x0c)
	struct FVector RightBoneIKOffset; // 0x2d4(0x0c)
	bool bUpdateVisual; // 0x2e0(0x01)
	char pad_2E1[0xf]; // 0x2e1(0x0f)

	void OnFireMontageStart(float InMontageLength); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageStart // (Native|Event|Public|BlueprintEvent) // @ game+0x1257610
	void OnFireMontageEnd(struct UAnimMontage* InMontage, bool bInterrupted); // Function Solarland.SolarVehicleAnimInstance.OnFireMontageEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x1ed08a0
	struct ASolarVehiclePawn* GetVehiclePawnOwner(); // Function Solarland.SolarVehicleAnimInstance.GetVehiclePawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ed0280
	float GetPlayTimeAgainstFootLocationCurve(struct UAnimSequence* InAnimSequence, struct FName& InCurveName, float InFootLocationValue); // Function Solarland.SolarVehicleAnimInstance.GetPlayTimeAgainstFootLocationCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1ed0040
};

// Class Solarland.SolarLeggedVehicleAnimInstance
// Size: 0x3b0 (Inherited: 0x2f0)
struct USolarLeggedVehicleAnimInstance : USolarVehicleAnimInstance {
	bool bVehicleJumpReqeust; // 0x2f0(0x01)
	char pad_2F1[0x3]; // 0x2f1(0x03)
	float YawDifference; // 0x2f4(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x2f8(0x01)
	char pad_2F9[0x3]; // 0x2f9(0x03)
	struct FVector RotationBlend; // 0x2fc(0x0c)
	float ProceduralWalkingAlpha; // 0x308(0x04)
	struct FVector BodyRelativeLocation; // 0x30c(0x0c)
	struct FRotator BodyRelativeRotator; // 0x318(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x324(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x330(0x0c)
	struct FVector MLFootIKEffectorLocation; // 0x33c(0x0c)
	struct FVector MRFootIKEffectorLocation; // 0x348(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x354(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x360(0x0c)
	float FLFootIKAlpha; // 0x36c(0x04)
	float FRFootIKAlpha; // 0x370(0x04)
	float MLFootIKAlpha; // 0x374(0x04)
	float MRFootIKAlpha; // 0x378(0x04)
	float BLFootIKAlpha; // 0x37c(0x04)
	float BRFootIKAlpha; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x388(0x10)
	float LeftFootLocationX; // 0x398(0x04)
	float RightFootLocationX; // 0x39c(0x04)
	char pad_3A0[0x10]; // 0x3a0(0x10)

	void AnimNotify_EnableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableInput // (Final|Native|Public) // @ game+0x1dbb800
	void AnimNotify_EnableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_EnableIK // (Final|Native|Public) // @ game+0x1dbb7e0
	void AnimNotify_DisableInput(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableInput // (Final|Native|Public) // @ game+0x1dbb7c0
	void AnimNotify_DisableIK(); // Function Solarland.SolarLeggedVehicleAnimInstance.AnimNotify_DisableIK // (Final|Native|Public) // @ game+0x1dbb7a0
};

// Class Solarland.SolarGatlingVehicleAnimInstance
// Size: 0x3b0 (Inherited: 0x3b0)
struct USolarGatlingVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	float GatlingRollSpeed; // 0x3a8(0x04)
};

// Class Solarland.SolarGauntletController
// Size: 0x38 (Inherited: 0x30)
struct USolarGauntletController : UGauntletTestController {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarGauntletBPAutoTestController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletBPAutoTestController : USolarGauntletController {
};

// Class Solarland.SolarGauntletBPBase
// Size: 0x238 (Inherited: 0x228)
struct ASolarGauntletBPBase : AActor {
	char pad_228[0x10]; // 0x228(0x10)

	void StopTesting(float Delay); // Function Solarland.SolarGauntletBPBase.StopTesting // (Native|Public|BlueprintCallable) // @ game+0x1d88ea0
	void SendLocalCharactorMoveTo(struct FVector Vector); // Function Solarland.SolarGauntletBPBase.SendLocalCharactorMoveTo // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d88b90
};

// Class Solarland.SolarGauntletClientController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletClientController : USolarGauntletController {
};

// Class Solarland.SolarGauntletClientSmokeController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletClientSmokeController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USolarGauntletBlueprintLibrary : UBlueprintFunctionLibrary {

	void EndTest(int32_t ExitCode); // Function Solarland.SolarGauntletBlueprintLibrary.EndTest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d88510
	void BookmarkEnd(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d87ae0
	void BookmarkBegin(struct FString Message); // Function Solarland.SolarGauntletBlueprintLibrary.BookmarkBegin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1d87a50
};

// Class Solarland.SolarGauntletPSOGatherBP
// Size: 0x238 (Inherited: 0x238)
struct ASolarGauntletPSOGatherBP : ASolarGauntletBPBase {

	void StartPSOGathering(); // Function Solarland.SolarGauntletPSOGatherBP.StartPSOGathering // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88e80
	void SendTravelToNextLevel(float InFirstDelay); // Function Solarland.SolarGauntletPSOGatherBP.SendTravelToNextLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88d00
	void SendStartLevelScriptEvent(struct FString FunctionName); // Function Solarland.SolarGauntletPSOGatherBP.SendStartLevelScriptEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88c20
};

// Class Solarland.SolarGauntletPSOGatherController
// Size: 0x98 (Inherited: 0x38)
struct USolarGauntletPSOGatherController : USolarGauntletController {
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarGauntletReplayController
// Size: 0x40 (Inherited: 0x38)
struct USolarGauntletReplayController : USolarGauntletController {
	char pad_38[0x8]; // 0x38(0x08)

	void OnPostEndPlay(); // Function Solarland.SolarGauntletReplayController.OnPostEndPlay // (Final|Native|Private) // @ game+0x1d88b40
};

// Class Solarland.SolarGauntletServerController
// Size: 0x50 (Inherited: 0x38)
struct USolarGauntletServerController : USolarGauntletController {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Solarland.SolarGauntletServerSmokeController
// Size: 0x38 (Inherited: 0x38)
struct USolarGauntletServerSmokeController : USolarGauntletController {
};

// Class Solarland.SolarGlobalEventBase
// Size: 0x28 (Inherited: 0x28)
struct USolarGlobalEventBase : UObject {
};

// Class Solarland.SolarGlobalEventSystem
// Size: 0x120 (Inherited: 0x30)
struct USolarGlobalEventSystem : UGameInstanceSubsystem {
	struct TMap<struct USolarGlobalEventBase*, struct FMulticastInlineDelegate> ListenerEventsByClass; // 0x30(0x50)
	struct TMap<struct FName, struct FMulticastInlineDelegate> ListenerEventsByName; // 0x80(0x50)
	struct TMap<struct FGameplayTag, struct FMulticastInlineDelegate> ListenerEventsByGameplayTag; // 0xd0(0x50)

	void UnbindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d893c0
	void UnbindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d892d0
	void UnbindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.UnbindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d891e0
	void UnbindAllGlobalEventsByName(struct UObject* Unsubscriber, struct FName EventName); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1d89120
	void UnbindAllGlobalEventsByGameplayTag(struct UObject* Unsubscriber, struct FGameplayTag EventGameplayTag); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1d89060
	void UnbindAllGlobalEventsByClass(struct UObject* Unsubscriber, struct USolarGlobalEventBase* EventClass); // Function Solarland.SolarGlobalEventSystem.UnbindAllGlobalEventsByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88fa0
	void GetAllBoundObjectsToEventByName(struct FName EventName, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d88970
	void GetAllBoundObjectsToEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d88880
	void GetAllBoundObjectsToEventByClass(struct USolarGlobalEventBase* EventClass, struct TArray<struct UObject*>& Objects); // Function Solarland.SolarGlobalEventSystem.GetAllBoundObjectsToEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1d88790
	void GetAllActiveGlobalEventsClass(struct TArray<struct USolarGlobalEventBase*>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventsClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d886e0
	void GetAllActiveGlobalEventNames(struct TArray<struct FName>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d88630
	void GetAllActiveGlobalEventGameplayTag(struct TArray<struct FGameplayTag>& Events); // Function Solarland.SolarGlobalEventSystem.GetAllActiveGlobalEventGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d88580
	void ClearGlobalEventByName(struct FName EventName, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88370
	void ClearGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByGameplayTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1d882a0
	void ClearGlobalEventByClass(struct USolarGlobalEventBase* EventClass, bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearGlobalEventByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1d881d0
	void ClearAllGlobalEventsClass(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventsClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88140
	void ClearAllGlobalEventNames(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventNames // (Final|Native|Public|BlueprintCallable) // @ game+0x1d880b0
	void ClearAllGlobalEventGameplayTags(bool bForceClear); // Function Solarland.SolarGlobalEventSystem.ClearAllGlobalEventGameplayTags // (Final|Native|Public|BlueprintCallable) // @ game+0x1d88020
	void CallGlobalEventByName(struct UObject* Publisher, struct FName EventName, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87e90
	void CallGlobalEventByGameplayTag(struct UObject* Publisher, struct FGameplayTag EventGameplayTag, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87d00
	void CallGlobalEventByClass(struct UObject* Publisher, struct USolarGlobalEventBase* EventClass, struct UObject* Payload, struct TArray<struct FString>& MetaData); // Function Solarland.SolarGlobalEventSystem.CallGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87b70
	void BindGlobalEventByName(struct FName EventName, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87960
	void BindGlobalEventByGameplayTag(struct FGameplayTag EventGameplayTag, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByGameplayTag // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87870
	void BindGlobalEventByClass(struct USolarGlobalEventBase* EventClass, struct FDelegate& Event); // Function Solarland.SolarGlobalEventSystem.BindGlobalEventByClass // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d87780
};

// Class Solarland.SolarPostProcessSettingItem
// Size: 0x16f0 (Inherited: 0x28)
struct USolarPostProcessSettingItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FColorGradingItem ColorGradingItem[0x4]; // 0x30(0x16c0)
};

// Class Solarland.SolarGraphicSettings
// Size: 0x2e8 (Inherited: 0x28)
struct USolarGraphicSettings : UObject {
	uint32_t CurrentActiveColorThemeIndex; // 0x28(0x04)
	struct FFrameRateLevelItem FrameRateLevelItem[0x5]; // 0x2c(0x50)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TMap<enum class ESolarGraphicsQualityLevel, enum class ESolarFrameRateLevel> DefaultQualityToDefaultFrameRateLevel; // 0x80(0x50)
	struct TMap<enum class ESolarGraphicsQualityLevel, struct FMaxQualityConfig> DefaultAndCurQualityToMaxFrameRateLevel; // 0xd0(0x50)
	int32_t MobileMaxFrameRate; // 0x120(0x04)
	int32_t HighRefreshRateThreshold; // 0x124(0x04)
	int32_t DefaultMSAALevel; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FContentScaleFactorLevelItem ContentScaleFactorLevelItems[0x4]; // 0x130(0x160)
	struct TMap<enum class ESolarDeviceLevel, enum class ESolarContentScaleFactorLevel> DefaultContentScaleFactorLevel; // 0x290(0x50)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Solarland.SolarGroundPreviewActor
// Size: 0x428 (Inherited: 0x228)
struct ASolarGroundPreviewActor : ASolarDormantActor {
	char pad_228[0x40]; // 0x228(0x40)
	struct FSolarItemData ItemData; // 0x268(0xb0)
	float SpawnOffset; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct USphereComponent* SphereComponent; // 0x320(0x08)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0x328(0x10)
	struct FSoftObjectPath OutlineMatPath; // 0x338(0x18)
	char pad_350[0x8]; // 0x350(0x08)
	struct TArray<char> MarkedTeamIdList; // 0x358(0x10)
	int32_t WeaponLevel; // 0x368(0x04)
	enum class EWeaponType WeaponType; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	int32_t FireModeNameLocalizationID; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct FSlateBrush TriggerIcon; // 0x378(0x98)
	int32_t weaponid; // 0x410(0x04)
	bool bIsItemWeapon; // 0x414(0x01)
	bool bIsSummonVehicleWeapon; // 0x415(0x01)
	bool bIsAntiVehicleWeapon; // 0x416(0x01)
	char pad_417[0x1]; // 0x417(0x01)
	struct USkeletalMeshComponent* SkeletalMeshComp; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)

	void UnMarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.UnMarkThisItem // (Native|Public) // @ game+0x1d88f20
	void SetItemData(struct FSolarItemData& _ItemData); // Function Solarland.SolarGroundPreviewActor.SetItemData // (Native|Public|HasOutParms) // @ game+0x1d88d80
	void OnServerPawned(); // Function Solarland.SolarGroundPreviewActor.OnServerPawned // (Native|Public) // @ game+0x1d88b60
	void OnRep_ItemDataChange(); // Function Solarland.SolarGroundPreviewActor.OnRep_ItemDataChange // (Native|Public) // @ game+0x7e17a0
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarGroundPreviewActor.NotifyThisItemWasPickedUp // (Final|Native|Public) // @ game+0x1d88b20
	void MarkThisItem(char TeamID); // Function Solarland.SolarGroundPreviewActor.MarkThisItem // (Native|Public) // @ game+0x1d88aa0
	int32_t GetQuality(); // Function Solarland.SolarGroundPreviewActor.GetQuality // (Native|Public) // @ game+0x1d88a60
};

// Class Solarland.SolarHealAndArmorPile
// Size: 0x670 (Inherited: 0x550)
struct ASolarHealAndArmorPile : ASolarPile {
	float HealQuantity; // 0x548(0x04)
	float HealFrequency; // 0x54c(0x04)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x550(0x08)
	float MaterialDynamicOffSetYBegin; // 0x558(0x04)
	float MaterialDynamicOffSetYEnd; // 0x55c(0x04)
	float MaterialDynamicOffSetYCur; // 0x560(0x04)
	struct UUserWidget* FullEffectWidgetClass; // 0x568(0x08)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x570(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x598(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x5c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x5e8(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x610(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x638(0x28)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x660(0x08)
	char pad_66C[0x4]; // 0x66c(0x04)

	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SolarHealAndArmorPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x1d88440
};

// Class Solarland.SolarHomeConnectedGraph
// Size: 0xd0 (Inherited: 0x28)
struct USolarHomeConnectedGraph : UObject {
	struct TSet<struct ASolarHomeActor*> ConnectedFloors; // 0x28(0x50)
	struct TSet<struct ASolarHomeActor*> BaseWalls; // 0x78(0x50)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class Solarland.SolarHomeActor
// Size: 0x3c0 (Inherited: 0x228)
struct ASolarHomeActor : AActor {
	struct UStaticMeshComponent* StaticMeshComp; // 0x228(0x08)
	struct FHomeActorStaticData HomeActorStaticData; // 0x230(0x38)
	struct FHomeActorServerData HomeActorServerData; // 0x268(0x68)
	struct TMap<struct FName, struct FHomeOriginalShader> OriginalShaders; // 0x2d0(0x50)
	char pad_320[0x10]; // 0x320(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0x330(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x338(0x10)
	struct TMap<struct ASolarHomeActor*, int32_t> HitHomeActors; // 0x348(0x50)
	struct USolarHomeConnectedGraph* CurrentConnectedGraph; // 0x398(0x08)
	struct TArray<struct ASolarHomeActor*> NeighborFloors; // 0x3a0(0x10)
	struct TArray<struct ASolarHomeActor*> NeighborWalls; // 0x3b0(0x10)

	void UpdateHomeActor(struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.UpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d91560
	void UpdateHitHomeActors(struct ASolarHomeActor* NewActor, bool isAdd); // Function Solarland.SolarHomeActor.UpdateHitHomeActors // (Final|Native|Private) // @ game+0x1d91490
	void SetStaticData(struct FHomeActorStaticData& NewData); // Function Solarland.SolarHomeActor.SetStaticData // (Final|Native|Protected|HasOutParms) // @ game+0x1d90b70
	void SetServerData(struct FHomeActorServerData& NewData); // Function Solarland.SolarHomeActor.SetServerData // (Final|Native|Protected|HasOutParms) // @ game+0x1d909f0
	void SetMaterial(struct FHomeActorServerData& InServerData, bool bPlaceable); // Function Solarland.SolarHomeActor.SetMaterial // (Final|Native|Protected|HasOutParms) // @ game+0x1d90830
	void OnOverlayEnd(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarHomeActor.OnOverlayEnd // (Final|Native|Private) // @ game+0x1d900b0
	void OnOverlayBegin(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarHomeActor.OnOverlayBegin // (Final|Native|Private|HasOutParms) // @ game+0x1d8feb0
	void OnOverLap(struct AActor* OtherActor, bool isHitBegin); // Function Solarland.SolarHomeActor.OnOverLap // (Final|Native|Private) // @ game+0x1d8fde0
	void OnCreatedByServer(struct FHomeActorStaticData& NewStaticData, struct FHomeActorServerData& NewServerData); // Function Solarland.SolarHomeActor.OnCreatedByServer // (Final|Native|Public|HasOutParms) // @ game+0x1d8fb10
	void OnCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActor.OnCanSaveChanged // (Final|Native|Private) // @ game+0x1d8fa80
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActor.GetTextureDataTable // (Final|Native|Private) // @ game+0x1d8f7e0
	struct UStaticMeshComponent* GetStaticMeshComp(); // Function Solarland.SolarHomeActor.GetStaticMeshComp // (Final|Native|Public) // @ game+0x1423cd0
	struct FHomeActorStaticData GetStaticData(); // Function Solarland.SolarHomeActor.GetStaticData // (Final|Native|Public|Const) // @ game+0x1d8f620
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActor.GetShaderConfig // (Final|Native|Private) // @ game+0x1d8f5c0
	struct FHomeActorServerData GetServerData(); // Function Solarland.SolarHomeActor.GetServerData // (Final|Native|Public|Const) // @ game+0x1d8f590
	bool GetNextLegalRotator(float RotAngle, struct FRotator& OutNextRot); // Function Solarland.SolarHomeActor.GetNextLegalRotator // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d8f4b0
	enum class EHomeActorSurfaceDir GetHitSurface(struct FVector& HitNormal); // Function Solarland.SolarHomeActor.GetHitSurface // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d8ead0
	bool GetCanSave(); // Function Solarland.SolarHomeActor.GetCanSave // (Final|Native|Public) // @ game+0x1d8e9b0
	bool CanSelected(); // Function Solarland.SolarHomeActor.CanSelected // (Final|Native|Public) // @ game+0x1d8dea0
	bool CanRemove(); // Function Solarland.SolarHomeActor.CanRemove // (Final|Native|Public) // @ game+0x1d8de70
};

// Class Solarland.SolarHomeActorManager
// Size: 0x650 (Inherited: 0x28)
struct USolarHomeActorManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TMap<struct FString, struct ASolarHomeActor*> SpawnedHomeActors; // 0x38(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> SpawnedConstructsLocKey; // 0x88(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeActor*> PreviewConstructsLocKey; // 0xd8(0x50)
	struct TSet<struct USolarHomeConnectedGraph*> ConnectedGraphSet; // 0x128(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> ClippingHomeActors; // 0x178(0x50)
	struct TMap<struct FString, struct ASolarHomeActor*> InValidHomeActors; // 0x1c8(0x50)
	struct TMap<struct FString, struct USubPoolOfHomeActor*> HomeActorPools; // 0x218(0x50)
	struct TMap<int32_t, struct FHomeActorStaticData> StaticDataMap; // 0x268(0x50)
	struct TMap<struct FString, struct UObject*> HomeActorClassPool; // 0x2b8(0x50)
	char pad_308[0x70]; // 0x308(0x70)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> SpawnedSpacesLocKey; // 0x378(0x50)
	struct TMap<struct FIntVector, struct ASolarHomeBaseSpace*> ShowsSpacesLocKey; // 0x3c8(0x50)
	char pad_418[0x58]; // 0x418(0x58)
	struct UDataTable* HomeObjectTable; // 0x470(0x08)
	struct USolarHomeShaderConfig* ShaderConfig; // 0x478(0x08)
	struct UDataTable* TextureDataTable; // 0x480(0x08)
	struct UDataTable* IconDataTable; // 0x488(0x08)
	struct UDataTable* PicDataTable; // 0x490(0x08)
	int32_t BuildCountPerFrame; // 0x498(0x04)
	char pad_49C[0x14]; // 0x49c(0x14)
	struct ASolarHomeSpaceSpawner* HomeSpaceSpawner; // 0x4b0(0x08)
	struct ASolarHomePlayerController* HomePlayerCtrl; // 0x4b8(0x08)
	char pad_4C0[0x20]; // 0x4c0(0x20)
	struct ASolarWaterActorNew* WaterActor; // 0x4e0(0x08)
	struct TMap<struct FHomeShaderData, struct UMaterialInstanceDynamic*> HomeObjShadersPool; // 0x4e8(0x50)
	char pad_538[0x41]; // 0x538(0x41)
	bool bIsConstruct; // 0x579(0x01)
	bool IsLoadingOpen; // 0x57a(0x01)
	char pad_57B[0x2d]; // 0x57b(0x2d)
	struct TSet<struct ASolarHomeDragUI*> CacheDragUIs; // 0x5a8(0x50)
	struct TSet<struct ASolarHomeDragUI*> UsedDragUIs; // 0x5f8(0x50)
	char pad_648[0x8]; // 0x648(0x08)

	void UpdateCanSendSaveMsg(); // Function Solarland.SolarHomeActorManager.UpdateCanSendSaveMsg // (Final|Native|Private) // @ game+0x1d91470
	void UpdateCameraLayer(int32_t NewLayer); // Function Solarland.SolarHomeActorManager.UpdateCameraLayer // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool TrySelectHomeActor(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.TrySelectHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d91370
	bool TrySaveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TrySaveAllHomeActors // (Final|Native|Public) // @ game+0x1d91340
	void TryResetAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryResetAllHomeActors // (Final|Native|Public) // @ game+0x1d91320
	void TryRemoveHomeActors(struct TArray<struct FString>& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x1d91250
	void TryRemoveHomeActor(struct FString& RemoveThisID); // Function Solarland.SolarHomeActorManager.TryRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d911a0
	void TryRemoveAllInvalidHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllInvalidHomeActors // (Final|Native|Public) // @ game+0x1d91180
	void TryRemoveAllHomeActors(); // Function Solarland.SolarHomeActorManager.TryRemoveAllHomeActors // (Final|Native|Public) // @ game+0x1d91160
	void TryDyeHomeActor(struct FString& DyeThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.TryDyeHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d90fe0
	void TryCreateHomeActorsNoLimit(struct TArray<struct FHomeBuildReqData>& ReqDataArr); // Function Solarland.SolarHomeActorManager.TryCreateHomeActorsNoLimit // (Final|Native|Public|HasOutParms) // @ game+0x1d90f00
	void TryCreateHomeActors(struct TArray<struct FHomeBuildReqData>& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActors // (Final|Native|Public|HasOutParms) // @ game+0x1d90e20
	void TryCreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeActorManager.TryCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d90cf0
	void TryConfirmHomeActor(struct FString& SelectedThisID, bool bCancel); // Function Solarland.SolarHomeActorManager.TryConfirmHomeActor // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void TryCancelHomeActor(struct FString& SelectedThisID); // Function Solarland.SolarHomeActorManager.TryCancelHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d90c40
	void SetLastSelectingThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x1d90780
	void SetLastCreateThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.SetLastCreateThisID // (Final|Native|Public|HasOutParms) // @ game+0x1d906d0
	void SetIsConstruct(bool bNewConstruct); // Function Solarland.SolarHomeActorManager.SetIsConstruct // (Final|Native|Public) // @ game+0x1d90650
	void SetHomeActorValid(struct ASolarHomeActor* TargetActor, bool bNewValid); // Function Solarland.SolarHomeActorManager.SetHomeActorValid // (Final|Native|Public) // @ game+0x1d90580
	void SetHoldingType(enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.SetHoldingType // (Final|Native|Public) // @ game+0x1d90500
	void SetDragUILoc(struct ASolarHomeDragUI* TargetUI, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.SetDragUILoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d90430
	void SetCurSelectingThisID(struct FString& InThisID, bool bSelected); // Function Solarland.SolarHomeActorManager.SetCurSelectingThisID // (Final|Native|Public|HasOutParms) // @ game+0x1d90330
	void SetCurBuildingID(int32_t NewItemID); // Function Solarland.SolarHomeActorManager.SetCurBuildingID // (Final|Native|Public) // @ game+0x1d902b0
	void SelectHomeActor_Request(struct FString& SelectedThisID, bool bSelect); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void SelectHomeActor_Other(struct FString ThisID); // Function Solarland.SolarHomeActorManager.SelectHomeActor_Other // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SaveBuilding_Request(bool bSave); // Function Solarland.SolarHomeActorManager.SaveBuilding_Request // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void RotateHomeActor(struct ASolarHomeActor* TargetHomeActor, int32_t DeltaAngle); // Function Solarland.SolarHomeActorManager.RotateHomeActor // (Final|Native|Public) // @ game+0x1d901f0
	void RemoveHomeActors_Request(struct TArray<struct FString>& WillRemoveThisIDs); // Function Solarland.SolarHomeActorManager.RemoveHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void RemoveHomeActor_Request(struct FString& WillRemoveThisID); // Function Solarland.SolarHomeActorManager.RemoveHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void RemoveAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.RemoveAllHomeActors_Request // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnSelectingThisIDChanged(bool bSelect, struct FString& NewThisID); // Function Solarland.SolarHomeActorManager.OnSelectingThisIDChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void OnSelectingActorCanSaveChanged(bool bNewCanSave); // Function Solarland.SolarHomeActorManager.OnSelectingActorCanSaveChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool OnIsDragChanged(bool bIsDrag); // Function Solarland.SolarHomeActorManager.OnIsDragChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnInvalidActorsCountChanged(int32_t NewCount); // Function Solarland.SolarHomeActorManager.OnInvalidActorsCountChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnHoldingTypeChanged(enum class EHomeActor_SecondType OldType, enum class EHomeActor_SecondType NewType); // Function Solarland.SolarHomeActorManager.OnHoldingTypeChanged // (Final|Native|Public) // @ game+0x1d8fd20
	void NotifyWhenWallDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenWallDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyWhenFloorDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenFloorDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyWhenClickActorOnOtherFloor(); // Function Solarland.SolarHomeActorManager.NotifyWhenClickActorOnOtherFloor // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyWhenCeilingDevicePutOnOtherPlace(); // Function Solarland.SolarHomeActorManager.NotifyWhenCeilingDevicePutOnOtherPlace // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyLoadingUIChanged(bool bShow); // Function Solarland.SolarHomeActorManager.NotifyLoadingUIChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void MoveDevice(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeActor* ParHomeActor, enum class EHomeActorSurfaceDir HitDir, struct FVector& NewLoc); // Function Solarland.SolarHomeActorManager.MoveDevice // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d8f930
	void MoveConstruct(struct ASolarHomeActor* TargetHomeActor, struct ASolarHomeBaseSpace* NewSpace); // Function Solarland.SolarHomeActorManager.MoveConstruct // (Final|Native|Public) // @ game+0x1d8f870
	bool HasFoundation(); // Function Solarland.SolarHomeActorManager.HasFoundation // (Final|Native|Public) // @ game+0x1d8f840
	struct UDataTable* GetTextureDataTable(); // Function Solarland.SolarHomeActorManager.GetTextureDataTable // (Final|Native|Public) // @ game+0x1d8f810
	struct FHomeActorStaticData GetStaticDataByItemID(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetStaticDataByItemID // (Final|Native|Public) // @ game+0x1d8f6a0
	struct USolarHomeShaderConfig* GetShaderConfig(); // Function Solarland.SolarHomeActorManager.GetShaderConfig // (Final|Native|Public) // @ game+0x1d8f5f0
	void GetMeshDefaultMat(int64_t InItemID, struct TArray<struct FBuildMeshSlotData>& outData); // Function Solarland.SolarHomeActorManager.GetMeshDefaultMat // (Final|Native|Public|HasOutParms) // @ game+0x1d8f390
	struct FString GetLastCreateThisID(); // Function Solarland.SolarHomeActorManager.GetLastCreateThisID // (Final|Native|Public|Const) // @ game+0x1d8f2d0
	int32_t GetInvalidActorsCount(); // Function Solarland.SolarHomeActorManager.GetInvalidActorsCount // (Final|Native|Public) // @ game+0x1d8f2b0
	struct ASolarHomeSpaceSpawner* GetHomeSpaceSpawner(); // Function Solarland.SolarHomeActorManager.GetHomeSpaceSpawner // (Final|Native|Public) // @ game+0x1d8f280
	struct ASolarHomePlayerController* GetHomePlayerCtrl(); // Function Solarland.SolarHomeActorManager.GetHomePlayerCtrl // (Final|Native|Public) // @ game+0x1d8f250
	bool GetHomePicConfig(struct FString Name, struct FHomePic& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomePicConfig // (Final|Native|Public|HasOutParms) // @ game+0x1d8f0e0
	bool GetHomeObjectConfig(int32_t InItemID, struct FHomeObject& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeObjectConfig // (Final|Native|Public|HasOutParms) // @ game+0x1d8ef70
	bool GetHomeIconConfig(struct FString Name, struct FHomeIcon& OutConfig); // Function Solarland.SolarHomeActorManager.GetHomeIconConfig // (Final|Native|Public|HasOutParms) // @ game+0x1d8ede0
	enum class EHomeActor_SecondType GetHomeActorSecondType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorSecondType // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	enum class EHomeActor_FirstType GetHomeActorFirstType(int32_t ItemID); // Function Solarland.SolarHomeActorManager.GetHomeActorFirstType // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct ASolarHomeActor* GetHomeActorByThisID(struct FString& InThisID); // Function Solarland.SolarHomeActorManager.GetHomeActorByThisID // (Final|Native|Public|HasOutParms) // @ game+0x1d8ed00
	struct ASolarHomeActor* GetHomeActorByLoc(struct FVector& InLoc); // Function Solarland.SolarHomeActorManager.GetHomeActorByLoc // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d8eb70
	struct FString GetCurSelectingThisID(); // Function Solarland.SolarHomeActorManager.GetCurSelectingThisID // (Final|Native|Public|Const) // @ game+0x1d8ea10
	enum class EHomeActor_SecondType GetCurHoldingItemType(); // Function Solarland.SolarHomeActorManager.GetCurHoldingItemType // (Final|Native|Public|Const) // @ game+0x1d8e9f0
	int32_t GetCurBuildingID(); // Function Solarland.SolarHomeActorManager.GetCurBuildingID // (Final|Native|Public|Const) // @ game+0x1d8e9d0
	bool GetActorCanSave(struct ASolarHomeActor* InActor); // Function Solarland.SolarHomeActorManager.GetActorCanSave // (Final|Native|Public) // @ game+0x1d8e920
	void ExportHomeActorDataToPath(struct FString FilePath); // Function Solarland.SolarHomeActorManager.ExportHomeActorDataToPath // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void DyeingHomeActor_Request(struct FString& WillDyeingThisID, struct FString& SlotName, struct FString& TexturesID); // Function Solarland.SolarHomeActorManager.DyeingHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void DeSelectAllHomeActors_Request(); // Function Solarland.SolarHomeActorManager.DeSelectAllHomeActors_Request // (Final|Native|Public) // @ game+0x1d8e900
	void CreateHomeActors_Request(struct TArray<struct FHomeBuildReqData>& WillCreateDatas); // Function Solarland.SolarHomeActorManager.CreateHomeActors_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void CreateHomeActor_Request(struct FHomeBuildReqData& WillCreateData); // Function Solarland.SolarHomeActorManager.CreateHomeActor_Request // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void ClientUpdateHomeActor_UseQueue(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x1d8e780
	void ClientUpdateHomeActor(struct FHomeActorServerData& UpdateData); // Function Solarland.SolarHomeActorManager.ClientUpdateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d8e600
	void ClientRemoveHomeActor_UseQueue(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x1d8e480
	void ClientRemoveHomeActor(struct FHomeActorServerData& RemoveData); // Function Solarland.SolarHomeActorManager.ClientRemoveHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d8e300
	void ClientCreateHomeActor_UseQueue(struct FHomeActorServerData& WillCreateData, enum class EHomeLoadingChangeType InLoadingType); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor_UseQueue // (Final|Native|Public|HasOutParms) // @ game+0x1d8e140
	bool ClientCreateHomeActor(struct FHomeActorServerData& WillCreateData, bool InIsConstruct); // Function Solarland.SolarHomeActorManager.ClientCreateHomeActor // (Final|Native|Public|HasOutParms) // @ game+0x1d8df70
	void Clear(); // Function Solarland.SolarHomeActorManager.Clear // (Final|Native|Public) // @ game+0x1d8df50
	void ChangeCameraLayer(int32_t DeltaLayer); // Function Solarland.SolarHomeActorManager.ChangeCameraLayer // (Final|Native|Public) // @ game+0x1d8ded0
	bool CanPreviewWithBuilding(int32_t TypeID); // Function Solarland.SolarHomeActorManager.CanPreviewWithBuilding // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CanDevicePlace(enum class EHomeActor_SecondType DeviceType, struct ASolarHomeActor*& HitConstruct, enum class EHomeActorSurfaceDir& HitDir); // Function Solarland.SolarHomeActorManager.CanDevicePlace // (Final|Native|Public|HasOutParms) // @ game+0x1d8dd50
};

// Class Solarland.SolarHomeBaseSpace
// Size: 0x250 (Inherited: 0x228)
struct ASolarHomeBaseSpace : AActor {
	struct USolarHomeActorManager* HomeActorMgr; // 0x228(0x08)
	struct TArray<struct UBoxComponent*> BoxComps; // 0x230(0x10)
	struct FBaseSpaceData BaseSpaceData; // 0x240(0x0c)
	char pad_24C[0x4]; // 0x24c(0x04)

	void UpdateHomeSpaceByData(struct FBaseSpaceData& NewData); // Function Solarland.SolarHomeBaseSpace.UpdateHomeSpaceByData // (Final|Native|Protected|HasOutParms) // @ game+0x1d959b0
	void ShowBaseSpace(); // Function Solarland.SolarHomeBaseSpace.ShowBaseSpace // (Final|Native|Public) // @ game+0x1d957b0
	void OnBaseSpaceUnOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceUnOccupied // (Final|Native|Public) // @ game+0x1d950b0
	void OnBaseSpaceOccupied(); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceOccupied // (Final|Native|Public) // @ game+0x1d95090
	void OnBaseSpaceCreated(int32_t Layer, enum class EHomeActor_SecondType BaseSpaceType); // Function Solarland.SolarHomeBaseSpace.OnBaseSpaceCreated // (Final|Native|Public) // @ game+0x1d94fd0
	void HideBaseSpace(); // Function Solarland.SolarHomeBaseSpace.HideBaseSpace // (Final|Native|Public) // @ game+0x1d94b10
	struct FBaseSpaceData GetData(); // Function Solarland.SolarHomeBaseSpace.GetData // (Final|Native|Public|Const) // @ game+0x1d948d0
};

// Class Solarland.SolarHomeBuildComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarHomeBuildComponent : UActorComponent {
	char pad_B0[0x10]; // 0xb0(0x10)
	struct USolarHomeActorManager* HomeActorMgr; // 0xc0(0x08)
	float MinCheckDistance; // 0xc8(0x04)
	float MaxCheckDistance; // 0xcc(0x04)
	bool IsBuilding; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	int32_t HoldingItemID; // 0xd4(0x04)
	struct ASolarHomeBaseSpace* HittingActor; // 0xd8(0x08)

	void StopBuild(); // Function Solarland.SolarHomeBuildComponent.StopBuild // (Final|Native|Public) // @ game+0x1d95970
	void StartBuild(); // Function Solarland.SolarHomeBuildComponent.StartBuild // (Final|Native|Public) // @ game+0x1d95910
	void SetBuildingId(int32_t NewItemID); // Function Solarland.SolarHomeBuildComponent.SetBuildingId // (Final|Native|Public) // @ game+0x1d956b0
	void SelecteHomeActor(struct ASolarHomeActor* WillSelectedActor); // Function Solarland.SolarHomeBuildComponent.SelecteHomeActor // (Final|Native|Protected) // @ game+0x1d95630
	void InitHomeBuildComponent(); // Function Solarland.SolarHomeBuildComponent.InitHomeBuildComponent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct ASolarCharacter* GetSolarOwner(); // Function Solarland.SolarHomeBuildComponent.GetSolarOwner // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d94ae0
	void GetHitResult(struct ASolarHomeActor*& HitHomeActor, struct ASolarHomeBaseSpace*& HitBaseSapce, struct FVector& OutHitNormal, struct FVector& OutHitLocation); // Function Solarland.SolarHomeBuildComponent.GetHitResult // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d94900
	void EndBuild(); // Function Solarland.SolarHomeBuildComponent.EndBuild // (Final|Native|Protected) // @ game+0x1d94880
	void EmitBuilding(); // Function Solarland.SolarHomeBuildComponent.EmitBuilding // (Final|Native|Public) // @ game+0x1d94860
	void CreateHomeActor(struct FHomeBuildReqData& ReqData); // Function Solarland.SolarHomeBuildComponent.CreateHomeActor // (Final|Native|Protected|HasOutParms) // @ game+0x1d94730
	bool CanAttachSpace(int32_t ActorId, struct ASolarHomeBaseSpace* WillAttachHomeSpace); // Function Solarland.SolarHomeBuildComponent.CanAttachSpace // (Final|Native|Protected) // @ game+0x1d94310
	void BeginBuild(); // Function Solarland.SolarHomeBuildComponent.BeginBuild // (Final|Native|Protected) // @ game+0x1d94290
};

// Class Solarland.SolarHomeCameraManager
// Size: 0x250 (Inherited: 0xb0)
struct USolarHomeCameraManager : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FCameraMovementParameters CameraMovementSetting; // 0xb8(0x68)
	char pad_120[0x14]; // 0x120(0x14)
	struct FVector LookAtLocation; // 0x134(0x0c)
	struct USolarHomeActorManager* HomeActorMgr; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0x150(0x08)
	struct ACameraActor* BuildCamera; // 0x158(0x08)
	struct AActor* BattleCamera; // 0x160(0x08)
	struct UCameraComponent* BuildCameraComp; // 0x168(0x08)
	char pad_170[0xe0]; // 0x170(0xe0)

	void UpdateSliderScaleUI(float InScale); // Function Solarland.SolarHomeCameraManager.UpdateSliderScaleUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateCameraDistanceUI(float InPercent, float InScale); // Function Solarland.SolarHomeCameraManager.UpdateCameraDistanceUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetNormalCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95790
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomeCameraManager.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95750
	void RotateCameraSpin(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraSpin // (Final|Native|Public|BlueprintCallable) // @ game+0x1d955b0
	void RotateCameraPitch(float Value); // Function Solarland.SolarHomeCameraManager.RotateCameraPitch // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95530
	void MoveCameraRight(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraRight // (Final|Native|Public|BlueprintCallable) // @ game+0x1d94ec0
	void MoveCameraForward(float Value); // Function Solarland.SolarHomeCameraManager.MoveCameraForward // (Final|Native|Public|BlueprintCallable) // @ game+0x1d94e40
	void MoveCamera(int32_t Index, struct FVector& Location, struct TMap<int32_t, struct FVector> FingerLocations); // Function Solarland.SolarHomeCameraManager.MoveCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d94bf0
	bool ChangeCameraMode(enum class EHomeCameraMode InMode); // Function Solarland.SolarHomeCameraManager.ChangeCameraMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1d94570
	void ChangeCameraDistancePercent(bool IsDoubleFinger, float InPercent); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistancePercent // (Final|Native|Public) // @ game+0x1d944a0
	void ChangeCameraDistanceDiff(bool IsDoubleFinger, float InValue); // Function Solarland.SolarHomeCameraManager.ChangeCameraDistanceDiff // (Final|Native|Public) // @ game+0x1d943d0
};

// Class Solarland.SolarHomeCharacter
// Size: 0x2500 (Inherited: 0x2500)
struct ASolarHomeCharacter : ASolarCharacter {
	struct USolarHomeBuildComponent* SolarHomeBuildComponent; // 0x24f8(0x08)

	void MoveToBuildWait(struct FVector& WaitLoc); // Function Solarland.SolarHomeCharacter.MoveToBuildWait // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d94f40
	void CharacterResetOfflinePos(struct FVector& Loc, uint32_t Roll, uint32_t yawPitch); // Function Solarland.SolarHomeCharacter.CharacterResetOfflinePos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d94600
	void Building(); // Function Solarland.SolarHomeCharacter.Building // (Final|Native|Public) // @ game+0x1d942f0
};

// Class Solarland.SolarHomeDragUI
// Size: 0x240 (Inherited: 0x228)
struct ASolarHomeDragUI : AActor {
	char pad_228[0x18]; // 0x228(0x18)
};

// Class Solarland.SolarHomeFloorActor
// Size: 0x3c0 (Inherited: 0x3c0)
struct ASolarHomeFloorActor : ASolarHomeActor {
};

// Class Solarland.SolarHomeMeshConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarHomeMeshConfig : UDataAsset {
	struct TMap<int64_t, struct FBuildMeshData> MeshData; // 0x30(0x50)
};

// Class Solarland.SolarHomePlayerController
// Size: 0xee0 (Inherited: 0xc48)
struct ASolarHomePlayerController : ASolarPlayerController {
	struct UInputComponent* ConstructionInputComponent; // 0xc48(0x08)
	struct USolarHomeActorManager* HomeActorMgr; // 0xc50(0x08)
	struct ASolarHomeActor* DragActor; // 0xc58(0x08)
	float MinCheckDistance; // 0xc60(0x04)
	float MaxCheckDistance; // 0xc64(0x04)
	struct ASolarHomeSpaceSpawner* CacheHomeSpaceSpawner; // 0xc68(0x08)
	bool bIsViewMode; // 0xc70(0x01)
	bool bIsConstruction; // 0xc71(0x01)
	char pad_C72[0x6]; // 0xc72(0x06)
	struct UAkComponent* AkAudioComponent; // 0xc78(0x08)
	float MoveCheckDis; // 0xc80(0x04)
	char pad_C84[0x194]; // 0xc84(0x194)
	float CheckDis; // 0xe18(0x04)
	char pad_E1C[0x94]; // 0xe1c(0x94)
	struct USolarHomeCameraManager* CameraManager; // 0xeb0(0x08)
	struct FVector LookAtLocation; // 0xeb8(0x0c)
	struct FVector OriginalLookAtLocation; // 0xec4(0x0c)
	struct AActor* CurrentViewTarget; // 0xed0(0x08)
	struct AActor* OriginalViewTarget; // 0xed8(0x08)

	void StopBuilding(); // Function Solarland.SolarHomePlayerController.StopBuilding // (Final|Native|Public) // @ game+0x1d95990
	void StartFadeOutEffect(); // Function Solarland.SolarHomePlayerController.StartFadeOutEffect // (Final|Native|Public) // @ game+0x1d95950
	void StartBuilding(); // Function Solarland.SolarHomePlayerController.StartBuilding // (Final|Native|Public) // @ game+0x1d95930
	void SolarGM_Home_ResetLayer(int32_t InLayer); // Function Solarland.SolarHomePlayerController.SolarGM_Home_ResetLayer // (Final|Exec|Native|Public) // @ game+0x1d95890
	void SolarGM_FillUpHome(); // Function Solarland.SolarHomePlayerController.SolarGM_FillUpHome // (Final|Exec|Native|Public) // @ game+0x1d95870
	void SolarGM_ExportHomeActorToPath(struct FString FilePath); // Function Solarland.SolarHomePlayerController.SolarGM_ExportHomeActorToPath // (Final|Exec|Native|Public) // @ game+0x1d957d0
	void ShowBuildMainUI(bool bShow); // Function Solarland.SolarHomePlayerController.ShowBuildMainUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetNormalCameraTarget(); // Function Solarland.SolarHomePlayerController.SetNormalCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95770
	void SetConstructionCameraTarget(); // Function Solarland.SolarHomePlayerController.SetConstructionCameraTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x1d95730
	void SendMoveToBackend(struct FServerMoveData& MoveData); // Function Solarland.SolarHomePlayerController.SendMoveToBackend // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ResetConstructionCamera(); // Function Solarland.SolarHomePlayerController.ResetConstructionCamera // (Final|Exec|Native|Public) // @ game+0x1d95510
	void ResetCameraRotation(); // Function Solarland.SolarHomePlayerController.ResetCameraRotation // (Final|Native|Public) // @ game+0x1d954f0
	void OnTouchMove(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchMove // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d95400
	void OnTouchEnd(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d95330
	void OnTouchBegin(int32_t Index, struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnTouchBegin // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d95260
	void OnDragBegin(struct FVector& Location); // Function Solarland.SolarHomePlayerController.OnDragBegin // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1d951d0
	void OnCameraRight(float Value); // Function Solarland.SolarHomePlayerController.OnCameraRight // (Final|Native|Public) // @ game+0x1d95150
	void OnCameraForward(float Value); // Function Solarland.SolarHomePlayerController.OnCameraForward // (Final|Native|Public) // @ game+0x1d950d0
	bool GetIsConstruction(); // Function Solarland.SolarHomePlayerController.GetIsConstruction // (Final|Native|Public|Const) // @ game+0x1d94ac0
	int32_t GetCameraCurrentLayer(); // Function Solarland.SolarHomePlayerController.GetCameraCurrentLayer // (Final|Native|Public) // @ game+0x1d948a0
	void BindConstructionInput(); // Function Solarland.SolarHomePlayerController.BindConstructionInput // (Final|Native|Public) // @ game+0x1d942d0
	void BindBattleInput(); // Function Solarland.SolarHomePlayerController.BindBattleInput // (Final|Native|Public) // @ game+0x1d942b0
};

// Class Solarland.SolarHomePlayerWait
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarHomePlayerWait : ASolarMapElementBase {
	int32_t TeamIndex; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Solarland.SolarHomeShaderConfig
// Size: 0x110 (Inherited: 0x30)
struct USolarHomeShaderConfig : UDataAsset {
	struct FSoftObjectPath EmissiveMatPath; // 0x30(0x18)
	struct FSoftObjectPath MaskedMatPath; // 0x48(0x18)
	struct FSoftObjectPath TranslucentMatPath; // 0x60(0x18)
	struct FSoftObjectPath DeleteEmissiveMatPath; // 0x78(0x18)
	struct FSoftObjectPath DeleteMaskedMatPath; // 0x90(0x18)
	struct FSoftObjectPath DeleteTranslucentMatPath; // 0xa8(0x18)
	struct FLinearColor PrdinaryColor; // 0xc0(0x10)
	struct FLinearColor PlaceableColor; // 0xd0(0x10)
	struct FLinearColor UnPlaceableColor; // 0xe0(0x10)
	struct FLinearColor PlaceableColorOther; // 0xf0(0x10)
	float BreathLightTimeScale; // 0x100(0x04)
	float PlaceableEmissveA; // 0x104(0x04)
	float UnPlaceableEmissveA; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
};

// Class Solarland.SolarHomeSpaceSpawner
// Size: 0x3c0 (Inherited: 0x298)
struct ASolarHomeSpaceSpawner : ASolarMapElementBase {
	struct USolarHomeActorManager* HomeActorMgr; // 0x298(0x08)
	struct TMap<enum class EHomeActor_SecondType, struct UObject*> TypeClassMap; // 0x2a0(0x50)
	struct TMap<float, int32_t> LayerMap; // 0x2f0(0x50)
	char pad_340[0x20]; // 0x340(0x20)
	float FloorUnit; // 0x360(0x04)
	float WallUnit; // 0x364(0x04)
	float BaseUnit; // 0x368(0x04)
	float RoundOnBase; // 0x36c(0x04)
	float RoundOnFloor; // 0x370(0x04)
	float ArrowOnBase; // 0x374(0x04)
	float ArrowOnFloor; // 0x378(0x04)
	float ArrowToWall; // 0x37c(0x04)
	char pad_380[0x8]; // 0x380(0x08)
	struct TArray<struct FTransform> BasisFloorsTransArr; // 0x388(0x10)
	char pad_398[0x20]; // 0x398(0x20)
	bool IsAirWallOpen; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)

	void OpenAirWall(); // Function Solarland.SolarHomeSpaceSpawner.OpenAirWall // (Final|Native|Public) // @ game+0x1d954d0
	void Init(int32_t InBuildWidth, int32_t InBuildHeight); // Function Solarland.SolarHomeSpaceSpawner.Init // (Final|Native|Public) // @ game+0x1d94b30
	bool GetIsAirWallOpen(); // Function Solarland.SolarHomeSpaceSpawner.GetIsAirWallOpen // (Final|Native|Public) // @ game+0x1d94aa0
	void CloseAirWall(); // Function Solarland.SolarHomeSpaceSpawner.CloseAirWall // (Final|Native|Public) // @ game+0x1d94710
};

// Class Solarland.SolarHomeSummonWallActor
// Size: 0x238 (Inherited: 0x228)
struct ASolarHomeSummonWallActor : AActor {
	float UsingEffectSecondTime; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct UStaticMeshComponent* SummonStaticMeshComp; // 0x230(0x08)

	void SetEffectPlayAllTime(float SecondTime); // Function Solarland.SolarHomeSummonWallActor.SetEffectPlayAllTime // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarHomeTrigger
// Size: 0x228 (Inherited: 0x228)
struct ASolarHomeTrigger : AActor {

	void OnActorExitLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExitLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnActorExit(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorExit // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98ec0
	void OnActorEnterLua(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnterLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnActorEnter(int32_t ID); // Function Solarland.SolarHomeTrigger.OnActorEnter // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98e40
};

// Class Solarland.SolarHoverCraftVehicle
// Size: 0x1570 (Inherited: 0x14e0)
struct ASolarHoverCraftVehicle : ASolarHoverVehicle {
	float MeshOffsetWithoutDriver; // 0x14e0(0x04)
	float MeshOffsetLerpSpeed; // 0x14e4(0x04)
	struct TMap<enum class EHoverCraftHitType, float> HoverCraftHitImpulseMul; // 0x14e8(0x50)
	float HoverCraftHitImpulseLimit; // 0x1538(0x04)
	char pad_153C[0x4]; // 0x153c(0x04)
	struct UBoxComponent* BodyBoxComp; // 0x1540(0x08)
	struct TArray<int32_t> BodyTraceExceptVehicleTypeIDs; // 0x1548(0x10)
	char pad_1558[0x18]; // 0x1558(0x18)

	void OnHoverCraftVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverCraftVehicle.OnHoverCraftVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d990c0
	void CheckBody(); // Function Solarland.SolarHoverCraftVehicle.CheckBody // (Final|Native|Protected) // @ game+0x1d98960
};

// Class Solarland.SolarHoverVehicleAnimInstance
// Size: 0x320 (Inherited: 0x2f0)
struct USolarHoverVehicleAnimInstance : USolarVehicleAnimInstance {
	float VehicleLeftOrRightPercent; // 0x2e8(0x04)
	float VehicleSpoilerRotateFactor; // 0x2ec(0x04)
	struct FVector FLThrusterBoneScale; // 0x2f0(0x0c)
	struct FVector FRThrusterBoneScale; // 0x2fc(0x0c)
	struct FVector BLThrusterBoneScale; // 0x308(0x0c)
	struct FVector BRThrusterBoneScale; // 0x314(0x0c)
};

// Class Solarland.SolarHoverCraftVehicleAnimInstance
// Size: 0x370 (Inherited: 0x320)
struct USolarHoverCraftVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	struct ASolarHoverVehicle* MyHoverCraftVehicle; // 0x320(0x08)
	struct USolarHoverVehicleMovement* MyHoverCraftVehicleMoveComp; // 0x328(0x08)
	bool bStartUp; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	float MaxStartUpSpeed; // 0x338(0x04)
	bool bDrop; // 0x33c(0x01)
	bool bInAir; // 0x33d(0x01)
	char pad_33E[0x2]; // 0x33e(0x02)
	float CompressMinValue[0x4]; // 0x340(0x10)
	float CompressFullRateValue[0x4]; // 0x350(0x10)
	float CompressXValue; // 0x360(0x04)
	float CompressYValue; // 0x364(0x04)
	bool bCompress; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)

	void AnimNotify_StartUpLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_StartUpLeft // (Final|Native|Public) // @ game+0x1d98790
	void AnimNotify_IdleEnter(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_IdleEnter // (Final|Native|Public) // @ game+0x1d98770
	void AnimNotify_DropLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_DropLeft // (Final|Native|Public) // @ game+0x1d98750
	void AnimNotify_CompressLeft(); // Function Solarland.SolarHoverCraftVehicleAnimInstance.AnimNotify_CompressLeft // (Final|Native|Public) // @ game+0x1d98730
};

// Class Solarland.SolarHoverMotorAnimInstance
// Size: 0x340 (Inherited: 0x320)
struct USolarHoverMotorAnimInstance : USolarHoverVehicleAnimInstance {
	struct FVector VehicleWeaponLeftOffset; // 0x320(0x0c)
	struct FVector VehicleWeaponRightOffset; // 0x32c(0x0c)
	char pad_338[0x8]; // 0x338(0x08)
};

// Class Solarland.SolarHoverVehicleMovement
// Size: 0x800 (Inherited: 0x138)
struct USolarHoverVehicleMovement : UPawnMovementComponent {
	char pad_138[0xf0]; // 0x138(0xf0)
	struct USkeletalMeshComponent* VehicleMesh; // 0x228(0x08)
	float MinLocationDiffForThrusterTrace; // 0x230(0x04)
	float MinRotationDiffForThrusterTrace; // 0x234(0x04)
	float DriverJustOnTimer; // 0x238(0x04)
	struct FVector MassOffset; // 0x23c(0x0c)
	float HoverForce; // 0x248(0x04)
	float HoverSpringCoefficient; // 0x24c(0x04)
	float HoverDampingCoefficient; // 0x250(0x04)
	float HoverHeight; // 0x254(0x04)
	float MinHoverHeight; // 0x258(0x04)
	float BouncinessForMinHoverHeight; // 0x25c(0x04)
	struct TArray<struct FThrusterData> ThrusterDataArray; // 0x260(0x10)
	struct UCurveFloat* DustEffectScaleCurve; // 0x270(0x08)
	float ThrusterTargetAnimationBlendSpeed; // 0x278(0x04)
	float YawDegreeDifference; // 0x27c(0x04)
	float SpoilerRotateSpeed; // 0x280(0x04)
	float MaxRudderRoll; // 0x284(0x04)
	float MinRudderRoll; // 0x288(0x04)
	float MaxRudderYaw; // 0x28c(0x04)
	float MinRudderYaw; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x298(0x88)
	float MaxSideMovingSpeed; // 0x320(0x04)
	float MaxBackwardMovingSpeed; // 0x324(0x04)
	float DecelerationDegree; // 0x328(0x04)
	float DecelerationOnInput; // 0x32c(0x04)
	float DecelerationOnMovingDirection; // 0x330(0x04)
	float MinDecelerationOnMovingDirection; // 0x334(0x04)
	struct FRuntimeFloatCurve DecelerationOnSide; // 0x338(0x88)
	struct FRuntimeFloatCurve AccelerationMultiplierForSideVelocity; // 0x3c0(0x88)
	float MaxControllableDegree; // 0x448(0x04)
	float AdditionalDegreeForStablize; // 0x44c(0x04)
	struct FGameplayTagContainer InAirControllableTags; // 0x450(0x20)
	float TimerForAntiStuck; // 0x470(0x04)
	float StuckAcceleration; // 0x474(0x04)
	float StuckAccelerationLerpSpeed; // 0x478(0x04)
	float GravityAcceleration; // 0x47c(0x04)
	float GravityWithoutDriver; // 0x480(0x04)
	float LandingDuration; // 0x484(0x04)
	float MaximumVelocityOnZWithoutDriver; // 0x488(0x04)
	float DecelerationRateWithoutDriver; // 0x48c(0x04)
	float AngularDampingWithoutDriver; // 0x490(0x04)
	float WaterLineForFloatingForce; // 0x494(0x04)
	float UpwardAccelerationFloatingOnWater; // 0x498(0x04)
	float WaterAlignSpeed; // 0x49c(0x04)
	float WaterHeightWithoutDriver; // 0x4a0(0x04)
	struct FPIDController UpwardForcePIDController; // 0x4a4(0x1c)
	float RotateAccelaration; // 0x4c0(0x04)
	float RotateDecelaration; // 0x4c4(0x04)
	float MaxAngularSpeed; // 0x4c8(0x04)
	float HoverHeightMultiplierAfterBroken; // 0x4cc(0x04)
	float ParticleMultiplierAfterBroken; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct TArray<struct FVehicleVFX> ThrusterParticles; // 0x4d8(0x10)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct FVehicleVFX MovementParticles[0x4]; // 0x4f0(0x240)
	char pad_730[0x78]; // 0x730(0x78)
	struct TArray<struct FThrusterState> ThrusterStateArray; // 0x7a8(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x7b8(0x08)
	struct USolarNetMovementComponent* VehicleNetMovement; // 0x7c0(0x08)
	struct UAkComponent* AkComponent; // 0x7c8(0x08)
	char pad_7D0[0x30]; // 0x7d0(0x30)

	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarHoverVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1d993e0
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x1d99000
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarHoverVehicleMovement.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x1d98f40
};

// Class Solarland.SolarHoverVehicleStencilAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct USolarHoverVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLThrusterBoneScale; // 0x268(0x0c)
	struct FVector FRThrusterBoneScale; // 0x274(0x0c)
	struct FVector BLThrusterBoneScale; // 0x280(0x0c)
	struct FVector BRThrusterBoneScale; // 0x28c(0x0c)
	struct TWeakObjectPtr<struct USolarHoverVehicleAnimInstance> VehicleAnim; // 0x298(0x08)
};

// Class Solarland.SolarHPProgressBoard
// Size: 0x300 (Inherited: 0x260)
struct USolarHPProgressBoard : UUserWidget {
	struct UImage* ProgressBoard; // 0x260(0x08)
	struct UMaterialInstance* ProgressShader; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float RechargeSpeed; // 0x274(0x04)
	float RechargeTime; // 0x278(0x04)
	int32_t RechargeIndex; // 0x27c(0x04)
	bool bDebugMode; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float Percent1; // 0x284(0x04)
	float Percent2; // 0x288(0x04)
	float Percent3; // 0x28c(0x04)
	float Percent4; // 0x290(0x04)
	bool bNeedAlternateColor; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FLinearColor IncreaseColor; // 0x298(0x10)
	struct FLinearColor DecreaseColor; // 0x2a8(0x10)
	char pad_2B8[0x48]; // 0x2b8(0x48)

	void UpdateMaxValue(float Max); // Function Solarland.SolarHPProgressBoard.UpdateMaxValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99ee0
	void UpdateCurrentValue(float Current); // Function Solarland.SolarHPProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99e60
	void SetSpacing(float InValue); // Function Solarland.SolarHPProgressBoard.SetSpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99cb0
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarHPProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void SetPreAddColor(); // Function Solarland.SolarHPProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99c90
	void SetPercentageByIndex(float Percent, int32_t Index); // Function Solarland.SolarHPProgressBoard.SetPercentageByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99bc0
	void SetFragment(float Num); // Function Solarland.SolarHPProgressBoard.SetFragment // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99b40
	void SetCurrentValueInstantly(float Current); // Function Solarland.SolarHPProgressBoard.SetCurrentValueInstantly // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99ac0
	void SetAlternateColor(struct FLinearColor& InColor, bool IsChangeBoth, bool IsForIncrease); // Function Solarland.SolarHPProgressBoard.SetAlternateColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1d999a0
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd, bool bInAdaptiveRecharge); // Function Solarland.SolarHPProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99780
	void InitProgressBoard(float Current, float Max, float Fragment); // Function Solarland.SolarHPProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98d10
	void InitProgress(); // Function Solarland.SolarHPProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98cf0
	struct FLinearColor GetAlternateColor(bool bIncrease); // Function Solarland.SolarHPProgressBoard.GetAlternateColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d98b40
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98a80
	void DoAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d989c0
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarHPProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1d988a0
};

// Class Solarland.SolarHttpManager
// Size: 0x140 (Inherited: 0x30)
struct USolarHttpManager : USolarGameManager {
	char pad_30[0x10]; // 0x30(0x10)
	struct TMap<struct FString, int32_t> ReportStr2ReprotTimes; // 0x40(0x50)
	int32_t ReportRetryTimes; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FMulticastInlineDelegate OnImgUploaded; // 0x98(0x10)
	char pad_A8[0x1c]; // 0xa8(0x1c)
	int32_t Jank; // 0xc4(0x04)
	int32_t BigJank; // 0xc8(0x04)
	float FPS25; // 0xcc(0x04)
	char pad_D0[0x28]; // 0xd0(0x28)
	int32_t PeakPlayerNum; // 0xf8(0x04)
	int32_t PeakAINum; // 0xfc(0x04)
	int32_t PeakVehicleNum; // 0x100(0x04)
	char pad_104[0x3c]; // 0x104(0x3c)

	void UploadToHTTP(struct FString URL, struct FString str); // Function Solarland.SolarHttpManager.UploadToHTTP // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9a190
	void UploadImg(int32_t& AppId, int32_t& AppUid, struct FString AppToken, int32_t& GameID, int32_t& Uid, struct FString SourceImgPath); // Function Solarland.SolarHttpManager.UploadImg // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d99f60
	struct FString StringToBase64(struct FString str); // Function Solarland.SolarHttpManager.StringToBase64 // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99d70
	void StopRecordJank(); // Function Solarland.SolarHttpManager.StopRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99d50
	void StartRecordJank(); // Function Solarland.SolarHttpManager.StartRecordJank // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99d30
	void ResetPerfData(bool bKeepCurrentData); // Function Solarland.SolarHttpManager.ResetPerfData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d99910
	void ReportAbnormalPlayerWeaponToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InAttackLocation, struct FString InHitLocation, struct FString InHitBoneScale, struct FString InWeaponBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerWeaponToBackend // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ReportAbnormalPlayerVehicleToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue, struct FString InVehiclePreviousLocation, struct FString InVehiclePresentLocation, struct FString InVehicleBlueprintName); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerVehicleToBackend // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ReportAbnormalPlayerToBackend(struct FString InPlayerID, struct FString InVariableName, struct FString InVariableValue); // Function Solarland.SolarHttpManager.ReportAbnormalPlayerToBackend // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ReCordOnlineError(struct FString InStr); // Function Solarland.SolarHttpManager.ReCordOnlineError // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnImgUploaded__DelegateSignature(int32_t RespCode, struct FString RespMsg, struct FString ImgUrl); // DelegateFunction Solarland.SolarHttpManager.OnImgUploaded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void InitializeDelegates(); // Function Solarland.SolarHttpManager.InitializeDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98e20
	struct FString GetHttpReportUrl(); // Function Solarland.SolarHttpManager.GetHttpReportUrl // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98c70
	float GetAvgNum(int32_t PerfType); // Function Solarland.SolarHttpManager.GetAvgNum // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98be0
	void ClearDelegates(); // Function Solarland.SolarHttpManager.ClearDelegates // (Final|Native|Public|BlueprintCallable) // @ game+0x1d989a0
	void CleanPerfDirtyData(); // Function Solarland.SolarHttpManager.CleanPerfDirtyData // (Final|Native|Public|BlueprintCallable) // @ game+0x1d98980
	struct FString Base64ToMD5(struct FString str); // Function Solarland.SolarHttpManager.Base64ToMD5 // (Final|Native|Public|BlueprintCallable) // @ game+0x1d987b0
};

// Class Solarland.SolarHUDEventSubsystem
// Size: 0x50 (Inherited: 0x30)
struct USolarHUDEventSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnSettingConfigSaved; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPickupSettingChanged; // 0x40(0x10)

	void SimpleTriggerDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarHUDEventSubsystem.SimpleTriggerDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void ClearDelegates(); // Function Solarland.SolarHUDEventSubsystem.ClearDelegates // (Final|Native|Protected) // @ game+0x1d9d1d0
	void BroadcastOnSettingConfigSaved(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnSettingConfigSaved // (Final|Native|Public) // @ game+0x1d9cdc0
	void BroadcastOnPickupSettingChanged(); // Function Solarland.SolarHUDEventSubsystem.BroadcastOnPickupSettingChanged // (Final|Native|Public) // @ game+0x1d9cd20
};

// Class Solarland.SolarHUDInGame
// Size: 0x4d8 (Inherited: 0x318)
struct ASolarHUDInGame : ASolarHUD {
	struct FMulticastInlineDelegate OnVJetForbiddenChanged; // 0x318(0x10)
	struct FMulticastInlineDelegate OnHJetForbiddenChanged; // 0x328(0x10)
	struct FMulticastInlineDelegate OnVJetTotalTimesSet; // 0x338(0x10)
	struct FMulticastInlineDelegate OnHJetTotalTimesSet; // 0x348(0x10)
	struct FMulticastInlineDelegate OnVJetRestTimesSet; // 0x358(0x10)
	struct FMulticastInlineDelegate OnHJetRestTimesSet; // 0x368(0x10)
	struct FMulticastInlineDelegate OnVJetChargeStateChanged; // 0x378(0x10)
	struct FMulticastInlineDelegate OnVJetCDStateChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnHJetChargeStateChanged; // 0x398(0x10)
	struct FMulticastInlineDelegate OnHJetCDStateChanged; // 0x3a8(0x10)
	struct FMulticastInlineDelegate OnVJetTimesCharging; // 0x3b8(0x10)
	struct FMulticastInlineDelegate OnHJetTimesCharging; // 0x3c8(0x10)
	struct FMulticastInlineDelegate OnVJetCoolingDown; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnHJetCoolingDown; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnVJetModuleLevelChanged; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnHJetModuleLevelChanged; // 0x408(0x10)
	char pad_418[0x10]; // 0x418(0x10)
	struct FMulticastInlineDelegate OnSkydiveFlyStateChanged; // 0x428(0x10)
	struct FMulticastInlineDelegate OnSkydiveAltitudeUpdate; // 0x438(0x10)
	struct FMulticastInlineDelegate OnSkydiveSpeedUpdate; // 0x448(0x10)
	char pad_458[0x40]; // 0x458(0x40)
	struct FMulticastInlineDelegate OnTeammateStateChanged; // 0x498(0x10)
	struct FMulticastInlineDelegate OnCharacterRescueStateChanged; // 0x4a8(0x10)
	char pad_4B8[0x20]; // 0x4b8(0x20)

	void ShowDiePage(); // Function Solarland.SolarHUDInGame.ShowDiePage // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OpenSetting(); // Function Solarland.SolarHUDInGame.OpenSetting // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OpenMap(); // Function Solarland.SolarHUDInGame.OpenMap // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnTimeToEndMessage(int32_t TimeToEnd); // Function Solarland.SolarHUDInGame.OnTimeToEndMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d480
	void OnTeammateStateChanged__DelegateSignature(bool NeedRefresh); // DelegateFunction Solarland.SolarHUDInGame.OnTeammateStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // Function Solarland.SolarHUDInGame.OnSpectateTargetChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSkydiveSpeedUpdate__DelegateSignature(float NewSpeed); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveSpeedUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveFlyStateChanged__DelegateSignature(bool bInFly); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveDataUpdate__DelegateSignature(float NewData); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveDataUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSkydiveAltitudeUpdate__DelegateSignature(float NewHeight, float NewZValue); // DelegateFunction Solarland.SolarHUDInGame.OnSkydiveAltitudeUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnReceiveBeginPlay(); // Function Solarland.SolarHUDInGame.OnReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnPlayerNumberChange(); // Function Solarland.SolarHUDInGame.OnPlayerNumberChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnMarkButtonTouchMoved__DelegateSignature(float DegreeToCenter); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonTouchMoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonHoverChanged__DelegateSignature(bool bIsHovered); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonHoverChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonDragSelectEnded__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonDragSelectEnded__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnMarkButtonBeenLoopPressed__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnMarkButtonBeenLoopPressed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetTimesChanged__DelegateSignature(int32_t NewTimes); // DelegateFunction Solarland.SolarHUDInGame.OnJetTimesChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetModuleLevelChanged__DelegateSignature(int32_t NewLevel); // DelegateFunction Solarland.SolarHUDInGame.OnJetModuleLevelChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyStateChanged__DelegateSignature(bool bStart); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyForbiddenChanged__DelegateSignature(bool bForbidden); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyForbiddenChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnJetFlyDataUpdated__DelegateSignature(float Value, float Percent); // DelegateFunction Solarland.SolarHUDInGame.OnJetFlyDataUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterRescueStateChanged__DelegateSignature(enum class ERescueState NewRescueState); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterRescueStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterEnterWater__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterEnterWater__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCharacterDead__DelegateSignature(); // DelegateFunction Solarland.SolarHUDInGame.OnCharacterDead__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnCapsulePlayerNumChange(int32_t CurrentNum, int32_t Total); // Function Solarland.SolarHUDInGame.OnCapsulePlayerNumChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyBombingEnd(int32_t BombId); // Function Solarland.SolarHUDInGame.NotifyBombingEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyBombingBegin(int32_t BombId, struct FVector Location, float Radius); // Function Solarland.SolarHUDInGame.NotifyBombingBegin // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void MarkWarningOnWorld(); // Function Solarland.SolarHUDInGame.MarkWarningOnWorld // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void MarkPointOnWorld(); // Function Solarland.SolarHUDInGame.MarkPointOnWorld // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool HasBegunPlay(); // Function Solarland.SolarHUDInGame.HasBegunPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9d3c0
	void HandleSendQuickMessage(struct FString NickName, struct FString Message, bool IsLocalPlayer, bool bSound); // Function Solarland.SolarHUDInGame.HandleSendQuickMessage // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseSetting(); // Function Solarland.SolarHUDInGame.CloseSetting // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CloseMap(); // Function Solarland.SolarHUDInGame.CloseMap // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void BroadcastSkydiveSpeed_Internal(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed_Internal // (Final|Native|Protected) // @ game+0x1d9d1b0
	void BroadcastSkydiveSpeed(); // Function Solarland.SolarHUDInGame.BroadcastSkydiveSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d190
	void BroadcastOnVJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d150
	void BroadcastOnVJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x1d9d170
	void BroadcastOnVJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d110
	void BroadcastOnVJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x1d9d130
	void BroadcastOnVJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d0d0
	void BroadcastOnVJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x1d9d0f0
	void BroadcastOnVJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d090
	void BroadcastOnVJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x1d9d0b0
	void BroadcastOnVJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d050
	void BroadcastOnVJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x1d9d070
	void BroadcastOnVJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d010
	void BroadcastOnVJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x1d9d030
	void BroadcastOnVJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cfd0
	void BroadcastOnVJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cff0
	void BroadcastOnVJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cf90
	void BroadcastOnVJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnVJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cfb0
	void BroadcastOnTeammateStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cf50
	void BroadcastOnTeammateStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnTeammateStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cf70
	void BroadcastOnSkydiveFlyStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cf30
	void BroadcastOnSkydiveFlyStateChanged(); // Function Solarland.SolarHUDInGame.BroadcastOnSkydiveFlyStateChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cf10
	void BroadcastOnShowGameNoticeDelegateDeprecated(int32_t InNoticeID, struct TMap<struct FString, struct FString>& InNoticeParams); // Function Solarland.SolarHUDInGame.BroadcastOnShowGameNoticeDelegateDeprecated // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9cde0
	void BroadcastOnRefreshBackpackWeaponPartDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponPartDelegate // (Final|Native|Public) // @ game+0x1d9cda0
	void BroadcastOnRefreshBackpackWeaponDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackWeaponDelegate // (Final|Native|Public) // @ game+0x1d9cd80
	void BroadcastOnRefreshBackpackItemDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackItemDelegate // (Final|Native|Public) // @ game+0x1d9cd60
	void BroadcastOnRefreshBackpackEquipDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnRefreshBackpackEquipDelegate // (Final|Native|Public) // @ game+0x1d9cd40
	void BroadcastOnHJetTotalTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cce0
	void BroadcastOnHJetTotalTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTotalTimesSet_Internal // (Final|Native|Protected) // @ game+0x1d9cd00
	void BroadcastOnHJetTimesChargingDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesChargingDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cca0
	void BroadcastOnHJetTimesCharging_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetTimesCharging_Internal // (Final|Native|Protected) // @ game+0x1d9ccc0
	void BroadcastOnHJetRestTimesSetDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSetDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cc60
	void BroadcastOnHJetRestTimesSet_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetRestTimesSet_Internal // (Final|Native|Protected) // @ game+0x1d9cc80
	void BroadcastOnHJetModuleLevelChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cc20
	void BroadcastOnHJetModuleLevelChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetModuleLevelChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cc40
	void BroadcastOnHJetForbiddenChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cbe0
	void BroadcastOnHJetForbiddenChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetForbiddenChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cc00
	void BroadcastOnHJetCoolingDownDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDownDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cba0
	void BroadcastOnHJetCoolingDown_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCoolingDown_Internal // (Final|Native|Protected) // @ game+0x1d9cbc0
	void BroadcastOnHJetChargeStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cb60
	void BroadcastOnHJetChargeStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetChargeStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cb80
	void BroadcastOnHJetCDStateChangedDelegate(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChangedDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9cb20
	void BroadcastOnHJetCDStateChanged_Internal(); // Function Solarland.SolarHUDInGame.BroadcastOnHJetCDStateChanged_Internal // (Final|Native|Protected) // @ game+0x1d9cb40
	void BroadcastOnBindPickupDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindPickupDelegates // (Final|Native|Public) // @ game+0x1d9cb00
	void BroadcastOnBindItemPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindItemPanelDelegates // (Final|Native|Public) // @ game+0x1d9cae0
	void BroadcastOnBindHPPanelDelegates(); // Function Solarland.SolarHUDInGame.BroadcastOnBindHPPanelDelegates // (Final|Native|Public) // @ game+0x1d9cac0
	void BindLocalPlayerSpectateDelegates(struct ASolarSpectateInfo* LocalSpecInfo); // Function Solarland.SolarHUDInGame.BindLocalPlayerSpectateDelegates // (Final|Native|Private) // @ game+0x1d9ca40
};

// Class Solarland.SolarHyperLinkRichText
// Size: 0x720 (Inherited: 0x710)
struct USolarHyperLinkRichText : URichTextBlock {
	struct FMulticastInlineDelegate OnHyperLinkClicked; // 0x710(0x10)
};

// Class Solarland.SolarImage
// Size: 0x2e0 (Inherited: 0x138)
struct USolarImage : UWidget {
	struct FSlateBrush Brush; // 0x138(0x98)
	enum class ESolarImageFillType FillType; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct FSolarImageProgressInfo ImageProgressInfo; // 0x1d8(0x20)
	struct FDelegate BrushDelegate; // 0x1f8(0x10)
	struct FLinearColor ColorAndOpacity; // 0x208(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x218(0x10)
	bool bEnableLocImage; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct FText ImagePath; // 0x230(0x18)
	int32_t LocTextID; // 0x248(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x250(0x10)
	struct FDelegate OnMouseButtonUpEvent; // 0x260(0x10)
	struct FDelegate OnMouseMoveEvent; // 0x270(0x10)
	char pad_280[0x60]; // 0x280(0x60)

	void UpdateImageAsync(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImageAsync // (Final|Native|Protected) // @ game+0x1d9ed50
	void UpdateImage(int32_t NewLocTextID); // Function Solarland.SolarImage.UpdateImage // (Final|Native|Protected) // @ game+0x1d9ecd0
	void SetOpacity(float InOpacity); // Function Solarland.SolarImage.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9eb30
	void SetImageProgressInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9ea80
	void SetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.SetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9e9d0
	void SetImageProgress(float InProgress); // Function Solarland.SolarImage.SetImageProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e950
	void SetImageFillType(enum class ESolarImageFillType InImageFillType); // Function Solarland.SolarImage.SetImageFillType // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e8d0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImage.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d9e7d0
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImage.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e5f0
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImage.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d9e4f0
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImage.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e3f0
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x1d9e250
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x1d9e0b0
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x1d9de10
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImage.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x1d9dbf0
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImage.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0xb60f50
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImage.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x1d9d980
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImage.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x1d9d860
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImage.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9d520
	float GetImageProgressByInfo(struct FSolarImageProgressInfo& InSolarImageProgressInfo); // Function Solarland.SolarImage.GetImageProgressByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9d280
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImage.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d220
};

// Class Solarland.SolarImageURL
// Size: 0x330 (Inherited: 0x138)
struct USolarImageURL : UWidget {
	struct FString URL; // 0x138(0x10)
	bool bDownloadFailedResetToPlaceholder; // 0x148(0x01)
	bool bDownloadFailedAutoRetry; // 0x149(0x01)
	char pad_14A[0x2]; // 0x14a(0x02)
	int32_t AutoRetryDelayTime; // 0x14c(0x04)
	int32_t AutoRetryTimes; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FSlateBrush Brush; // 0x158(0x98)
	struct FSlateBrush PlaceholderBrush; // 0x1f0(0x98)
	struct FDelegate BrushDelegate; // 0x288(0x10)
	struct FLinearColor ColorAndOpacity; // 0x298(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x2a8(0x10)
	bool bFlipForRightToLeftFlowDirection; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	struct FDelegate OnMouseButtonDownEvent; // 0x2bc(0x10)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct FMulticastInlineDelegate OnURLDownloadFinish; // 0x2d0(0x10)
	char pad_2E0[0x50]; // 0x2e0(0x50)

	void URLDownloadFinish__DelegateSignature(bool bSuccess); // DelegateFunction Solarland.SolarImageURL.URLDownloadFinish__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void UpdateURLImage(); // Function Solarland.SolarImageURL.UpdateURLImage // (Native|Public|BlueprintCallable) // @ game+0x1d9edd0
	void SetURLForNextTick(struct FString URLForNextTick); // Function Solarland.SolarImageURL.SetURLForNextTick // (Final|Native|Public) // @ game+0x1d9ec30
	void SetOpacity(float InOpacity); // Function Solarland.SolarImageURL.SetOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9ebb0
	void SetColorAndOpacity(struct FLinearColor InColorAndOpacity); // Function Solarland.SolarImageURL.SetColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d9e850
	void SetBrushTintColor(struct FSlateColor TintColor); // Function Solarland.SolarImageURL.SetBrushTintColor // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e6e0
	void SetBrushSize(struct FVector2D DesiredSize); // Function Solarland.SolarImageURL.SetBrushSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1d9e570
	void SetBrushResourceObject(struct UObject* ResourceObject); // Function Solarland.SolarImageURL.SetBrushResourceObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9e470
	void SetBrushFromTextureDynamic(struct UTexture2DDynamic* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTextureDynamic // (Native|Public|BlueprintCallable) // @ game+0x1d9e320
	void SetBrushFromTexture(struct UTexture2D* Texture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromTexture // (Native|Public|BlueprintCallable) // @ game+0x1d9e180
	void SetBrushFromSoftTexture(struct TSoftObjectPtr<UTexture2D> SoftTexture, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromSoftTexture // (Native|Public|BlueprintCallable) // @ game+0x1d9df60
	void SetBrushFromSoftMaterial(struct TSoftObjectPtr<UMaterialInterface> SoftMaterial); // Function Solarland.SolarImageURL.SetBrushFromSoftMaterial // (Native|Public|BlueprintCallable) // @ game+0x1d9dd00
	void SetBrushFromMaterial(struct UMaterialInterface* Material); // Function Solarland.SolarImageURL.SetBrushFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x1d9db60
	void SetBrushFromAtlasInterface(struct TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize); // Function Solarland.SolarImageURL.SetBrushFromAtlasInterface // (Native|Public|BlueprintCallable) // @ game+0x1d9da70
	void SetBrushFromAsset(struct USlateBrushAsset* Asset); // Function Solarland.SolarImageURL.SetBrushFromAsset // (Native|Public|BlueprintCallable) // @ game+0x1d9d8f0
	void SetBrush(struct FSlateBrush& InBrush); // Function Solarland.SolarImageURL.SetBrush // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1d9d6c0
	void ResetToPlaceholder(); // Function Solarland.SolarImageURL.ResetToPlaceholder // (Native|Public|BlueprintCallable) // @ game+0x1d9d500
	void LoadURLImage(struct UTexture2DDynamic* Texture); // Function Solarland.SolarImageURL.LoadURLImage // (Native|Public|BlueprintCallable) // @ game+0x1d9d3f0
	struct FString GetUrl(); // Function Solarland.SolarImageURL.GetUrl // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d9d340
	struct UMaterialInstanceDynamic* GetDynamicMaterial(); // Function Solarland.SolarImageURL.GetDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1d9d250
	enum class EImageURLDownloadState GetDownloadState(); // Function Solarland.SolarImageURL.GetDownloadState // (Native|Public|BlueprintCallable) // @ game+0x1d9d1f0
	void CancelDownload(); // Function Solarland.SolarImageURL.CancelDownload // (Native|Public|BlueprintCallable) // @ game+0x124b8e0
};

// Class Solarland.SolarInputActionContext
// Size: 0x218 (Inherited: 0x28)
struct USolarInputActionContext : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct UInputMappingContext* InputMappingContext; // 0x48(0x08)
	struct TMap<struct FKey, struct UInputAction*> KeyChordInputActionDict; // 0x50(0x50)
	struct TMap<struct FName, struct UInputAction*> ActionInputActionDict; // 0xa0(0x50)
	struct TMap<struct FName, struct UInputAction*> ChordActionInputActionDict; // 0xf0(0x50)
	struct UInputAction* NullInputAction; // 0x140(0x08)
	char pad_148[0xd0]; // 0x148(0xd0)
};

// Class Solarland.SolarInputButton
// Size: 0x4b8 (Inherited: 0x498)
struct USolarInputButton : UButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x498(0x20)
};

// Class Solarland.SolarInputComponent
// Size: 0x178 (Inherited: 0x168)
struct USolarInputComponent : UEnhancedInputComponent {
	char pad_168[0x10]; // 0x168(0x10)
};

// Class Solarland.InputTriggerDownOne
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDownOne : UInputTrigger {
	char pad_40[0x1]; // 0x40(0x01)
	bool bIsOneShot; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Solarland.InputTriggerPressedOld
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerPressedOld : UInputTrigger {
};

// Class Solarland.InputTriggerReleasedOld
// Size: 0x40 (Inherited: 0x40)
struct UInputTriggerReleasedOld : UInputTrigger {
};

// Class Solarland.InputTriggerDoubleTap
// Size: 0x48 (Inherited: 0x40)
struct UInputTriggerDoubleTap : UInputTrigger {
	float Delay; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.InputModifierConstBool
// Size: 0x30 (Inherited: 0x28)
struct UInputModifierConstBool : UInputModifier {
	float ConstValue; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Solarland.SolarInputKeyMapSubsystem
// Size: 0x38 (Inherited: 0x30)
struct USolarInputKeyMapSubsystem : UEngineSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarInputManager
// Size: 0x248 (Inherited: 0xb0)
struct USolarInputManager : UActorComponent {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct USolarPlayerSensitivitys* SenSetting; // 0xc8(0x08)
	enum class ESolarPlayerSensitivitysType GameSenType; // 0xd0(0x01)
	char pad_D1[0x37]; // 0xd1(0x37)
	struct FTouchHandler TouchHandler; // 0x108(0xf0)
	char pad_1F8[0x50]; // 0x1f8(0x50)

	void SetTouchScaler(float InVal); // Function Solarland.SolarInputManager.SetTouchScaler // (Final|Native|Public|BlueprintCallable) // @ game+0x1da4b80
	void SetNoiseThresholdFactor(float InVal); // Function Solarland.SolarInputManager.SetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x1da49e0
	void SetMouseScaler(struct FVector2D InVal); // Function Solarland.SolarInputManager.SetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1da4950
	void SetMinNoiseMultiplier(float InVal); // Function Solarland.SolarInputManager.SetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x1da48c0
	void SetCurveVerticalFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1da4820
	void SetCurveVerticalFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1da4780
	void SetCurveHorizonFix(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1da46e0
	void SetCurveHorizonFactor(struct FVector2D InVec); // Function Solarland.SolarInputManager.SetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1da4640
	void OnSettingConfigSaved(); // Function Solarland.SolarInputManager.OnSettingConfigSaved // (Final|Native|Private) // @ game+0x8ba190
	void OnCacheNeedUpdate(); // Function Solarland.SolarInputManager.OnCacheNeedUpdate // (Final|Native|Private) // @ game+0x1da3cc0
	float GetTouchScaler(); // Function Solarland.SolarInputManager.GetTouchScaler // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1da3b60
	struct FVector2D GetTouchOutputScale(); // Function Solarland.SolarInputManager.GetTouchOutputScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da3b20
	float GetNoiseThresholdFactor(); // Function Solarland.SolarInputManager.GetNoiseThresholdFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1da3ae0
	struct FVector2D GetMouseScaler(); // Function Solarland.SolarInputManager.GetMouseScaler // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da3aa0
	float GetMinNoiseMultiplier(); // Function Solarland.SolarInputManager.GetMinNoiseMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1da3a60
	struct FVector2D GetFixedOutput(); // Function Solarland.SolarInputManager.GetFixedOutput // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da39f0
	struct FVector2D GetDeltaMove(); // Function Solarland.SolarInputManager.GetDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da39b0
	struct FVector2D GetCurveVerticalFix(); // Function Solarland.SolarInputManager.GetCurveVerticalFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da3970
	struct FVector2D GetCurveVerticalFactor(); // Function Solarland.SolarInputManager.GetCurveVerticalFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da3930
	struct FVector2D GetCurveHorizonFix(); // Function Solarland.SolarInputManager.GetCurveHorizonFix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da38f0
	struct FVector2D GetCurveHorizonFactor(); // Function Solarland.SolarInputManager.GetCurveHorizonFactor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da38b0
	struct FVector2D GetAverageDeltaMove(); // Function Solarland.SolarInputManager.GetAverageDeltaMove // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1da3870
};

// Class Solarland.SolarInputMappingManager
// Size: 0xa8 (Inherited: 0x30)
struct USolarInputMappingManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnInputMappingUpdate; // 0x38(0x10)
	struct TMap<struct FString, struct FInputKeyMappingEntry> KeyMappingEntryDict; // 0x48(0x50)
	struct TArray<struct FInputKeyMappingEntry> CacheKeyMappingEntries; // 0x98(0x10)

	void SplitInputChord(struct FInputChord& InInputChord, struct FString& KeyStr1, struct FString& KeyStr2); // Function Solarland.SolarInputMappingManager.SplitInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x1da4c90
	struct TArray<struct FInputKeyMappingEntry> GetKeyMappingEntries(); // Function Solarland.SolarInputMappingManager.GetKeyMappingEntries // (Event|Protected|BlueprintEvent|Const) // @ game+0xae69f0
	struct FInputKeyMappingEntry FindKeyMappingEntry(struct FString ActionID); // Function Solarland.SolarInputMappingManager.FindKeyMappingEntry // (Final|Native|Public|Const) // @ game+0x1da3770
	struct FInputKeyMappingEntry CreateKeyMappingEntry(struct FString InActionID, struct FString InActionName, enum class ESolarTablesEnum_InputActionType InActionType, float InScale, struct FString InKeyStr1, struct FString InKeyStr2, struct FString InKeyStr3, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType1, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType2, enum class ESolarTablesEnum_InputTriggerType InInputTriggerType3); // Function Solarland.SolarInputMappingManager.CreateKeyMappingEntry // (Final|Native|Static|Protected) // @ game+0x1da3340
	bool CreateInputChord(struct FString KeyStr1, struct FString KeyStr2, struct FInputChord& OutInputChord); // Function Solarland.SolarInputMappingManager.CreateInputChord // (Final|Native|Static|Protected|HasOutParms) // @ game+0x1da31b0
	void ApplyKeyMappings(); // Function Solarland.SolarInputMappingManager.ApplyKeyMappings // (Final|Native|Protected) // @ game+0x1da30e0
};

// Class Solarland.SolarInputModePolicyComponent
// Size: 0x180 (Inherited: 0xb0)
struct USolarInputModePolicyComponent : UActorComponent {
	char pad_B0[0xd0]; // 0xb0(0xd0)
};

// Class Solarland.SolarInputSetting
// Size: 0x218 (Inherited: 0x38)
struct USolarInputSetting : UDeveloperSettings {
	struct FSoftObjectPath TouchHorizCurve; // 0x38(0x18)
	struct FSoftObjectPath TouchVertCurve; // 0x50(0x18)
	struct FVector2D TouchHorizCurveScale; // 0x68(0x08)
	struct FVector2D TouchVertCurveScale; // 0x70(0x08)
	struct FVector2D TouchHorizCurveOffset; // 0x78(0x08)
	struct FVector2D TouchVertCurveOffset; // 0x80(0x08)
	struct FVector2D TouchScaler; // 0x88(0x08)
	float NoiseThresholdFactor; // 0x90(0x04)
	float MinNoiseMultiplier; // 0x94(0x04)
	struct TMap<struct FName, struct FSoftObjectPath> InputActionPaths; // 0x98(0x50)
	struct TMap<struct FName, enum class ETriggerEvent> InputActionPressedToTriggers; // 0xe8(0x50)
	struct TSet<struct FName> InputActionOldWhiteList; // 0x138(0x50)
	struct FSoftObjectPath DefaultInputActionPath; // 0x188(0x18)
	struct FSoftObjectPath DefaultInputActionKeyPath; // 0x1a0(0x18)
	struct FSoftObjectPath DefaultInputActionChordPath; // 0x1b8(0x18)
	struct FSoftObjectPath DefaultInputActionDoubleTapPath; // 0x1d0(0x18)
	struct FSoftObjectPath DefaultInputActionHoldPath; // 0x1e8(0x18)
	struct FSoftObjectPath DefaultInputActionAxisPath; // 0x200(0x18)

	struct USolarInputSetting* GetInputSettings(); // Function Solarland.SolarInputSetting.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1da3a30
};

// Class Solarland.SolarInputSubsystem
// Size: 0x78 (Inherited: 0x30)
struct USolarInputSubsystem : UWorldSubsystem {
	char pad_30[0x48]; // 0x30(0x48)

	bool TestInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.TestInputActionFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1da4e50
	void RemoveInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.RemoveInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1da4540
	void OnInputMethodChanged(enum class ECommonInputType InInputType); // Function Solarland.SolarInputSubsystem.OnInputMethodChanged // (Final|Native|Private) // @ game+0x1da3ec0
	void OnControllerConnectionChange(bool bIsConnected, int32_t UserId, int32_t ControllerId); // Function Solarland.SolarInputSubsystem.OnControllerConnectionChange // (Final|Native|Private) // @ game+0x1da3d20
	void AddInputActionFlag(enum class EInputActionFlags InFlagBit); // Function Solarland.SolarInputSubsystem.AddInputActionFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1da3060
};

// Class Solarland.SolarInteractableManager
// Size: 0x88 (Inherited: 0x30)
struct USolarInteractableManager : USolarGameManager {
	char pad_30[0x10]; // 0x30(0x10)
	int32_t ZoneNum; // 0x40(0x04)
	int32_t TotalNum; // 0x44(0x04)
	struct TArray<struct FRadarStationCollection> CurrRadarStations; // 0x48(0x10)
	struct TArray<struct ASolarElectricShop*> CurrElectricShops; // 0x58(0x10)
	struct TArray<struct TSoftObjectPtr<ASolarShieldUpgradeItemShop>> ActiveShieldUpgradeItemShopList; // 0x68(0x10)
	char pad_78[0x10]; // 0x78(0x10)

	void OnClientShowShieldUpgradeItemShops(); // Function Solarland.SolarInteractableManager.OnClientShowShieldUpgradeItemShops // (Final|Native|Public|BlueprintCallable) // @ game+0x1da3d00
};

// Class Solarland.SolarInteractionItemWidget
// Size: 0x358 (Inherited: 0x340)
struct USolarInteractionItemWidget : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)
	struct USolarInteractionListWidget* InteractionList; // 0x348(0x08)
	struct FGameplayTag InteractionType; // 0x350(0x08)

	void FadeOut(); // Function Solarland.SolarInteractionItemWidget.FadeOut // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1259730
	void FadeIn(); // Function Solarland.SolarInteractionItemWidget.FadeIn // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1257790
};

// Class Solarland.SolarInteractionListWidget
// Size: 0x380 (Inherited: 0x340)
struct USolarInteractionListWidget : USolarUserWidget {
	struct TArray<struct USolarInteractionItemWidget*> ItemWidgets; // 0x340(0x10)
	struct TArray<struct USolarInteractionTriggerWidget*> TriggerWidgets; // 0x350(0x10)
	char pad_360[0x8]; // 0x360(0x08)
	struct USolarInteractionItemWidget* FocusedActiveItem; // 0x368(0x08)
	char pad_370[0x4]; // 0x370(0x04)
	float RefreshActiveWidgetInterval; // 0x374(0x04)
	char pad_378[0x8]; // 0x378(0x08)

	void OnTryCancelInteraction(); // Function Solarland.SolarInteractionListWidget.OnTryCancelInteraction // (Final|Native|Protected) // @ game+0x1da4520
	void OnStopInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStopInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x1da43e0
	void OnStartInteractionCountDown(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionListWidget.OnStartInteractionCountDown // (Final|Native|Protected|HasOutParms) // @ game+0x1da42a0
	bool OnInteractionTriggered(); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggered // (Final|Native|Protected) // @ game+0x1da4180
	void OnInteractionTriggerDisappear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerDisappear // (Final|Native|Protected|HasOutParms) // @ game+0x1da4060
	void OnInteractionTriggerAppear(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionListWidget.OnInteractionTriggerAppear // (Final|Native|Protected|HasOutParms) // @ game+0x1da3f40
	void OnHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnHideInteractionListRequested // (Final|Native|Protected) // @ game+0x1da3ea0
	void OnCancelHideInteractionListRequested(); // Function Solarland.SolarInteractionListWidget.OnCancelHideInteractionListRequested // (Final|Native|Protected) // @ game+0x1da3ce0
};

// Class Solarland.SolarInteractionOpenAirdropWidget
// Size: 0x370 (Inherited: 0x358)
struct USolarInteractionOpenAirdropWidget : USolarInteractionItemWidget {
	char pad_358[0x8]; // 0x358(0x08)
	struct USolarBattleModel* BattleViewModel; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)

	void UpdateProgress(struct ASolarTreasureBoxActor* InBoxActor, float InProgress); // Function Solarland.SolarInteractionOpenAirdropWidget.UpdateProgress // (Final|Native|Protected) // @ game+0x1da4f10
	void UnBindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.UnBindDelegates // (Final|Native|Protected) // @ game+0x8ba190
	bool TryOpenAirdropBox(); // Function Solarland.SolarInteractionOpenAirdropWidget.TryOpenAirdropBox // (Final|Native|Protected) // @ game+0x1da4ee0
	void SetTBoxActor(struct ASolarTreasureBoxActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetTBoxActor // (Final|Native|Protected) // @ game+0x1da4b00
	void SetSelfVisibility(bool InShow); // Function Solarland.SolarInteractionOpenAirdropWidget.SetSelfVisibility // (Final|Native|Protected) // @ game+0x1da4a70
	void SetAirdropBoxActor(struct AActor* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.SetAirdropBoxActor // (Final|Native|Protected) // @ game+0x1da45c0
	void RefreshToSelfOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToSelfOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToOtherOpening(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToOtherOpening // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToCanOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshToCanOpen // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshProgressDisplay(float Progress, float InMaxOpenTime); // Function Solarland.SolarInteractionOpenAirdropWidget.RefreshProgressDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnPressCancelButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressCancelButtonPC // (Final|Native|Protected) // @ game+0x1da4230
	bool OnPressButtonPC(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonPC // (Final|Native|Protected) // @ game+0x1da4270
	void OnPressButtonOpen(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonOpen // (Final|Native|Protected|BlueprintCallable) // @ game+0x1da4250
	void OnPressButtonCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.OnPressButtonCancel // (Final|Native|Protected|BlueprintCallable) // @ game+0x1da4230
	void OnOpenCharacterChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnOpenCharacterChanged // (Final|Native|Protected) // @ game+0x1da41b0
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarInteractionOpenAirdropWidget.OnDrivingStateChanged // (Final|Native|Protected) // @ game+0x1da3e20
	void OnBtnActiveChanged(bool Inactive); // Function Solarland.SolarInteractionOpenAirdropWidget.OnBtnActiveChanged // (Final|Native|Protected) // @ game+0x1c89360
	void OnAirdropProgressChanged(struct AAirDropTreasureBox* InBoxActor); // Function Solarland.SolarInteractionOpenAirdropWidget.OnAirdropProgressChanged // (Final|Native|Protected) // @ game+0x1da3c40
	void HideSelfByThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.HideSelfByThisID // (Final|Native|Protected) // @ game+0x1da3bc0
	void ForceCancel(); // Function Solarland.SolarInteractionOpenAirdropWidget.ForceCancel // (Final|Native|Protected) // @ game+0x1da3850
	bool BSameThisID(int64_t InThisID); // Function Solarland.SolarInteractionOpenAirdropWidget.BSameThisID // (Final|Native|Protected) // @ game+0x1da3100
	void BindDelegates(); // Function Solarland.SolarInteractionOpenAirdropWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1da3190
};

// Class Solarland.SolarInteractionRescueTeammateWidget
// Size: 0x3b0 (Inherited: 0x358)
struct USolarInteractionRescueTeammateWidget : USolarInteractionItemWidget {
	int32_t FastReliefSkillCharacterID; // 0x358(0x04)
	char pad_35C[0x54]; // 0x35c(0x54)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStopCountDownProgress // (Final|Native|Protected) // @ game+0x1daf770
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.WrappedStartCountDownProgress // (Final|Native|Protected|HasOutParms) // @ game+0x1daf4f0
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionRescueTeammateWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionRescueTeammateWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionRescueTeammateWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnRescueButtonVisibilitySet(bool bShow); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonVisibilitySet // (Final|Native|Protected) // @ game+0x1daf2d0
	void OnRescueButtonClicked(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnRescueButtonClicked // (Final|Native|Protected|BlueprintCallable) // @ game+0x1cac940
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x1daf290
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionRescueTeammateWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x1daf250
	void OnCharacterIDSet(int32_t InCharacterId); // Function Solarland.SolarInteractionRescueTeammateWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x1daef00
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionRescueTeammateWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionRescueTeammateWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarInteractionTriggerWidget
// Size: 0x3e0 (Inherited: 0x358)
struct USolarInteractionTriggerWidget : USolarInteractionItemWidget {
	char pad_358[0x88]; // 0x358(0x88)

	void WrappedStopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.WrappedStopCountDownProgress // (Final|Native|Public) // @ game+0x1daf7f0
	void WrappedStartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.WrappedStartCountDownProgress // (Final|Native|Public|HasOutParms) // @ game+0x1daf630
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarInteractionTriggerWidget.StopCountDownProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarInteractionTriggerWidget.StartCountDownProgress // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToPreInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToPreInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToNonCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarInteractionTriggerWidget.RefreshToCancellableInteracting // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnProgressiveInteractCompleted(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x1daf2b0
	void OnProgressiveInteractCanceled(); // Function Solarland.SolarInteractionTriggerWidget.OnProgressiveInteractCanceled // (Final|Native|Protected|BlueprintCallable) // @ game+0x1daf270
	void OnInteractButtonTriggered(); // Function Solarland.SolarInteractionTriggerWidget.OnInteractButtonTriggered // (Final|Native|Protected|BlueprintCallable) // @ game+0x1daf040
	void InitByTriggerInfo(struct FInteractionTriggerInfo& TriggerInfo); // Function Solarland.SolarInteractionTriggerWidget.InitByTriggerInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void EnablePassiveBuffDisplay(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarInteractionTriggerWidget.EnablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void DisablePassiveBuffDisplay(); // Function Solarland.SolarInteractionTriggerWidget.DisablePassiveBuffDisplay // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarInteractionVolume
// Size: 0x250 (Inherited: 0x230)
struct ASolarInteractionVolume : ATriggerBox {
	char pad_230[0x18]; // 0x230(0x18)
	bool DisableInteractionVolume; // 0x248(0x01)
	bool DebugDrawVolume; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)

	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnEndOverlap // (Final|Native|Public) // @ game+0x1daef80
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.SolarInteractionVolume.OnBeginOverlap // (Final|Native|Public) // @ game+0x1daee40
};

// Class Solarland.SolarIrisSettings
// Size: 0x78 (Inherited: 0x38)
struct USolarIrisSettings : UDeveloperSettings {
	struct FString BaseURL; // 0x38(0x10)
	struct FString GameID; // 0x48(0x10)
	struct FString RegionID; // 0x58(0x10)
	struct FString KeyStr; // 0x68(0x10)
};

// Class Solarland.SolarIronManVehicle
// Size: 0x1b00 (Inherited: 0x14e0)
struct ASolarIronManVehicle : ASolarHoverVehicle {
	struct FName LeftHandSocket; // 0x14e0(0x08)
	struct FName RightHandSocket; // 0x14e8(0x08)
	struct FName LeftFootSocket; // 0x14f0(0x08)
	struct FName RightFootSocket; // 0x14f8(0x08)
	struct FName BackPackSocket; // 0x1500(0x08)
	struct TSoftObjectPtr<UAnimMontage> RotationLaserMontage; // 0x1508(0x28)
	struct FVector BoxHalfSize; // 0x1530(0x0c)
	int32_t QuerySameActorMaxNum; // 0x153c(0x04)
	float VehicleSpeedThresholdFromStandToLie; // 0x1540(0x04)
	char pad_1544[0xc]; // 0x1544(0x0c)
	struct FVehicleVFX LeftHandBulletEffect; // 0x1550(0x90)
	struct FVehicleVFX LeftHandMuzzleEffect; // 0x15e0(0x90)
	struct FVehicleVFX RightHandBulletEffect; // 0x1670(0x90)
	struct FVehicleVFX RightHandMuzzleEffect; // 0x1700(0x90)
	struct FVehicleVFX HitEffect; // 0x1790(0x90)
	struct TArray<struct FVehicleVFX> IronManJetEffectInfo; // 0x1820(0x10)
	struct TArray<enum class ECollisionChannel> HitDecalExceptObjTypes; // 0x1830(0x10)
	struct TSoftObjectPtr<UParticleSystem> HitDecalParticle; // 0x1840(0x28)
	struct FVector HitDecalScale; // 0x1868(0x0c)
	float HitDecalInterval; // 0x1874(0x04)
	float HitDecalBeginTime; // 0x1878(0x04)
	float HitDecalEndTime; // 0x187c(0x04)
	float HitDecalLength; // 0x1880(0x04)
	char pad_1884[0x4]; // 0x1884(0x04)
	float SmoothRotationSpeed; // 0x1888(0x04)
	float MaxJetEffectFXkgValue; // 0x188c(0x04)
	struct FName JetEffectFXkgName; // 0x1890(0x08)
	struct UGameplayEffect* CanNotSwitchSeat; // 0x1898(0x08)
	char pad_18A0[0x50]; // 0x18a0(0x50)
	struct TSoftObjectPtr<UStaticMesh> IronManStaticMeshWithDriver; // 0x18f0(0x28)
	struct TSoftObjectPtr<UStaticMesh> IronManStaticMeshWithNoDriver; // 0x1918(0x28)
	bool bAddRiderSeat; // 0x1940(0x01)
	char pad_1941[0x7]; // 0x1941(0x07)
	struct FVehicleSeatSlot RiderSeatSlot; // 0x1948(0x1b8)

	void OnIronManRootHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarIronManVehicle.OnIronManRootHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1daf060
};

// Class Solarland.SolarIronManVehicleAnimInstance
// Size: 0x470 (Inherited: 0x320)
struct USolarIronManVehicleAnimInstance : USolarHoverVehicleAnimInstance {
	char pad_320[0x8]; // 0x320(0x08)
	struct TMap<struct FName, struct FTransform> SocketToTransform; // 0x328(0x50)
	char pad_378[0x8]; // 0x378(0x08)
	struct FTransform LeftHandTransform; // 0x380(0x30)
	struct FTransform RightHandTransform; // 0x3b0(0x30)
	struct FTransform LeftFootTransform; // 0x3e0(0x30)
	struct FTransform RightFootTransform; // 0x410(0x30)
	struct FTransform BackPackTransform; // 0x440(0x30)
};

// Class Solarland.SolarItemCardViewWidget
// Size: 0x350 (Inherited: 0x340)
struct USolarItemCardViewWidget : USolarUserWidget {
	enum class ESolarItemQualityType QualityType; // 0x340(0x01)
	enum class ESolarItemSelectType SelectType; // 0x341(0x01)
	enum class ESolarItemLockType LockType; // 0x342(0x01)
	enum class ESolarItemDownloadType DownloadType; // 0x343(0x01)
	enum class ESolarItemMarkType MarkType; // 0x344(0x01)
	enum class ESolarItemLimitType LimitType; // 0x345(0x01)
	enum class ESolarItemUseType UseType; // 0x346(0x01)
	enum class ESolarItemBuyType BuyType; // 0x347(0x01)
	enum class ESolarItemOwnType OwnType; // 0x348(0x01)
	enum class ESolarRedHintType RedHintType; // 0x349(0x01)
	enum class ESolarItemShowType ShowType; // 0x34a(0x01)
	enum class EClassType CharacterBuildType; // 0x34b(0x01)
	char pad_34C[0x4]; // 0x34c(0x04)

	void ReflashItemView(); // Function Solarland.SolarItemCardViewWidget.ReflashItemView // (Final|Native|Public|BlueprintCallable) // @ game+0x1daf360
	void OnUseChanged(enum class ESolarItemUseType InType); // Function Solarland.SolarItemCardViewWidget.OnUseChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnShowTypeChanged(enum class ESolarItemShowType InType); // Function Solarland.SolarItemCardViewWidget.OnShowTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnSelectedChanged(enum class ESolarItemSelectType InType); // Function Solarland.SolarItemCardViewWidget.OnSelectedChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnrRedHintChanged(enum class ESolarRedHintType InType); // Function Solarland.SolarItemCardViewWidget.OnrRedHintChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnQualityChanged(enum class ESolarItemQualityType InType); // Function Solarland.SolarItemCardViewWidget.OnQualityChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnOwnChanged(enum class ESolarItemOwnType InType); // Function Solarland.SolarItemCardViewWidget.OnOwnChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnMarkedChanged(enum class ESolarItemMarkType InType); // Function Solarland.SolarItemCardViewWidget.OnMarkedChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnLockedChanged(enum class ESolarItemLockType InType); // Function Solarland.SolarItemCardViewWidget.OnLockedChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnLimitChanged(enum class ESolarItemLimitType InType); // Function Solarland.SolarItemCardViewWidget.OnLimitChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnDownloadedChanged(enum class ESolarItemDownloadType InType); // Function Solarland.SolarItemCardViewWidget.OnDownloadedChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBuyChanged(enum class ESolarItemBuyType InType); // Function Solarland.SolarItemCardViewWidget.OnBuyChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBuildTypeChanged(enum class EClassType InType); // Function Solarland.SolarItemCardViewWidget.OnBuildTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarItemComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USolarItemComponent : UActorComponent {
	struct ASolarCharacter* OwnerChara; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)

	void UseItemRequestLuaCall(int32_t ItemID, int32_t Num); // Function Solarland.SolarItemComponent.UseItemRequestLuaCall // (Final|Native|Public) // @ game+0x1daf430
	void OnPlayerBackpackItemUpdate(); // Function Solarland.SolarItemComponent.OnPlayerBackpackItemUpdate // (Final|Native|Public) // @ game+0x1daf230
	bool CanUseMedicine(); // Function Solarland.SolarItemComponent.CanUseMedicine // (Final|Native|Public) // @ game+0x1daedd0
};

// Class Solarland.SolarItemInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarItemInterface : UInterface {
};

// Class Solarland.SolarItemManager
// Size: 0x660 (Inherited: 0x28)
struct USolarItemManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ASolarItemRootActor* RootActor; // 0x30(0x08)
	char pad_38[0xa0]; // 0x38(0xa0)
	struct TArray<struct ASolarItemSpawner*> ItemSpawners; // 0xd8(0x10)
	struct TArray<struct ASolarItemSpawner*> NSItemSpanwers; // 0xe8(0x10)
	struct TMap<int32_t, struct ASolarItemSpawner*> ItemSpawnersMap; // 0xf8(0x50)
	struct TMap<int32_t, struct ASolarAirDropSpawner*> AirDropSpawnersMap; // 0x148(0x50)
	struct TMap<int32_t, struct FSolarItemSpawnerArray> NSItemSpawnerMap; // 0x198(0x50)
	struct TMap<int32_t, struct FOutcomeData> ItemOutcomeDatas; // 0x1e8(0x50)
	struct TMap<int32_t, struct FOutcomeDataCollection> OutcomeCollection; // 0x238(0x50)
	struct TMap<int32_t, struct FSimpleDropItemDataCollection> OriginDropItemDatas; // 0x288(0x50)
	struct TMap<int32_t, struct FFinalDropDataCollection> AirDropItemDatas; // 0x2d8(0x50)
	struct TMap<int32_t, int32_t> AirDropChestIndexMap; // 0x328(0x50)
	struct TMap<int32_t, int32_t> UsedAirDropChestIndexMap; // 0x378(0x50)
	struct TMap<int32_t, int32_t> MaxPileMap; // 0x3c8(0x50)
	struct FRandomStream ItemStream; // 0x418(0x08)
	float DelaySpawnTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct TArray<struct FString> SubLevelNames; // 0x428(0x10)
	bool BInitSpawner; // 0x438(0x01)
	bool BSpawnerDestoryed; // 0x439(0x01)
	char pad_43A[0x6]; // 0x43a(0x06)
	struct FTimerHandle ItemInitSpawnerHandle; // 0x440(0x08)
	float DelayInitSpawnerTime; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FTimerHandle ItemLoopSpawnHandle; // 0x450(0x08)
	float SpawnLoopInterval; // 0x458(0x04)
	float SpawnMinDisSquared; // 0x45c(0x04)
	float SpawnMaxHeightOffset; // 0x460(0x04)
	float ChestSpawnMinDisSquared; // 0x464(0x04)
	float VehicleSpawnMinDisSquared; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct UDataTable* ItemResReferenceTable; // 0x470(0x08)
	struct FString ItemResReferenceTablePath; // 0x478(0x10)
	char pad_488[0x38]; // 0x488(0x38)
	bool BOpenLog; // 0x4c0(0x01)
	char pad_4C1[0x3]; // 0x4c1(0x03)
	int32_t FirstSpawnerIndex; // 0x4c4(0x04)
	int32_t FirstTBoxIndex; // 0x4c8(0x04)
	int32_t FirstAirDropIndex; // 0x4cc(0x04)
	int32_t FirstVehicleIndex; // 0x4d0(0x04)
	int32_t ChestKeyCode; // 0x4d4(0x04)
	int32_t Level1OutcomeID; // 0x4d8(0x04)
	int32_t Level2OutcomeID; // 0x4dc(0x04)
	int32_t Level3OutcomeID; // 0x4e0(0x04)
	char pad_4E4[0x14]; // 0x4e4(0x14)
	struct TMap<int32_t, enum class EItemType> ItemID2Types; // 0x4f8(0x50)
	int64_t ThisIdRefCount; // 0x548(0x08)
	int64_t ServerNowSeconds; // 0x550(0x08)
	struct FString RootActorBpPath; // 0x558(0x10)
	float CheckDropRadius; // 0x568(0x04)
	float CheckDropHeight; // 0x56c(0x04)
	float DropLineTraceLength; // 0x570(0x04)
	float DropUnitOffset; // 0x574(0x04)
	struct USolarMapManager* MapManager; // 0x578(0x08)
	struct TArray<struct ASolarAirDropSpawner*> ActiveAirDropBox; // 0x580(0x10)
	char pad_590[0xa0]; // 0x590(0xa0)
	struct TArray<struct TWeakObjectPtr<struct AAirDropTreasureBox>> AirDropsList; // 0x630(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> DeathTreasureBoxList; // 0x640(0x10)
	char pad_650[0x10]; // 0x650(0x10)

	void UpdateItemParams(); // Function Solarland.SolarItemManager.UpdateItemParams // (Final|Native|Protected) // @ game+0x1db6270
	bool TryDropAtLocation(struct ASolarCharacterBase* Owner, struct FVector& CheckPos); // Function Solarland.SolarItemManager.TryDropAtLocation // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1db6190
	void SpawnTreasureBoxByID(int32_t TreasureId, struct FTransform trans, struct TArray<struct FSolarItemData> ItemsToSpawn, struct ASolarCharacter* SummonCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.SpawnTreasureBoxByID // (Final|Native|Public|HasDefaults) // @ game+0x1db5ee0
	void SpawnMutipleItems(struct ASolarCharacter* InCharacter, int32_t InItemID, int32_t InPerCount, int32_t InTotalCount); // Function Solarland.SolarItemManager.SpawnMutipleItems // (Final|Native|Public) // @ game+0x1db5da0
	void SpawnItemsByOutcomeID(int32_t OutcomeID, struct FTransform& trans); // Function Solarland.SolarItemManager.SpawnItemsByOutcomeID // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db5c80
	void SpawnItems(int32_t ItemID, int32_t ItemNum, struct FTransform trans); // Function Solarland.SolarItemManager.SpawnItems // (Final|Native|Public|HasDefaults) // @ game+0x1db5b00
	struct FSolarItemData SpawnItemData(int32_t ItemID); // Function Solarland.SolarItemManager.SpawnItemData // (Final|Native|Public) // @ game+0x1db5a00
	void SpawnDeathBox(struct ASolarCharacterBase* Owner, struct FRotator& Rotator, struct TArray<struct FSolarItemData>& DataTarray, int32_t& DeathBoxId, struct TArray<struct ASolarPlayerWeapon*>& DeathBoxWeaponArray, float& CurrEnergyValue, float& CurrExtraEnergyValue, int32_t& MonsterID); // Function Solarland.SolarItemManager.SpawnDeathBox // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db56c0
	void SpawnAirDropByID(int32_t ChestID, struct FVector Location, struct TArray<struct FSolarItemData> ItemsToSpawn); // Function Solarland.SolarItemManager.SpawnAirDropByID // (Final|Native|Public|HasDefaults) // @ game+0x1db5520
	void ResetThisID(); // Function Solarland.SolarItemManager.ResetThisID // (Final|Native|Public) // @ game+0x1db5500
	bool RefreshOutcomePoolContent(struct FOutcomeData& InOutcomeData); // Function Solarland.SolarItemManager.RefreshOutcomePoolContent // (Final|Native|Public|HasOutParms) // @ game+0x1db5430
	void OnUpdateServerNowSeconds(int32_t InNowSeconds); // Function Solarland.SolarItemManager.OnUpdateServerNowSeconds // (Final|Native|Public) // @ game+0x1db53b0
	void OnAsyncLoadTreasureBoxComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FTransform trans, struct ASolarCharacter* InCharacter, float InSpawnDelay, float InStartHeight); // Function Solarland.SolarItemManager.OnAsyncLoadTreasureBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x1db4fc0
	void OnAsyncLoadItemComplete(struct FSoftClassPath SClassPath, struct FSolarItemData ItemData, struct FTransform trans); // Function Solarland.SolarItemManager.OnAsyncLoadItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x1db4d70
	void OnAsyncLoadDiscardItemComplete(struct FSoftClassPath SClassPath, struct ASolarCharacter* Owner, struct FSolarItemData ItemData); // Function Solarland.SolarItemManager.OnAsyncLoadDiscardItemComplete // (Final|Native|Protected|HasDefaults) // @ game+0x1db4b90
	void OnAsyncLoadDeathBoxComplete(struct UObject* DeathBoxClass, struct ASolarCharacterBase* Owner, struct FRotator Rotator, struct TArray<struct FSolarItemData> DataTarray, struct FSolarItemData DeathBoxData, struct TArray<struct ASolarPlayerWeapon*> DeathBoxWeaponArray, float CurrEnergyValue, float CurrExtraEnergyValue, int32_t MonsterID); // Function Solarland.SolarItemManager.OnAsyncLoadDeathBoxComplete // (Final|Native|Protected|HasDefaults) // @ game+0x1db4790
	void OnAsyncLoadAirdropComplete(struct FSoftClassPath SClassPath, struct FSolarItemData BoxItemData, struct TArray<struct FSolarItemData> ItemDataList, struct FVector Location); // Function Solarland.SolarItemManager.OnAsyncLoadAirdropComplete // (Final|Native|Protected|HasDefaults) // @ game+0x1db44c0
	void NotifySpawnerDestroy(); // Function Solarland.SolarItemManager.NotifySpawnerDestroy // (Final|Native|Public) // @ game+0x8ba190
	void NotifyAvailableAirDropsNumChanged(); // Function Solarland.SolarItemManager.NotifyAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x1db44a0
	void NotifyAirDropOpened(); // Function Solarland.SolarItemManager.NotifyAirDropOpened // (Final|Native|Public) // @ game+0x1db4480
	void NetStartAirDrops(int32_t SpawnerID, int32_t ChestID); // Function Solarland.SolarItemManager.NetStartAirDrops // (Final|Native|Public) // @ game+0x1db43c0
	bool NetRunSpecOutcome(int32_t InData, struct TArray<struct FSolarItemData>& OutItemArray); // Function Solarland.SolarItemManager.NetRunSpecOutcome // (Final|Native|Public|HasOutParms) // @ game+0x1db4260
	void NetRunGlobalDrop(); // Function Solarland.SolarItemManager.NetRunGlobalDrop // (Final|Native|Public) // @ game+0x1db4240
	void NetRunDrop(); // Function Solarland.SolarItemManager.NetRunDrop // (Final|Native|Public) // @ game+0x1db4220
	bool NetDropOutcomeContent(int32_t TargetContentID, struct FOutcomeData& OutcomeData, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas, bool fromSpawner, struct FTransform& trans); // Function Solarland.SolarItemManager.NetDropOutcomeContent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db3fa0
	bool NetDropOutcome(struct FOutcomeData& OutcomeData, int32_t& OutTargetContentID); // Function Solarland.SolarItemManager.NetDropOutcome // (Final|Native|Public|HasOutParms) // @ game+0x1db3e80
	void NetDropGlobalOutcome(struct FGlobalOutcomeData& GlobalOutcomeData); // Function Solarland.SolarItemManager.NetDropGlobalOutcome // (Final|Native|Public|HasOutParms) // @ game+0x1db3cd0
	void LoadSpawnerLevelComplete(); // Function Solarland.SolarItemManager.LoadSpawnerLevelComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x1db3cb0
	void LoadItemSpawnerLevels(); // Function Solarland.SolarItemManager.LoadItemSpawnerLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x1db3c90
	bool IsPosBlocked(struct FVector& CheckPos); // Function Solarland.SolarItemManager.IsPosBlocked // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1db3bf0
	bool IsInSafeArea(struct FVector& Location); // Function Solarland.SolarItemManager.IsInSafeArea // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db3b50
	void InitWeaponPartLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponPartLevel // (Final|Native|Public|HasOutParms) // @ game+0x1db3a60
	void InitWeaponLevel(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitWeaponLevel // (Final|Native|Public|HasOutParms) // @ game+0x1db3970
	void InitVehicleSpawnGroupData(struct TMap<int32_t, int32_t>& VehicleGroupIdToNum); // Function Solarland.SolarItemManager.InitVehicleSpawnGroupData // (Final|Native|Public|HasOutParms) // @ game+0x1db37f0
	void InitItemDataShieldValue(struct FSolarItemData& InItemData); // Function Solarland.SolarItemManager.InitItemDataShieldValue // (Final|Native|Public|HasOutParms) // @ game+0x1db3700
	int64_t IncreaseThisID(); // Function Solarland.SolarItemManager.IncreaseThisID // (Final|Native|Public) // @ game+0x1db36d0
	int32_t GetVehicleIDBySingleSpawnId(int32_t SpawnID); // Function Solarland.SolarItemManager.GetVehicleIDBySingleSpawnId // (Final|Native|Public) // @ game+0x1db3640
	int32_t GetVehicleIDByGroupIDAndIndex(int32_t groupid, int32_t GroupIndex); // Function Solarland.SolarItemManager.GetVehicleIDByGroupIDAndIndex // (Final|Native|Public) // @ game+0x1db3580
	int32_t GetVehicleGroupIDByVehicleID(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleGroupIDByVehicleID // (Final|Native|Static|Public) // @ game+0x1db3500
	struct FSolarVehicleData GetVehicleConfigData(int32_t InVehicleID); // Function Solarland.SolarItemManager.GetVehicleConfigData // (Final|Native|Static|Public) // @ game+0x1db3430
	int32_t GetServerNowSeconds(); // Function Solarland.SolarItemManager.GetServerNowSeconds // (Final|Native|Public) // @ game+0x1db3400
	int32_t GetRandomIDInMap(int32_t TotalWeight, struct TMap<int32_t, int32_t>& WeightIDMap); // Function Solarland.SolarItemManager.GetRandomIDInMap // (Final|Native|Public|HasOutParms) // @ game+0x1db3230
	int32_t GetRandomAirDropIDInMap(); // Function Solarland.SolarItemManager.GetRandomAirDropIDInMap // (Final|Native|Public) // @ game+0x1db3200
	int32_t GetOutcomeIdByTreasureBoxId(int32_t TreasureBoxID); // Function Solarland.SolarItemManager.GetOutcomeIdByTreasureBoxId // (Final|Native|Public) // @ game+0x1db3170
	struct FOutcomeData GetOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetOutcomeDataByID // (Final|Native|Public) // @ game+0x1db30a0
	struct FOutcomeContentData GetOutcomeContentDataByID(int32_t ContentID); // Function Solarland.SolarItemManager.GetOutcomeContentDataByID // (Final|Native|Public) // @ game+0x1db2f80
	bool GetItemResReference(int32_t InItemID, struct FItemResReference& outData); // Function Solarland.SolarItemManager.GetItemResReference // (Final|Native|Public|HasOutParms) // @ game+0x1db2e50
	int32_t GetItemPrize(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemPrize // (Final|Native|Public) // @ game+0x1db2dc0
	int32_t GetItemMaxPileByID(int32_t InItemID); // Function Solarland.SolarItemManager.GetItemMaxPileByID // (Final|Native|Public) // @ game+0x1db2d30
	bool GetGlobalOutcomeData(int32_t GamePlayMode, struct TArray<struct FGlobalOutcomeData>& GlobalOutcomeDatas); // Function Solarland.SolarItemManager.GetGlobalOutcomeData // (Final|Native|Public|HasOutParms) // @ game+0x1db2c00
	int32_t GetEntryID(); // Function Solarland.SolarItemManager.GetEntryID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool GetCurrItemSubLevels(struct FString InMapName, struct TArray<struct FString>& OutSubLevelNames); // Function Solarland.SolarItemManager.GetCurrItemSubLevels // (Final|Native|Public|HasOutParms) // @ game+0x1db2ad0
	struct FOutcomeData GetCookedOutcomeDataByID(int32_t OutcomeID); // Function Solarland.SolarItemManager.GetCookedOutcomeDataByID // (Final|Native|Public) // @ game+0x1db2a00
	bool GetChestsFromChestSpawn(int32_t ChestSpawnID, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetChestsFromChestSpawn // (Final|Native|Public|HasOutParms) // @ game+0x1db2910
	int32_t GetAvailableAirDropsNum(); // Function Solarland.SolarItemManager.GetAvailableAirDropsNum // (Final|Native|Public) // @ game+0x1db28e0
	bool GetAirDropChestIDsByGamePlayMode(int32_t GamePlayMode, struct TArray<int32_t>& ChestIDs); // Function Solarland.SolarItemManager.GetAirDropChestIDsByGamePlayMode // (Final|Native|Public|HasOutParms) // @ game+0x1db27f0
	struct TArray<struct ASolarAirDropSpawner*> GetActiveAirDropBox(); // Function Solarland.SolarItemManager.GetActiveAirDropBox // (Final|Native|Public|BlueprintCallable) // @ game+0x1db2770
	void FindTransformForBoxItem(struct AActor* TargetActor, struct FTransform& InTrans, bool bUseNewLocation); // Function Solarland.SolarItemManager.FindTransformForBoxItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db2610
	struct FRotator FindRotationForDropItem(struct AActor* TargetActor, struct FVector& FindTargetPos); // Function Solarland.SolarItemManager.FindRotationForDropItem // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1db2520
	bool FindPosForDropItem(struct ASolarCharacterBase* Owner, struct FVector& FindTargetPos, bool bPreferCenter); // Function Solarland.SolarItemManager.FindPosForDropItem // (Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1db2400
	struct FSolarItemData CreateItemDataByKey(int32_t InItemID); // Function Solarland.SolarItemManager.CreateItemDataByKey // (Final|Native|Public) // @ game+0x1db2300
	void ConvertOriginDatasToItemDatas(); // Function Solarland.SolarItemManager.ConvertOriginDatasToItemDatas // (Final|Native|Public) // @ game+0x1db22e0
	void ClearSpawnLoopTimer(); // Function Solarland.SolarItemManager.ClearSpawnLoopTimer // (Final|Native|Public) // @ game+0x1db22c0
	void CheckSpawnItemByDis(); // Function Solarland.SolarItemManager.CheckSpawnItemByDis // (Final|Native|Public) // @ game+0x1db22a0
	bool CheckPointInCircle(struct FVector2D Center, float Radius, struct FVector2D PlayerPoint); // Function Solarland.SolarItemManager.CheckPointInCircle // (Final|Native|Public|HasDefaults) // @ game+0x1db21a0
	void AddVehicleGroupDataSingle(int32_t groupid, struct TArray<int32_t>& SingleData); // Function Solarland.SolarItemManager.AddVehicleGroupDataSingle // (Final|Native|Public|HasOutParms) // @ game+0x1db20c0
	void AddOneDropDataToTempDatas(int32_t SpawnerID, int32_t InItemID, int32_t InItemNum, struct TMap<int32_t, struct FSimpleDropItemDataCollection>& InDropItemDatas); // Function Solarland.SolarItemManager.AddOneDropDataToTempDatas // (Final|Native|Public|HasOutParms) // @ game+0x1db1f10
	void AddAirDropToList(struct AAirDropTreasureBox* AirDrop); // Function Solarland.SolarItemManager.AddAirDropToList // (Final|Native|Public) // @ game+0x1db1e90
};

// Class Solarland.SolarItemResourceDataTable
// Size: 0xc8 (Inherited: 0xc8)
struct USolarItemResourceDataTable : UDataTable {
};

// Class Solarland.SolarItemRootActor
// Size: 0x240 (Inherited: 0x228)
struct ASolarItemRootActor : AActor {
	int32_t MAX_LOAD_NUM; // 0x228(0x04)
	int32_t MAX_SPAWN_NUM; // 0x22c(0x04)
	int32_t CurrLoadNum; // 0x230(0x04)
	int32_t CurrSpawnNum; // 0x234(0x04)
	int32_t TempFrame; // 0x238(0x04)
	int32_t FrameInterval; // 0x23c(0x04)
};

// Class Solarland.SolarJoyStick
// Size: 0x1e0 (Inherited: 0x138)
struct USolarJoyStick : UWidget {
	struct FSolarVirtualInput VirtualActionInput; // 0x138(0x20)
	struct FSolarVirtualInput VirtualAxisXInput; // 0x158(0x20)
	struct FSolarVirtualInput VirtualAxisYInput; // 0x178(0x20)
	struct FMulticastInlineDelegate OnTouchPressed; // 0x198(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveX; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnTouchMoveY; // 0x1c8(0x10)
	char pad_1D8[0x8]; // 0x1d8(0x08)

	void ResetControlInput(); // Function Solarland.SolarJoyStick.ResetControlInput // (Native|Public|BlueprintCallable) // @ game+0x1db8b70
};

// Class Solarland.SolarKeyMapButton
// Size: 0x500 (Inherited: 0x4d8)
struct USolarKeyMapButton : USolarButton {
	struct FSolarVirtualInput VirtualActionInput; // 0x4d8(0x20)
	bool IsFocus; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
};

// Class Solarland.SolarlandContentStringDownloader
// Size: 0xa8 (Inherited: 0x28)
struct USolarlandContentStringDownloader : UObject {
	struct FMulticastInlineDelegate OnContentStringDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnContentStringDownloading; // 0x38(0x10)
	struct FMulticastInlineDelegate OnContentStringFailed; // 0x48(0x10)
	char pad_58[0x21]; // 0x58(0x21)
	bool bForceRedownload; // 0x79(0x01)
	char pad_7A[0xa]; // 0x7a(0x0a)
	int32_t ChunkSize; // 0x84(0x04)
	char pad_88[0x20]; // 0x88(0x20)

	void StartDownload(); // Function Solarland.SolarlandContentStringDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x1db8bd0
	bool IsCurrentDownloading(); // Function Solarland.SolarlandContentStringDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8b9c70
};

// Class Solarland.SolarlandDownloadModule
// Size: 0x30 (Inherited: 0x30)
struct USolarlandDownloadModule : UEngineSubsystem {
};

// Class Solarland.SolarlandDownloadSetting
// Size: 0x70 (Inherited: 0x28)
struct USolarlandDownloadSetting : UObject {
	bool bPrepareDownloadWithApplocationStart; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString CDNURLPrefix; // 0x30(0x10)
	struct FString ExtraCDNURLPrefix; // 0x40(0x10)
	struct FString ServerListFileName; // 0x50(0x10)
	struct FString FileVersion; // 0x60(0x10)
};

// Class Solarland.SolarlandFileDownloader
// Size: 0x110 (Inherited: 0x28)
struct USolarlandFileDownloader : UObject {
	struct FMulticastInlineDelegate OnEachFileDownloaded; // 0x28(0x10)
	struct FMulticastInlineDelegate OnDownloadCompleted; // 0x38(0x10)
	struct FMulticastInlineDelegate OnEachFileDownloading; // 0x48(0x10)
	struct FMulticastInlineDelegate OnFileDownloadFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnHashCheckFailedFileDownloader; // 0x68(0x10)
	char pad_78[0x31]; // 0x78(0x31)
	bool bForceRedownload; // 0xa9(0x01)
	char pad_AA[0x2a]; // 0xaa(0x2a)
	int32_t ChunkSize; // 0xd4(0x04)
	char pad_D8[0x38]; // 0xd8(0x38)

	void StartDownload(); // Function Solarland.SolarlandFileDownloader.StartDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x1db8bf0
	bool IsCurrentDownloading(); // Function Solarland.SolarlandFileDownloader.IsCurrentDownloading // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x8b9c70
};

// Class Solarland.SolarlandPakMounter
// Size: 0x88 (Inherited: 0x28)
struct USolarlandPakMounter : UObject {
	struct FMulticastInlineDelegate OnMountCompleted; // 0x28(0x10)
	struct FMulticastInlineDelegate OnMountFailed; // 0x38(0x10)
	char pad_48[0x39]; // 0x48(0x39)
	bool bMounting; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
};

// Class Solarland.SolarLeggedVehicleMovement
// Size: 0x830 (Inherited: 0x138)
struct USolarLeggedVehicleMovement : UPawnMovementComponent {
	float LandingSweepTraceDistance; // 0x138(0x04)
	float LandedVFXHeightThreshold; // 0x13c(0x04)
	struct TMap<enum class EPhysicalSurface, struct FVehicleVFX> JumpLandedVFXs; // 0x140(0x50)
	struct FVehicleLocomotionData LocomotionDatas[0x3]; // 0x190(0x54)
	float MaxControllableDegreeOffset; // 0x1e4(0x04)
	float WalkableFloorAngle; // 0x1e8(0x04)
	float GravityZ; // 0x1ec(0x04)
	bool bEnableProceduralAnimation; // 0x1f0(0x01)
	bool bAdvancedProceduralAnimation; // 0x1f1(0x01)
	char pad_1F2[0x2]; // 0x1f2(0x02)
	float StepHeight; // 0x1f4(0x04)
	float StepDistanceForward; // 0x1f8(0x04)
	float StepDistanceRight; // 0x1fc(0x04)
	float StepSequencePercent; // 0x200(0x04)
	float MinStepDuration; // 0x204(0x04)
	float MinDistanceToUnplant; // 0x208(0x04)
	float FixFeetTargetsAfterPercent; // 0x20c(0x04)
	float FeetTipBonesRotationInterpSpeed; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct FRuntimeFloatCurve SpeedCurve; // 0x218(0x88)
	struct FRuntimeFloatCurve HeightCurve; // 0x2a0(0x88)
	struct FRuntimeFloatCurve BodyRelativeZCurve; // 0x328(0x88)
	struct UCurveVector* BodyRelativeRotatorCurve; // 0x3b0(0x08)
	float BodyTransformLerpSpeedWithoutDriver; // 0x3b8(0x04)
	float TraceLength; // 0x3bc(0x04)
	float DistanceCheckMultiplier; // 0x3c0(0x04)
	float RadiusCheckMultiplier; // 0x3c4(0x04)
	float BodyAlignTerrainBlendSpeed; // 0x3c8(0x04)
	float BodyZOffsetMultiplier; // 0x3cc(0x04)
	float MaxBodyZOffset; // 0x3d0(0x04)
	float MinBodyZOffset; // 0x3d4(0x04)
	float MinBodyAlignPitchDegree; // 0x3d8(0x04)
	float MaxBodyAlignPitchDegree; // 0x3dc(0x04)
	float MinBodyAlignRollDegree; // 0x3e0(0x04)
	float MaxBodyAlignRollDegree; // 0x3e4(0x04)
	bool bRotateOnInput; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	float MinRotateDegree; // 0x3ec(0x04)
	float LerpSpeedWithinMinRotateDegree; // 0x3f0(0x04)
	float DegreeForRotatePiAnimation; // 0x3f4(0x04)
	float DegreeForRotateHalfPiAnimation; // 0x3f8(0x04)
	struct FFindFloorResult CurrentFloor; // 0x3fc(0x94)
	struct FLeggedVehiclePostPhysicsTickFunction PostPhysicsTickFunction; // 0x490(0x30)
	char pad_4C0[0xd0]; // 0x4c0(0xd0)
	bool bAlwaysCheckFloor; // 0x590(0x01)
	char pad_591[0x3]; // 0x591(0x03)
	float MaxStepHeight; // 0x594(0x04)
	float PerchRadiusThreshold; // 0x598(0x04)
	float PerchAdditionalHeight; // 0x59c(0x04)
	bool bCanWalkOffLedges; // 0x5a0(0x01)
	bool bIgnoreBaseRotation; // 0x5a1(0x01)
	char pad_5A2[0x2]; // 0x5a2(0x02)
	float LedgeCheckThreshold; // 0x5a4(0x04)
	float JumpZVelocity; // 0x5a8(0x04)
	float JumpXYVelocityOnInput; // 0x5ac(0x04)
	struct FGameplayTag JumpFailedTagForNotice; // 0x5b0(0x08)
	int32_t JumpFailedNoticeID; // 0x5b8(0x04)
	float AirControl; // 0x5bc(0x04)
	float AirControlBoostMultiplier; // 0x5c0(0x04)
	float AirControlBoostVelocityThreshold; // 0x5c4(0x04)
	float FallingLateralFriction; // 0x5c8(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x5cc(0x04)
	bool bNotifyApex; // 0x5d0(0x01)
	char pad_5D1[0x3]; // 0x5d1(0x03)
	float JumpOffJumpZFactor; // 0x5d4(0x04)
	float MoveSpeedFactorForPiRotation; // 0x5d8(0x04)
	float MoveSpeedFactorForHalfPiRotation; // 0x5dc(0x04)
	float MinFootIKEffectorZ; // 0x5e0(0x04)
	float MaxFootIKEffectorZ; // 0x5e4(0x04)
	struct TArray<struct FVehicleFootIKData> FootIKDataArray; // 0x5e8(0x10)
	float IKSweepTraceRadius; // 0x5f8(0x04)
	float IKEffectorBlendSpeed; // 0x5fc(0x04)
	float FloorAndMeshAngleForDoubleSweep; // 0x600(0x04)
	int32_t MaxBrokenWeakPointForLocomotion; // 0x604(0x04)
	float RefreshBoneTransformTimerForDedicatedServer; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct TArray<struct FVehicleVFX> WeakPointParticles; // 0x610(0x10)
	float MaxJoyStickYaw; // 0x620(0x04)
	float MinJoyStickYaw; // 0x624(0x04)
	float MaxJoyStickPitch; // 0x628(0x04)
	float MinJoyStickPitch; // 0x62c(0x04)
	float RotationBlendSpeed; // 0x630(0x04)
	float MaxFootZValueForAlignGround; // 0x634(0x04)
	int32_t MaxSimulationIterations; // 0x638(0x04)
	float MaxSimulationTimeStep; // 0x63c(0x04)
	float LandingTimerForAnitCheating; // 0x640(0x04)
	float EnablePhysicsCollisionTimer; // 0x644(0x04)
	struct USkeletalMeshComponent* VehicleMesh; // 0x648(0x08)
	struct UCapsuleComponent* UpdatedCapsule; // 0x650(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x658(0x08)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x660(0x08)
	struct USolarVehicleStateMachine* VehicleStateMachine; // 0x668(0x08)
	char pad_670[0x1c0]; // 0x670(0x1c0)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarLeggedVehicleMovement.OnPlayerGetOnVehicle // (Final|Native|Protected) // @ game+0x1dbbe60
	void OnCapsuleComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarLeggedVehicleMovement.OnCapsuleComponentHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1dbbc70
	void EnableFootIK(bool bEnable, bool bResetAlpha, bool bResetStandOnStatic); // Function Solarland.SolarLeggedVehicleMovement.EnableFootIK // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbb8f0
};

// Class Solarland.SolarLeggedVehicleStencilAnimInstance
// Size: 0x2b0 (Inherited: 0x270)
struct USolarLeggedVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLFootIKEffectorLocation; // 0x268(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x274(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x280(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x28c(0x0c)
	float FLFootIKAlpha; // 0x298(0x04)
	float FRFootIKAlpha; // 0x29c(0x04)
	float BLFootIKAlpha; // 0x2a0(0x04)
	float BRFootIKAlpha; // 0x2a4(0x04)
	struct TWeakObjectPtr<struct USolarLeggedVehicleAnimInstance> VehicleAnim; // 0x2a8(0x08)
};

// Class Solarland.SolarListView
// Size: 0x970 (Inherited: 0x950)
struct USolarListView : UListView {
	struct FMulticastInlineDelegate OnFocusLosted; // 0x950(0x10)
	struct FMulticastInlineDelegate OnListViewScrolled; // 0x960(0x10)

	void SetClampScoll(bool InValue); // Function Solarland.SolarListView.SetClampScoll // (Final|Native|Public) // @ game+0x1dbc210
};

// Class Solarland.SolarListViewItem
// Size: 0x30 (Inherited: 0x28)
struct USolarListViewItem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarLobbyAnimInstance
// Size: 0x270 (Inherited: 0x270)
struct USolarLobbyAnimInstance : UAnimInstance {
	bool bPlayIdleShow; // 0x268(0x01)
	bool bInIdleShow; // 0x269(0x01)

	void ShowRecommendUI(bool bVisible); // Function Solarland.SolarLobbyAnimInstance.ShowRecommendUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc3c0
	void SetCharacterCanBeLooked(bool IsVisible); // Function Solarland.SolarLobbyAnimInstance.SetCharacterCanBeLooked // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RefreshTick(); // Function Solarland.SolarLobbyAnimInstance.RefreshTick // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc030
	void RandIdleShow(); // Function Solarland.SolarLobbyAnimInstance.RandIdleShow // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LookAtFunctionSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.LookAtFunctionSwitcher // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void KawaiiPhysicsSwitcher(bool bOpen); // Function Solarland.SolarLobbyAnimInstance.KawaiiPhysicsSwitcher // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GetCameraLocation(struct FString ModuleCameraName); // Function Solarland.SolarLobbyAnimInstance.GetCameraLocation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ExitAnimFinish(); // Function Solarland.SolarLobbyAnimInstance.ExitAnimFinish // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbba10
};

// Class Solarland.SolarLobbyCharacterData
// Size: 0x298 (Inherited: 0x30)
struct USolarLobbyCharacterData : UDataAsset {
	struct FSoftObjectPath SkinShareImage; // 0x30(0x18)
	struct FSoftObjectPath SkinBackgroundShare; // 0x48(0x18)
	struct FSoftObjectPath Mesh; // 0x60(0x18)
	struct FSoftObjectPath Material; // 0x78(0x18)
	struct TMap<uint16_t, struct FCharacterTransformData> CharacterTransformData; // 0x90(0x50)
	struct TArray<struct FSoftObjectPath> MaterialArray; // 0xe0(0x10)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> CharacterChangeMat; // 0xf0(0x50)
	struct FSoftObjectPath AnimBlueprint; // 0x140(0x18)
	struct FSoftObjectPath WinAnimation; // 0x158(0x18)
	struct TArray<struct FSoftObjectPath> IdleShowList; // 0x170(0x10)
	struct FSoftObjectPath LobbyIdleAnimation; // 0x180(0x18)
	struct FSoftObjectPath AccessoryBlueprint; // 0x198(0x18)
	struct FSoftObjectPath EnterAnim; // 0x1b0(0x18)
	struct FSoftObjectPath ExitAnim; // 0x1c8(0x18)
	struct FSoftObjectPath RefuseAnim; // 0x1e0(0x18)
	struct FSoftObjectPath EncounterIdleAnim; // 0x1f8(0x18)
	struct TArray<struct FSoftObjectPath> EncounterIdleShowList; // 0x210(0x10)
	struct FSoftObjectPath RecommendAnimBlueprint; // 0x220(0x18)
	bool bParameterChanged; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct TArray<struct FPSAttachElem> PSAttachArray; // 0x240(0x10)
	struct FSoftObjectPath IdleShowSequence; // 0x250(0x18)
	struct FSoftObjectPath LeftHandProp; // 0x268(0x18)
	struct FSoftObjectPath RightHandProp; // 0x280(0x18)
};

// Class Solarland.SolarLobbyCharacter
// Size: 0x398 (Inherited: 0x288)
struct ASolarLobbyCharacter : APawn {
	char pad_288[0x8]; // 0x288(0x08)
	struct UAkComponent* AkAudioComponent; // 0x290(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x298(0x08)
	struct USkeletalMeshComponent* SkeletalMesh; // 0x2a0(0x08)
	struct USkeletalMeshComponent* MirrorSkeletalMesh; // 0x2a8(0x08)
	struct AActor* LobbyAccessory; // 0x2b0(0x08)
	struct AActor* MirrorLobbyAccessory; // 0x2b8(0x08)
	bool bCanPlayVoiceInIdleShow; // 0x2c0(0x01)
	bool bOpenMirror; // 0x2c1(0x01)
	bool CharacterIsVisiblity; // 0x2c2(0x01)
	char pad_2C3[0x5]; // 0x2c3(0x05)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> CharacterChangeMat; // 0x2c8(0x50)
	struct TSoftObjectPtr<UCurveFloat> CharacterMatCurve; // 0x318(0x28)
	struct TArray<struct FSolarCharacterChangeEffectInfo> ChangeEffectInfos; // 0x340(0x10)
	struct UCurveFloat* ChangeMatCurve; // 0x350(0x08)
	struct TSoftObjectPtr<UParticleSystem> ChangeParticlePath; // 0x358(0x28)
	char pad_380[0x10]; // 0x380(0x10)
	int32_t CurSkinId; // 0x390(0x04)
	int32_t CurChunkId; // 0x394(0x04)

	void UpdateLobbyAccessory(struct FString InAccessoryPath); // Function Solarland.SolarLobbyCharacter.UpdateLobbyAccessory // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc470
	void StopPlayIdleShow(); // Function Solarland.SolarLobbyCharacter.StopPlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc450
	void SetPropVisiable(bool isVisiable); // Function Solarland.SolarLobbyCharacter.SetPropVisiable // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc330
	void SetMeshVisibility(bool IsVisible); // Function Solarland.SolarLobbyCharacter.SetMeshVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc2a0
	void SetCharacterRotationByDelta(float InDeltaYaw); // Function Solarland.SolarLobbyCharacter.SetCharacterRotationByDelta // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc190
	void SetCharacterMeshAndMat(int32_t InSkinID, bool IsForce); // Function Solarland.SolarLobbyCharacter.SetCharacterMeshAndMat // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc0d0
	void SetCharacterByLoadedData(struct USolarLobbyCharacterData* InData); // Function Solarland.SolarLobbyCharacter.SetCharacterByLoadedData // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc050
	void PlayIdleShow(); // Function Solarland.SolarLobbyCharacter.PlayIdleShow // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbc010
	void OpenLookAtAndSetPostProcessABPCameraLocation(bool bOpen, struct FString ModuleCameraName); // Function Solarland.SolarLobbyCharacter.OpenLookAtAndSetPostProcessABPCameraLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbbf20
	void OnChangeEffectTimer(); // Function Solarland.SolarLobbyCharacter.OnChangeEffectTimer // (Final|Native|Public) // @ game+0x1dbbe40
	bool IsCanOpenMirror(); // Function Solarland.SolarLobbyCharacter.IsCanOpenMirror // (Native|Event|Public|BlueprintEvent) // @ game+0x1dbbc40
	bool IsCanOpenChangeAnim(); // Function Solarland.SolarLobbyCharacter.IsCanOpenChangeAnim // (Native|Event|Public|BlueprintEvent) // @ game+0x1dbbc10
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarLobbyCharacter.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1dbbb40
	void InitCharacterByLua(); // Function Solarland.SolarLobbyCharacter.InitCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct USolarAkGameObject* GetSolarAkGameObject(); // Function Solarland.SolarLobbyCharacter.GetSolarAkGameObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbbb20
	struct USolarLobbyCharacterData* GetLobbySkinResourceBySkinId(int32_t InSkinID, bool IsLowRes); // Function Solarland.SolarLobbyCharacter.GetLobbySkinResourceBySkinId // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbba60
	struct USolarLobbyAnimInstance* GetCharAnimInstance(); // Function Solarland.SolarLobbyCharacter.GetCharAnimInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbba30
	void ClearCharacterByLua(); // Function Solarland.SolarLobbyCharacter.ClearCharacterByLua // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void AttachCharacterSocketPS(struct TArray<struct FPSAttachElem>& PSAttachArray); // Function Solarland.SolarLobbyCharacter.AttachCharacterSocketPS // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1dbb820
};

// Class Solarland.SolarLobbyPlayerController
// Size: 0x5b8 (Inherited: 0x5a8)
struct ASolarLobbyPlayerController : APlayerController {
	char pad_5A8[0x10]; // 0x5a8(0x10)

	int32_t GetTotalFrameCount(); // Function Solarland.SolarLobbyPlayerController.GetTotalFrameCount // (Final|Native|Protected|Const) // @ game+0x1dc0ef0
};

// Class Solarland.SolarLocalizationToolsWidget
// Size: 0x340 (Inherited: 0x340)
struct USolarLocalizationToolsWidget : USolarExternalToolsWidget {
};

// Class Solarland.SolarLockSettings
// Size: 0x78 (Inherited: 0x28)
struct USolarLockSettings : USaveGame {
	struct TMap<int32_t, bool> FeaturesLockStatus; // 0x28(0x50)

	void CopyFrom(struct USolarLockSettings* InLockSettings); // Function Solarland.SolarLockSettings.CopyFrom // (Final|Native|Public) // @ game+0x1dbf070
};

// Class Solarland.SolarLockSettingsMgr
// Size: 0x50 (Inherited: 0x28)
struct USolarLockSettingsMgr : UObject {
	struct USolarLockSettings* CurLockSettings; // 0x28(0x08)
	struct USolarGameInstanceBase* SolarGameInstance; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
	struct USolarLockSettings* DefaultLockSettings; // 0x48(0x08)

	void SaveLockSettings(); // Function Solarland.SolarLockSettingsMgr.SaveLockSettings // (Final|Native|Public) // @ game+0x1dc1850
	void LoadLockSettings(); // Function Solarland.SolarLockSettingsMgr.LoadLockSettings // (Final|Native|Public) // @ game+0x1dc12d0
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLockSettingsMgr.Init // (Final|Native|Public) // @ game+0x1dc10b0
};

// Class Solarland.SolarLoginManager
// Size: 0x38 (Inherited: 0x30)
struct USolarLoginManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)

	void InitFromLogin(); // Function Solarland.SolarLoginManager.InitFromLogin // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void Init(struct USolarGameInstanceBase* GameInstance); // Function Solarland.SolarLoginManager.Init // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarUploaderSetting
// Size: 0x50 (Inherited: 0x38)
struct USolarUploaderSetting : UDeveloperSettings {
	struct FString SolarLogServerUrl; // 0x38(0x10)
	bool bEnableAutoUpload; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Solarland.SolarLootZone
// Size: 0x2b8 (Inherited: 0x228)
struct ASolarLootZone : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct TArray<struct ASolarItemSpawner*> OwnningItemSpawners; // 0x230(0x10)
	struct TMap<struct ASolarItemSpawner*, struct FItemSpawnerGraphNode> SpawnerPathGraph; // 0x240(0x50)
	struct TArray<struct FLootZonePath> LootZonePathGraph; // 0x290(0x10)
	float MaxRadius; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct TArray<struct TSoftObjectPtr<ASolarChargingPile>> OwnningChargingPiles; // 0x2a8(0x10)
};

// Class Solarland.SolarLowMemoryDeviceSettings
// Size: 0x50 (Inherited: 0x38)
struct USolarLowMemoryDeviceSettings : UDeveloperSettings {
	bool EnableLowMemDevice; // 0x38(0x01)
	bool EnableLowMemDeviceDebugMode; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FString> AdditionalCommand; // 0x40(0x10)
};

// Class Solarland.SolarLuaHelper
// Size: 0x50 (Inherited: 0x28)
struct USolarLuaHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UDataTable* KeyMappingInfoDataTable; // 0x30(0x08)
	struct UDataTable* KeyMappingDisplayInfoDataTable; // 0x38(0x08)
	struct TArray<struct FSolarPlayerReport> SettleTeamReports; // 0x40(0x10)

	bool WriteFile(struct FString FilePath, struct FString Content); // Function Solarland.SolarLuaHelper.WriteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2af0
	void UELogWarning(struct FString str); // Function Solarland.SolarLuaHelper.UELogWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	void UELogNetwork(struct FString str); // Function Solarland.SolarLuaHelper.UELogNetwork // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	void UELogError(struct FString str); // Function Solarland.SolarLuaHelper.UELogError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	void UELog(struct FString str); // Function Solarland.SolarLuaHelper.UELog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
	struct UObject* TryLoadBySoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.TryLoadBySoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc2a40
	bool TryConvertFilenameToLongPackageName(struct FString InFilename, struct FString& OutPackageName); // Function Solarland.SolarLuaHelper.TryConvertFilenameToLongPackageName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc2940
	void StaticSetGlobalRTPCValue(struct FString RTPC, float Value, int32_t InterpolationTimeMs); // Function Solarland.SolarLuaHelper.StaticSetGlobalRTPCValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6df0
	void StaticSetAkState(struct FName StateGroup, struct FName State); // Function Solarland.SolarLuaHelper.StaticSetAkState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2890
	void StaticSetAkBusConfig(struct FString BusName, enum class AkChannelConfiguration ChannelConfiguration); // Function Solarland.SolarLuaHelper.StaticSetAkBusConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc27c0
	int32_t StaticPostAkEventByNameAndWaitForEnd(struct UObject* WorldContextObject, struct FString InEventName, struct FLatentActionInfo LatentInfo); // Function Solarland.SolarLuaHelper.StaticPostAkEventByNameAndWaitForEnd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2680
	int32_t StaticPostAkEventByName(struct FString InEventName); // Function Solarland.SolarLuaHelper.StaticPostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc25e0
	void SolarSetShadowQuality(int32_t InQuality); // Function Solarland.SolarLuaHelper.SolarSetShadowQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2570
	void SolarSetMSAAEnabled(bool bEnable); // Function Solarland.SolarLuaHelper.SolarSetMSAAEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc24f0
	void SolarSetGraphicsQuality(enum class ESolarGraphicsQualityLevel InLevel); // Function Solarland.SolarLuaHelper.SolarSetGraphicsQuality // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2480
	void SolarSetFrameRate(enum class ESolarFrameRateLevel FrameRateLevel); // Function Solarland.SolarLuaHelper.SolarSetFrameRate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2410
	void SolarSetColorGrading(enum class ESolarColorTheme InTheme); // Function Solarland.SolarLuaHelper.SolarSetColorGrading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc23a0
	void SolarRefreshContentScaleFactorLevel(); // Function Solarland.SolarLuaHelper.SolarRefreshContentScaleFactorLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2380
	bool SolarGetTextureStreamingEnable(); // Function Solarland.SolarLuaHelper.SolarGetTextureStreamingEnable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2350
	void SolarEnableTextureStreaming(bool bEnable); // Function Solarland.SolarLuaHelper.SolarEnableTextureStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc22d0
	int32_t ShouldEnterLobby(); // Function Solarland.SolarLuaHelper.ShouldEnterLobby // (Final|Native|Static|Public) // @ game+0x1dc22a0
	void SetSwitch(struct USolarAkGameObject* SolarAkGameObject, struct FString SwitchGroup, struct FString SwitchState); // Function Solarland.SolarLuaHelper.SetSwitch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc2180
	void SetSkeletalMeshMatFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMatFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc2050
	void SetSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMatResPath, int32_t ElementIndex); // Function Solarland.SolarLuaHelper.SetSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1f40
	void SetSkeletalMeshFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMeshFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc1e60
	void SetSkeletalMesh(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewMeshResPath); // Function Solarland.SolarLuaHelper.SetSkeletalMesh // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1d90
	void SetSkeletalAnimBPFromConfig(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FSoftObjectPath& NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBPFromConfig // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc1cb0
	void SetSkeletalAnimBP(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FString NewAnimBPResPath); // Function Solarland.SolarLuaHelper.SetSkeletalAnimBP // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1be0
	void SetRenderBatch(int32_t Mode); // Function Solarland.SolarLuaHelper.SetRenderBatch // (Final|Native|Public) // @ game+0x1dc1b60
	void SetPlayerSettlementReport(struct FSolarGameModeInfo& GameInfo); // Function Solarland.SolarLuaHelper.SetPlayerSettlementReport // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void SetPatchBuildVersion(struct FString Version); // Function Solarland.SolarLuaHelper.SetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1ad0
	void SetEnableSoftwareCursorWidgets(bool bIsEnabled); // Function Solarland.SolarLuaHelper.SetEnableSoftwareCursorWidgets // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1a50
	void SetCurThirdPartyInfo(struct FString InCurThirdPartyInfo); // Function Solarland.SolarLuaHelper.SetCurThirdPartyInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc19c0
	void SetChangeListNumber(struct FString ChangeListNum); // Function Solarland.SolarLuaHelper.SetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1930
	void SetActorYawByDelta(struct AActor* InActor, float InDeltaYaw); // Function Solarland.SolarLuaHelper.SetActorYawByDelta // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc1870
	void ResumeBatching(); // Function Solarland.SolarLuaHelper.ResumeBatching // (Final|Native|Static|Public) // @ game+0x1dc1830
	struct UObject* ResolveSoftObjectPath(struct FSoftObjectPath& ObjectPath); // Function Solarland.SolarLuaHelper.ResolveSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc1780
	struct FString ReadFileContent(struct FString FilePath); // Function Solarland.SolarLuaHelper.ReadFileContent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc16a0
	int32_t PostAkEventByName(struct USolarAkGameObject* SolarAkGameObject, struct FString InEventName); // Function Solarland.SolarLuaHelper.PostAkEventByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc15c0
	void PlayVoiceLocaly(int32_t CharacterId, int32_t SkinId, enum class EPassiveTriggeredVoice Type); // Function Solarland.SolarLuaHelper.PlayVoiceLocaly // (Final|Native|Public) // @ game+0x1dc14c0
	bool MoveFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.MoveFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc13d0
	struct UObject* LoadObject_WithOuter(struct UObject* Outer, struct FString ObjectName); // Function Solarland.SolarLuaHelper.LoadObject_WithOuter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc12f0
	struct TArray<char> LoadFileToArray(struct FString FilePath); // Function Solarland.SolarLuaHelper.LoadFileToArray // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc11f0
	bool IsWorldTearingDown(); // Function Solarland.SolarLuaHelper.IsWorldTearingDown // (Final|Native|Public) // @ game+0x1dc11c0
	bool IsLocalBuild(); // Function Solarland.SolarLuaHelper.IsLocalBuild // (Final|Native|Static|Public) // @ game+0x1d3bf00
	bool IsBattlePassInfoUpdated(struct ASolarPlayerState* InPlayerState); // Function Solarland.SolarLuaHelper.IsBattlePassInfoUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc1130
	bool HasReviveItemManager(struct UObject* InWorldContext); // Function Solarland.SolarLuaHelper.HasReviveItemManager // (Final|Native|Static|Public) // @ game+0x1dc0f50
	struct FString HashMd5(struct FString InputText); // Function Solarland.SolarLuaHelper.HashMd5 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0fd0
	int64_t GetUtcNowTimestamp(); // Function Solarland.SolarLuaHelper.GetUtcNowTimestamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0f20
	struct FString GetTaskDesc(int32_t TaskID); // Function Solarland.SolarLuaHelper.GetTaskDesc // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetSourceCommitHash(); // Function Solarland.SolarLuaHelper.GetSourceCommitHash // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0e70
	struct FString GetSourceBuildVersion(); // Function Solarland.SolarLuaHelper.GetSourceBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0e70
	struct ASolarGameState* GetSolarGameState(); // Function Solarland.SolarLuaHelper.GetSolarGameState // (Final|Native|Public|Const) // @ game+0x1dc0e40
	struct FString GetShortName(struct FString LongName); // Function Solarland.SolarLuaHelper.GetShortName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc0d60
	struct TArray<struct FString> GetServersUrlList(); // Function Solarland.SolarLuaHelper.GetServersUrlList // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0ce0
	struct FString GetServerEnvTag(); // Function Solarland.SolarLuaHelper.GetServerEnvTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0c60
	struct FVector2D GetScreenSizeXY(); // Function Solarland.SolarLuaHelper.GetScreenSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dc0c20
	struct FString GetPatchBuildVersion(); // Function Solarland.SolarLuaHelper.GetPatchBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0ba0
	int32_t GetMonsterDropItemOutcomeID(int32_t MonsterAICharID, int32_t StrengthGrade); // Function Solarland.SolarLuaHelper.GetMonsterDropItemOutcomeID // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	int32_t GetMonsterDeathBoxID(int32_t MonsterAICharID); // Function Solarland.SolarLuaHelper.GetMonsterDeathBoxID // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct FString GetMainBuildVersion(); // Function Solarland.SolarLuaHelper.GetMainBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0b20
	struct ASolarReplayPlayerController* GetLocalSolarReplayPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarReplayPlayerController // (Final|Native|Public) // @ game+0x1dc0af0
	struct ASolarPlayerState* GetLocalSolarPlayerState(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerState // (Final|Native|Public|Const) // @ game+0x1dc0ac0
	struct ASolarPlayerController* GetLocalSolarPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalSolarPlayerController // (Final|Native|Public) // @ game+0x1dc0a90
	struct APlayerController* GetLocalPlayerController(); // Function Solarland.SolarLuaHelper.GetLocalPlayerController // (Final|Native|Public) // @ game+0x1dc0a60
	struct FKey GetLeftMouseKeyDown(); // Function Solarland.SolarLuaHelper.GetLeftMouseKeyDown // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc09a0
	void GetKeyMappingInfoByRowName(struct FString RowName, struct FKeyMappingRowInfo& OutClassInfo); // Function Solarland.SolarLuaHelper.GetKeyMappingInfoByRowName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc0770
	struct FString GetHostByDomainName(struct FString DomainName, bool bAppendPort); // Function Solarland.SolarLuaHelper.GetHostByDomainName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc0650
	struct FString GetGameModeParam(int32_t GameModeID, struct FString Key); // Function Solarland.SolarLuaHelper.GetGameModeParam // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetExtBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetExtBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc05d0
	struct UEmojiBubbleSubsystem* GetEmojiBubbleSubsystem(struct USolarGameInstanceBase* GI); // Function Solarland.SolarLuaHelper.GetEmojiBubbleSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc0550
	bool GetCurrentInputType(struct APlayerController* InPlayerController, enum class ECommonInputType& OutInputType); // Function Solarland.SolarLuaHelper.GetCurrentInputType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc0480
	struct UCommonInputSubsystem* GetCommonInputSubsystem(struct APlayerController* PlayerController); // Function Solarland.SolarLuaHelper.GetCommonInputSubsystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc0400
	struct FString GetClipboardPasteText(); // Function Solarland.SolarLuaHelper.GetClipboardPasteText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc0380
	struct FString GetChangeListNumber(); // Function Solarland.SolarLuaHelper.GetChangeListNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0300
	struct FString GetBuildVariation(); // Function Solarland.SolarLuaHelper.GetBuildVariation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0280
	struct FString GetBuildMode(); // Function Solarland.SolarLuaHelper.GetBuildMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0200
	struct FVector GetBoneLocationByName(struct USkeletalMeshComponent* SkeletalMeshComponent, struct FName BoneName, enum class EBoneSpaces Space); // Function Solarland.SolarLuaHelper.GetBoneLocationByName // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc0100
	struct FString GetBackdoorUrl(); // Function Solarland.SolarLuaHelper.GetBackdoorUrl // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dc0080
	struct FString GetAndroidPkgName(); // Function Solarland.SolarLuaHelper.GetAndroidPkgName // (Final|Native|Static|Public) // @ game+0x1dc0000
	struct TArray<struct FString> GetAllLoadedPackagesPath(); // Function Solarland.SolarLuaHelper.GetAllLoadedPackagesPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dbff80
	void GetAllKeyMappingInfoFromTable(struct TArray<struct FKeyMappingRowInfo>& OutKeyMappingInfo); // Function Solarland.SolarLuaHelper.GetAllKeyMappingInfoFromTable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbfdb0
	struct FString GetActualBuildVersion(); // Function Solarland.SolarLuaHelper.GetActualBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dbfd30
	struct FString GetAbsolutePathForWrite(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForWrite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbfc50
	struct FString GetAbsolutePathForRead(struct FString FilePath); // Function Solarland.SolarLuaHelper.GetAbsolutePathForRead // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbfb70
	struct FColor FromHex(struct FString HexString); // Function Solarland.SolarLuaHelper.FromHex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dbfad0
	struct TArray<struct FString> FindFiles(struct FString Directory, struct FString FileExtension); // Function Solarland.SolarLuaHelper.FindFiles // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf9a0
	void EndOfPlayInEditor(struct UObject* InWorldContext, struct FString EndReason, bool bPopMsgBox); // Function Solarland.SolarLuaHelper.EndOfPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf850
	void DoLuaDebug(struct TArray<struct FString>& cmdArray); // Function Solarland.SolarLuaHelper.DoLuaDebug // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool DirectoryExist(struct FString TargetDirectory); // Function Solarland.SolarLuaHelper.DirectoryExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf7b0
	bool DeleteFile(struct FString FilePath); // Function Solarland.SolarLuaHelper.DeleteFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf710
	bool DeleteDirectoryRecursively(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectoryRecursively // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf670
	bool DeleteDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.DeleteDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf5d0
	struct FString DecodeFile(struct FString InFilePath); // Function Solarland.SolarLuaHelper.DecodeFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf4f0
	struct ULevelStreamingDynamic* CreateStreamInstance(struct UWorld* World, struct FString PackageName); // Function Solarland.SolarLuaHelper.CreateStreamInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf410
	struct AActor* CreateEmptySkeletalMeshActor(); // Function Solarland.SolarLuaHelper.CreateEmptySkeletalMeshActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbf3e0
	struct UMaterialInstanceDynamic* CreateDynamicMaterial(struct ACameraActor* CameraActor, struct FString TemplateMatResPath, int32_t RTSizeX, int32_t RTSizeY, enum class ETextureRenderTargetFormat RenderTargetFormat); // Function Solarland.SolarLuaHelper.CreateDynamicMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x1dbf230
	bool CreateDirectoryTree(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectoryTree // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf190
	bool CreateDirectory(struct FString Path); // Function Solarland.SolarLuaHelper.CreateDirectory // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbf0f0
	bool CopyFile(struct FString DestFilePath, struct FString SrcFilePath); // Function Solarland.SolarLuaHelper.CopyFile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbef80
	void ConvertKeyMappingName(struct FKey& Key, struct FString& OutDisplayName); // Function Solarland.SolarLuaHelper.ConvertKeyMappingName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dbee40
	void CloseVirtualKeyboard(); // Function Solarland.SolarLuaHelper.CloseVirtualKeyboard // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x962e10
	void ClipboardCopyText(struct FString Content); // Function Solarland.SolarLuaHelper.ClipboardCopyText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbedb0
	void ClearSkeletalMeshMat(struct USkeletalMeshComponent* SkeletalMeshComponent); // Function Solarland.SolarLuaHelper.ClearSkeletalMeshMat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbed40
	bool CheckIsNeedDownLoad(int32_t ChunkID); // Function Solarland.SolarLuaHelper.CheckIsNeedDownLoad // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dbecc0
	void ApplyVehicleSkinPreview(struct UObject* PreviewVehicleObj, int32_t SkinId, int32_t PageType, struct FVector DefaultLoc); // Function Solarland.SolarLuaHelper.ApplyVehicleSkinPreview // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1dbeb80
};

// Class Solarland.LuaErrorWidgetBase
// Size: 0x260 (Inherited: 0x260)
struct ULuaErrorWidgetBase : UUserWidget {

	void ShowLuaError(struct TArray<struct FString>& LuaErrorMsgs); // Function Solarland.LuaErrorWidgetBase.ShowLuaError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarLuaManager
// Size: 0xd8 (Inherited: 0x28)
struct USolarLuaManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FMulticastInlineDelegate OnHandleLuaException; // 0x30(0x10)
	char pad_40[0x10]; // 0x40(0x10)
	struct FSoftObjectPath LuaErrorWidgetPath; // 0x50(0x18)
	char pad_68[0x8]; // 0x68(0x08)
	struct ULuaErrorWidgetBase* LuaErrorWidget; // 0x70(0x08)
	char pad_78[0x60]; // 0x78(0x60)

	void SetLuaErrorPopWidget(struct ULuaErrorWidgetBase* Widget); // Function Solarland.SolarLuaManager.SetLuaErrorPopWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7e90
	void OnLuaContextCleanup(bool bFullCleanup); // Function Solarland.SolarLuaManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	enum class ESolarBuildConfiguration GetBuildConfiguration(); // Function Solarland.SolarLuaManager.GetBuildConfiguration // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dc6910
	void AddToDoNotShowAgainList(struct FString Msg); // Function Solarland.SolarLuaManager.AddToDoNotShowAgainList // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc63f0
};

// Class Solarland.SolarMainPlayerModel
// Size: 0x30 (Inherited: 0x28)
struct USolarMainPlayerModel : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void SyncFromPlayerData(int32_t InAccountFlag); // Function Solarland.SolarMainPlayerModel.SyncFromPlayerData // (Final|Native|Public) // @ game+0x1dc7f10
	bool IsAccountFlagOn(); // Function Solarland.SolarMainPlayerModel.IsAccountFlagOn // (Final|Native|Public|Const) // @ game+0x1dc7640
};

// Class Solarland.SolarMapManager
// Size: 0x1e0 (Inherited: 0x30)
struct USolarMapManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMapData MapData; // 0x38(0x3c)
	struct FVehicleData VehicleData; // 0x74(0x10)
	struct FMiniMapAirlineData CurAirlineData; // 0x84(0x30)
	struct FVector AirlineActorLoc; // 0xb4(0x0c)
	int32_t CurrentMapID; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct FString CurrentMapName; // 0xc8(0x10)
	float RespawnMinLength; // 0xd8(0x04)
	float RespawnMaxLength; // 0xdc(0x04)
	float FootMinLength; // 0xe0(0x04)
	float FootMaxLength; // 0xe4(0x04)
	float GunMinLength; // 0xe8(0x04)
	float GunMaxLength; // 0xec(0x04)
	float VehicleMinLength; // 0xf0(0x04)
	float VehicleMaxLength; // 0xf4(0x04)
	struct TMap<enum class EMarkerType, struct FVector2D> MapVoiceRangeMap; // 0xf8(0x50)
	char pad_148[0x70]; // 0x148(0x70)
	struct UVisualSoundConfig* BattlePromptConfig; // 0x1b8(0x08)
	struct UGameModeGlobalSetting* GameModeGlobalSetting; // 0x1c0(0x08)
	struct FBattlePromptData BattlePromptData; // 0x1c8(0x18)

	struct FMapVoiceData WorldLocationToVoiceData(enum class EMarkerType& Type, struct FVector& PlayerPos, struct FVector& EnemyPos); // Function Solarland.SolarMapManager.WorldLocationToVoiceData // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc80e0
	struct FVector2D WorldLocationToMiniMap(struct FVector WorldLocation); // Function Solarland.SolarMapManager.WorldLocationToMiniMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc8040
	float WorldLengthToMiniMap(float WorldLength); // Function Solarland.SolarMapManager.WorldLengthToMiniMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc7fb0
	void UnInitMapData(); // Function Solarland.SolarMapManager.UnInitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7f90
	void ReceiveInitMapData(int32_t MapID); // Function Solarland.SolarMapManager.ReceiveInitMapData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FVector2D Normal2D(struct FVector2D VectorToTransForm); // Function Solarland.SolarMapManager.Normal2D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc7990
	struct FVector MiniMapToWorldLocation(struct FVector2D PositionXY, float Z); // Function Solarland.SolarMapManager.MiniMapToWorldLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc78b0
	bool IsOutOfBound(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.IsOutOfBound // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc7830
	bool IsMiniMapAirlineDataValid(struct FMiniMapAirlineData& InData); // Function Solarland.SolarMapManager.IsMiniMapAirlineDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc7750
	bool IsCharacterInRange(struct FVector Pos, enum class EMarkerType VoiceType); // Function Solarland.SolarMapManager.IsCharacterInRange // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc7670
	void InitMapData(int32_t MapID); // Function Solarland.SolarMapManager.InitMapData // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc75a0
	struct ASolarCharacter* GetViewportFocusedCharacter(); // Function Solarland.SolarMapManager.GetViewportFocusedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc74d0
	bool GetSafeAreaInfo(struct FSafeAreaMapInfo& OutAreaInfo); // Function Solarland.SolarMapManager.GetSafeAreaInfo // (Final|Native|Public|HasOutParms) // @ game+0x1dc7410
	struct FVector GetRandomVectorFromMapDarkData(struct UObject* WorldContextObject, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.GetRandomVectorFromMapDarkData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc72f0
	struct UCurveFloat* GetMiniMapFOVCurve(float InRadius); // Function Solarland.SolarMapManager.GetMiniMapFOVCurve // (Final|Native|Public) // @ game+0x1dc7010
	int32_t GetLenegthFromPlayerToMarkPoint(struct FVector MarkPosRealWorld, struct FVector CurrentPlayerLocation); // Function Solarland.SolarMapManager.GetLenegthFromPlayerToMarkPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc6f20
	bool GetIntersectionOnMapFrame(struct FVector2D TeamMatePos, struct FVector2D MapAPos, float MapFrameHeight, float MapFrameWidth, struct FVector2D& InterSecionList, enum class EDirection& CrossDirection); // Function Solarland.SolarMapManager.GetIntersectionOnMapFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc6d10
	float GetDistanceToSafeArea(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.GetDistanceToSafeArea // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x1dc6c10
	int32_t GetCurrentMapID(); // Function Solarland.SolarMapManager.GetCurrentMapID // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc6be0
	struct FMiniMapAirlineData GetCurAirlineData(); // Function Solarland.SolarMapManager.GetCurAirlineData // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc6ba0
	struct UVisualSoundConfig* GetBattlePromptConfig(); // Function Solarland.SolarMapManager.GetBattlePromptConfig // (Final|Native|Protected) // @ game+0x1dc68e0
	void GetAllEnemyActions(struct FMapVoiceDataListMap& VoiceDataMap); // Function Solarland.SolarMapManager.GetAllEnemyActions // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc67e0
	struct FVector2D FixNavPos(struct FVector2D PlayerNavPos); // Function Solarland.SolarMapManager.FixNavPos // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc6750
	bool CheckMapDarkDataWithVector(struct FVector InVector, enum class EMapDarkDataType InType, bool GetWhiteArea); // Function Solarland.SolarMapManager.CheckMapDarkDataWithVector // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1dc6630
	bool CheckIfMarkedPointValid(struct FVector2D& InMarkedPoint); // Function Solarland.SolarMapManager.CheckIfMarkedPointValid // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dc6590
	float CalculatePoisonDistance(struct FSafeAreaMapInfo& AreaInfo, struct FVector& FromLocation); // Function Solarland.SolarMapManager.CalculatePoisonDistance // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x1dc6490
};

// Class Solarland.SolarMapSelectPoint
// Size: 0x420 (Inherited: 0x298)
struct ASolarMapSelectPoint : ASolarMapElementBase {
	int32_t MapID; // 0x298(0x04)
	struct FMapSelectPointCellConfig MapCellConfig; // 0x29c(0x14)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMapWidgetClass; // 0x2b0(0x08)
	struct UMapSelectPointCellWidget* CellWidgetClass; // 0x2b8(0x08)
	struct USolarMapManager* MapManager; // 0x2c0(0x08)
	struct USolarGameMode_ElementManager* ElementManager; // 0x2c8(0x08)
	struct UMapSelectPointNoticeMap* SelectPointNoticeMap; // 0x2d0(0x08)
	struct TMap<struct FString, struct UMapSelectPointCellWidget*> WidgetInCells; // 0x2d8(0x50)
	char pad_328[0x50]; // 0x328(0x50)
	struct TMap<struct USGameMode_Player*, struct FMapSelectPointCellAddress> CellAdrSelectedByPlayer; // 0x378(0x50)
	struct TMap<struct FString, struct FMapSelectPointCellData> AllCellsData; // 0x3c8(0x50)
	char pad_418[0x8]; // 0x418(0x08)

	void SetCellSelectionAccess(struct FMapSelectPointCellAddress& InCellAdr, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.SetCellSelectionAccess // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc7d40
	void ServerSetCellSelectionAccess(struct FString InAddress, enum class EMapCellSelectionAccess InNewState); // Function Solarland.SolarMapSelectPoint.ServerSetCellSelectionAccess // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1dc7c60
	void SelectPointForPlayer(struct USGameMode_Player* Player, struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.SelectPointForPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dc7b90
	void SelectPoint(struct FString InAddress, int32_t InPlayerID, struct FString InSolarPlayerID); // Function Solarland.SolarMapSelectPoint.SelectPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7a60
	void OnNoticeMapInitialized(); // Function Solarland.SolarMapSelectPoint.OnNoticeMapInitialized // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnInitSelectPoint(int32_t InMapID); // Function Solarland.SolarMapSelectPoint.OnInitSelectPoint // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnCellBeSelected(struct FMapSelectPointCellAddress& CellAddress, bool IsSelected); // Function Solarland.SolarMapSelectPoint.OnCellBeSelected // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void InitSelectPointData(); // Function Solarland.SolarMapSelectPoint.InitSelectPointData // (Final|Native|Public|BlueprintCallable) // @ game+0x1dc7620
	struct UUserWidget* GetWidgetInCell(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetWidgetInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc7500
	struct UUserWidget* GetSelectPointNoticeMapWidget(); // Function Solarland.SolarMapSelectPoint.GetSelectPointNoticeMapWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc74b0
	struct TArray<struct ASolarPlayerStart*> GetPlayerStartsInCell(struct FMapSelectPointCellAddress& InCellAdr, struct TArray<struct FString>& InTags); // Function Solarland.SolarMapSelectPoint.GetPlayerStartsInCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc70a0
	struct TArray<struct USGameMode_Player*> GetPlayersOfSelectCell(struct FMapSelectPointCellAddress& CellAdr); // Function Solarland.SolarMapSelectPoint.GetPlayersOfSelectCell // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc7210
	enum class EMapCellSelectionAccess GetCellSelectState(struct FMapSelectPointCellAddress& InCellAdr); // Function Solarland.SolarMapSelectPoint.GetCellSelectState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1dc6b00
	bool GetCellPositionOnBigMap(struct FMapSelectPointCellAddress& InCellAdr, struct FVector2D& LU_Pos, struct FVector2D& RD_Pos); // Function Solarland.SolarMapSelectPoint.GetCellPositionOnBigMap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1dc69d0
	struct FMapSelectPointCellAddress GetCellAdrBySelected(struct USGameMode_Player* InPlayer); // Function Solarland.SolarMapSelectPoint.GetCellAdrBySelected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dc6940
};

// Class Solarland.SolarMetaAttributeSet
// Size: 0x50 (Inherited: 0x30)
struct USolarMetaAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData Damage; // 0x30(0x10)
	struct FGameplayAttributeData ShieldDamage; // 0x40(0x10)
};

// Class Solarland.MobilePlatform
// Size: 0x290 (Inherited: 0x228)
struct AMobilePlatform : AActor {
	struct USplineComponent* SplineComponent; // 0x228(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x230(0x08)
	struct TArray<struct FMobilePlatformSplinePoint> PointInfos; // 0x238(0x10)
	float ConfigDefaultSpeed; // 0x248(0x04)
	float ConfigDefaultDelayTime; // 0x24c(0x04)
	float CurrentSpeed; // 0x250(0x04)
	float CurrentDistance; // 0x254(0x04)
	float TotalDistance; // 0x258(0x04)
	float DelayTime; // 0x25c(0x04)
	int32_t PointNum; // 0x260(0x04)
	int32_t PointIndex; // 0x264(0x04)
	struct FVector MoveVecter; // 0x268(0x0c)
	struct FVector MeshExtend; // 0x274(0x0c)
	char pad_280[0x10]; // 0x280(0x10)

	void UpdateRotation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateRotation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1dcc0d0
	void UpdateOverlapActor(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.UpdateOverlapActor // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1dcc000
	void UpdateLocation(float DeltaSeconds); // Function Solarland.MobilePlatform.UpdateLocation // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1dcbf80
	void UpdateCurrentDistance(float DeltSeconds); // Function Solarland.MobilePlatform.UpdateCurrentDistance // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1dcbf00
	void OnEnterPoint(); // Function Solarland.MobilePlatform.OnEnterPoint // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1257850
	void OnEndOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnEndOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1dcbbe0
	void OnBeginOverlap(struct AActor* ThisActor, struct AActor* OtherActor); // Function Solarland.MobilePlatform.OnBeginOverlap // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1dcb620
	void Init(); // Function Solarland.MobilePlatform.Init // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x7e16e0
	struct UShapeComponent* GetCollisionComponent(); // Function Solarland.MobilePlatform.GetCollisionComponent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool CheckNeedOverlap(float DeltaSeconds, struct AActor* InActor); // Function Solarland.MobilePlatform.CheckNeedOverlap // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1dcb4f0
};

// Class Solarland.SolarModMagnitudeCalc
// Size: 0x68 (Inherited: 0x40)
struct USolarModMagnitudeCalc : UGameplayModMagnitudeCalculation {
	struct UModMagnitudeCalcProxy* CDOProxyClass; // 0x40(0x08)
	struct UModMagnitudeCalcProxy* CDOProxy; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
};

// Class Solarland.SolarMoveToCostSecAction
// Size: 0x98 (Inherited: 0x30)
struct USolarMoveToCostSecAction : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
	struct FMulticastInlineDelegate OnCalcMoveToCostSuc; // 0x78(0x10)
	struct FMulticastInlineDelegate OnCalcMoveToCostFailed; // 0x88(0x10)

	struct USolarMoveToCostSecAction* CalcMoveToCostSec(struct UObject* WorldContextObject, struct ASolarBotAIController* BotController, struct FVector MoveToLocation, struct AActor* MoveToActor, float AcceptRadius, bool bAllowPartialPath, bool bProjectGoalLocation); // Function Solarland.SolarMoveToCostSecAction.CalcMoveToCostSec // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1dcb2e0
};

// Class Solarland.SolarNavArea_Jet
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Jet : UNavArea {
};

// Class Solarland.SolarNavArea_Vault
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Vault : UNavArea {
};

// Class Solarland.SolarNavArea_Water
// Size: 0x48 (Inherited: 0x48)
struct USolarNavArea_Water : UNavArea {
};

// Class Solarland.SolarNavLink_Jet
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLink_Jet : ANavLinkProxy {
	float JetTimeout; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x12]; // 0x27e(0x12)
};

// Class Solarland.SolarNavLink_Vault
// Size: 0x2a0 (Inherited: 0x278)
struct ASolarNavLink_Vault : ANavLinkProxy {
	float VaultTimeOut; // 0x278(0x04)
	bool bNoFail; // 0x27c(0x01)
	bool bMarkInValidAfterFailedUse; // 0x27d(0x01)
	char pad_27E[0x2]; // 0x27e(0x02)
	float MaxDistancePrecision; // 0x280(0x04)
	char pad_284[0x1c]; // 0x284(0x1c)
};

// Class Solarland.SolarNavLinkCustomComponent
// Size: 0x1a0 (Inherited: 0x190)
struct USolarNavLinkCustomComponent : UNavLinkCustomComponent {
	char pad_190[0x10]; // 0x190(0x10)
};

// Class Solarland.SolarNavLinkManager
// Size: 0x290 (Inherited: 0x278)
struct ASolarNavLinkManager : ANavLinkProxy {
	struct USolarNavLinkRegisterComponent* SolarSmartLinkComp; // 0x278(0x08)
	char pad_280[0x10]; // 0x280(0x10)
};

// Class Solarland.SolarNavLinkRegisterComponent
// Size: 0x260 (Inherited: 0x190)
struct USolarNavLinkRegisterComponent : UNavLinkCustomComponent {
	struct TMap<uint32_t, struct FSmartLinkInstance> SmartLinkMap; // 0x190(0x50)
	char pad_1E0[0x50]; // 0x1e0(0x50)
	enum class ENavLinkType LinkType; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	struct FVector VaultPoint; // 0x234(0x0c)
	struct FVector VaultDirect; // 0x240(0x0c)
	enum class EVaultType VaultAnimate; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	struct FVector VaultLandPoint; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
};

// Class Solarland.SolarNavModifierComponent
// Size: 0x150 (Inherited: 0x140)
struct USolarNavModifierComponent : UNavModifierComponent {
	char pad_140[0x10]; // 0x140(0x10)

	void OnVehicleRootHit(struct UPrimitiveComponent* HitComp, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarNavModifierComponent.OnVehicleRootHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1dcbd30
	void OnDriverGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOnVehicle // (Final|Native|Protected) // @ game+0x1dcbb20
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarNavModifierComponent.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x1dcba60
};

// Class Solarland.SolarNavQueryFilter
// Size: 0x50 (Inherited: 0x48)
struct USolarNavQueryFilter : UNavigationQueryFilter {
	uint32_t MaxSearchNode; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Solarland.SolarNavQueryFilter_ExcludeJet
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_ExcludeJet : USolarNavQueryFilter {
};

// Class Solarland.SolarNavQueryFilter_JetInvalid
// Size: 0x50 (Inherited: 0x50)
struct USolarNavQueryFilter_JetInvalid : USolarNavQueryFilter {
};

// Class Solarland.SolarNavWeedActor
// Size: 0x248 (Inherited: 0x228)
struct ASolarNavWeedActor : ATargetPoint {
	char pad_228[0x20]; // 0x228(0x20)
};

// Class Solarland.SolarNetMovementComponent
// Size: 0x690 (Inherited: 0xb0)
struct USolarNetMovementComponent : UActorComponent {
	char pad_B0[0x34]; // 0xb0(0x34)
	float InterpolatedBackTime; // 0xe4(0x04)
	float ServerBufferCheckTimeInterval; // 0xe8(0x04)
	int32_t ServerBufferCheckCount; // 0xec(0x04)
	float ServerBufferCheckMinSpeed; // 0xf0(0x04)
	float ServerBufferIgnoreCheckTimer; // 0xf4(0x04)
	float AtRestThresholdCount; // 0xf8(0x04)
	enum class EExtrapolationMode ExtrapolationMode; // 0xfc(0x01)
	bool bUseExtrapolationTimeLimit; // 0xfd(0x01)
	char pad_FE[0x2]; // 0xfe(0x02)
	float ExtrapolationTimeLimit; // 0x100(0x04)
	bool bUseExtrapolationDistanceLimit; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	float ExtrapolationDistanceLimit; // 0x108(0x04)
	float SendPositionThreshold; // 0x10c(0x04)
	float SendRotationThreshold; // 0x110(0x04)
	float SendVelocityThreshold; // 0x114(0x04)
	float SendAngularVelocityThreshold; // 0x118(0x04)
	float LinearVelcolityForPositionThreshold; // 0x11c(0x04)
	float ReceivedPositionThreshold; // 0x120(0x04)
	float AngularVelocityForRotationThreshold; // 0x124(0x04)
	float ReceivedRotationThreshold; // 0x128(0x04)
	float PositionSnapThreshold; // 0x12c(0x04)
	float RotationSnapThreshold; // 0x130(0x04)
	float PositionLerpSpeed; // 0x134(0x04)
	float RotationLerpSpeed; // 0x138(0x04)
	float SpeedOfLerp; // 0x13c(0x04)
	enum class ESyncMode SyncPosition; // 0x140(0x01)
	enum class ESyncMode SyncRotation; // 0x141(0x01)
	enum class ESyncMode SyncVelocity; // 0x142(0x01)
	enum class ESyncMode SyncAngularVelocity; // 0x143(0x01)
	bool bSyncDesiredYaw; // 0x144(0x01)
	bool isPositionCompressed; // 0x145(0x01)
	bool isRotationCompressed; // 0x146(0x01)
	bool isVelocityCompressed; // 0x147(0x01)
	bool isAngularVelocityCompressed; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float SendRate; // 0x14c(0x04)
	float TimeSmoothing; // 0x150(0x04)
	bool bUsingOriginRebasing; // 0x154(0x01)
	bool bAlwaysSendOrigin; // 0x155(0x01)
	char pad_156[0x3a]; // 0x156(0x3a)
	struct UPrimitiveComponent* PrimitiveComponent; // 0x190(0x08)
	struct USceneComponent* RelativeComponent; // 0x198(0x08)
	struct ASolarVehiclePawn* PreviousBaseVehicleActor; // 0x1a0(0x08)
	char pad_1A8[0x368]; // 0x1a8(0x368)
	float AtRestPositionThreshold; // 0x510(0x04)
	float AtRestRotationThreshold; // 0x514(0x04)
	char pad_518[0x10]; // 0x518(0x10)
	struct ASolarVehiclePawn* VehiclePawn; // 0x528(0x08)
	char pad_530[0x160]; // 0x530(0x160)
};

// Class Solarland.SolarNightComesActor
// Size: 0x538 (Inherited: 0x398)
struct ASolarNightComesActor : ASummonItemBase {
	float BeginEffectDuration; // 0x398(0x04)
	float OngoingEffectDuration; // 0x39c(0x04)
	float OngoingEffectClearDelay; // 0x3a0(0x04)
	float EndEffectDuration; // 0x3a4(0x04)
	float VisualEffectBeginDelay_AfterBeginEffect; // 0x3a8(0x04)
	float VisualEffectEndDelay_AfterEndEffect; // 0x3ac(0x04)
	struct UParticleSystem* BeginEffect; // 0x3b0(0x08)
	struct UParticleSystem* OngoingEffect; // 0x3b8(0x08)
	struct UParticleSystem* EndEffect; // 0x3c0(0x08)
	struct UParticleSystem* ItemEffect; // 0x3c8(0x08)
	struct UParticleSystem* ItemExplodeEffect; // 0x3d0(0x08)
	struct UParticleSystem* ItemDisappearEffect; // 0x3d8(0x08)
	float EffectRadius; // 0x3e0(0x04)
	float NightfellRadius; // 0x3e4(0x04)
	float NightFellRadius_WithBuff; // 0x3e8(0x04)
	float NightFellCapacity; // 0x3ec(0x04)
	float NightfellFadeness; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UCurveFloat* ItemFellRadiusCurve; // 0x3f8(0x08)
	bool bShowDebug; // 0x400(0x01)
	bool bOpenVisualFell; // 0x401(0x01)
	char pad_402[0x2]; // 0x402(0x02)
	float UpdateEffectingCharacterInterval; // 0x404(0x04)
	struct UStaticMeshComponent* StaticMeshCollision; // 0x408(0x08)
	struct UStaticMeshComponent* SummonItemMesh; // 0x410(0x08)
	struct FVector EffectScale; // 0x418(0x0c)
	char pad_424[0x4]; // 0x424(0x04)
	struct FString StartLoopSound; // 0x428(0x10)
	struct FString EndLoopSound; // 0x438(0x10)
	struct FString EnterSound; // 0x448(0x10)
	struct FString ExitSound; // 0x458(0x10)
	struct FString ExplodeSound; // 0x468(0x10)
	struct FString HitBy1pSound; // 0x478(0x10)
	struct FString StateLowPassFilter; // 0x488(0x10)
	float MeshVisibleDelay; // 0x498(0x04)
	int32_t PerspectiveMeshSortPriority; // 0x49c(0x04)
	struct UMaterialInterface* StencilMaterial; // 0x4a0(0x08)
	struct UGameplayEffect* NightComesContinousEffect; // 0x4a8(0x08)
	enum class ENightComesState CurrentState; // 0x4b0(0x01)
	char pad_4B1[0x37]; // 0x4b1(0x37)
	struct UParticleSystemComponent* BeginEffectHandle; // 0x4e8(0x08)
	struct UParticleSystemComponent* OngingEffectHandle; // 0x4f0(0x08)
	struct UParticleSystemComponent* EndEffectHandle; // 0x4f8(0x08)
	struct UParticleSystemComponent* ItemEffectHandle; // 0x500(0x08)
	struct ASolarCharacter* InstigatorCharacter; // 0x508(0x08)
	char pad_510[0x10]; // 0x510(0x10)
	struct TArray<struct AActor*> EffectingActors; // 0x520(0x10)
	char pad_530[0x8]; // 0x530(0x08)

	void OnRep_NightComesState(); // Function Solarland.SolarNightComesActor.OnRep_NightComesState // (Final|Native|Private) // @ game+0x1dcbd10
	void OnMeshVisible(); // Function Solarland.SolarNightComesActor.OnMeshVisible // (Final|Native|Protected) // @ game+0x1dcbcf0
	void OnGoingPhase(); // Function Solarland.SolarNightComesActor.OnGoingPhase // (Final|Native|Protected) // @ game+0x1dcbcd0
	void OnEndPhase(); // Function Solarland.SolarNightComesActor.OnEndPhase // (Final|Native|Public) // @ game+0x1dcbcb0
	void OnDeath(); // Function Solarland.SolarNightComesActor.OnDeath // (Native|Protected|BlueprintCallable) // @ game+0x1257d10
	void OnComponentEndOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarNightComesActor.OnComponentEndOverlap // (Final|Native|Protected) // @ game+0x1dcb920
	void OnComponentBeginOverlap(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarNightComesActor.OnComponentBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1dcb710
	void OnBeginPhase(); // Function Solarland.SolarNightComesActor.OnBeginPhase // (Final|Native|Protected) // @ game+0x1dcb6f0
	void LocalRemoveSelf(); // Function Solarland.SolarNightComesActor.LocalRemoveSelf // (Final|Native|Public) // @ game+0x1dcb600
	void EndVisualEffect(); // Function Solarland.SolarNightComesActor.EndVisualEffect // (Final|Native|Protected) // @ game+0x1dcb5c0
	void BeginVisualEffect(); // Function Solarland.SolarNightComesActor.BeginVisualEffect // (Final|Native|Protected) // @ game+0x1dcb2c0
};

// Class Solarland.SolarNoSpringCameraComponent
// Size: 0x9e0 (Inherited: 0x9c0)
struct USolarNoSpringCameraComponent : USolarCameraComponent {
	char pad_9C0[0x20]; // 0x9c0(0x20)
};

// Class Solarland.SolarNPC
// Size: 0x4e0 (Inherited: 0x4d0)
struct ASolarNPC : ACharacter {
	struct USphereComponent* InteractionCollision; // 0x4c8(0x08)
	struct ASolarCharacter* LookAtPlayer; // 0x4d0(0x08)
	float LookYaw; // 0x4d8(0x04)
};

// Class Solarland.SolarObjGameplayAbility
// Size: 0x418 (Inherited: 0x400)
struct USolarObjGameplayAbility : UGameplayAbility {
	struct UGameplayEffect* ActivateEffect; // 0x400(0x08)
	float CostEnergy; // 0x408(0x04)
	char pad_40C[0xc]; // 0x40c(0x0c)

	struct ASolarInteractableActor* GetAbilityInstigator(); // Function Solarland.SolarObjGameplayAbility.GetAbilityInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd05f0
	struct AActor* GetAbilityEffectUser(); // Function Solarland.SolarObjGameplayAbility.GetAbilityEffectUser // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dd05c0
};

// Class Solarland.SolarObjAbilityRadar
// Size: 0x428 (Inherited: 0x418)
struct USolarObjAbilityRadar : USolarObjGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x418(0x08)
	float Lifetime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void K2_ApplyRadarAbility(struct ASolarRadarBase* SpawnedRadar); // Function Solarland.SolarObjAbilityRadar.K2_ApplyRadarAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd1130
};

// Class Solarland.SolarObjAbilitySystemComponent
// Size: 0x1348 (Inherited: 0x12f8)
struct USolarObjAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x10]; // 0x12f8(0x10)
	struct FGameplayTagContainer NotifyTags; // 0x1308(0x20)
	struct FGameplayTagContainer RepNotifiedTags; // 0x1328(0x20)

	void OnRep_RepNotifiedTags(struct FGameplayTagContainer& Previous); // Function Solarland.SolarObjAbilitySystemComponent.OnRep_RepNotifiedTags // (Native|Protected|HasOutParms) // @ game+0x1dd17a0
};

// Class Solarland.SolarObjectPoolManager
// Size: 0xd0 (Inherited: 0x30)
struct USolarObjectPoolManager : UGameInstanceSubsystem {
	struct TMap<struct FName, struct FObjectArray> CachedMap; // 0x30(0x50)
	char pad_80[0x50]; // 0x80(0x50)

	struct TArray<struct UObject*> PushObjectArray(struct TArray<struct UObject*> ObjectArray, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObjectArray // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd1dd0
	bool PushObject(struct UObject* Object, struct FName Tag); // Function Solarland.SolarObjectPoolManager.PushObject // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd1d10
	struct UObject* PopObjectByTag(struct FName Tag); // Function Solarland.SolarObjectPoolManager.PopObjectByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd1c60
	struct USolarObjectPoolManager* Get(struct UObject* WorldContextObject); // Function Solarland.SolarObjectPoolManager.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dd0540
	void CleanUp(); // Function Solarland.SolarObjectPoolManager.CleanUp // (Final|Native|Public|BlueprintCallable) // @ game+0x1c44ee0
};

// Class Solarland.SolarOBUIModule
// Size: 0xe0 (Inherited: 0x28)
struct USolarOBUIModule : UObject {
	char pad_28[0xb8]; // 0x28(0xb8)

	void RegisterEvents(); // Function Solarland.SolarOBUIModule.RegisterEvents // (Final|Native|Public) // @ game+0x1dd2060
	void OnSpectateTargetChanged(struct ASolarPlayerState* OldTarget, struct ASolarPlayerState* NewTarget); // Function Solarland.SolarOBUIModule.OnSpectateTargetChanged // (Final|Native|Private) // @ game+0x1dd1880
	void OnSideAndPlayerChange(); // Function Solarland.SolarOBUIModule.OnSideAndPlayerChange // (Final|Native|Public) // @ game+0x1dd1860
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarOBUIModule.OnPlayingScrubCharactersCreated // (Final|Native|Public) // @ game+0x1dd1780
	void OnGameStateSetted(struct AGameStateBase* GameState); // Function Solarland.SolarOBUIModule.OnGameStateSetted // (Final|Native|Public) // @ game+0x1dd15c0
	void OBTeamDataChange(struct TArray<struct FSCMSideData>& SideList); // Function Solarland.SolarOBUIModule.OBTeamDataChange // (Final|Native|Public|HasOutParms) // @ game+0x1dd11d0
	void MultiSideAndPlayerChangeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModule.MultiSideAndPlayerChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void MultiOBTeamDataChangeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModule.MultiOBTeamDataChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void MultiOBSpectateChangeDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModule.MultiOBSpectateChangeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void MultiOBScrubCharactersCreatedDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarOBUIModule.MultiOBScrubCharactersCreatedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void Init(); // Function Solarland.SolarOBUIModule.Init // (Final|Native|Public) // @ game+0x1dd0ca0
};

// Class Solarland.SolarOperationUIElement
// Size: 0x68 (Inherited: 0x28)
struct USolarOperationUIElement : UObject {
	struct TArray<struct FOperationUIElement> CharacterOperationUI; // 0x28(0x10)
	struct TArray<struct FOperationUIElement> DirectionOperationUI; // 0x38(0x10)
	struct TArray<struct FOperationUIElement> SteeringOperationUI; // 0x48(0x10)
	struct TArray<struct FOperationUIElement> JoyStickOperationUI; // 0x58(0x10)
};

// Class Solarland.SolarPawn
// Size: 0x28 (Inherited: 0x28)
struct USolarPawn : UInterface {
};

// Class Solarland.SolarPerceptionComponent
// Size: 0x320 (Inherited: 0x180)
struct USolarPerceptionComponent : UAIPerceptionComponent {
	float ThreatUpdateInterval; // 0x180(0x04)
	float AttackTriggerThreshold; // 0x184(0x04)
	float CancelAttackTriggerThreshold; // 0x188(0x04)
	float DistanceThreshold; // 0x18c(0x04)
	float DistanceThresholdInSmoke; // 0x190(0x04)
	float PeripheralVisionAngleDegrees; // 0x194(0x04)
	float SwitchTargetDifferenceValue; // 0x198(0x04)
	float SightIncreaseBase; // 0x19c(0x04)
	float SightIncreaseDistanceFactor; // 0x1a0(0x04)
	float SightDecreaseBase; // 0x1a4(0x04)
	float SightDecreaseDistanceFactor; // 0x1a8(0x04)
	float SightDecreaseMax; // 0x1ac(0x04)
	float SightMaxValue; // 0x1b0(0x04)
	float HearingAddBase; // 0x1b4(0x04)
	float HearingAddDistanceFactor; // 0x1b8(0x04)
	float HearingDecreasePerTick; // 0x1bc(0x04)
	float HearingMaxValue; // 0x1c0(0x04)
	float HitSoundAlertRange; // 0x1c4(0x04)
	float BotThreatFactor; // 0x1c8(0x04)
	float PlayerThreatFactor; // 0x1cc(0x04)
	float DeathVergeFactor; // 0x1d0(0x04)
	float MassInvisibilityPrepareFactor; // 0x1d4(0x04)
	float MaxDistanceThreatFactor; // 0x1d8(0x04)
	float DistanceThreatFactorDecayRate; // 0x1dc(0x04)
	float AccompanyThreatMaxValue; // 0x1e0(0x04)
	float AccompanyThreatAddBase; // 0x1e4(0x04)
	float AccompanyDecreasePerTick; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)
	struct TMap<enum class EPerceivableEffectAreaType, struct AActor*> ConfigAreaTypeIdentifyMap; // 0x1f0(0x50)
	struct FPerceivableEAInfluenceConfig EffectAreasInfluenceConfig; // 0x240(0x60)
	float MaxInfluenceRadius; // 0x2a0(0x04)
	float SmokeGrenadeAffectRadius; // 0x2a4(0x04)
	float EnergyBubbleAffectRadius; // 0x2a8(0x04)
	float SummonWallAffectRadius; // 0x2ac(0x04)
	float UAVShieldAffectRadius; // 0x2b0(0x04)
	float UAVRescueAffectRadius; // 0x2b4(0x04)
	bool bTargetSelectEnabled; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)
	struct TArray<struct FName> ForbiddenTags; // 0x2c0(0x10)
	char pad_2D0[0x50]; // 0x2d0(0x50)

	void UpdateSenseConfig(float NewSightRadius); // Function Solarland.SolarPerceptionComponent.UpdateSenseConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd3230
	void SetTargetSelectEnabled(bool bInEnable); // Function Solarland.SolarPerceptionComponent.SetTargetSelectEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd2870
	void SetForbiddenTags(struct TArray<struct FName>& Tags, bool bCleanExists); // Function Solarland.SolarPerceptionComponent.SetForbiddenTags // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dd25c0
	void OnBotPerceptionUpdated(struct AActor* Actor, struct FAIStimulus Stimulus); // Function Solarland.SolarPerceptionComponent.OnBotPerceptionUpdated // (Final|Native|Protected) // @ game+0x1dd1400
	bool IsInEffectAreaOfType(enum class EPerceivableEffectAreaType Type, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInEffectAreaOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd0ea0
	bool IsInAnyEffectArea(struct TArray<struct FPerceivableEffectArea>& ActiveEffectAreas, struct AActor* InTestActor); // Function Solarland.SolarPerceptionComponent.IsInAnyEffectArea // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dd0da0
	float GetTargetCurrentThreatValue(struct ASolarCharacter* ThreatTarget); // Function Solarland.SolarPerceptionComponent.GetTargetCurrentThreatValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd0ac0
	void ClearCurrentThreat(bool bCleanBestTarget); // Function Solarland.SolarPerceptionComponent.ClearCurrentThreat // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd0430
};

// Class Solarland.SolarPickupComponent
// Size: 0xa50 (Inherited: 0x560)
struct USolarPickupComponent : UCapsuleComponent {
	struct ASolarCharacter* OwnerChar; // 0x560(0x08)
	char pad_568[0x8]; // 0x568(0x08)
	float PickUpHighlyThresholdFactor; // 0x570(0x04)
	char pad_574[0x1]; // 0x574(0x01)
	bool bWantedClearItemData; // 0x575(0x01)
	char pad_576[0x2]; // 0x576(0x02)
	struct TMap<enum class EPickupItemType, struct USolarPickupHandlerBase*> PickupHandlerMap; // 0x578(0x50)
	struct USolarPickupHandlerBase* NormalPickupHandler; // 0x5c8(0x08)
	bool GlobalPickup; // 0x5d0(0x01)
	char pad_5D1[0x3]; // 0x5d1(0x03)
	struct TWeakObjectPtr<struct AAirDropTreasureBox> TagetAirDropBox; // 0x5d4(0x08)
	char pad_5DC[0xc]; // 0x5dc(0x0c)
	struct FActorArrayMap NormalPickupItems; // 0x5e8(0x50)
	struct TArray<struct AActor*> ProccessedList; // 0x638(0x10)
	struct TArray<struct AActor*> SortedPickupActors; // 0x648(0x10)
	bool ItemUIToggle; // 0x658(0x01)
	bool IsFiring; // 0x659(0x01)
	char pad_65A[0x6]; // 0x65a(0x06)
	struct UUIManager* UIManager; // 0x660(0x08)
	struct USolarItemManager* ItemManager; // 0x668(0x08)
	char pad_670[0x52]; // 0x670(0x52)
	bool GlobalAutoPickup; // 0x6c2(0x01)
	char pad_6C3[0x1]; // 0x6c3(0x01)
	float UnAutoPickupItemTime; // 0x6c4(0x04)
	float AutoPickupTime; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)
	bool StopAutoPickupWhenClose; // 0x6d0(0x01)
	bool bReqPickItem; // 0x6d1(0x01)
	char pad_6D2[0x1a]; // 0x6d2(0x1a)
	bool bPickupCheckBoxOpen; // 0x6ec(0x01)
	char pad_6ED[0x3]; // 0x6ed(0x03)
	struct FTimerHandle AutoPickupTimer; // 0x6f0(0x08)
	char pad_6F8[0x20]; // 0x6f8(0x20)
	struct USolarGameUserSettings* UserSettings; // 0x718(0x08)
	char pad_720[0x10]; // 0x720(0x10)
	struct FMulticastInlineDelegate OnItemDataSet; // 0x730(0x10)
	struct FMulticastInlineDelegate UpdateCheckBoxesVisibility; // 0x740(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesHighLight; // 0x750(0x10)
	struct FMulticastInlineDelegate OnUpdateCheckBoxesStates; // 0x760(0x10)
	struct FMulticastInlineDelegate OnPickupListClear; // 0x770(0x10)
	struct FMulticastInlineDelegate OnTogglePickupList; // 0x780(0x10)
	bool ListenFireReslutFlag; // 0x790(0x01)
	char pad_791[0x3]; // 0x791(0x03)
	float DelayedDisplayTime; // 0x794(0x04)
	struct FTimerHandle AutoShowPickupListHandle; // 0x798(0x08)
	struct FTimerHandle DelayProcessFireResultHandle; // 0x7a0(0x08)
	struct FTimerHandle EnsuredAutoShowHandle; // 0x7a8(0x08)
	struct TArray<struct FString> FireResultMsgs; // 0x7b0(0x10)
	char pad_7C0[0x10]; // 0x7c0(0x10)
	struct TArray<struct TWeakObjectPtr<struct ADeathTreasureBox>> NearByDeathboxes; // 0x7d0(0x10)
	struct TWeakObjectPtr<struct ADeathTreasureBox> NearestResurrectBox; // 0x7e0(0x08)
	bool LastResurrecteBtnVisbile; // 0x7e8(0x01)
	char pad_7E9[0x3]; // 0x7e9(0x03)
	float CheckResurrectInterval; // 0x7ec(0x04)
	float TempResurrectInterval; // 0x7f0(0x04)
	float CheckStopResurrectInterval; // 0x7f4(0x04)
	float TempStopResurrectInterval; // 0x7f8(0x04)
	int32_t PickupRecommendPriority; // 0x7fc(0x04)
	struct TMap<enum class EItemType, int32_t> ItemPriorityMap; // 0x800(0x50)
	struct TMap<enum class EItemType, int32_t> ItemMutiPickupMap; // 0x850(0x50)
	struct TMap<enum class EWeaponPartType, int32_t> WeaponPartPriorityMap; // 0x8a0(0x50)
	struct TMap<int32_t, int32_t> WeaponPartIDPriorityMap; // 0x8f0(0x50)
	struct TWeakObjectPtr<struct AActor> PendingFirstItemActor; // 0x940(0x08)
	char pad_948[0x108]; // 0x948(0x108)

	void UpdateResurrection(float InDeltaTime); // Function Solarland.SolarPickupComponent.UpdateResurrection // (Final|Native|Protected) // @ game+0x1dd31b0
	void UpdateItemUI(bool bForce); // Function Solarland.SolarPickupComponent.UpdateItemUI // (Final|Native|Public) // @ game+0x1dd3120
	void UpdateCheckboxSwitches(bool InPickupOpen); // Function Solarland.SolarPickupComponent.UpdateCheckboxSwitches // (Final|Native|Public) // @ game+0x1dd3090
	void TryReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.TryReqPickupItem // (Final|Native|Public) // @ game+0x1dd2f90
	void TryPickupTreasureItem(struct ASolarTreasureBoxActor* PickActor, struct FSolarItemData& ItemData); // Function Solarland.SolarPickupComponent.TryPickupTreasureItem // (Final|Native|Public|HasOutParms) // @ game+0x1dd2e50
	void TryPickupItem(struct AActor* PickActor); // Function Solarland.SolarPickupComponent.TryPickupItem // (Final|Native|Public) // @ game+0x1dd2dd0
	bool TryOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1dd2d40
	void TryClearDirtyData(bool bForce); // Function Solarland.SolarPickupComponent.TryClearDirtyData // (Final|Native|Public) // @ game+0x1dd2cb0
	bool TryCancelOpenAirDropTreasureBox(struct AAirDropTreasureBox* AirDropTreasureBox); // Function Solarland.SolarPickupComponent.TryCancelOpenAirDropTreasureBox // (Final|Native|Public) // @ game+0x1dd2c20
	void ToggleItemUI(bool Flag); // Function Solarland.SolarPickupComponent.ToggleItemUI // (Final|Native|Public) // @ game+0x1dd2b90
	void StopListenFireInput(bool bIsInstantlyStop); // Function Solarland.SolarPickupComponent.StopListenFireInput // (Final|Native|Public) // @ game+0x1dd2b00
	void StopAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StopAutoPickupTimer // (Final|Native|Public) // @ game+0x1dd2ae0
	void StartListenFireInput(); // Function Solarland.SolarPickupComponent.StartListenFireInput // (Final|Native|Public) // @ game+0x1dd2ac0
	void StartCheckTutorials(enum class ETutorialTriggerType TriggerType); // Function Solarland.SolarPickupComponent.StartCheckTutorials // (Final|Native|Public) // @ game+0x1dd2a40
	void StartAutoPickupTimer(); // Function Solarland.SolarPickupComponent.StartAutoPickupTimer // (Final|Native|Public) // @ game+0x1dd2a20
	void ShowPickupList(bool Flag); // Function Solarland.SolarPickupComponent.ShowPickupList // (Final|Native|Public) // @ game+0x1dd2990
	bool ShouldPickupTreasureBoxItem(struct ASolarTreasureBoxActor* InTreasureBox); // Function Solarland.SolarPickupComponent.ShouldPickupTreasureBoxItem // (Final|Native|Public) // @ game+0x1dd2900
	void SetStopAutoPickupWhenClose(bool InStopAutoPickupWhenClose); // Function Solarland.SolarPickupComponent.SetStopAutoPickupWhenClose // (Final|Native|Public) // @ game+0x1dd27e0
	void SetPickupSwitchInLua(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitchInLua // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetPickupSwitch(bool IsOpen); // Function Solarland.SolarPickupComponent.SetPickupSwitch // (Final|Native|Public) // @ game+0x1dd2750
	void SetPickupCapsuleSize(struct FVector& Size); // Function Solarland.SolarPickupComponent.SetPickupCapsuleSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1dd26c0
	void SetAutoPickupSwitch(bool InCanAutoPickup); // Function Solarland.SolarPickupComponent.SetAutoPickupSwitch // (Final|Native|Public) // @ game+0x1dd2530
	void RestartPickupTimer(); // Function Solarland.SolarPickupComponent.RestartPickupTimer // (Final|Native|Public) // @ game+0x1dd2510
	void ReqPickupWeapon(struct AActor* WeaponData, bool IsAutoPickup); // Function Solarland.SolarPickupComponent.ReqPickupWeapon // (Final|Native|Public) // @ game+0x1dd2440
	void ReqPickupTreasureItem(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID, bool IsAutoPickup, int32_t TargetIndex, enum class EItemType InItemType, bool bSorted); // Function Solarland.SolarPickupComponent.ReqPickupTreasureItem // (Final|Native|Public) // @ game+0x1dd2280
	void ReqPickupItem(struct ASolarItemActor* ItemActor, bool IsAutoPickup, int32_t TargetIndex); // Function Solarland.SolarPickupComponent.ReqPickupItem // (Final|Native|Public) // @ game+0x1dd2180
	void ReqOpenTreasureBox(struct ASolarTreasureBoxActor* TreasureBox); // Function Solarland.SolarPickupComponent.ReqOpenTreasureBox // (Final|Native|Public) // @ game+0x1dd2100
	void RemoveNearbyDeathbox(struct ADeathTreasureBox* InDeathbox); // Function Solarland.SolarPickupComponent.RemoveNearbyDeathbox // (Final|Native|Public) // @ game+0x1dd2080
	void RefreshResurrectBtn(); // Function Solarland.SolarPickupComponent.RefreshResurrectBtn // (Final|Native|Public) // @ game+0x1dd2040
	void RefreshPickupTimer(); // Function Solarland.SolarPickupComponent.RefreshPickupTimer // (Final|Native|Public) // @ game+0x1dd2020
	void RefreshItemUI(); // Function Solarland.SolarPickupComponent.RefreshItemUI // (Final|Native|Public) // @ game+0x1dd2000
	void RecheckPendingActors(); // Function Solarland.SolarPickupComponent.RecheckPendingActors // (Final|Native|Protected) // @ game+0x1dd1fe0
	void ReceiveFireResult(struct FString InFireResultMsg); // Function Solarland.SolarPickupComponent.ReceiveFireResult // (Final|Native|Public) // @ game+0x1dd1f40
	void ProcessFireResultMsgs(); // Function Solarland.SolarPickupComponent.ProcessFireResultMsgs // (Final|Native|Public) // @ game+0x1dd1cf0
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x1dd1be0
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarPickupComponent.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x1dd1b20
	void OnUsingSkillStatusChanged(); // Function Solarland.SolarPickupComponent.OnUsingSkillStatusChanged // (Final|Native|Public) // @ game+0x1dd1b00
	void OnUpdateItemUIDataChanged(struct UObject* Object, int32_t OldItemID, int32_t NewItemID); // Function Solarland.SolarPickupComponent.OnUpdateItemUIDataChanged // (Final|Native|Protected) // @ game+0x1dd1a00
	void OnTreasureBoxStateChange(int64_t ThisID, enum class ETreasureBoxState State); // Function Solarland.SolarPickupComponent.OnTreasureBoxStateChange // (Final|Native|Public) // @ game+0x1dd1940
	void OnPickupSettingChanged(); // Function Solarland.SolarPickupComponent.OnPickupSettingChanged // (Final|Native|Public) // @ game+0x1dd1760
	void OnPickupConfirmHandle(); // Function Solarland.SolarPickupComponent.OnPickupConfirmHandle // (Final|Native|Public) // @ game+0x1dd1740
	void OnPickupActorEnd(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorEnd // (Final|Native|Protected) // @ game+0x1dd16c0
	void OnPickupActorBegin(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.OnPickupActorBegin // (Final|Native|Protected) // @ game+0x1dd1640
	void OnEquipChanged(); // Function Solarland.SolarPickupComponent.OnEquipChanged // (Final|Native|Protected) // @ game+0x1dd15a0
	void OnCharacterDeathBegin(); // Function Solarland.SolarPickupComponent.OnCharacterDeathBegin // (Final|Native|Public) // @ game+0x1dd1580
	void OnActorDestroyed(struct AActor* Actor); // Function Solarland.SolarPickupComponent.OnActorDestroyed // (Final|Native|Protected) // @ game+0x1dd1320
	void MarkDirtyForTick(); // Function Solarland.SolarPickupComponent.MarkDirtyForTick // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd11b0
	bool IsValidItemActor(struct AActor* ItemActor); // Function Solarland.SolarPickupComponent.IsValidItemActor // (Final|Native|Public) // @ game+0x1dd10a0
	bool IsNeedReplace(enum class EItemType InType, struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.IsNeedReplace // (Final|Native|Public|HasOutParms) // @ game+0x1dd0f60
	bool IsEquipItem(enum class EItemType InType); // Function Solarland.SolarPickupComponent.IsEquipItem // (Final|Native|Public) // @ game+0x1dd0d10
	bool IsCharacterInAir(); // Function Solarland.SolarPickupComponent.IsCharacterInAir // (Final|Native|Public) // @ game+0x1dd0ce0
	void InitPickupPriorityMaps(); // Function Solarland.SolarPickupComponent.InitPickupPriorityMaps // (Final|Native|Protected) // @ game+0x1dd0cc0
	struct FSolarItemData GetTreasureItemDataByThisID(struct ASolarTreasureBoxActor* TreasureBox, int64_t ItemThisID); // Function Solarland.SolarPickupComponent.GetTreasureItemDataByThisID // (Final|Native|Public) // @ game+0x1dd0b60
	int32_t GetPickupWeaponPartTypePriority(struct FSolarItemData& InItemData); // Function Solarland.SolarPickupComponent.GetPickupWeaponPartTypePriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x1dd09c0
	int32_t GetPickupTypePriority(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.GetPickupTypePriority // (Final|Native|Protected|Const) // @ game+0x1dd0930
	struct AActor* GetPickupTreasureBoxActor(); // Function Solarland.SolarPickupComponent.GetPickupTreasureBoxActor // (Final|Native|Protected) // @ game+0x1dd0900
	int32_t GetPickupPriority(struct FSolarItemData& InItemType); // Function Solarland.SolarPickupComponent.GetPickupPriority // (Final|Native|Protected|HasOutParms|Const) // @ game+0x1dd0800
	struct ADeathTreasureBox* GetNearestResurrectBox(); // Function Solarland.SolarPickupComponent.GetNearestResurrectBox // (Final|Native|Public|Const) // @ game+0x1dd07d0
	struct TMap<int32_t, struct FActorArray> GetItemDataMap(); // Function Solarland.SolarPickupComponent.GetItemDataMap // (Final|Native|Protected) // @ game+0x1dd06e0
	int32_t GetItemDataCount(enum class EPickupItemType PickupItemType); // Function Solarland.SolarPickupComponent.GetItemDataCount // (Final|Native|Protected) // @ game+0x1dd0650
	bool GetIsGlobalPickup(); // Function Solarland.SolarPickupComponent.GetIsGlobalPickup // (Final|Native|Public) // @ game+0x1dd0620
	bool GetIsAutoPickupHomeItems(); // Function Solarland.SolarPickupComponent.GetIsAutoPickupHomeItems // (Final|Native|Public) // @ game+0x1d147e0
	void DoStopOpeningAirDropBox(); // Function Solarland.SolarPickupComponent.DoStopOpeningAirDropBox // (Final|Native|Public) // @ game+0x1dd0520
	void DoOpenAirDropBox(); // Function Solarland.SolarPickupComponent.DoOpenAirDropBox // (Final|Native|Public) // @ game+0x1dd0500
	void DetectNearestResurrectTarget(); // Function Solarland.SolarPickupComponent.DetectNearestResurrectTarget // (Final|Native|Public) // @ game+0x1dd04e0
	void CloseItemUI(); // Function Solarland.SolarPickupComponent.CloseItemUI // (Final|Native|Public) // @ game+0x1dd04c0
	void ClearAutoShowPickupListHandle(); // Function Solarland.SolarPickupComponent.ClearAutoShowPickupListHandle // (Final|Native|Public) // @ game+0x1dd0410
	void ClearAllTimer(); // Function Solarland.SolarPickupComponent.ClearAllTimer // (Final|Native|Public) // @ game+0x1dd03f0
	void CheckToShowConfirm(struct FSolarItemData& ItemData); // Function Solarland.SolarPickupComponent.CheckToShowConfirm // (Final|Native|Public|HasOutParms) // @ game+0x1dd0300
	bool CheckIsItemMaximizing(int32_t ItemID); // Function Solarland.SolarPickupComponent.CheckIsItemMaximizing // (Final|Native|Public) // @ game+0x1dd0270
	bool CanResurrectOwner(struct ADeathTreasureBox* InDeathbox, float& OutDistance); // Function Solarland.SolarPickupComponent.CanResurrectOwner // (Final|Native|Public|HasOutParms) // @ game+0x1dd0190
	bool CanMutiAutoPickup(enum class EItemType InItemType); // Function Solarland.SolarPickupComponent.CanMutiAutoPickup // (Final|Native|Protected|Const) // @ game+0x1dd0100
	void CallHUDSetTreasureBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetTreasureBoxActor // (Final|Native|Public) // @ game+0x1dd0080
	void CallHUDSetAirdropBoxActor(struct AActor* InActor); // Function Solarland.SolarPickupComponent.CallHUDSetAirdropBoxActor // (Final|Native|Public) // @ game+0x1dd0000
	void CallHUDSetActiveResurrectBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveResurrectBtn // (Final|Native|Public) // @ game+0x1dcff70
	void CallHUDSetActiveOpenBoxProgress(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxProgress // (Final|Native|Public) // @ game+0x1dcfee0
	void CallHUDSetActiveOpenBoxBtn(bool Inactive); // Function Solarland.SolarPickupComponent.CallHUDSetActiveOpenBoxBtn // (Final|Native|Public) // @ game+0x1dcfe50
	void CallHUDHideOpenBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideOpenBoxUIByThisID // (Final|Native|Public) // @ game+0x1dcfdd0
	void CallHUDHideAirdropBoxUIByThisID(int64_t InThisID); // Function Solarland.SolarPickupComponent.CallHUDHideAirdropBoxUIByThisID // (Final|Native|Public) // @ game+0x1dcfd50
	void AddNearbyDeathbox(struct ADeathTreasureBox* InDeathbox); // Function Solarland.SolarPickupComponent.AddNearbyDeathbox // (Final|Native|Public) // @ game+0x1dcfcd0
};

// Class Solarland.SolarPickupHandlerBase
// Size: 0x48 (Inherited: 0x28)
struct USolarPickupHandlerBase : UObject {
	enum class EPickupItemType Type; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct USolarPickupComponent* OwnerComponent; // 0x30(0x08)
	struct USolarItemManager* ItemManager; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
};

// Class Solarland.SolarPickupHandlerNormal
// Size: 0x58 (Inherited: 0x48)
struct USolarPickupHandlerNormal : USolarPickupHandlerBase {
	char pad_48[0x10]; // 0x48(0x10)
};

// Class Solarland.SolarPingFpsManager
// Size: 0x40 (Inherited: 0x28)
struct USolarPingFpsManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	char GetPingDS; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GetPingBackend; // 0x34(0x04)
	float FPS; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	char GetPingBattleServer(); // Function Solarland.SolarPingFpsManager.GetPingBattleServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd65d0
	float GetPacketsLossRate(); // Function Solarland.SolarPingFpsManager.GetPacketsLossRate // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd6520
	float GetAverageFPS(); // Function Solarland.SolarPingFpsManager.GetAverageFPS // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd5e10
};

// Class Solarland.SolarPingFpsWidget
// Size: 0x420 (Inherited: 0x340)
struct USolarPingFpsWidget : USolarUserWidget {
	struct UImage* Img_Ping; // 0x340(0x08)
	struct USolarTextBlock* Txt_Ping; // 0x348(0x08)
	struct USolarTextBlock* Txt_ms; // 0x350(0x08)
	struct USolarTextBlock* Txt_fps_2; // 0x358(0x08)
	char pad_360[0x10]; // 0x360(0x10)
	struct FLinearColor ImgLowDelayColor; // 0x370(0x10)
	struct FLinearColor ImgMediumDelayColor; // 0x380(0x10)
	struct FLinearColor ImgHighDelayColor; // 0x390(0x10)
	struct FSlateColor TxtLowDelayColor; // 0x3a0(0x28)
	struct FSlateColor TxtMediumDelayColor; // 0x3c8(0x28)
	struct FSlateColor TxtHighDelayColor; // 0x3f0(0x28)
	float RefreshFpsInterval; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)

	void UpdatePing(float InPing); // Function Solarland.SolarPingFpsWidget.UpdatePing // (Final|Native|Public) // @ game+0x1dd7190
	void CreateUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.CreateUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd5c60
	void ClearUpdateUIFpsTimer(); // Function Solarland.SolarPingFpsWidget.ClearUpdateUIFpsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1dd5bc0
};

// Class Solarland.SolarPlatformHelper
// Size: 0xf0 (Inherited: 0x28)
struct USolarPlatformHelper : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USolarPlatformStats* SolarPlatformStats; // 0x30(0x08)
	struct USolarGameInstanceBase* SolarGameInstanceBase; // 0x38(0x08)
	char pad_40[0xb0]; // 0x40(0xb0)

	bool UseRenderThread(); // Function Solarland.SolarPlatformHelper.UseRenderThread // (Final|Native|Static|Public) // @ game+0x1dd7210
	bool SupportsMultithreading(); // Function Solarland.SolarPlatformHelper.SupportsMultithreading // (Final|Native|Static|Public) // @ game+0x1dd70d0
	double Seconds(); // Function Solarland.SolarPlatformHelper.Seconds // (Final|Native|Static|Public) // @ game+0x1dd70a0
	void ReceiveShutdown(); // Function Solarland.SolarPlatformHelper.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveInit(); // Function Solarland.SolarPlatformHelper.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsThisApplicationForeground(); // Function Solarland.SolarPlatformHelper.IsThisApplicationForeground // (Final|Native|Static|Public) // @ game+0x1dd69f0
	bool IsRunningOnBattery(); // Function Solarland.SolarPlatformHelper.IsRunningOnBattery // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dd69c0
	bool Is64bitOperatingSystem(); // Function Solarland.SolarPlatformHelper.Is64bitOperatingSystem // (Final|Native|Static|Public) // @ game+0x1dd68d0
	int64_t GetVideoMemory(); // Function Solarland.SolarPlatformHelper.GetVideoMemory // (Final|Native|Static|Public) // @ game+0x1dd68a0
	struct FString GetUniqueDeviceId(); // Function Solarland.SolarPlatformHelper.GetUniqueDeviceId // (Final|Native|Public|Const) // @ game+0x1dd6860
	struct FString GetTimeZoneId(); // Function Solarland.SolarPlatformHelper.GetTimeZoneId // (Final|Native|Static|Public) // @ game+0x993c70
	struct FString GetSuitableStringWithUnitOfBytes(uint64_t NumberOfBytes, struct FString ExtraUnit); // Function Solarland.SolarPlatformHelper.GetSuitableStringWithUnitOfBytes // (Final|Native|Static|Public) // @ game+0x1dd6740
	struct USolarPlatformStats* GetSolarPlatformStats(); // Function Solarland.SolarPlatformHelper.GetSolarPlatformStats // (Final|Native|Public|Const) // @ game+0x1dd6710
	int32_t GetSimultaneousInstanceId(); // Function Solarland.SolarPlatformHelper.GetSimultaneousInstanceId // (Final|Native|Public|Const) // @ game+0x1dd66e0
	struct FString GetPrimaryGPUBrand(); // Function Solarland.SolarPlatformHelper.GetPrimaryGPUBrand // (Final|Native|Static|Public) // @ game+0x1dd6600
	struct FString GetPathVarDelimiter(); // Function Solarland.SolarPlatformHelper.GetPathVarDelimiter // (Final|Native|Static|Public) // @ game+0x1dd6550
	void GetOSVersions(struct FString& out_OSVersionLabel, struct FString& out_OSSubVersionLabel); // Function Solarland.SolarPlatformHelper.GetOSVersions // (Final|Native|Static|Public|HasOutParms) // @ game+0x1dd6410
	struct FString GetOSVersion(); // Function Solarland.SolarPlatformHelper.GetOSVersion // (Final|Native|Static|Public) // @ game+0x993a50
	uint32_t GetMoniterWidth(); // Function Solarland.SolarPlatformHelper.GetMoniterWidth // (Final|Native|Static|Public) // @ game+0x1dd63b0
	uint32_t GetMoniterRefreshRate(); // Function Solarland.SolarPlatformHelper.GetMoniterRefreshRate // (Final|Native|Static|Public) // @ game+0x1dd6380
	uint32_t GetMoniterHeight(); // Function Solarland.SolarPlatformHelper.GetMoniterHeight // (Final|Native|Static|Public) // @ game+0x1dd6350
	int32_t GetMaxPathLength(); // Function Solarland.SolarPlatformHelper.GetMaxPathLength // (Final|Native|Static|Public) // @ game+0x1dd6320
	struct UGameUserSettings* GetGameUserSettings(); // Function Solarland.SolarPlatformHelper.GetGameUserSettings // (Final|Native|Public) // @ game+0x1dd62f0
	struct FString GetEnvironmentVariable(struct FString VariableName); // Function Solarland.SolarPlatformHelper.GetEnvironmentVariable // (Final|Native|Static|Public) // @ game+0x1dd61e0
	struct UEngine* GetEngine(); // Function Solarland.SolarPlatformHelper.GetEngine // (Final|Native|Public) // @ game+0x1dd61b0
	bool GetDiskTotalAndFreeSpace(struct FString InPath, uint64_t& TotalNumberOfBytes, uint64_t& NumberOfFreeBytes); // Function Solarland.SolarPlatformHelper.GetDiskTotalAndFreeSpace // (Final|Native|Static|Public|HasOutParms) // @ game+0x1dd6080
	float GetDeviceTemperatureLevel(); // Function Solarland.SolarPlatformHelper.GetDeviceTemperatureLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dd6050
	struct FString GetDeviceMakeAndModel(); // Function Solarland.SolarPlatformHelper.GetDeviceMakeAndModel // (Final|Native|Static|Public) // @ game+0x993650
	struct FString GetDefaultDeviceProfileName(); // Function Solarland.SolarPlatformHelper.GetDefaultDeviceProfileName // (Final|Native|Static|Public) // @ game+0x1dd5fd0
	struct FString GetCPUVendor(); // Function Solarland.SolarPlatformHelper.GetCPUVendor // (Final|Native|Static|Public) // @ game+0x1dd5ea0
	uint32_t GetCPUInfo(); // Function Solarland.SolarPlatformHelper.GetCPUInfo // (Final|Native|Static|Public) // @ game+0x1dd5e70
	struct FString GetCPUChipset(); // Function Solarland.SolarPlatformHelper.GetCPUChipset // (Final|Native|Static|Public) // @ game+0x9934d0
	struct FString GetCPUBrand(); // Function Solarland.SolarPlatformHelper.GetCPUBrand // (Final|Native|Static|Public) // @ game+0x993550
	int32_t GetBatteryLevel(); // Function Solarland.SolarPlatformHelper.GetBatteryLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1dd5e40
	struct FString ClipboardPaste(); // Function Solarland.SolarPlatformHelper.ClipboardPaste // (Final|Native|Static|Public) // @ game+0x1dc0380
	void ClipboardCopy(struct FString str); // Function Solarland.SolarPlatformHelper.ClipboardCopy // (Final|Native|Static|Public) // @ game+0x1dbedb0
};

// Class Solarland.SolarPlatformStats
// Size: 0x60 (Inherited: 0x28)
struct USolarPlatformStats : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	uint64_t MaxUsedPhysical; // 0x30(0x08)
	char pad_38[0x28]; // 0x38(0x28)

	void ReceiveWorldCleanup(struct UWorld* World, bool bSessionEnded, bool bCleanupResources); // Function Solarland.SolarPlatformStats.ReceiveWorldCleanup // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveShutdown(); // Function Solarland.SolarPlatformStats.ReceiveShutdown // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceivePostWorldInitialization(struct UWorld* World); // Function Solarland.SolarPlatformStats.ReceivePostWorldInitialization // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveInit(); // Function Solarland.SolarPlatformStats.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	uint64_t GetRHIUsedMemory(); // Function Solarland.SolarPlatformStats.GetRHIUsedMemory // (Final|Native|Public) // @ game+0x1dd6680
	float GetRenderThreadTime(); // Function Solarland.SolarPlatformStats.GetRenderThreadTime // (Final|Native|Public) // @ game+0x1dd66b0
	int32_t GetNumDrawCalls(); // Function Solarland.SolarPlatformStats.GetNumDrawCalls // (Final|Native|Public) // @ game+0x1dd63e0
	int32_t GetMinFPS(); // Function Solarland.SolarPlatformStats.GetMinFPS // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	float GetGameThreadTime(); // Function Solarland.SolarPlatformStats.GetGameThreadTime // (Final|Native|Public) // @ game+0x1dd62c0
	int32_t GetAverageFPS(); // Function Solarland.SolarPlatformStats.GetAverageFPS // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarPlayerCameraManager
// Size: 0x2ff0 (Inherited: 0x2fc0)
struct ASolarPlayerCameraManager : APlayerCameraManager {
	struct TWeakObjectPtr<struct AActor> OldViewTarget; // 0x2fc0(0x08)
	struct UCameraModifier_CameraShakeWithCurve* CachedCameraShakeModWithCurve; // 0x2fc8(0x08)
	char pad_2FD0[0x20]; // 0x2fd0(0x20)

	void OnPlayerGetOnViewTargetVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarPlayerCameraManager.OnPlayerGetOnViewTargetVehicle // (Final|Native|Protected) // @ game+0x1de4890
	struct FMinimalViewInfo GetDebugPOV(); // Function Solarland.SolarPlayerCameraManager.GetDebugPOV // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1de25f0
};

// Class Solarland.SolarPlayerInput
// Size: 0x5f8 (Inherited: 0x598)
struct USolarPlayerInput : UEnhancedPlayerInput {
	char pad_598[0x60]; // 0x598(0x60)
};

// Class Solarland.SolarWeapon
// Size: 0xc40 (Inherited: 0x228)
struct ASolarWeapon : AActor {
	char pad_228[0x188]; // 0x228(0x188)
	struct FMulticastInlineDelegate OnWeaponUnhold; // 0x3b0(0x10)
	struct FWeaponMechanicalState WeaponState; // 0x3c0(0x50)
	struct USolarWeaponFireStateMachine* WeaponFireStateMachineClass; // 0x410(0x08)
	struct USolarWeaponFireStateMachine* WeaponFireStateMachine; // 0x418(0x08)
	struct USolarWeaponSkillStateMachine* WeaponSkillStateMachineClass; // 0x420(0x08)
	struct USolarWeaponSkillStateMachine* WeaponSkillStateMachine; // 0x428(0x08)
	float HitHeadValue; // 0x430(0x04)
	char pad_434[0x1]; // 0x434(0x01)
	bool bSingle; // 0x435(0x01)
	bool bBurst; // 0x436(0x01)
	bool bAuto; // 0x437(0x01)
	char pad_438[0x1]; // 0x438(0x01)
	enum class EShootingOpt PrimaryShootingOption; // 0x439(0x01)
	char pad_43A[0x2]; // 0x43a(0x02)
	struct FImpactDisplayInfo ImpactInfo; // 0x43c(0x10)
	char pad_44C[0xc]; // 0x44c(0x0c)
	bool bSkillCostSuccess; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
	struct USolarVirtualBulletCollector* VirtualBulletCollector; // 0x460(0x08)
	struct UWeaponFireLaserCollector* LaserCollector; // 0x468(0x08)
	char pad_470[0x4]; // 0x470(0x04)
	int32_t ExtraPoints; // 0x474(0x04)
	int32_t ExtraPointsForInit; // 0x478(0x04)
	bool bUseSkillStateMachine; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	int32_t ExtraPointsLimit; // 0x480(0x04)
	int32_t SecModeLimitTypeID; // 0x484(0x04)
	float RestoreProgressPerSec; // 0x488(0x04)
	char pad_48C[0xc]; // 0x48c(0x0c)
	float RestoreProgressPerKill; // 0x498(0x04)
	float RestoreProgressPerDmg; // 0x49c(0x04)
	float RestoreProgressAccumulation; // 0x4a0(0x04)
	float RestoreProgressAccumulationForInit; // 0x4a4(0x04)
	char pad_4A8[0x9]; // 0x4a8(0x09)
	char FireModeIndex; // 0x4b1(0x01)
	char pad_4B2[0x6]; // 0x4b2(0x06)
	int32_t BurstMaxCount; // 0x4b8(0x04)
	char pad_4BC[0xc]; // 0x4bc(0x0c)
	enum class EWeaponOverloadState OverloadState; // 0x4c8(0x01)
	char pad_4C9[0x3]; // 0x4c9(0x03)
	float OverloadAccum; // 0x4cc(0x04)
	char pad_4D0[0x10]; // 0x4d0(0x10)
	struct UCurveFloat* OverloadCurve; // 0x4e0(0x08)
	char pad_4E8[0x4]; // 0x4e8(0x04)
	float GatlingRollSpeed; // 0x4ec(0x04)
	float GatlingHoldTime; // 0x4f0(0x04)
	float GatlingRollSpeedInterp; // 0x4f4(0x04)
	int32_t GatlingRepState; // 0x4f8(0x04)
	char pad_4FC[0x5]; // 0x4fc(0x05)
	bool bResetMuzzleIndexWhenStopFire; // 0x501(0x01)
	char pad_502[0x1e]; // 0x502(0x1e)
	float FireChargingTime; // 0x520(0x04)
	int32_t FireChargingPhase; // 0x524(0x04)
	float FireChargingSumTime; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)
	float ChargeAnimationRate; // 0x530(0x04)
	char pad_534[0x4]; // 0x534(0x04)
	struct UGameplayEffect* ChargingEffect; // 0x538(0x08)
	char pad_540[0x8]; // 0x540(0x08)
	struct TWeakObjectPtr<struct UAbilitySystemComponent> OwnerGAS; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)
	struct UCurveFloat* NormalOverloadCoolingCurve; // 0x558(0x08)
	int32_t CurrentMode; // 0x560(0x04)
	char pad_564[0xc]; // 0x564(0x0c)
	struct TArray<struct FFireMode> FireModes; // 0x570(0x10)
	struct AActor* WeaponHolder; // 0x580(0x08)
	struct ASolarCharacterBase* ControlWeaponCharacter; // 0x588(0x08)
	struct TArray<struct FGameplayAbilitySpecHandle> EquippedAbilityHandles; // 0x590(0x10)
	bool bControlWeaponCharacterChanged; // 0x5a0(0x01)
	char pad_5A1[0x7]; // 0x5a1(0x07)
	struct AActor* AimTarget; // 0x5a8(0x08)
	struct ASolarWeaponProjectileSpline* ProjSplineClass; // 0x5b0(0x08)
	struct ASolarWeaponProjectileSpline* ProjSpline; // 0x5b8(0x08)
	struct TArray<enum class EShootingOpt> ShootingOptArray; // 0x5c0(0x10)
	bool bShowSpecialEffect; // 0x5d0(0x01)
	char pad_5D1[0x3]; // 0x5d1(0x03)
	int32_t SecondaryModeBurstMaxCount; // 0x5d4(0x04)
	struct USingleWeaponConfig* Config; // 0x5d8(0x08)
	struct UTexture2D* WeaponIcon; // 0x5e0(0x08)
	struct USlateWidgetStyleAsset* PrimaryFireBtnStyle; // 0x5e8(0x08)
	struct USlateWidgetStyleAsset* SecondaryFireBtnStyle; // 0x5f0(0x08)
	struct UGlobalWeaponConfig* WeaponsConfig; // 0x5f8(0x08)
	struct UWeaponRecoilComponent* RecoilComponent; // 0x600(0x08)
	int32_t weaponid; // 0x608(0x04)
	char pad_60C[0x4]; // 0x60c(0x04)
	struct UWeaponSpreadAndRecoil* SpreadAndRecoil; // 0x610(0x08)
	char pad_618[0x2]; // 0x618(0x02)
	bool bInitCfgFromTable; // 0x61a(0x01)
	bool bTeamDamageEnable; // 0x61b(0x01)
	bool bInfiniteAmmo; // 0x61c(0x01)
	bool bInfinitePackageAmmo; // 0x61d(0x01)
	char pad_61E[0x2]; // 0x61e(0x02)
	int32_t ExtraAmmo; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)
	struct TMap<struct TWeakObjectPtr<struct UParticleSystem>, struct UParticleLoopListener*> LoopParticlesMap; // 0x628(0x50)
	int32_t CurrentClipAmmo; // 0x678(0x04)
	char pad_67C[0x10c]; // 0x67c(0x10c)
	struct TMap<enum class ECharacterMontage, struct FWeaponAnimationInfo> WeaponAnimationMap; // 0x788(0x50)
	struct TArray<struct FCameraShakeData> WeaponFireCameraShakes; // 0x7d8(0x10)
	struct TArray<struct FCameraShakeData> WeaponScopeFireCameraShakes; // 0x7e8(0x10)
	struct TArray<struct FCameraShakeData> UsingSkillCameraShakes; // 0x7f8(0x10)
	struct TArray<struct FCameraShakeData> WeaponChargingCameraShakes; // 0x808(0x10)
	enum class EWeaponSkillChargedState WeaponChargePhase; // 0x818(0x01)
	bool bUseEmptyActor; // 0x819(0x01)
	char pad_81A[0x6]; // 0x81a(0x06)
	struct FSoftObjectPath FightMeshPath; // 0x820(0x18)
	struct USkeletalMeshComponent* Mesh; // 0x838(0x08)
	struct USkeletalMesh* OriginalMesh; // 0x840(0x08)
	struct UWeaponAnimInstance* OriginalAnimBP; // 0x848(0x08)
	struct UAkComponent* AkAudioComponent; // 0x850(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x858(0x08)
	int32_t SoundFireAutoCount; // 0x860(0x04)
	bool bTriggerSoundFireAuto; // 0x864(0x01)
	char pad_865[0x3]; // 0x865(0x03)
	int32_t OldSoundFireAutoCount; // 0x868(0x04)
	bool bTriggerSoundB9A04Skill; // 0x86c(0x01)
	bool bTriggerSoundFireBurst; // 0x86d(0x01)
	char pad_86E[0x2]; // 0x86e(0x02)
	int32_t SkillFireCount; // 0x870(0x04)
	int32_t SingleFireCount; // 0x874(0x04)
	int32_t FireOverloadCount; // 0x878(0x04)
	int32_t FireLastCount; // 0x87c(0x04)
	char pad_880[0x54]; // 0x880(0x54)
	struct FName SkillReleaseResult; // 0x8d4(0x08)
	char pad_8DC[0x24]; // 0x8dc(0x24)
	struct FOverrideBulletStruct OverrideBullet; // 0x900(0x10)
	bool bInitFinish; // 0x910(0x01)
	bool bClientInitFinish; // 0x911(0x01)
	bool bLoadInitAssets; // 0x912(0x01)
	bool bLoadAllCfgAssets; // 0x913(0x01)
	char pad_914[0x4]; // 0x914(0x04)
	struct UWeaponNetComponent* WeaponNetComp; // 0x918(0x08)
	struct TMap<struct FFireUniqueID, float> FireHitVerifyMap; // 0x920(0x50)
	char pad_970[0x8]; // 0x970(0x08)
	bool bDetectedEnemy; // 0x978(0x01)
	char pad_979[0x7]; // 0x979(0x07)
	struct TArray<struct UParticleSystemComponent*> GatlingOverHeatPSCs; // 0x980(0x10)
	char pad_990[0x130]; // 0x990(0x130)
	struct TArray<struct TWeakObjectPtr<struct ASolarEnergyShield>> IgnoreEnergyShieldArray; // 0xac0(0x10)
	char pad_AD0[0x8]; // 0xad0(0x08)
	struct UMaterialInterface* SpecialFireChargeMaterial; // 0xad8(0x08)
	struct TMap<int32_t, struct FColor> SpecialFireChargeColorMap; // 0xae0(0x50)
	bool bDisplayPreview; // 0xb30(0x01)
	bool bPerspectiveForReplay; // 0xb31(0x01)
	char pad_B32[0x1e]; // 0xb32(0x1e)
	enum class ESolarWeaponSpreadState CurrentSpreadState; // 0xb50(0x01)
	char pad_B51[0x3]; // 0xb51(0x03)
	int32_t ContinuousAddSpreadByFireCount; // 0xb54(0x04)
	bool bLastAddSpreadByFireIsHipFire; // 0xb58(0x01)
	int8_t LastAddSpreadByFireFireMode; // 0xb59(0x01)
	char pad_B5A[0x2]; // 0xb5a(0x02)
	float LastAddSpreadByFireTime; // 0xb5c(0x04)
	float SpreadPrepareTimer; // 0xb60(0x04)
	float PendingBaseSpread; // 0xb64(0x04)
	float TargetBaseSpread; // 0xb68(0x04)
	float PendingAddSpread; // 0xb6c(0x04)
	float TargetAddSpread; // 0xb70(0x04)
	char pad_B74[0x3c]; // 0xb74(0x3c)
	struct FHitResult AimHitResult; // 0xbb0(0x88)
	char pad_C38[0x8]; // 0xc38(0x08)

	void WeaponStateOnRepReload(); // Function Solarland.SolarWeapon.WeaponStateOnRepReload // (Final|Native|Private) // @ game+0x1eecc50
	bool VerifyLastClipAmmo(int32_t InFireModeType, int32_t InLastClipAmmo); // Function Solarland.SolarWeapon.VerifyLastClipAmmo // (Final|Native|Protected) // @ game+0x1eecb90
	bool UseEnergy(int32_t Mode); // Function Solarland.SolarWeapon.UseEnergy // (Final|Native|Public|Const) // @ game+0x1eecb00
	bool TryHitOperation(struct FFireUniqueID& FireUniqueID, int32_t& FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float& ServerTime, float& DamageScale, struct FBulletHitDetailData& HitDetailData, bool IsNotDelay); // Function Solarland.SolarWeapon.TryHitOperation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1eec830
	void StopSoundDelay(float DelayTime); // Function Solarland.SolarWeapon.StopSoundDelay // (Final|Native|Public) // @ game+0x1eec7b0
	void StopSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StopSound // (Final|Native|Public) // @ game+0x1eec6f0
	void StopLastValidFire(); // Function Solarland.SolarWeapon.StopLastValidFire // (Final|Native|Public) // @ game+0x1eec6d0
	void StopGatlingSound(); // Function Solarland.SolarWeapon.StopGatlingSound // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void StartSound(enum class EShootingSoundOpt Opt, int32_t idx); // Function Solarland.SolarWeapon.StartSound // (Final|Native|Public) // @ game+0x1eec610
	void StartAsyncLoading(); // Function Solarland.SolarWeapon.StartAsyncLoading // (Final|Native|Public) // @ game+0x1eec5f0
	struct ASolarProjBullet* SpawnProjWithFireID(struct FSpawnBulletParam& Param, struct FFireUniqueID& FireID, bool Local); // Function Solarland.SolarWeapon.SpawnProjWithFireID // (Final|Native|Protected|HasOutParms) // @ game+0x1eec460
	bool SkillCost(); // Function Solarland.SolarWeapon.SkillCost // (Final|Native|Protected) // @ game+0x1eec430
	void ShowSpecialEffect(bool bShow); // Function Solarland.SolarWeapon.ShowSpecialEffect // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eec3a0
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState); // Function Solarland.SolarWeapon.SetWeaponAnimState // (Final|Native|Public|BlueprintCallable) // @ game+0x1eec320
	void SetReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.SetReservedAmmoForce // (Final|Native|Public|BlueprintCallable) // @ game+0x1eec260
	void SetPrimaryShootingOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.SetPrimaryShootingOption // (Final|Native|Public|BlueprintCallable) // @ game+0x1eec1e0
	void SetLastFireTime(int32_t InFireModeType, float InFireTime); // Function Solarland.SolarWeapon.SetLastFireTime // (Final|Native|Public) // @ game+0x1eec110
	void SetHolder(struct AActor* holder); // Function Solarland.SolarWeapon.SetHolder // (Native|Public|BlueprintCallable) // @ game+0x1eec080
	void ServerWeaponSound(enum class EShootingSoundOpt Opt, bool TriggerSound); // Function Solarland.SolarWeapon.ServerWeaponSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eebfb0
	void ServerVirtualBulletShotHit(struct TArray<struct FSolarVirtualBulletHitParameter> AllHitParams, struct APawn* SourcePawn); // Function Solarland.SolarWeapon.ServerVirtualBulletShotHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eebe90
	void ServerVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ServerVirtualBulletShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eebda0
	void ServerUpdateMechanicalState(enum class EWeaponMechanicalUniqueState NewMechanicalState, enum class EWeaponMechanicalSideFlag NewSubFlags); // Function Solarland.SolarWeapon.ServerUpdateMechanicalState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eebcd0
	void ServerUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ServerUpdateLaserInfo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1eebc10
	void ServerUpdateGatlingRepState(int32_t InState); // Function Solarland.SolarWeapon.ServerUpdateGatlingRepState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eebb80
	void ServerSpawnProjWithVelocity(struct FSpawnProjParam Param); // Function Solarland.SolarWeapon.ServerSpawnProjWithVelocity // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eebab0
	void ServerSpawnProjWithFireID(struct FSpawnBulletParam Param, struct FFireUniqueID FireID); // Function Solarland.SolarWeapon.ServerSpawnProjWithFireID // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb9a0
	void ServerSkillCost(); // Function Solarland.SolarWeapon.ServerSkillCost // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1258050
	void ServerSetTarget(struct AActor* Target); // Function Solarland.SolarWeapon.ServerSetTarget // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb910
	void ServerSetPrimaryOption(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.ServerSetPrimaryOption // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb890
	void ServerSetImpactInfo(struct FVector_NetQuantize Position, float Scale); // Function Solarland.SolarWeapon.ServerSetImpactInfo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb7d0
	void ServerSetHipFire(bool InbHipFire); // Function Solarland.SolarWeapon.ServerSetHipFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb740
	void ServerSetDisplayPreview(bool InbDisplay, bool InbSuccessful); // Function Solarland.SolarWeapon.ServerSetDisplayPreview // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeb670
	void ServerResetFireCount(); // Function Solarland.SolarWeapon.ServerResetFireCount // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1257f50
	void ServerRequestSummonItem(char fireModeType, bool InIsQuickSummon, struct FSolarSummonData InSummonData); // Function Solarland.SolarWeapon.ServerRequestSummonItem // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb530
	void ServerRequestDropWeapon(); // Function Solarland.SolarWeapon.ServerRequestDropWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7a9ac0
	void ServerReceiveHitDataFromClient(struct FBulletHitData HitData, bool IsNotDelay); // Function Solarland.SolarWeapon.ServerReceiveHitDataFromClient // (Net|Native|Event|Public|NetServer) // @ game+0x1eeb450
	void ServerPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ServerPlayAnimWithNetMulticast // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeb390
	void ServerModeState(char ModeIndex); // Function Solarland.SolarWeapon.ServerModeState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeb310
	void ServerLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarWeapon.ServerLaserHit // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeb230
	void ServerInterruptLaser(); // Function Solarland.SolarWeapon.ServerInterruptLaser // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x790040
	void ServerInstantLineShot(char ModeIndex, struct FVector_NetQuantize Start, struct FVector_NetQuantize End, float DamageScale, struct FMutiBulletHitData HitData, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ServerInstantLineShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeb040
	void ServerHit(struct FHitResult Impact, char ModeIndex, bool TriggerAnim, float Scale); // Function Solarland.SolarWeapon.ServerHit // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eeaec0
	void ServerFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ServerFireChargeShoot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeadc0
	void ServerFireChargePhaseChange(int8_t InFireChargingPhase); // Function Solarland.SolarWeapon.ServerFireChargePhaseChange // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eead40
	void ServerFire_JustAbilitiesAmmo(char ModeIndex); // Function Solarland.SolarWeapon.ServerFire_JustAbilitiesAmmo // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1dc7e10
	void ServerChangeWeaponChargePhase(enum class EWeaponSkillChargedState InChargeState); // Function Solarland.SolarWeapon.ServerChangeWeaponChargePhase // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeacc0
	void ServerChangeOverloadState(enum class EWeaponOverloadState InState); // Function Solarland.SolarWeapon.ServerChangeOverloadState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeac40
	void ServerCanisterShot(char ModeIndex, struct FVector_NetQuantize Start, struct FVector_NetQuantize End, float RandomA, float RandomB, struct FMutiBulletHitData HitData, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ServerCanisterShot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eeaa10
	void ServerAddOrRemoveGameplayTagsToCharacter(bool bInAddTag, struct FGameplayTagContainer InTags); // Function Solarland.SolarWeapon.ServerAddOrRemoveGameplayTagsToCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eea910
	void ServerAddExpWithReason(int32_t InExp, int32_t InReasonID); // Function Solarland.SolarWeapon.ServerAddExpWithReason // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eea850
	void ServerActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ServerActivateLaserShot // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x1eea790
	void RuntimeUpdateData(int32_t Cmd, struct FString Params); // Function Solarland.SolarWeapon.RuntimeUpdateData // (Final|Native|Public) // @ game+0x1eea6b0
	void ResetRecoilComponent(); // Function Solarland.SolarWeapon.ResetRecoilComponent // (Final|Native|Public) // @ game+0x1eea690
	struct UAmmoConfig* ReLoadAmmoData(struct UAmmoConfig* BaseConfig, int32_t AmmoID); // Function Solarland.SolarWeapon.ReLoadAmmoData // (Final|Native|Public|BlueprintCallable) // @ game+0x1eea500
	void ReceivePlayImpactPositionEffect(struct UParticleSystemComponent* PSC, struct FVector& Position, float Scale); // Function Solarland.SolarWeapon.ReceivePlayImpactPositionEffect // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveChargingState(int32_t Index, enum class EWeaponSkillChargedState State); // Function Solarland.SolarWeapon.ReceiveChargingState // (Native|Event|Protected|BlueprintEvent) // @ game+0x1eea5c0
	void PrimaryCost(); // Function Solarland.SolarWeapon.PrimaryCost // (Native|Protected) // @ game+0x1258710
	void PlayVibrate(enum class EWeaponVibrateType InType); // Function Solarland.SolarWeapon.PlayVibrate // (Final|Native|Private) // @ game+0x1eea480
	void PlayReloadRestoreVibrate(); // Function Solarland.SolarWeapon.PlayReloadRestoreVibrate // (Final|Native|Public) // @ game+0x1eea460
	void PlayReloadGetOldVibrate(); // Function Solarland.SolarWeapon.PlayReloadGetOldVibrate // (Final|Native|Public) // @ game+0x1eea440
	void PlayFireVibrate(); // Function Solarland.SolarWeapon.PlayFireVibrate // (Final|Native|Public) // @ game+0x1eea420
	void PlayChargeVibrate(); // Function Solarland.SolarWeapon.PlayChargeVibrate // (Final|Native|Public) // @ game+0x1eea400
	void PlayBulletHitEffect(struct FHitResult& HitResult, struct ASolarBullet* Bullet, bool bForce, struct APawn* HitCauser, float HitEffectScale); // Function Solarland.SolarWeapon.PlayBulletHitEffect // (Final|Native|Public|HasOutParms) // @ game+0x1eea220
	void PlayBoltVibrate(); // Function Solarland.SolarWeapon.PlayBoltVibrate // (Final|Native|Public) // @ game+0x1eea200
	void PlayAutoSingleSound(); // Function Solarland.SolarWeapon.PlayAutoSingleSound // (Final|Native|Public) // @ game+0x1eea1e0
	void PlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength, bool bNeedNetMulticast, int32_t AnimCount); // Function Solarland.SolarWeapon.PlayAnimWithNetMulticast // (Native|Public|BlueprintCallable) // @ game+0x1eea090
	void OverrideFireMode(int32_t InFireModeType, struct UAmmoConfig* InNewAmmoConfig); // Function Solarland.SolarWeapon.OverrideFireMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee9fd0
	void OnRep_WeaponState(); // Function Solarland.SolarWeapon.OnRep_WeaponState // (Final|Native|Public) // @ game+0x1ee9fb0
	void OnRep_WeaponChargePhase(); // Function Solarland.SolarWeapon.OnRep_WeaponChargePhase // (Final|Native|Public) // @ game+0x1ee9f90
	void OnRep_SoundFireSkillCast(); // Function Solarland.SolarWeapon.OnRep_SoundFireSkillCast // (Final|Native|Public) // @ game+0x1ee9f70
	void OnRep_SoundFireSingle(); // Function Solarland.SolarWeapon.OnRep_SoundFireSingle // (Final|Native|Public) // @ game+0x1ee9f50
	void OnRep_SoundFireOverload(); // Function Solarland.SolarWeapon.OnRep_SoundFireOverload // (Final|Native|Public) // @ game+0x1ee9f30
	void OnRep_SoundFireLast(); // Function Solarland.SolarWeapon.OnRep_SoundFireLast // (Final|Native|Public) // @ game+0x1ee9f10
	void OnRep_SoundFireBurst(); // Function Solarland.SolarWeapon.OnRep_SoundFireBurst // (Final|Native|Public) // @ game+0x1ee9ef0
	void OnRep_SoundFireAutoCount(); // Function Solarland.SolarWeapon.OnRep_SoundFireAutoCount // (Final|Native|Public) // @ game+0x1ee9ed0
	void OnRep_SoundB9A04Skill(); // Function Solarland.SolarWeapon.OnRep_SoundB9A04Skill // (Final|Native|Public) // @ game+0x1ee9eb0
	void OnRep_OverloadStateChange(enum class EWeaponOverloadState PreviousState); // Function Solarland.SolarWeapon.OnRep_OverloadStateChange // (Final|Native|Public) // @ game+0x1ee9e30
	void OnRep_ImpactPosition(); // Function Solarland.SolarWeapon.OnRep_ImpactPosition // (Final|Native|Protected) // @ game+0x1ee9e10
	void OnRep_FireModes(); // Function Solarland.SolarWeapon.OnRep_FireModes // (Final|Native|Public) // @ game+0x1ee9df0
	void OnRep_FireChargingPhase(int32_t InOldFireChargingPhase); // Function Solarland.SolarWeapon.OnRep_FireChargingPhase // (Final|Native|Public) // @ game+0x1ee9d70
	void OnRep_ExtraAmmo(); // Function Solarland.SolarWeapon.OnRep_ExtraAmmo // (Final|Native|Public) // @ game+0x1ee9d50
	void OnRep_DisplayPreview(); // Function Solarland.SolarWeapon.OnRep_DisplayPreview // (Final|Native|Private) // @ game+0x1ee9d30
	void OnRep_CurrentMode(); // Function Solarland.SolarWeapon.OnRep_CurrentMode // (Final|Native|Protected) // @ game+0x1ee9d10
	void OnRep_ControlWeaponCharacterChanged(); // Function Solarland.SolarWeapon.OnRep_ControlWeaponCharacterChanged // (Final|Native|Protected) // @ game+0x1ee9cf0
	void OnRep_bInitFinishChanged(); // Function Solarland.SolarWeapon.OnRep_bInitFinishChanged // (Final|Native|Protected) // @ game+0x8ba190
	void OnPlayMuzzleEffect(int32_t ModeIdx, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.OnPlayMuzzleEffect // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ee9c20
	void OnOverrideWeaponConfigByTable(int32_t PrimaryAmmoSoundID, int32_t SecondaryAmmoSoundID); // Function Solarland.SolarWeapon.OnOverrideWeaponConfigByTable // (Final|Native|Public) // @ game+0x1ee9ae0
	void OnLoadInitAssetComplete(); // Function Solarland.SolarWeapon.OnLoadInitAssetComplete // (Native|Protected) // @ game+0x1257950
	void OnLoadCfgAssetsComplete(); // Function Solarland.SolarWeapon.OnLoadCfgAssetsComplete // (Native|Protected) // @ game+0x1257bd0
	void OnInternalUnControlled(); // Function Solarland.SolarWeapon.OnInternalUnControlled // (Native|Protected) // @ game+0x1259150
	void OnInternalControlled(struct ASolarCharacterBase* OwnerChar); // Function Solarland.SolarWeapon.OnInternalControlled // (Native|Protected) // @ game+0x1ee9a50
	void OnInstantLineShotHit(struct FHitResult& InHit, float DamageScale); // Function Solarland.SolarWeapon.OnInstantLineShotHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnInitFlowComplete(struct USolarWeaponState* Last); // Function Solarland.SolarWeapon.OnInitFlowComplete // (Native|Protected) // @ game+0x1ee99c0
	void OnGatlingRollChange(bool bIncrease); // Function Solarland.SolarWeapon.OnGatlingRollChange // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnFireChargeBurstCountChange(int32_t BurstSum); // Function Solarland.SolarWeapon.OnFireChargeBurstCountChange // (Native|Event|Public|BlueprintEvent) // @ game+0x1ee9930
	void OnBeamFinished(struct UParticleSystemComponent* PS); // Function Solarland.SolarWeapon.OnBeamFinished // (Final|Native|Protected) // @ game+0x1ee9560
	enum class EShootingOpt NextShootingPrimaryOption(); // Function Solarland.SolarWeapon.NextShootingPrimaryOption // (Final|Native|Public) // @ game+0x1ee9530
	void LuaStopSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStopSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x1ee9410
	void LuaStartSoundWithParameters(enum class EShootingSoundOpt Opt, int32_t idx, struct FPlaySoundParams& Params); // Function Solarland.SolarWeapon.LuaStartSoundWithParameters // (Final|Native|Protected|HasOutParms) // @ game+0x1ee92f0
	void LoadInitAsset(); // Function Solarland.SolarWeapon.LoadInitAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee92d0
	void LoadAllCfgAssets(); // Function Solarland.SolarWeapon.LoadAllCfgAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee92b0
	struct UAmmoConfig* K2_GetOverrideAmmoConfigBase(int32_t ModeIndex); // Function Solarland.SolarWeapon.K2_GetOverrideAmmoConfigBase // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ee9220
	struct USingleWeaponConfig* K2_GetCurrentConfig(); // Function Solarland.SolarWeapon.K2_GetCurrentConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee91f0
	bool IsVisible(); // Function Solarland.SolarWeapon.IsVisible // (Native|Public) // @ game+0x1ee91c0
	bool IsSummonWeapon(); // Function Solarland.SolarWeapon.IsSummonWeapon // (Final|Native|Public|Const) // @ game+0x1ee9190
	bool IsShowCoolDownWidget(); // Function Solarland.SolarWeapon.IsShowCoolDownWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ee9140
	bool IsShotAimEnemy(); // Function Solarland.SolarWeapon.IsShotAimEnemy // (Final|Native|Public|Const) // @ game+0x1ee9110
	bool IsShootingOptionSupport(int32_t idx); // Function Solarland.SolarWeapon.IsShootingOptionSupport // (Final|Native|Public) // @ game+0x1ee9080
	bool IsScopeOpen(); // Function Solarland.SolarWeapon.IsScopeOpen // (Native|Public|Const) // @ game+0x1ee9050
	bool IsOpenedScope(); // Function Solarland.SolarWeapon.IsOpenedScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee9020
	bool IsMultipleShootingPrimaryShooting(); // Function Solarland.SolarWeapon.IsMultipleShootingPrimaryShooting // (Final|Native|Public) // @ game+0x1ee8ff0
	bool IsHipFire(); // Function Solarland.SolarWeapon.IsHipFire // (Final|Native|Public|Const) // @ game+0x1ee8fc0
	bool IsEnergyID(int32_t BulletItemID); // Function Solarland.SolarWeapon.IsEnergyID // (Final|Native|Public|Const) // @ game+0x1ee8f30
	bool IsControlled(); // Function Solarland.SolarWeapon.IsControlled // (Final|Native|Public|Const) // @ game+0x1ee8ef0
	bool IsCanFire(); // Function Solarland.SolarWeapon.IsCanFire // (Final|Native|Public) // @ game+0x1ee8ec0
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* PS, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.SolarWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x1ee8d30
	struct UParticleSystemComponent* InternalPlayEffectAtLocation(struct UObject* WorldContext, struct UParticleSystem* PS, struct FVector& Location, struct FLocationEffectParam Param, bool bUseDistScale); // Function Solarland.SolarWeapon.InternalPlayEffectAtLocation // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1ee8b50
	void InternalClientPlayFiringEffects(int32_t ModeIdx, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.InternalClientPlayFiringEffects // (Native|Protected) // @ game+0x1ee8a80
	bool InSameTeam(); // Function Solarland.SolarWeapon.InSameTeam // (Native|Protected) // @ game+0x1ee8a50
	void InitSkin(); // Function Solarland.SolarWeapon.InitSkin // (Native|Public|BlueprintCallable) // @ game+0x1257730
	void InitLevel(); // Function Solarland.SolarWeapon.InitLevel // (Native|Public|BlueprintCallable) // @ game+0x1258470
	void InitConfigs(); // Function Solarland.SolarWeapon.InitConfigs // (Native|Public|BlueprintCallable) // @ game+0x1258f50
	bool ImmediatelyFire(int32_t idx, bool bEnable); // Function Solarland.SolarWeapon.ImmediatelyFire // (Final|Native|Public) // @ game+0x1ee8990
	bool HasLoadInitAsset(); // Function Solarland.SolarWeapon.HasLoadInitAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8970
	bool HasLoadAllCfgAssets(); // Function Solarland.SolarWeapon.HasLoadAllCfgAssets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8950
	bool HasInitSkin(); // Function Solarland.SolarWeapon.HasInitSkin // (Native|Public|BlueprintCallable) // @ game+0x1ee8920
	bool HasInitLevel(); // Function Solarland.SolarWeapon.HasInitLevel // (Native|Public|BlueprintCallable) // @ game+0x1ee88f0
	bool HasInitFinish(); // Function Solarland.SolarWeapon.HasInitFinish // (Final|Native|Public|Const) // @ game+0x1ee88c0
	bool HasInitConfigs(); // Function Solarland.SolarWeapon.HasInitConfigs // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8890
	void HandFireModeInput(enum class EWeaponFireModeType WeaponFireModeType, bool Press); // Function Solarland.SolarWeapon.HandFireModeInput // (Final|Native|Public) // @ game+0x1ee87c0
	enum class EWeaponType GetWeaponType(); // Function Solarland.SolarWeapon.GetWeaponType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8790
	struct FString GetWeaponTextType(); // Function Solarland.SolarWeapon.GetWeaponTextType // (Final|Native|Public) // @ game+0x1ee8710
	uint32_t GetWeaponNoticeID(struct FName& InNoticeType); // Function Solarland.SolarWeapon.GetWeaponNoticeID // (Final|Native|Public|HasOutParms) // @ game+0x1ee8670
	struct UWeaponNetComponent* GetWeaponNetComp(); // Function Solarland.SolarWeapon.GetWeaponNetComp // (Final|Native|Public) // @ game+0x1ee8650
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeapon.GetWeaponLevel // (Native|Public|Const) // @ game+0x1ee8620
	int32_t GetWeaponID(); // Function Solarland.SolarWeapon.GetWeaponID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee85d0
	struct UTexture2D* GetWeaponIcon(); // Function Solarland.SolarWeapon.GetWeaponIcon // (Final|Native|Public) // @ game+0x1ee85f0
	enum class ESolarWeaponBrand GetWeaponBrand(); // Function Solarland.SolarWeapon.GetWeaponBrand // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee85a0
	struct UAnimSequence* GetWeaponAnimSequence(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8280
	struct FWeaponAnimationInfo GetWeaponAnimationInfo(enum class ECharacterMontage InMontageType); // Function Solarland.SolarWeapon.GetWeaponAnimationInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee83b0
	struct FSlateBrush GetTriggerIcon(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetTriggerIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee8140
	int32_t GetSpareAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetSpareAmmo // (Native|Public|BlueprintCallable) // @ game+0x1ee80a0
	float GetSoundRTPCValue(); // Function Solarland.SolarWeapon.GetSoundRTPCValue // (Final|Native|Protected) // @ game+0x1ee8070
	int32_t GetSkinID(); // Function Solarland.SolarWeapon.GetSkinID // (Native|Public|Const) // @ game+0x1ee8040
	float GetShotGunSpreadSeed(); // Function Solarland.SolarWeapon.GetShotGunSpreadSeed // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ee8000
	struct FVector GetShotDir(bool NeedSpread); // Function Solarland.SolarWeapon.GetShotDir // (Native|Protected|HasDefaults|Const) // @ game+0x1ee7f50
	struct FVector GetShootingTraceStartLocation(int32_t FireModeIdx); // Function Solarland.SolarWeapon.GetShootingTraceStartLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee7ea0
	struct FString GetShootingPrimaryShootingOptionName(enum class EShootingOpt Opt); // Function Solarland.SolarWeapon.GetShootingPrimaryShootingOptionName // (Final|Native|Public) // @ game+0x1ee7dd0
	float GetSecondModeValue(); // Function Solarland.SolarWeapon.GetSecondModeValue // (Final|Native|Public|Const) // @ game+0x1ee7da0
	int32_t GetReservedAmmo(int32_t idx); // Function Solarland.SolarWeapon.GetReservedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee7d10
	float GetReloadProgress(); // Function Solarland.SolarWeapon.GetReloadProgress // (Final|Native|Public) // @ game+0x1ee7ce0
	struct UWeaponRecoilComponent* GetRecoilComponent(); // Function Solarland.SolarWeapon.GetRecoilComponent // (Final|Native|Public) // @ game+0x1d4f680
	int32_t GetPrimaryShootingOptionIndex(); // Function Solarland.SolarWeapon.GetPrimaryShootingOptionIndex // (Final|Native|Public) // @ game+0x1ee7cb0
	float GetPostFireDuration(int32_t idx); // Function Solarland.SolarWeapon.GetPostFireDuration // (Final|Native|Public) // @ game+0x1ee7c20
	struct UWeaponPartsComponent* GetPartsComponent(); // Function Solarland.SolarWeapon.GetPartsComponent // (Native|Public|Const) // @ game+0x1ee7bf0
	float GetOverloadPercent(); // Function Solarland.SolarWeapon.GetOverloadPercent // (Final|Native|Public) // @ game+0x1ee7bc0
	float GetOverloadMaxValue(); // Function Solarland.SolarWeapon.GetOverloadMaxValue // (Native|Protected|BlueprintCallable) // @ game+0x1ee7b80
	struct ASolarWeaponProjectileSpline* GetOrCreateWeaponProjectileSpline(); // Function Solarland.SolarWeapon.GetOrCreateWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1ee7b50
	int32_t GetMaxAmmo(int32_t idx, bool bWithExtraAmmoByChaAbility); // Function Solarland.SolarWeapon.GetMaxAmmo // (Native|Public|BlueprintCallable) // @ game+0x1ee7a80
	float GetLastFireTime(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetLastFireTime // (Final|Native|Public|Const) // @ game+0x1ee79f0
	bool GetIsVehicleMounted(); // Function Solarland.SolarWeapon.GetIsVehicleMounted // (Final|Native|Public) // @ game+0x1ee79c0
	bool GetIsSupportSecondaryFire(); // Function Solarland.SolarWeapon.GetIsSupportSecondaryFire // (Final|Native|Public) // @ game+0x1ee7990
	bool GetIsSupportAutoFire(); // Function Solarland.SolarWeapon.GetIsSupportAutoFire // (Final|Native|Public) // @ game+0x1ee7960
	bool GetIsSupportAssistAim(); // Function Solarland.SolarWeapon.GetIsSupportAssistAim // (Final|Native|Public) // @ game+0x1ee7930
	bool GetIsQuickScope(); // Function Solarland.SolarWeapon.GetIsQuickScope // (Native|Public) // @ game+0x1cb1780
	bool GetIsInitialized(); // Function Solarland.SolarWeapon.GetIsInitialized // (Final|Native|Public) // @ game+0x1ee7910
	bool GetIsGatlingRoll(); // Function Solarland.SolarWeapon.GetIsGatlingRoll // (Final|Native|Public|Const) // @ game+0x1ee78e0
	bool GetIsCoolDown(int32_t Mode); // Function Solarland.SolarWeapon.GetIsCoolDown // (Final|Native|Public) // @ game+0x1ee7850
	struct UGlobalWeaponConfig* GetGlobalWeaponConfig(); // Function Solarland.SolarWeapon.GetGlobalWeaponConfig // (Final|Native|Public|Const) // @ game+0x1d4f8d0
	int32_t GetFireModeNameLocalizationID(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetFireModeNameLocalizationID // (Final|Native|Public) // @ game+0x1ee77c0
	float GetFireIntervalProgress(int32_t idx); // Function Solarland.SolarWeapon.GetFireIntervalProgress // (Final|Native|Public) // @ game+0x1ee7730
	float GetFireInterval(int32_t idx); // Function Solarland.SolarWeapon.GetFireInterval // (Native|Public) // @ game+0x1ee7690
	void GetFireChargeInfo(int32_t& OutChargingPhase, float& OutChargingTime, float& OutRate, struct FFireChargeData& OutChargeData); // Function Solarland.SolarWeapon.GetFireChargeInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ee7450
	float GetFireCD(int32_t idx); // Function Solarland.SolarWeapon.GetFireCD // (Final|Native|Public) // @ game+0x1ee73c0
	float GetExtraPointsPercent(); // Function Solarland.SolarWeapon.GetExtraPointsPercent // (Final|Native|Public|Const) // @ game+0x1ee73a0
	int32_t GetExtraPoints(); // Function Solarland.SolarWeapon.GetExtraPoints // (Final|Native|Public|Const) // @ game+0x1ee7380
	struct UParticleSystem* GetDedicatedKillEffect(); // Function Solarland.SolarWeapon.GetDedicatedKillEffect // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee7350
	struct FSoftObjectPath GetDedicatedDissolvedDeathFXPath(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathFXPath // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee72c0
	struct UActorEffect* GetDedicatedDissolvedDeathActorEffectClass(); // Function Solarland.SolarWeapon.GetDedicatedDissolvedDeathActorEffectClass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee7280
	struct FWeaponDebugFlag GetDebugFlag(); // Function Solarland.SolarWeapon.GetDebugFlag // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ee7240
	int32_t GetCurScopeType(); // Function Solarland.SolarWeapon.GetCurScopeType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee6cf0
	enum class EShootingOpt GetCurrentShootingPrimaryOption(); // Function Solarland.SolarWeapon.GetCurrentShootingPrimaryOption // (Final|Native|Public) // @ game+0x1ee7210
	enum class EWeaponScopeType GetCurrentScopeType(); // Function Solarland.SolarWeapon.GetCurrentScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee71e0
	struct FFireChargeData GetCurrentFireChargeData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee6f70
	struct UAmmoConfig* GetCurrentFireChargeAmmoData(struct UAmmoConfig* InAmmo); // Function Solarland.SolarWeapon.GetCurrentFireChargeAmmoData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee6ee0
	int32_t GetCurrentClipAmmo(int32_t InFireModeType); // Function Solarland.SolarWeapon.GetCurrentClipAmmo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee6e40
	bool GetCurrentChargeModePercent(int32_t InFireModeType, int32_t& OutChargeMode, float& OutChargePercent); // Function Solarland.SolarWeapon.GetCurrentChargeModePercent // (Final|Native|Public|HasOutParms) // @ game+0x1ee6d20
	int32_t GetCostPreAttack(int32_t idx); // Function Solarland.SolarWeapon.GetCostPreAttack // (Final|Native|Public|Const) // @ game+0x1ee6c60
	float GetCoolDownPercent(); // Function Solarland.SolarWeapon.GetCoolDownPercent // (Final|Native|Public) // @ game+0x1ee6c30
	struct ASolarCharacterBase* GetControlWeaponCharacter(); // Function Solarland.SolarWeapon.GetControlWeaponCharacter // (Final|Native|Public|Const) // @ game+0x1ee6c00
	float GetChargingPercent(int32_t idx); // Function Solarland.SolarWeapon.GetChargingPercent // (Final|Native|Public) // @ game+0x1ee6b70
	float GetBurstInterval(int32_t idx); // Function Solarland.SolarWeapon.GetBurstInterval // (Final|Native|Public) // @ game+0x1ee6ae0
	float GetBurstInternalInterval(int32_t idx); // Function Solarland.SolarWeapon.GetBurstInternalInterval // (Final|Native|Public) // @ game+0x1ee6a50
	void GetBulletHitEffectRot(struct FHitResult& HitResult, struct ASolarBullet* Bullet, struct FRotator& TargetPos, bool bIsHittedShield); // Function Solarland.SolarWeapon.GetBulletHitEffectRot // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1ee68b0
	void GetBulletHitEffectPos(struct FHitResult& HitResult, struct FVector& TargetRot, float Offset); // Function Solarland.SolarWeapon.GetBulletHitEffectPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1ee6730
	struct ASolarBullet* GetBulletDefaultObject(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletDefaultObject // (Final|Native|Public) // @ game+0x1ee6670
	struct ASolarBullet* GetBulletClass(int32_t idx, struct UAmmoConfig* AmmoCfg); // Function Solarland.SolarWeapon.GetBulletClass // (Final|Native|Public) // @ game+0x1ee65a0
	float GetBotAIDamageFactor(); // Function Solarland.SolarWeapon.GetBotAIDamageFactor // (Final|Native|Protected) // @ game+0x1ee6570
	enum class ETriggerType GetAmmoTriggerType(int32_t fireModeType); // Function Solarland.SolarWeapon.GetAmmoTriggerType // (Final|Native|Public|Const) // @ game+0x1ee64e0
	int32_t GetAmmoItemID(int32_t idx); // Function Solarland.SolarWeapon.GetAmmoItemID // (Final|Native|Public) // @ game+0x1ee6450
	bool GetAllInitAssetPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllInitAssetPath // (Native|Protected|HasOutParms) // @ game+0x1ee6370
	bool GetAllCfgAssetsPath(struct TArray<struct FSoftObjectPath>& PathArray); // Function Solarland.SolarWeapon.GetAllCfgAssetsPath // (Native|Protected|HasOutParms) // @ game+0x1ee6290
	void GetAimStartEnd(struct UAmmoConfig* InAmmo, struct FVector& OutStart, struct FVector& OutEnd, struct AActor*& OutTargetActor, bool NeedSpread); // Function Solarland.SolarWeapon.GetAimStartEnd // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1ee60c0
	bool FireVerify_Location(int32_t& FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float& ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Location // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x1ee5eb0
	bool FireVerify_EffectRange(int32_t& FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float& ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_EffectRange // (Final|Native|Protected|HasOutParms|HasDefaults|Const) // @ game+0x1ee5ca0
	bool FireVerify_Block(int32_t& FireMode, struct FVector& StartLocation, struct FVector& WeaponLocation, float& ServerTime, struct FBulletHitDetailData& HitDetailData); // Function Solarland.SolarWeapon.FireVerify_Block // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1ee5a90
	bool FireValidate(int32_t idx, float InLastShootTime); // Function Solarland.SolarWeapon.FireValidate // (Final|Native|Protected) // @ game+0x1ee59c0
	enum class ECharacterMontage FindMontageKeyFromWeaponAnim(struct UAnimSequence* InAnimation); // Function Solarland.SolarWeapon.FindMontageKeyFromWeaponAnim // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee5750
	void ExitBoltState(); // Function Solarland.SolarWeapon.ExitBoltState // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee5730
	void EnterOverloadState(); // Function Solarland.SolarWeapon.EnterOverloadState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void DestroyWeaponProjectileSpline(); // Function Solarland.SolarWeapon.DestroyWeaponProjectileSpline // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ee5710
	void ClientVirtualBulletShot(struct FSolarVirtualBulletSpawnParameter InParameter, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ClientVirtualBulletShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee5620
	void ClientUpdateLaserInfo(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ClientUpdateLaserInfo // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x1ee5560
	void ClientSkillRelease(bool InbSuccess, uint32_t InResultID); // Function Solarland.SolarWeapon.ClientSkillRelease // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ee5490
	void ClientPlayHitEffect(struct FMultiHitResult InMultiHitResult); // Function Solarland.SolarWeapon.ClientPlayHitEffect // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1ee53c0
	void ClientPlayFiringEffects(int32_t ModeIdx, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ClientPlayFiringEffects // (Net|Native|Event|NetMulticast|Protected|NetClient) // @ game+0x1ee52f0
	void ClientPlayAnimWithNetMulticast(enum class ECharacterMontage InMontageType, float ExpectAnimLength); // Function Solarland.SolarWeapon.ClientPlayAnimWithNetMulticast // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee5230
	void ClientNotifyUpdateReservedAmmoForce(int32_t InFireModeType, int32_t InAmount); // Function Solarland.SolarWeapon.ClientNotifyUpdateReservedAmmoForce // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1ee5170
	void ClientLaserHit(struct TArray<struct FHitResult> Hits, float InActivateTime); // Function Solarland.SolarWeapon.ClientLaserHit // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee5090
	void ClientInterruptLaser(); // Function Solarland.SolarWeapon.ClientInterruptLaser // (Net|Native|Event|NetMulticast|Public) // @ game+0x1257d90
	void ClientInstantLineShot(char ModeIndex, struct TArray<struct FHitResult> HitResults, struct FVector_NetQuantize End, float DamageScale, bool bMuzzleBlocked); // Function Solarland.SolarWeapon.ClientInstantLineShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee4ef0
	void ClientFireChargeShoot(struct UAmmoConfig* InAmmo, int8_t InFireChargingPhase, int32_t InFireChargingTime); // Function Solarland.SolarWeapon.ClientFireChargeShoot // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee4df0
	void ClientCanisterShot(char ModeIndex, struct FVector_NetQuantize Start, struct TArray<struct FWeaponShotHitResult> ValidHits, bool bMuzzleBlocked, struct FVector_NetQuantize Target); // Function Solarland.SolarWeapon.ClientCanisterShot // (Net|Native|Event|NetMulticast|Public) // @ game+0x1ee4c40
	void ClientActivateLaserShot(struct FVector InTarget, struct AActor* InTargetActor); // Function Solarland.SolarWeapon.ClientActivateLaserShot // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x1ee4b80
	void ClearFireHitVerify(); // Function Solarland.SolarWeapon.ClearFireHitVerify // (Final|Native|Protected) // @ game+0x1ee4b60
	bool CheckOpenParticleOptimization(int32_t Bias); // Function Solarland.SolarWeapon.CheckOpenParticleOptimization // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee4ad0
	bool CanOverload(); // Function Solarland.SolarWeapon.CanOverload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ee4ab0
	bool CanCauseTeamDamage(); // Function Solarland.SolarWeapon.CanCauseTeamDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x1ee4a80
	float CalcScale(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcScale // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1ee4970
	int32_t CalcCost(struct FFireMode& Mode); // Function Solarland.SolarWeapon.CalcCost // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1ee4860
	void AsyncCheckShotAimHitResult(); // Function Solarland.SolarWeapon.AsyncCheckShotAimHitResult // (Final|Native|Public) // @ game+0x1ee4840
	void AddOrRemoveGameplayTagsToCharacter(bool InbAdd, struct FGameplayTagContainer& InTags); // Function Solarland.SolarWeapon.AddOrRemoveGameplayTagsToCharacter // (Final|Native|Public|HasOutParms) // @ game+0x1ee4730
	void AddOrRemoveBlockCharacterSprintTag(bool InbAdd); // Function Solarland.SolarWeapon.AddOrRemoveBlockCharacterSprintTag // (Final|Native|Public) // @ game+0x1ee46a0
	void AddExtraPoints(enum class ESolarHitType InHitType, int32_t InDamage); // Function Solarland.SolarWeapon.AddExtraPoints // (Final|Native|Public) // @ game+0x1ee45e0
};

// Class Solarland.SolarPlayerWeapon
// Size: 0xf50 (Inherited: 0xc40)
struct ASolarPlayerWeapon : ASolarWeapon {
	char pad_C40[0xd8]; // 0xc40(0xd8)
	float SpawnOffset; // 0xd18(0x04)
	bool bIsAutoDrop; // 0xd1c(0x01)
	char pad_D1D[0x2b]; // 0xd1d(0x2b)
	struct FSolarItemData ItemData; // 0xd48(0xb0)
	struct TArray<char> MarkedTeamIdList; // 0xdf8(0x10)
	char bUseSceneActorOptimization; // 0xe08(0x01)
	char pad_E09[0x7]; // 0xe09(0x07)
	struct USphereComponent* SphereComponent; // 0xe10(0x08)
	struct FVector DroppedLocation; // 0xe18(0x0c)
	char pad_E24[0x4]; // 0xe24(0x04)
	struct ASolarCharacterBase* WeaponOwner; // 0xe28(0x08)
	struct UWeaponAnimationComponent* WeaponAnimationComponent; // 0xe30(0x08)
	enum class EItemDiscardState WeaponCurrentDiscardState; // 0xe38(0x01)
	enum class EItemState WeaponCurrentState; // 0xe39(0x01)
	char pad_E3A[0x6]; // 0xe3a(0x06)
	struct TArray<struct FSoftObjectPath> DiscardMatPath; // 0xe40(0x10)
	struct FSoftObjectPath HoldMeshMaterialPath; // 0xe50(0x18)
	struct UMaterialInterface* OutlineBaseMat; // 0xe68(0x08)
	char pad_E70[0x1]; // 0xe70(0x01)
	bool bNew; // 0xe71(0x01)
	char pad_E72[0x6]; // 0xe72(0x06)
	struct TArray<struct UParticleSystemComponent*> SkinExtraPSCArray; // 0xe78(0x10)
	struct UParticleSystemComponent* SkinSpecialEffect; // 0xe88(0x08)
	char pad_E90[0x10]; // 0xe90(0x10)
	float LifespanAfterAutoDrop; // 0xea0(0x04)
	char pad_EA4[0x4]; // 0xea4(0x04)
	struct UParticleSystem* SkinDedicatedKillEffect; // 0xea8(0x08)
	struct UParticleSystem* SkinDedicatedSpecialEffect; // 0xeb0(0x08)
	char pad_EB8[0x20]; // 0xeb8(0x20)
	bool bUsed; // 0xed8(0x01)
	char pad_ED9[0x77]; // 0xed9(0x77)

	void YieldCmdExec(); // Function Solarland.SolarPlayerWeapon.YieldCmdExec // (Final|Native|Protected) // @ game+0x1dfbe40
	void UpdateCharacterState(enum class ECharacterStateForWeapon CharacterState, bool bIsOnGround, bool bResetState); // Function Solarland.SolarPlayerWeapon.UpdateCharacterState // (Final|Native|Public) // @ game+0x1dfbb90
	void UpdateCharacterPosture(bool IsCrouch); // Function Solarland.SolarPlayerWeapon.UpdateCharacterPosture // (Final|Native|Public) // @ game+0x1dfbb00
	void UpdateAppearanceCmdExec(); // Function Solarland.SolarPlayerWeapon.UpdateAppearanceCmdExec // (Final|Native|Protected) // @ game+0x1dfbae0
	void SwitchPossessMaterial(); // Function Solarland.SolarPlayerWeapon.SwitchPossessMaterial // (Final|Native|Protected) // @ game+0x1dfbac0
	void SwitchDiscardMaterial(); // Function Solarland.SolarPlayerWeapon.SwitchDiscardMaterial // (Final|Native|Protected) // @ game+0x1dfbaa0
	void SetWeaponOutlineVisibility(bool bInVisible, bool bInTryForceSet); // Function Solarland.SolarPlayerWeapon.SetWeaponOutlineVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x1dfb790
	void SetSkinID(int32_t NewSkinID); // Function Solarland.SolarPlayerWeapon.SetSkinID // (Native|Public) // @ game+0x1dfb700
	void SetOpenScopeOnVehicle(bool InbOpenScope); // Function Solarland.SolarPlayerWeapon.SetOpenScopeOnVehicle // (Final|Native|Public) // @ game+0x1dfb680
	void SetDedicatedSkinEffect(struct UWeaponSkinData* InSkinData); // Function Solarland.SolarPlayerWeapon.SetDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfb600
	void ResumeCmdExec(); // Function Solarland.SolarPlayerWeapon.ResumeCmdExec // (Final|Native|Protected) // @ game+0x1dfb560
	void ResetSkinID(); // Function Solarland.SolarPlayerWeapon.ResetSkinID // (Native|Public) // @ game+0x1257ef0
	void ResetMaterial(); // Function Solarland.SolarPlayerWeapon.ResetMaterial // (Final|Native|Protected) // @ game+0x1dfb540
	void RequestUnlimitedAmmo(bool InEnable); // Function Solarland.SolarPlayerWeapon.RequestUnlimitedAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfb4b0
	void PostUpdateAppearance(); // Function Solarland.SolarPlayerWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponSkinRefresh(bool bValid, int32_t SkinId); // Function Solarland.SolarPlayerWeapon.OnWeaponSkinRefresh // (Final|Native|Protected) // @ game+0x1dfb050
	void OnWeaponAppreanceChanged(bool bPart, enum class EWeaponPartType PartType); // Function Solarland.SolarPlayerWeapon.OnWeaponAppreanceChanged // (Native|Protected) // @ game+0x1dfaf80
	void OnSetWeaponSkinMesh(struct USkeletalMesh* InMesh, struct UObject* InAnimClass); // Function Solarland.SolarPlayerWeapon.OnSetWeaponSkinMesh // (Final|Native|Public) // @ game+0x1dfaec0
	void OnRep_WeaponCurrentStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentStateChanged // (Final|Native|Protected) // @ game+0x1dfaea0
	void OnRep_WeaponCurrentDiscardStateChanged(); // Function Solarland.SolarPlayerWeapon.OnRep_WeaponCurrentDiscardStateChanged // (Final|Native|Protected) // @ game+0x1dfae80
	void OnClientMeshLodChanged(int32_t LOD); // Function Solarland.SolarPlayerWeapon.OnClientMeshLodChanged // (Native|Protected) // @ game+0x1dfad20
	void NotifyThisItemWasPickedUp(); // Function Solarland.SolarPlayerWeapon.NotifyThisItemWasPickedUp // (Final|Native|Protected) // @ game+0x1dfacc0
	void MarkDirty(); // Function Solarland.SolarPlayerWeapon.MarkDirty // (Final|Native|Public) // @ game+0x1dfaca0
	void K2_SwitchDrawDistance(bool Hold); // Function Solarland.SolarPlayerWeapon.K2_SwitchDrawDistance // (Native|Event|Protected|BlueprintEvent) // @ game+0x1dfac10
	void K2_OnHold(bool bLocal); // Function Solarland.SolarPlayerWeapon.K2_OnHold // (Native|Event|Public|BlueprintEvent) // @ game+0x1dfab80
	void K2_OnDrop(); // Function Solarland.SolarPlayerWeapon.K2_OnDrop // (Native|Event|Public|BlueprintEvent) // @ game+0x1258730
	bool IsOpenedScopeOnVehicle(); // Function Solarland.SolarPlayerWeapon.IsOpenedScopeOnVehicle // (Final|Native|Public|Const) // @ game+0x1dfab60
	bool IsItemWeapon(); // Function Solarland.SolarPlayerWeapon.IsItemWeapon // (Native|Public) // @ game+0x1dfab30
	bool IsExistPart(enum class EWeaponPartType& PartType); // Function Solarland.SolarPlayerWeapon.IsExistPart // (Native|Public|HasOutParms|Const) // @ game+0x1dfaa80
	void Hold(bool bInHold); // Function Solarland.SolarPlayerWeapon.Hold // (Native|Public) // @ game+0x1dfa8f0
	bool HasScope(); // Function Solarland.SolarPlayerWeapon.HasScope // (Native|Public) // @ game+0x1dfa8c0
	float GetWeaponSilencerMagnitude(); // Function Solarland.SolarPlayerWeapon.GetWeaponSilencerMagnitude // (Final|Native|Public) // @ game+0x1dfa890
	struct UPlayerWeaponRecoilComponent* GetRecoilComp(); // Function Solarland.SolarPlayerWeapon.GetRecoilComp // (Final|Native|Protected) // @ game+0x1dfa800
	int32_t GetQualityByLevel(int32_t Level); // Function Solarland.SolarPlayerWeapon.GetQualityByLevel // (Final|Native|Public) // @ game+0x1dfa770
	int32_t GetQuality(); // Function Solarland.SolarPlayerWeapon.GetQuality // (Native|Public) // @ game+0x1dfa730
	enum class EItemState GetItemCurrentState(); // Function Solarland.SolarPlayerWeapon.GetItemCurrentState // (Native|Public|BlueprintCallable) // @ game+0x1dfa6f0
	bool GetIsHolded(); // Function Solarland.SolarPlayerWeapon.GetIsHolded // (Final|Native|Public) // @ game+0x1dfa6d0
	struct FVector GetFPPLocation(); // Function Solarland.SolarPlayerWeapon.GetFPPLocation // (Native|Public|HasDefaults|Const) // @ game+0x1dfa660
	float GetFire2AnimPlayRate(); // Function Solarland.SolarPlayerWeapon.GetFire2AnimPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1dfa6a0
	float GetDistanceToEyeWhenScope(); // Function Solarland.SolarPlayerWeapon.GetDistanceToEyeWhenScope // (Native|Public) // @ game+0x1dfa620
	struct FVector GetCurrentScopeAimCenterPoint(); // Function Solarland.SolarPlayerWeapon.GetCurrentScopeAimCenterPoint // (Native|Public|HasDefaults) // @ game+0x1dfa540
	struct UWeaponPartClipComp* GetCurrentClip(); // Function Solarland.SolarPlayerWeapon.GetCurrentClip // (Native|Public) // @ game+0x1dfa510
	void EnqueueUpdateAppearanceCmd(enum class EWeaponRVCmd Cmd, struct FString Params); // Function Solarland.SolarPlayerWeapon.EnqueueUpdateAppearanceCmd // (Final|Native|Protected) // @ game+0x1dfa410
	void CRecieveProto_RefreshSkinAction(bool bAutonomous, struct FString paramters); // Function Solarland.SolarPlayerWeapon.CRecieveProto_RefreshSkinAction // (Final|Native|Public) // @ game+0x1dfa1c0
	void ClearSkinExtraPSC(); // Function Solarland.SolarPlayerWeapon.ClearSkinExtraPSC // (Final|Native|Protected) // @ game+0x1dfa3f0
	void ClearDedicatedSkinEffect(); // Function Solarland.SolarPlayerWeapon.ClearDedicatedSkinEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfa3d0
};

// Class Solarland.SolarPlayerItemWeapon
// Size: 0xf60 (Inherited: 0xf50)
struct ASolarPlayerItemWeapon : ASolarPlayerWeapon {
	struct ASolarCharacter* CurrentAbilityOwner; // 0xf48(0x08)
	char pad_F58[0x8]; // 0xf58(0x08)
};

// Class Solarland.SolarPlayerNormalWeapon
// Size: 0xf50 (Inherited: 0xf50)
struct ASolarPlayerNormalWeapon : ASolarPlayerWeapon {
	struct UWeaponPartsComponent* WeaponPartsComponent; // 0xf48(0x08)

	bool QueryCanEquipPart(enum class EWeaponPartType Type, int32_t InWeaponID); // Function Solarland.SolarPlayerNormalWeapon.QueryCanEquipPart // (Final|Native|Public) // @ game+0x1df6c60
	void PlayUpgradeEffect(); // Function Solarland.SolarPlayerNormalWeapon.PlayUpgradeEffect // (Final|Native|Protected) // @ game+0x8ba190
	void InitLvAndPartsFromTable(); // Function Solarland.SolarPlayerNormalWeapon.InitLvAndPartsFromTable // (Final|Native|Protected) // @ game+0x1df5880
	int32_t GetPartIDByTypeAndLevel(int32_t InWeaponID, enum class EWeaponPartType Type, int32_t Level); // Function Solarland.SolarPlayerNormalWeapon.GetPartIDByTypeAndLevel // (Final|Native|Protected) // @ game+0x1df4e50
	bool GetEquippedScopeTypeAndLevel(enum class EWeaponPartType& Type, int32_t& Level); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedScopeTypeAndLevel // (Native|Public|HasOutParms) // @ game+0x1df49b0
	int32_t GetEquippedPartLevel(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.GetEquippedPartLevel // (Native|Public) // @ game+0x1df4920
	int32_t GetDefaultPartIDByType(int32_t InWeaponID, enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.GetDefaultPartIDByType // (Final|Native|Protected) // @ game+0x1df4830
	void GameStatisticsWeaponAddExp(float newExp, float AddExp, int32_t OldLevel, int32_t NewLevel, int32_t Reason); // Function Solarland.SolarPlayerNormalWeapon.GameStatisticsWeaponAddExp // (Final|Native|Protected) // @ game+0x1df4430
	bool CanEquipPart(enum class EWeaponPartType Type); // Function Solarland.SolarPlayerNormalWeapon.CanEquipPart // (Native|Public) // @ game+0x1df3df0
};

// Class Solarland.SolarPlayerSensitivitys
// Size: 0x70 (Inherited: 0x28)
struct USolarPlayerSensitivitys : UObject {
	char pad_28[0x48]; // 0x28(0x48)

	void InitPlayerSensitivity(); // Function Solarland.SolarPlayerSensitivitys.InitPlayerSensitivity // (Final|Native|Public|BlueprintCallable) // @ game+0x1df58a0
};

// Class Solarland.SolarPlayerStart
// Size: 0x2d0 (Inherited: 0x258)
struct ASolarPlayerStart : APlayerStart {
	char pad_258[0x8]; // 0x258(0x08)
	float Distance; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct FString Side; // 0x268(0x10)
	struct FString Job; // 0x278(0x10)
	struct FString ElementID; // 0x288(0x10)
	enum class ESGameMode_ElementType Type; // 0x298(0x01)
	enum class EElementStateType State; // 0x299(0x01)
	enum class EElementVisibilityType Visibility; // 0x29a(0x01)
	char pad_29B[0x1]; // 0x29b(0x01)
	struct FName ElementTypeName; // 0x29c(0x08)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct FString GroupKey; // 0x2a8(0x10)
	struct TArray<struct FVector> PlayerLocations; // 0x2b8(0x10)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetElementVisibility(enum class EElementVisibilityType NewType); // Function Solarland.SolarPlayerStart.SetElementVisibility // (Native|Public|BlueprintCallable) // @ game+0x1df7100
	enum class EElementStateType SetElementState(enum class EElementStateType NewState); // Function Solarland.SolarPlayerStart.SetElementState // (Native|Public|BlueprintCallable) // @ game+0x1cb6c60
	void OnElementVisibilityChanged(enum class EElementVisibilityType CurrentVisibility); // Function Solarland.SolarPlayerStart.OnElementVisibilityChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnElementStateChanged(enum class EElementStateType CurrentState); // Function Solarland.SolarPlayerStart.OnElementStateChanged // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarPoolActorInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolActorInterface : UInterface {
};

// Class Solarland.SolarPoolObjectInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarPoolObjectInterface : UInterface {

	void OnPreDestroy(); // Function Solarland.SolarPoolObjectInterface.OnPreDestroy // (Native|Event|Public|BlueprintEvent) // @ game+0x1dfae60
	void OnDeactivated(); // Function Solarland.SolarPoolObjectInterface.OnDeactivated // (Native|Event|Public|BlueprintEvent) // @ game+0xb8cbf0
	void OnActivated(); // Function Solarland.SolarPoolObjectInterface.OnActivated // (Native|Event|Public|BlueprintEvent) // @ game+0x1dface0
	int32_t GetDefaultPoolLimit(struct FName Tag); // Function Solarland.SolarPoolObjectInterface.GetDefaultPoolLimit // (Native|Event|Public|BlueprintEvent) // @ game+0x1dfa580
};

// Class Solarland.SolarPopPanelManager
// Size: 0x38 (Inherited: 0x30)
struct USolarPopPanelManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarPreloadAssetCollection
// Size: 0x50 (Inherited: 0x30)
struct USolarPreloadAssetCollection : UPrimaryDataAsset {
	struct TArray<struct UObject*> PreloadRes; // 0x30(0x10)
	struct TArray<struct UObject*> PreloadClass; // 0x40(0x10)
};

// Class Solarland.SolarPreviewComponent
// Size: 0x150 (Inherited: 0xb0)
struct USolarPreviewComponent : UActorComponent {
	char pad_B0[0xa0]; // 0xb0(0xa0)

	bool RequestReplacePreviewMesh(struct UMeshComponent* InMeshComponent, struct FString InPreviewMeshPath); // Function Solarland.SolarPreviewComponent.RequestReplacePreviewMesh // (Native|Public|BlueprintCallable) // @ game+0x1dfb3c0
	bool RequestReplacePreviewMaterial(struct UMeshComponent* InMeshComponent, struct FString InPreviewMaterialPath); // Function Solarland.SolarPreviewComponent.RequestReplacePreviewMaterial // (Native|Public|BlueprintCallable) // @ game+0x1dfb2d0
	bool RequestDisplayPreviewMesh(struct UMeshComponent* InMeshComponent, struct FString InPreviewMeshPath, struct FString InPreviewMaterialPath, struct FTransform& InPreviewRelativeTransform); // Function Solarland.SolarPreviewComponent.RequestDisplayPreviewMesh // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dfb110
};

// Class Solarland.SolarPreviewDetectionComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarPreviewDetectionComponent : UActorComponent {
	struct FSoftObjectPath DetectionConfigPath; // 0xb0(0x18)

	bool IsAllowPreview(struct FVector& InLocation, struct FVector& InNormal); // Function Solarland.SolarPreviewDetectionComponent.IsAllowPreview // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1dfa980
	bool CheckIsPreviewValid(struct FSolarSummonData& InSummonData, bool InbAccept); // Function Solarland.SolarPreviewDetectionComponent.CheckIsPreviewValid // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfa2b0
};

// Class Solarland.SolarPreviewDetectionConfig
// Size: 0xb0 (Inherited: 0x30)
struct USolarPreviewDetectionConfig : UDataAsset {
	struct FSolarPreviewMeshData PreviewMeshData; // 0x30(0x80)
};

// Class Solarland.SolarPrimaryAssetDirectoryLabel
// Size: 0x60 (Inherited: 0x30)
struct USolarPrimaryAssetDirectoryLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct FDirectoryPath> ExplicitDirectories; // 0x40(0x10)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x50(0x10)
};

// Class Solarland.SolarProgressiveInteractButton
// Size: 0x3c0 (Inherited: 0x340)
struct USolarProgressiveInteractButton : USolarUserWidget {
	struct FMulticastInlineDelegate OnCompleteDelegate; // 0x340(0x10)
	struct FMulticastInlineDelegate OnCancelDelegate; // 0x350(0x10)
	struct FMulticastInlineDelegate OnStartInteract; // 0x360(0x10)
	char pad_370[0x20]; // 0x370(0x20)
	struct UGaugeImage* Image_GameProgressBar; // 0x390(0x08)
	struct UTextBlock* Text_GameProgressTime; // 0x398(0x08)
	struct UButton* BTN_GameProgressCancel; // 0x3a0(0x08)
	struct UTextBlock* Text_GameProgressTips; // 0x3a8(0x08)
	struct UHorizontalBox* HorizontalBox_Cancel; // 0x3b0(0x08)
	struct UHUDPassiveHeadWidget* Panel_PassiveBuff; // 0x3b8(0x08)

	void UpdateGameProgressTipsText(int32_t InTextId); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressTipsText // (Final|Native|Protected) // @ game+0x1dfbdc0
	void UpdateGameProgressText(); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressText // (Final|Native|Protected) // @ game+0x1dfbda0
	void UpdateGameProgressBarPercent(float InPercent); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgressBarPercent // (Final|Native|Protected) // @ game+0x1dfbd20
	void UpdateGameProgress(float InAddition); // Function Solarland.SolarProgressiveInteractButton.UpdateGameProgress // (Final|Native|Protected) // @ game+0x1dfbca0
	void TryCancelInteraction(); // Function Solarland.SolarProgressiveInteractButton.TryCancelInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfad00
	void StopGameProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopGameProgress // (Final|Native|Protected) // @ game+0x1dfba20
	void StopCountDownProgress(int32_t InActionID); // Function Solarland.SolarProgressiveInteractButton.StopCountDownProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfb9a0
	void StartCountDownProgress(struct FCountDownInfo& InCountInfo); // Function Solarland.SolarProgressiveInteractButton.StartCountDownProgress // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1dfb860
	void SimpleDynamicMulticastDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarProgressiveInteractButton.SimpleDynamicMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void ShowPassiveBuff(int32_t CharacterId, int32_t LocalTextId); // Function Solarland.SolarProgressiveInteractButton.ShowPassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToPreInteract(); // Function Solarland.SolarProgressiveInteractButton.RefreshToPreInteract // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToNonCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToNonCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshToCancellableInteracting(); // Function Solarland.SolarProgressiveInteractButton.RefreshToCancellableInteracting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnSteamCancelCountDown(); // Function Solarland.SolarProgressiveInteractButton.OnSteamCancelCountDown // (Final|Native|Protected) // @ game+0x8ba190
	void OnParentVisibilityChanged(bool bVisible); // Function Solarland.SolarProgressiveInteractButton.OnParentVisibilityChanged // (Final|Native|Public) // @ game+0x1dfadd0
	void OnCompleteInternal(); // Function Solarland.SolarProgressiveInteractButton.OnCompleteInternal // (Final|Native|Protected) // @ game+0x1dfadb0
	void OnCancelButtonClicked(); // Function Solarland.SolarProgressiveInteractButton.OnCancelButtonClicked // (Final|Native|Protected) // @ game+0x1dfad00
	void HidePassiveBuff(); // Function Solarland.SolarProgressiveInteractButton.HidePassiveBuff // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void BP_UpdateStateView(enum class ECountDownState InState); // Function Solarland.SolarProgressiveInteractButton.BP_UpdateStateView // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarProjBullet
// Size: 0x6b0 (Inherited: 0x378)
struct ASolarProjBullet : ASolarBullet {
	char pad_378[0x8]; // 0x378(0x08)
	struct FVector SpawnedLocation; // 0x380(0x0c)
	float EffRange; // 0x38c(0x04)
	float MaxRange; // 0x390(0x04)
	int32_t RocketNum; // 0x394(0x04)
	struct FVector SecondVelocity; // 0x398(0x0c)
	char pad_3A4[0x8]; // 0x3a4(0x08)
	struct FVector FirstBulletSpeed; // 0x3ac(0x0c)
	char pad_3B8[0x10]; // 0x3b8(0x10)
	bool bNoRTImpactEffect; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	struct FHitResult RocketHitResult; // 0x3cc(0x88)
	char pad_454[0x4]; // 0x454(0x04)
	struct UAmmoConfig* AmmoConfig; // 0x458(0x08)
	bool bScaledByDistance; // 0x460(0x01)
	bool bHiddenWhenExploded; // 0x461(0x01)
	char pad_462[0x6]; // 0x462(0x06)
	struct TWeakObjectPtr<struct AActor> ParentWeaponPtr; // 0x468(0x08)
	struct ASolarPlayerController* BulletOwnerController; // 0x470(0x08)
	char pad_478[0x4]; // 0x478(0x04)
	int32_t ModeIdx; // 0x47c(0x04)
	struct UShapeComponent* CollisionComp; // 0x480(0x08)
	struct UProjectileMovementComponent* MovementComp; // 0x488(0x08)
	struct USolarSplineMovementComponent* SplineMovementComp; // 0x490(0x08)
	float GravityScaleRate; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct UCurveFloat* BounceCurve; // 0x4a0(0x08)
	bool bHitSpecificActorsExplodeWithBounce; // 0x4a8(0x01)
	bool bForcePenetrateEnergyShiled; // 0x4a9(0x01)
	char pad_4AA[0x2]; // 0x4aa(0x02)
	struct FVector_NetQuantize SimulatedInitialVelocity; // 0x4ac(0x0c)
	struct FVector OwnerDirection; // 0x4b8(0x0c)
	bool bExploded; // 0x4c4(0x01)
	bool bTriggerEffRange; // 0x4c5(0x01)
	bool bTriggerMaxRange; // 0x4c6(0x01)
	bool bWaitToBeDestroyed; // 0x4c7(0x01)
	char pad_4C8[0x2]; // 0x4c8(0x02)
	bool bDontAutoDestroy; // 0x4ca(0x01)
	char pad_4CB[0x5]; // 0x4cb(0x05)
	struct UAkComponent* AkAudioComponent; // 0x4d0(0x08)
	char pad_4D8[0x8]; // 0x4d8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x4e0(0x08)
	char pad_4E8[0x4]; // 0x4e8(0x04)
	float FlySoundPlayDistance; // 0x4ec(0x04)
	struct UParticleSystemComponent* ParticleComp; // 0x4f0(0x08)
	struct UParticleSystemComponent* TrajPSC; // 0x4f8(0x08)
	char pad_500[0x10]; // 0x500(0x10)
	int32_t PoolLimit; // 0x510(0x04)
	char pad_514[0x18d]; // 0x514(0x18d)
	bool bVerifyFlow; // 0x6a1(0x01)
	bool bSpecialVerifyFlow; // 0x6a2(0x01)
	char pad_6A3[0x1]; // 0x6a3(0x01)
	struct FFireUniqueID FireUniqueID; // 0x6a4(0x04)
	bool bBulletActiveAbility; // 0x6a8(0x01)
	char pad_6A9[0x7]; // 0x6a9(0x07)

	void StopSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StopSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e028f0
	void StartSound(enum class EShootingSoundOpt Opt); // Function Solarland.SolarProjBullet.StartSound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e02870
	void SpawnSoundPlayerAndPlayFlySound(); // Function Solarland.SolarProjBullet.SpawnSoundPlayerAndPlayFlySound // (Final|Native|Protected) // @ game+0x1e02850
	void SetLocationByEnergyShield(); // Function Solarland.SolarProjBullet.SetLocationByEnergyShield // (Final|Native|Protected) // @ game+0x1e02830
	void OnStop(struct FHitResult& HitResult); // Function Solarland.SolarProjBullet.OnStop // (Final|Native|Public|HasOutParms) // @ game+0x1e022e0
	void OnSplineMovementCompStop(struct FHitResult& HitResult, bool bBlocking); // Function Solarland.SolarProjBullet.OnSplineMovementCompStop // (Final|Native|Public|HasOutParms) // @ game+0x1e021b0
	void OnRep_SimulatedInitialVelocity(); // Function Solarland.SolarProjBullet.OnRep_SimulatedInitialVelocity // (Final|Native|Public) // @ game+0x1e02150
	void OnRep_RocketHitResult(); // Function Solarland.SolarProjBullet.OnRep_RocketHitResult // (Final|Native|Public) // @ game+0x1e02130
	void OnRep_bExploded(); // Function Solarland.SolarProjBullet.OnRep_bExploded // (Final|Native|Protected) // @ game+0x1e02170
	void OnOutRange(); // Function Solarland.SolarProjBullet.OnOutRange // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnBounce(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Solarland.SolarProjBullet.OnBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1e01a40
	void OnAttachedActorDestroyed(struct AActor* Other); // Function Solarland.SolarProjBullet.OnAttachedActorDestroyed // (Final|Native|Public) // @ game+0x1e019c0
	void OnActorDestroyed(struct AActor* DestroyedActor); // Function Solarland.SolarProjBullet.OnActorDestroyed // (Final|Native|Protected) // @ game+0x1e01940
	bool IsAllowPlayEffect(); // Function Solarland.SolarProjBullet.IsAllowPlayEffect // (Final|Native|Protected|Const) // @ game+0x1e016f0
	void InitSplineMovementComp(struct USolarSplineMovementComponent* Comp); // Function Solarland.SolarProjBullet.InitSplineMovementComp // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e01650
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarProjBullet.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x1e01580
	void ExplodeBegin(); // Function Solarland.SolarProjBullet.ExplodeBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0x7e17a0
	void DelayDestroy(float DelayTime); // Function Solarland.SolarProjBullet.DelayDestroy // (Final|Native|Protected) // @ game+0x1e00f30
	struct USolarSplineMovementComponent* BlueprintGetSplineMovementComp(); // Function Solarland.SolarProjBullet.BlueprintGetSplineMovementComp // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarProjBoxBullet
// Size: 0x720 (Inherited: 0x6b0)
struct ASolarProjBoxBullet : ASolarProjBullet {
	struct FSplineCurves BulletSplineCurve; // 0x6b0(0x68)
	char pad_718[0x8]; // 0x718(0x08)

	void SetBulletSplineCurve(struct USplineComponent* BulletSplineComponent); // Function Solarland.SolarProjBoxBullet.SetBulletSplineCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfb580
	float GetSplineLength(); // Function Solarland.SolarProjBoxBullet.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1dfa830
	void ExplodeInTheEnd(); // Function Solarland.SolarProjBoxBullet.ExplodeInTheEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x1dfa4f0
};

// Class Solarland.SolarProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0x1d0)
struct USolarProjectileMovementComponent : UProjectileMovementComponent {
};

// Class Solarland.SolarQuickSummonProxy
// Size: 0x38 (Inherited: 0x28)
struct USolarQuickSummonProxy : UObject {
	struct TWeakObjectPtr<struct USolarSummonDetectionComponent> SummonDetectionComponent; // 0x28(0x08)
	struct TWeakObjectPtr<struct USolarSummonDetectionConfig> SummonConfig; // 0x30(0x08)

	bool TryGetSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarQuickSummonProxy.TryGetSummonHitResult // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x1e02a40
	struct FVector RotateDirection(struct FVector& InDirection, struct FVector& InNormal); // Function Solarland.SolarQuickSummonProxy.RotateDirection // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e02540
	bool IsPlaceable(struct AActor* Summoner); // Function Solarland.SolarQuickSummonProxy.IsPlaceable // (Native|Event|Public|BlueprintEvent) // @ game+0x1e018a0
	bool IsCheckedWorldStatic(struct AActor* InActor, struct FVector& InDirection, struct FVector& InCheckOffset, float InLength); // Function Solarland.SolarQuickSummonProxy.IsCheckedWorldStatic // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e01720
	bool GetTraceHitResult(struct AActor* InSummoner, struct FVector& InStart, struct FVector& InEndPoint, struct FHitResult& OutHitResult); // Function Solarland.SolarQuickSummonProxy.GetTraceHitResult // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e013a0
	bool GetImpactPoint(struct AActor* InSummoner, struct FVector& InStart, struct FVector& InEndPoint, struct FVector& OutLocation, struct FVector& OutNormal); // Function Solarland.SolarQuickSummonProxy.GetImpactPoint // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e01140
	bool FindPlaceableSpace(struct FVector& InSummonLocation, struct FVector& InSummonNormal); // Function Solarland.SolarQuickSummonProxy.FindPlaceableSpace // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e00fb0
	bool CanSummon(struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig, struct FHitResult& InHitResult, struct FHitResult& OutHitResult); // Function Solarland.SolarQuickSummonProxy.CanSummon // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1e00cb0
};

// Class Solarland.SolarRadarBase
// Size: 0x3a0 (Inherited: 0x228)
struct ASolarRadarBase : AActor {
	enum class ERadarType RadarType; // 0x228(0x01)
	bool bSuperRadar; // 0x229(0x01)
	char SuperRadarMaxCount; // 0x22a(0x01)
	char pad_22B[0x1]; // 0x22b(0x01)
	float EffectRadius; // 0x22c(0x04)
	struct FVector2D EffectSize; // 0x230(0x08)
	bool bTeamShare; // 0x238(0x01)
	bool bNotifyEnemy; // 0x239(0x01)
	char pad_23A[0x2]; // 0x23a(0x02)
	struct FGameplayTag RadarImmunityTag; // 0x23c(0x08)
	bool bUniqueExist; // 0x244(0x01)
	bool bDisplayOnMap; // 0x245(0x01)
	char pad_246[0x2]; // 0x246(0x02)
	struct TArray<enum class EActorRegisterType> ScanTargetTypes; // 0x248(0x10)
	bool bShowTowards; // 0x258(0x01)
	bool bMarkPlayer; // 0x259(0x01)
	char pad_25A[0x2]; // 0x25a(0x02)
	float DisplayTime; // 0x25c(0x04)
	float ScanFrequency; // 0x260(0x04)
	char pad_264[0x4]; // 0x264(0x04)
	struct TMap<struct AActor*, struct FRadarDelegateHandle> ProcessingActorsImmunityTagsHandleMap; // 0x268(0x50)
	char pad_2B8[0x48]; // 0x2b8(0x48)
	struct FGameplayAbilitySpecHandle RadarHandle; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	bool bPerspectiveInScene; // 0x308(0x01)
	bool bAddWorldMark; // 0x309(0x01)
	char pad_30A[0x2]; // 0x30a(0x02)
	struct FGameplayCueTag CharacterPerspectiveCueTag; // 0x30c(0x08)
	struct FGameplayCueTag CharacterPerspectiveInSmokeCueTag; // 0x314(0x08)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct TArray<struct AActor*> PerspectiveedActors; // 0x320(0x10)
	struct TMap<struct AActor*, struct FPerspectiveActorInfo> ProcessingActors; // 0x330(0x50)
	struct TArray<struct FString> OneTimeScannedPlayerIDs; // 0x380(0x10)
	struct TArray<struct ASolarCharacter*> ScanNotifiedPlayers; // 0x390(0x10)

	void UpdatePerspectiveActor(); // Function Solarland.SolarRadarBase.UpdatePerspectiveActor // (Final|Native|Private) // @ game+0x1e02c50
	void ToggleWorldMarkByActor(struct AActor* InTargetActor, bool bInAdd); // Function Solarland.SolarRadarBase.ToggleWorldMarkByActor // (Final|Native|Private) // @ game+0x1e02970
	struct FTransform ServerSpawningRadar(struct APawn* RadarOwner, struct ASolarCharacter* RadarInstigator, struct FGameplayAbilitySpecHandle& InRadarHandle, float InLifeTime); // Function Solarland.SolarRadarBase.ServerSpawningRadar // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e02690
	void ServerOneTimeScanStart(); // Function Solarland.SolarRadarBase.ServerOneTimeScanStart // (Final|Native|Private) // @ game+0x1e02670
	void RemovePerspectivedCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.RemovePerspectivedCharacter // (Final|Native|Private) // @ game+0x1e024c0
	void PerspectOneTimeScannedActor(struct AActor* InActor); // Function Solarland.SolarRadarBase.PerspectOneTimeScannedActor // (Final|Native|Private) // @ game+0x1e023c0
	void PerspectiveTargetCharacter(struct ASolarCharacter* InTargetCharacter); // Function Solarland.SolarRadarBase.PerspectiveTargetCharacter // (Final|Native|Private) // @ game+0x1e02440
	void OnRep_OneTimeScannedPlayerIDs(); // Function Solarland.SolarRadarBase.OnRep_OneTimeScannedPlayerIDs // (Final|Native|Private) // @ game+0x1e02110
	void AddPerspectiveDatas(struct AActor* InActor, struct UMeshComponent* InMesh); // Function Solarland.SolarRadarBase.AddPerspectiveDatas // (Final|Native|Private) // @ game+0x1e00bc0
};

// Class Solarland.SolarRadarComponent
// Size: 0x148 (Inherited: 0xb0)
struct USolarRadarComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct URadarScanSoundDataAsset* RadarScanSoundDataAsset; // 0xb8(0x08)
	struct UUserWidget* ScannedScreenUIClass; // 0xc0(0x08)
	struct FName ScannedEffectID; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)
	struct UUserWidget* CreatedScreenUI; // 0xe8(0x08)
	struct FTimerHandle DetectedTimerHandle; // 0xf0(0x08)
	struct ASolarCharacter* CharacterOwner; // 0xf8(0x08)
	struct TArray<struct FScannedInfo> CurrentScanResults; // 0x100(0x10)
	float CurrentSpanTimer; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TArray<struct FName> ActivedRadarTags; // 0x118(0x10)
	struct FMaterialChangeHandle DetectedMaterialHandle; // 0x128(0x08)
	char pad_130[0x18]; // 0x130(0x18)

	void WarningByRadarNotifation(float InRemainingTime); // Function Solarland.SolarRadarComponent.WarningByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRecivedScanResults(); // Function Solarland.SolarRadarComponent.OnRecivedScanResults // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRecieveOnceScanStart(int32_t ScanedNum, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnRecieveOnceScanStart // (Final|Native|Public) // @ game+0x1e02010
	void OnRadarScanStart(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanStart // (Final|Native|Public|HasOutParms) // @ game+0x1e01f30
	void OnRadarScanEnd(struct FRadarDataSpec& RadarDataSpec); // Function Solarland.SolarRadarComponent.OnRadarScanEnd // (Final|Native|Public|HasOutParms) // @ game+0x1e01e70
	void OnRadarImmunityTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarRadarComponent.OnRadarImmunityTagChanged // (Final|Native|Public) // @ game+0x1e01db0
	void OnDetectedByRadar(bool bOnceScan, float InDetectedTime, struct FGameplayTag& InRadarImmunityTag, bool bSuperRader); // Function Solarland.SolarRadarComponent.OnDetectedByRadar // (Final|Native|Public|HasOutParms) // @ game+0x1e01b70
	void OnceScanSuccessNotifation(int32_t ScanedNum); // Function Solarland.SolarRadarComponent.OnceScanSuccessNotifation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnceScanFailedNotifation(); // Function Solarland.SolarRadarComponent.OnceScanFailedNotifation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void MarkedByOnceScanNotifation(); // Function Solarland.SolarRadarComponent.MarkedByOnceScanNotifation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct FString GetModuleName_Implementation(); // Function Solarland.SolarRadarComponent.GetModuleName_Implementation // (Native|Public|Const) // @ game+0x1e01310
	void ExposedByRadarNotifation(); // Function Solarland.SolarRadarComponent.ExposedByRadarNotifation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ChangeDetectedMaterial(bool bInDetected); // Function Solarland.SolarRadarComponent.ChangeDetectedMaterial // (Final|Native|Public) // @ game+0x1e00ea0
};

// Class Solarland.RadarScanSoundDataAsset
// Size: 0x90 (Inherited: 0x30)
struct URadarScanSoundDataAsset : UDataAsset {
	struct FString RadarScan_Loop_Start; // 0x30(0x10)
	struct FString RadarScan_Loop_End; // 0x40(0x10)
	struct FString RadarScan_Once_Success; // 0x50(0x10)
	struct FString RadarScan_Once_Failed; // 0x60(0x10)
	struct FString SuperRadarScan_FoundEnemy; // 0x70(0x10)
	struct FString SuperRadarScan_FoundByEnemy; // 0x80(0x10)
};

// Class Solarland.SolarRadarStation
// Size: 0x290 (Inherited: 0x238)
struct ASolarRadarStation : ASolarInteractableActor {
	bool bEnable; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	int32_t Zone; // 0x23c(0x04)
	float MaxTirggerDistance; // 0x240(0x04)
	float MaxTirggerAngle; // 0x244(0x04)
	struct FGameplayTag CDTag; // 0x248(0x08)
	bool bBroken; // 0x250(0x01)
	bool bInCD; // 0x251(0x01)
	char pad_252[0x2]; // 0x252(0x02)
	float CoolDownTime; // 0x254(0x04)
	float CostEnergy; // 0x258(0x04)
	float RemainCDTime; // 0x25c(0x04)
	struct USphereComponent* CollisionComp; // 0x260(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x268(0x08)
	struct USolarObjAbilitySystemComponent* ObjAbilitySystemComp; // 0x270(0x08)
	struct USolarObjGameplayAbility* ObjAbilityClass; // 0x278(0x08)
	struct FGameplayAbilitySpecHandle ObjAbilityHandle; // 0x280(0x04)
	char pad_284[0xc]; // 0x284(0x0c)

	bool TryTriggerRadarStation(struct ASolarCharacter* InUser); // Function Solarland.SolarRadarStation.TryTriggerRadarStation // (Final|Native|Public) // @ game+0x1e02bc0
	void ServerInitailizeAbility(); // Function Solarland.SolarRadarStation.ServerInitailizeAbility // (Final|Native|Protected) // @ game+0x1e02650
	void OnResetCD(); // Function Solarland.SolarRadarStation.OnResetCD // (Final|Native|Protected) // @ game+0x1e02190
	void OnRep_Broken(); // Function Solarland.SolarRadarStation.OnRep_Broken // (Final|Native|Protected) // @ game+0x1e020f0
	void OnRep_BInCD(); // Function Solarland.SolarRadarStation.OnRep_BInCD // (Final|Native|Protected) // @ game+0x1e020d0
	void OnRadarStationCDChanged(); // Function Solarland.SolarRadarStation.OnRadarStationCDChanged // (Final|Native|Protected) // @ game+0x1e01ff0
	void OnPlayStartScanEffect(); // Function Solarland.SolarRadarStation.OnPlayStartScanEffect // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnGameplayTagChanged(struct FGameplayTag Tag, bool bAdd); // Function Solarland.SolarRadarStation.OnGameplayTagChanged // (Final|Native|Protected) // @ game+0x1e01ce0
	void OnClientStartScan(); // Function Solarland.SolarRadarStation.OnClientStartScan // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1257f30
	void OnBrokenChanged(bool InBroken); // Function Solarland.SolarRadarStation.OnBrokenChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitailizeAbilityParams(); // Function Solarland.SolarRadarStation.InitailizeAbilityParams // (Final|Native|Protected) // @ game+0x1e016d0
	float GetAbilityReaminingCD(); // Function Solarland.SolarRadarStation.GetAbilityReaminingCD // (Final|Native|Public) // @ game+0x1e01110
	float GetAbilityCostEnergy(); // Function Solarland.SolarRadarStation.GetAbilityCostEnergy // (Final|Native|Public) // @ game+0x1e010e0
	float GetAbilityCooldown(); // Function Solarland.SolarRadarStation.GetAbilityCooldown // (Final|Native|Public) // @ game+0x1e010b0
	bool CanActivateNow(); // Function Solarland.SolarRadarStation.CanActivateNow // (Final|Native|Public) // @ game+0x1e00c80
};

// Class Solarland.SolarRedHintManager
// Size: 0x38 (Inherited: 0x30)
struct USolarRedHintManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Solarland.SolarReplayCameraControlComp
// Size: 0x148 (Inherited: 0xb0)
struct USolarReplayCameraControlComp : UActorComponent {
	struct FMulticastInlineDelegate OnReplayCameraModeChanged; // 0xb0(0x10)
	float DefaultSpeed; // 0xc0(0x04)
	float MoveSpeedChangeStep; // 0xc4(0x04)
	float MoveSpeedMin; // 0xc8(0x04)
	float MoveSpeedMax; // 0xcc(0x04)
	float SpeedUpScale; // 0xd0(0x04)
	float DefaultTurnRate; // 0xd4(0x04)
	float TurnRateChangeStep; // 0xd8(0x04)
	float TurnSpeedMin; // 0xdc(0x04)
	float TurnSpeedMax; // 0xe0(0x04)
	float DistanceChangeStep; // 0xe4(0x04)
	struct ASolarPlayerState* CurrentTarget; // 0xe8(0x08)
	char pad_F0[0x10]; // 0xf0(0x10)
	struct ASolarGameState* SolarGameState; // 0x100(0x08)
	struct ASolarSpectateInfo* ReplayPCSpectateInfo; // 0x108(0x08)
	char pad_110[0x38]; // 0x110(0x38)

	void OnStreamingReadied(); // Function Solarland.SolarReplayCameraControlComp.OnStreamingReadied // (Final|Native|Private) // @ game+0x1e07100
	void OnSpectateInfoRep(struct ASolarSpectateInfo* InSpecInfo); // Function Solarland.SolarReplayCameraControlComp.OnSpectateInfoRep // (Final|Native|Private) // @ game+0x1e07080
	void OnReplayCameraModeChanged__DelegateSignature(enum class EReplayCameraMode OldMode, enum class EReplayCameraMode CurMode); // DelegateFunction Solarland.SolarReplayCameraControlComp.OnReplayCameraModeChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnPlayingScrubStart(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubStart // (Final|Native|Private) // @ game+0x1e07020
	void OnPlayingScrubCharactersCreated(); // Function Solarland.SolarReplayCameraControlComp.OnPlayingScrubCharactersCreated // (Final|Native|Private) // @ game+0x1e07000
	enum class EReplayCameraMode GetReplayCameraMode(); // Function Solarland.SolarReplayCameraControlComp.GetReplayCameraMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06b30
};

// Class Solarland.SolarReplayHighlightComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarReplayHighlightComponent : UActorComponent {
};

// Class Solarland.SolarReplayManager
// Size: 0x350 (Inherited: 0x28)
struct USolarReplayManager : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	bool bMeshWidgetOptimization; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FSoftObjectPath WaitingOBMap; // 0x40(0x18)
	struct FSoftClassPath WaitingReplayStartUIClass; // 0x58(0x18)
	struct FSoftClassPath OBModeSpectatorPawnClass; // 0x70(0x18)
	struct FSoftClassPath OBModeHUDClass; // 0x88(0x18)
	struct FSoftClassPath OBHeadInfoWidgetClass; // 0xa0(0x18)
	struct FGameplayCueTag PerspectiveCueTag; // 0xb8(0x08)
	struct FGameplayCueTag PerspectiveInSmokeCueTag; // 0xc0(0x08)
	struct FSoftObjectPath PerspectiveMaterial; // 0xc8(0x18)
	struct FAddMultiplePassMaterialChangeParams PerspectiveMaterialParams; // 0xe0(0x40)
	struct FSoftClassPath DirectorModeSpectatorPawnClass; // 0x120(0x18)
	struct FName DirectorModeInputModeName; // 0x138(0x08)
	float UpdateDistanceInterval; // 0x140(0x04)
	float OBTeamListNearbyDistance; // 0x144(0x04)
	float OBHeadInfoNearDistance; // 0x148(0x04)
	float OBHeadInfoFarDistance; // 0x14c(0x04)
	float OBDamageTextHideDistance; // 0x150(0x04)
	float OBDelayTimeForTournament; // 0x154(0x04)
	float OBLivePreDownloadTime; // 0x158(0x04)
	float OBSkipBeginningTime; // 0x15c(0x04)
	struct TArray<float> OBPlaybackSpeedList; // 0x160(0x10)
	char OBPlaybackSpeedDefaultIndex; // 0x170(0x01)
	char pad_171[0x3]; // 0x171(0x03)
	struct FName OBLockCameraBindBoneName; // 0x174(0x08)
	struct FVector OBLockCameraBindBoneOffset; // 0x17c(0x0c)
	float OBInitLockDistance; // 0x188(0x04)
	float OBMinLockDistance; // 0x18c(0x04)
	float OBMaxLockDistance; // 0x190(0x04)
	float OBMinLockPitch; // 0x194(0x04)
	float OBMaxLockPitch; // 0x198(0x04)
	float OBPitchAdjustTriggerFloor; // 0x19c(0x04)
	float OBPitchAdjustValue; // 0x1a0(0x04)
	int32_t ReplayCacheFileRetentionTimeInSeconds; // 0x1a4(0x04)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct FMulticastInlineDelegate OnPlayingStartedDelegate; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnPlayingLoadLevelsStartedDelegate; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPlayingLevelLoadedDelegate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPlayingStreamReadiedDelegate; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnPlayingAtEndDelegate; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnPlayingFinishedDelegate; // 0x200(0x10)
	struct FMulticastInlineDelegate OnRecordingStartedDelegate; // 0x210(0x10)
	struct FMulticastInlineDelegate OnRecordingStartFailedDelegate; // 0x220(0x10)
	struct FMulticastInlineDelegate OnRecordingFinishedDelegate; // 0x230(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubStartDelegate; // 0x240(0x10)
	struct FMulticastInlineDelegate OnPlayingPreScrubDelegate; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPlayingFirstScrubFinishedDelegate; // 0x260(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubFailedDelegate; // 0x270(0x10)
	struct FMulticastInlineDelegate OnPlayingScrubCharactersCreatedDelegate; // 0x280(0x10)
	struct FMulticastInlineDelegate OnPlayingPauseDelegate; // 0x290(0x10)
	struct FMulticastInlineDelegate OnPlayingContinueDelegate; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnPlaybackSpeedChangedDelegate; // 0x2b0(0x10)
	char pad_2C0[0x58]; // 0x2c0(0x58)
	struct UUserWidget* WaitingReplayStartUI; // 0x318(0x08)
	char pad_320[0x30]; // 0x320(0x30)

	void TravelToLobby(); // Function Solarland.SolarReplayManager.TravelToLobby // (Final|Native|Private|BlueprintCallable) // @ game+0x1e07b70
	void StopRecording(); // Function Solarland.SolarReplayManager.StopRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07b30
	void StopPlayReplay(); // Function Solarland.SolarReplayManager.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07b10
	void StartRecording(struct FString SessionName, struct FString UploadUrl, bool bIsToLocal); // Function Solarland.SolarReplayManager.StartRecording // (Final|Native|Public|BlueprintCallable) // @ game+0x1e079c0
	void SpeedUpTimeDilation(); // Function Solarland.SolarReplayManager.SpeedUpTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x1e079a0
	void SlowDownTimeDilation(); // Function Solarland.SolarReplayManager.SlowDownTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07830
	void SetTimeDilation(float Dilation); // Function Solarland.SolarReplayManager.SetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x1e076c0
	void SetStartSpectateTournamentTime(); // Function Solarland.SolarReplayManager.SetStartSpectateTournamentTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e076a0
	void SetRequestTryStrategy(float Interval, int32_t Times); // Function Solarland.SolarReplayManager.SetRequestTryStrategy // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetReadyToRecord(bool bIsReady, struct TArray<struct FString>& OBPlayerIDs); // Function Solarland.SolarReplayManager.SetReadyToRecord // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void SetEnableCompressForHttpReplay(bool bEnable); // Function Solarland.SolarReplayManager.SetEnableCompressForHttpReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07580
	void RetryPlayReplayFromServer(); // Function Solarland.SolarReplayManager.RetryPlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07370
	void RequestPlayReplayOfCurrentBattle(); // Function Solarland.SolarReplayManager.RequestPlayReplayOfCurrentBattle // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RequestPlayReplay(struct FString InBattleID, bool IsLive); // Function Solarland.SolarReplayManager.RequestPlayReplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RequestBattleList(int32_t PageIndex, int32_t PageSize); // Function Solarland.SolarReplayManager.RequestBattleList // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReplayManagerNoParamDelegate__DelegateSignature(); // DelegateFunction Solarland.SolarReplayManager.ReplayManagerNoParamDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void RecordReplayInfosOnRecordingStarted(); // Function Solarland.SolarReplayManager.RecordReplayInfosOnRecordingStarted // (Final|Native|Private|BlueprintCallable) // @ game+0x1e07350
	void ReceivePlayingStartFailed(); // Function Solarland.SolarReplayManager.ReceivePlayingStartFailed // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool ReceivePlayingFinished(enum class EReplayPlayingFinishReason Reason); // Function Solarland.SolarReplayManager.ReceivePlayingFinished // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlayReplayFromServer(struct FString SessionName, struct FString DownloadUrl); // Function Solarland.SolarReplayManager.PlayReplayFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07240
	void PlayReplayFromLocal(struct FString ReplayFileName); // Function Solarland.SolarReplayManager.PlayReplayFromLocal // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07160
	void PlayingFinishedInternal(); // Function Solarland.SolarReplayManager.PlayingFinishedInternal // (Final|Native|Private|BlueprintCallable) // @ game+0x1e07330
	void PausePlayReplay(); // Function Solarland.SolarReplayManager.PausePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07120
	void OnPlayingFinished(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingFinished // (Final|Native|Private) // @ game+0x1e06f80
	void OnPlayingAtEnd(struct UWorld* World); // Function Solarland.SolarReplayManager.OnPlayingAtEnd // (Final|Native|Private) // @ game+0x1e06f00
	void NotifyTournamentSpectate(bool bIsInLiveReplay); // Function Solarland.SolarReplayManager.NotifyTournamentSpectate // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06de0
	bool NotifyBackendPlayReplayFinished(); // Function Solarland.SolarReplayManager.NotifyBackendPlayReplayFinished // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaOnPostLoadMapWithWorld(struct FString LevelName); // Function Solarland.SolarReplayManager.LuaOnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaBindDelegates(); // Function Solarland.SolarReplayManager.LuaBindDelegates // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsTournament(); // Function Solarland.SolarReplayManager.IsTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1d8e9b0
	bool IsReplayLive(); // Function Solarland.SolarReplayManager.IsReplayLive // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06d80
	bool IsRecording(); // Function Solarland.SolarReplayManager.IsRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06d50
	bool IsReady(); // Function Solarland.SolarReplayManager.IsReady // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsPlaying(); // Function Solarland.SolarReplayManager.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06d20
	bool IsPausing(); // Function Solarland.SolarReplayManager.IsPausing // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06cf0
	bool IsLocal(); // Function Solarland.SolarReplayManager.IsLocal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06cd0
	bool IsInState(enum class EReplayManagerState CheckState); // Function Solarland.SolarReplayManager.IsInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06c40
	void GotoTimeInSecond(float Second); // Function Solarland.SolarReplayManager.GotoTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06bc0
	float GetTotalSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetTotalSessionTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06b90
	float GetTimeDilation(); // Function Solarland.SolarReplayManager.GetTimeDilation // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06b60
	float GetCurrentSessionTimeInSecond(); // Function Solarland.SolarReplayManager.GetCurrentSessionTimeInSecond // (Final|Native|Public|BlueprintCallable) // @ game+0x1e069e0
	struct FString GetCurrentSessionName(); // Function Solarland.SolarReplayManager.GetCurrentSessionName // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06920
	struct FString GetBattleIDByIndex(int32_t Index); // Function Solarland.SolarReplayManager.GetBattleIDByIndex // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void EnterSettlementStage(); // Function Solarland.SolarReplayManager.EnterSettlementStage // (Final|Native|Public|BlueprintCallable) // @ game+0x1e068d0
	void DestroyWaitingOBStartUI(); // Function Solarland.SolarReplayManager.DestroyWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x1e068b0
	void CreateWaitingOBStartUI(); // Function Solarland.SolarReplayManager.CreateWaitingOBStartUI // (Final|Native|Private|BlueprintCallable) // @ game+0x1e06890
	void ContinuePlayReplay(); // Function Solarland.SolarReplayManager.ContinuePlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06850
};

// Class Solarland.SolarReplayPerspectiveEffect
// Size: 0xa8 (Inherited: 0x50)
struct USolarReplayPerspectiveEffect : UActorEffect {
	char pad_50[0x58]; // 0x50(0x58)
};

// Class Solarland.SolarReplayPerspectiveInSmokeEffect
// Size: 0xa8 (Inherited: 0xa8)
struct USolarReplayPerspectiveInSmokeEffect : USolarReplayPerspectiveEffect {
};

// Class Solarland.SolarReplayPlayerController
// Size: 0xd78 (Inherited: 0xc48)
struct ASolarReplayPlayerController : ASolarPlayerController {
	float WaitFirstTeamNumberInputTime; // 0xc48(0x04)
	float WaitTeamNumberInputTime; // 0xc4c(0x04)
	struct USolarReplayCameraControlComp* SolarReplayCameraControlComp; // 0xc50(0x08)
	struct TMap<struct FString, float> HorizontalDistanceBetweenPlayerAndOBCamera; // 0xc58(0x50)
	struct USolarReplayManager* ReplayManager; // 0xca8(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xcb0(0x08)
	char pad_CB8[0x70]; // 0xcb8(0x70)
	struct TMap<char, struct UMaterialInstanceDynamic*> TeamNumToPerspectiveMaterialMap; // 0xd28(0x50)

	void UpdateDistanceBetweenOBCamAndPlayer(); // Function Solarland.SolarReplayPlayerController.UpdateDistanceBetweenOBCamAndPlayer // (Final|Native|Private) // @ game+0x1e07c50
	void StopSpectatePlayer(); // Function Solarland.SolarReplayPlayerController.StopSpectatePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07b50
	void StopPlayReplay(); // Function Solarland.SolarReplayPlayerController.StopPlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07af0
	void SpectatePlayerByPlayerID(struct FString SolarPlayerId); // Function Solarland.SolarReplayPlayerController.SpectatePlayerByPlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07900
	void SolarGM_ToggleProgressControlButton(); // Function Solarland.SolarReplayPlayerController.SolarGM_ToggleProgressControlButton // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1e078e0
	void SolarGM_ReplayDebugLog(bool bOpenDebugLog); // Function Solarland.SolarReplayPlayerController.SolarGM_ReplayDebugLog // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1e07850
	bool ShowDamageText(struct FSolarDamageText& InDamageText); // Function Solarland.SolarReplayPlayerController.ShowDamageText // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e07740
	void SetPlayerInfoHUDVisible(bool bIsVisible); // Function Solarland.SolarReplayPlayerController.SetPlayerInfoHUDVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1e07610
	void SetDamageTextVisible(bool bIsVisible); // Function Solarland.SolarReplayPlayerController.SetDamageTextVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x1e074f0
	void SetBattleOBHUDType(enum class EBattleOBHUDType& Type); // Function Solarland.SolarReplayPlayerController.SetBattleOBHUDType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e07460
	void PauseReplay(); // Function Solarland.SolarReplayPlayerController.PauseReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1e07140
	void OnReplayPlayingLevelLoaded(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingLevelLoaded // (Final|Native|Private) // @ game+0x1e07060
	void OnReplayPlayingFirstScrubFinished(); // Function Solarland.SolarReplayPlayerController.OnReplayPlayingFirstScrubFinished // (Final|Native|Private) // @ game+0x1e07040
	void OnPlayingFinished(); // Function Solarland.SolarReplayPlayerController.OnPlayingFinished // (Final|Native|Private) // @ game+0x8ba190
	void OnBattleOBHUDTypeChanged(enum class EBattleOBHUDType& CurrentType); // Function Solarland.SolarReplayPlayerController.OnBattleOBHUDTypeChanged // (Final|Native|Private|HasOutParms) // @ game+0x1e06e70
	bool IsSpectatingPlayer(); // Function Solarland.SolarReplayPlayerController.IsSpectatingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e06db0
	struct TMap<struct FString, float> GetHorizontalDistanceBetweenPlayerAndOBCamera(); // Function Solarland.SolarReplayPlayerController.GetHorizontalDistanceBetweenPlayerAndOBCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06a90
	struct FString GetCurrentSpectatePlayerID(); // Function Solarland.SolarReplayPlayerController.GetCurrentSpectatePlayerID // (Final|Native|Public|BlueprintCallable) // @ game+0x1e06a10
	enum class EBattleOBHUDType GetBattleOBHUDType(); // Function Solarland.SolarReplayPlayerController.GetBattleOBHUDType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e068f0
	void ContinueReplay(); // Function Solarland.SolarReplayPlayerController.ContinueReplay // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1e06870
};

// Class Solarland.SolarReplicationGraph
// Size: 0x6d0 (Inherited: 0x500)
struct USolarReplicationGraph : UReplicationGraph {
	struct TArray<struct UObject*> SpatializedClasses; // 0x4f8(0x10)
	struct TArray<struct UObject*> NonSpatializedChildClasses; // 0x508(0x10)
	struct TArray<struct UObject*> AlwaysRelevantClasses; // 0x518(0x10)
	struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection* RejoinNode; // 0x528(0x08)
	struct USolarReplicationGraphNode_GridSpatialization2D* GridNode; // 0x530(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x538(0x08)
	struct USolarReplicationGraphNode_CustomRelevancy* CustomRelevancyNode; // 0x540(0x08)
	char pad_550[0x48]; // 0x550(0x48)
	struct TMap<char, struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam*> AlwaysRelevantForTeamNodes; // 0x598(0x50)
	char pad_5E8[0xe8]; // 0x5e8(0xe8)

	void UnbindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.UnbindActorToCharacterTeam // (Final|Native|Public) // @ game+0x1e07b90
	void BindActorToCharacterTeam(struct ASolarCharacter* Character, struct AActor* Actor); // Function Solarland.SolarReplicationGraph.BindActorToCharacterTeam // (Final|Native|Public) // @ game+0x1e06790
};

// Class Solarland.SolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection
// Size: 0x178 (Inherited: 0xd0)
struct USolarReplicationGraphNode_ForceNetUpdate_ForRejoinConnection : UReplicationGraphNode_ActorList {
	struct TSet<struct UNetConnection*> PendingForceNetUpdateConnections; // 0xd0(0x50)
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x120(0x50)
	char pad_170[0x8]; // 0x170(0x08)
};

// Class Solarland.SolarReplicationGraphNode_CustomRelevancy
// Size: 0xe0 (Inherited: 0xd0)
struct USolarReplicationGraphNode_CustomRelevancy : UReplicationGraphNode_ActorList {
	char pad_D0[0x10]; // 0xd0(0x10)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForConnection
// Size: 0x298 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForConnection : UReplicationGraphNode {
	char pad_50[0x228]; // 0x50(0x228)
	struct AActor* LastPawn; // 0x278(0x08)
	struct TArray<struct FAlwaysRelevantActorInfo> PastRelevantActors; // 0x280(0x10)
	char pad_290[0x8]; // 0x290(0x08)
};

// Class Solarland.SolarReplicationGraphNode_AlwaysRelevant_ForTeam
// Size: 0xc8 (Inherited: 0x50)
struct USolarReplicationGraphNode_AlwaysRelevant_ForTeam : UReplicationGraphNode {
	struct TArray<struct AActor*> TeamActors; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
	struct TSet<struct ASolarCharacter*> LastReplicationActors; // 0x70(0x50)
	struct AActor* LastPawn; // 0xc0(0x08)
};

// Class Solarland.SolarReplicationGraphNode_PlayerStateFrequencyLimiter
// Size: 0x78 (Inherited: 0x50)
struct USolarReplicationGraphNode_PlayerStateFrequencyLimiter : UReplicationGraphNode {
	char pad_50[0x28]; // 0x50(0x28)
};

// Class Solarland.SolarReplicationGraphNode_GridSpatialization2D
// Size: 0x2d0 (Inherited: 0x230)
struct USolarReplicationGraphNode_GridSpatialization2D : UReplicationGraphNode_GridSpatialization2D {
	struct TSet<struct AActor*> PendingForceNetUpdateActors; // 0x228(0x50)
	char pad_280[0x50]; // 0x280(0x50)
};

// Class Solarland.SolarReplicationGraphNode_GridCell
// Size: 0x130 (Inherited: 0x120)
struct USolarReplicationGraphNode_GridCell : UReplicationGraphNode_GridCell {
	struct UReplicationGraphNode_ActorList* ForceNetUpdateNode; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
};

// Class Solarland.SolarReplicationGraphDebugActor
// Size: 0x238 (Inherited: 0x238)
struct ASolarReplicationGraphDebugActor : AReplicationGraphDebugActor {

	void ServerSetClassNetCullDistance(struct UObject* Class, float CullDistance); // Function Solarland.SolarReplicationGraphDebugActor.ServerSetClassNetCullDistance // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1e07390
};

// Class Solarland.SolarResolutionSettings
// Size: 0x28 (Inherited: 0x28)
struct USolarResolutionSettings : UObject {

	void SetScreenModeByNum(int32_t InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenModeByNum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e0c0f0
	void SetScreenMode(enum class EWindowMode InScreenMode); // Function Solarland.SolarResolutionSettings.SetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e0c080
	enum class EWindowMode GetScreenMode(); // Function Solarland.SolarResolutionSettings.GetScreenMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e0b600
	bool CanViewportSetWindowedMode(); // Function Solarland.SolarResolutionSettings.CanViewportSetWindowedMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e0aba0
};

// Class Solarland.SolarResurrectionComponent
// Size: 0xb8 (Inherited: 0xb0)
struct USolarResurrectionComponent : UActorComponent {
	bool bStateHasChanged; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void OnPostRepNotifies(); // Function Solarland.SolarResurrectionComponent.OnPostRepNotifies // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarRichTextBlock
// Size: 0x740 (Inherited: 0x160)
struct USolarRichTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	struct UDataTable* TextStyleSet; // 0x188(0x08)
	struct TArray<struct URichTextBlockDecorator*> DecoratorClasses; // 0x190(0x10)
	bool bOverrideDefaultStyle; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
	struct FTextBlockStyle DefaultTextStyleOverride; // 0x1a8(0x2a0)
	float MinDesiredWidth; // 0x448(0x04)
	bool bUsingAccurateScale; // 0x44c(0x01)
	char pad_44D[0x2a3]; // 0x44d(0x2a3)
	struct TArray<struct URichTextBlockDecorator*> InstanceDecorators; // 0x6f0(0x10)
	char pad_700[0x40]; // 0x700(0x40)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarRichTextBlock.SetWrapTextAt // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0c2b0
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarRichTextBlock.SetWrappingPolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0c330
	void SetTextStyleSet(struct UDataTable* NewTextStyleSet); // Function Solarland.SolarRichTextBlock.SetTextStyleSet // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0c230
	void SetText(struct FText& InText); // Function Solarland.SolarRichTextBlock.SetText // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e0c160
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarRichTextBlock.SetMinDesiredWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0c000
	void SetDefaultTextStyle(struct FTextBlockStyle& InDefaultTextStyle); // Function Solarland.SolarRichTextBlock.SetDefaultTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e0be70
	void SetDefaultStrikeBrush(struct FSlateBrush& InStrikeBrush); // Function Solarland.SolarRichTextBlock.SetDefaultStrikeBrush // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e0bce0
	void SetDefaultShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarRichTextBlock.SetDefaultShadowOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1e0bc60
	void SetDefaultShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultShadowColorAndOpacity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1e0bbe0
	void SetDefaultFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarRichTextBlock.SetDefaultFont // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0bad0
	void SetDefaultColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarRichTextBlock.SetDefaultColorAndOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0b9e0
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarRichTextBlock.SetAutoWrapText // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0b950
	enum class ETextWrappingPolicy GetWrappingPolicy(); // Function Solarland.SolarRichTextBlock.GetWrappingPolicy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b710
	struct UDataTable* GetTextStyleSet(); // Function Solarland.SolarRichTextBlock.GetTextStyleSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b6e0
	struct FText GetText(); // Function Solarland.SolarRichTextBlock.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b640
	struct URichTextBlockDecorator* GetDecoratorByClass(struct URichTextBlockDecorator* DecoratorClass); // Function Solarland.SolarRichTextBlock.GetDecoratorByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0ad90
	void ClearAllDefaultStyleOverrides(); // Function Solarland.SolarRichTextBlock.ClearAllDefaultStyleOverrides // (Final|Native|Public) // @ game+0x1e0abd0
};

// Class Solarland.SolarRocketVehicleAnimInstance
// Size: 0x3e0 (Inherited: 0x3b0)
struct USolarRocketVehicleAnimInstance : USolarLeggedVehicleAnimInstance {
	bool bInEquipState; // 0x3a8(0x01)
	float FootTargetTraceLength; // 0x3ac(0x04)
	struct TArray<struct FVector> FootTargetTraceStartLocations; // 0x3b0(0x10)
	float FootTraceRadius; // 0x3c0(0x04)
	float FootTargetBlendSpeed; // 0x3c4(0x04)
	struct TArray<float> FootTargetOffsets; // 0x3c8(0x10)
	char pad_3DD[0x3]; // 0x3dd(0x03)

	void AnimNotify_EnterOpen(); // Function Solarland.SolarRocketVehicleAnimInstance.AnimNotify_EnterOpen // (Final|Native|Protected) // @ game+0x1e0ab80
};

// Class Solarland.SolarRoleSkillDataConfig
// Size: 0x1e8 (Inherited: 0x30)
struct USolarRoleSkillDataConfig : UDataAsset {
	struct TSoftObjectPtr<UPassiveSkillDataAsset> ClassCommonPassiveSkill; // 0x30(0x28)
	struct TMap<enum class EClassType, struct FHeroClassConfig> HeroClassConfigs; // 0x58(0x50)
	struct UDataTable* RoleSkillDataTable; // 0xa8(0x08)
	int32_t RoleSkillCannotActiveNoticeID; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FSoftClassPath UniqueSkillForbiddenGameplayEffect; // 0xb8(0x18)
	struct FSoftClassPath TacticalSkillForbiddenGameplayEffect; // 0xd0(0x18)
	struct FSoftClassPath InitCDValueGameplayEffect; // 0xe8(0x18)
	struct FSoftClassPath SuperSkillBlockGameplayEffect; // 0x100(0x18)
	struct FSoftClassPath TacticalSkillBlockGameplayEffect; // 0x118(0x18)
	struct UGameplayEffect* UsingContinuousSkillStatusEffect; // 0x130(0x08)
	struct UGameplayEffect* HoldingSkillStatusEffect; // 0x138(0x08)
	struct UDataTable* WeaponUIStyleDataTable; // 0x140(0x08)
	struct TMap<int32_t, struct FString> CharacterUpgradeEffects; // 0x148(0x50)
	char pad_198[0x50]; // 0x198(0x50)

	enum class EClassLevelUpRewardType GetLevelUpRewardType(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpRewardType // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0b420
	struct FSoftObjectPath GetLevelUpInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerIconPath // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b2f0
	struct FString GetLevelUpInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b1d0
	struct TArray<struct FSoftObjectPath> GetLevelUpAllInnerIconPath(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerIconPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0b060
	struct TArray<struct FString> GetLevelUpAllInnerDescription(int32_t CharacterId, int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetLevelUpAllInnerDescription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0aef0
	struct FString GetEffectIdForCharacterUpgrade(int32_t TargetLevel); // Function Solarland.SolarRoleSkillDataConfig.GetEffectIdForCharacterUpgrade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e0ae20
	enum class EClassType GetClassTypeForCharacter(int32_t CharacterId); // Function Solarland.SolarRoleSkillDataConfig.GetClassTypeForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0acc0
};

// Class Solarland.SolarRuntimeAssetsCollection
// Size: 0x38 (Inherited: 0x28)
struct USolarRuntimeAssetsCollection : URuntimeAssetsCollectionBase {
	struct TArray<struct FFilteredData> AssetFilters; // 0x28(0x10)
};

// Class Solarland.SolarSaveGame
// Size: 0xa8 (Inherited: 0x28)
struct USolarSaveGame : USaveGame {
	bool HasShowNewPlayerGuide; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	int32_t EditorGameModeId; // 0x2c(0x04)
	struct TArray<struct FNeverShowCheckWindow> NeverShowCheckWindowList; // 0x30(0x10)
	bool HasReadSurvey; // 0x40(0x01)
	bool HasReadSurvey2; // 0x41(0x01)
	bool HasPlayedHuntMode; // 0x42(0x01)
	char MatchTimes; // 0x43(0x01)
	bool HasCompleteTeamUp; // 0x44(0x01)
	bool IsMorrowPlayer; // 0x45(0x01)
	bool bClickSocialEntranceBtnDiscord; // 0x46(0x01)
	bool bClickSocialEntranceBtnFacebook; // 0x47(0x01)
	bool bClickSocialEntranceBtnYouTube; // 0x48(0x01)
	bool bClickSocialEntranceBtnTikTok; // 0x49(0x01)
	bool bClickSocialEntranceBtnInstagram; // 0x4a(0x01)
	bool bClickSocialTip; // 0x4b(0x01)
	bool bClickLiveBroadcast; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int64_t SocialLinkLastClickTime; // 0x50(0x08)
	bool bHasReportedOnline15min; // 0x58(0x01)
	bool bHasReportedOnline30min; // 0x59(0x01)
	bool bHasPlayedPackEnterAnimation; // 0x5a(0x01)
	bool bHasClickClanPermission; // 0x5b(0x01)
	int32_t BattlePassID; // 0x5c(0x04)
	struct TArray<int32_t> MarkingPassTaskID; // 0x60(0x10)
	struct TArray<int32_t> DisplayedProductIDs; // 0x70(0x10)
	struct TArray<int32_t> ClickedPosterRecIDs; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)
	struct TArray<uint32_t> ReadMailIds; // 0x98(0x10)

	bool ValidateNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.ValidateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x1e0c730
	void UpdateNeverShowCheckWindow(int32_t TargetConfirmID, enum class ENeverShowDuration NewDuration); // Function Solarland.SolarSaveGame.UpdateNeverShowCheckWindow // (Final|Native|Public) // @ game+0x1e0c670
	void UpdateMarkTask(int32_t InBattlePassID, int32_t TaskID, bool Add); // Function Solarland.SolarSaveGame.UpdateMarkTask // (Final|Native|Public) // @ game+0x1e0c570
	void UpdateDisplayedIDs(struct TArray<int32_t>& InIDs); // Function Solarland.SolarSaveGame.UpdateDisplayedIDs // (Final|Native|Public|HasOutParms) // @ game+0x1e0c4c0
	void UpdateClickedPosterRecIDs(int32_t InID); // Function Solarland.SolarSaveGame.UpdateClickedPosterRecIDs // (Final|Native|Public) // @ game+0x1e0c440
	void SetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& InTaskID); // Function Solarland.SolarSaveGame.SetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x1e0bf20
	void PrintTwiceConfirmCheckWindowList(); // Function Solarland.SolarSaveGame.PrintTwiceConfirmCheckWindowList // (Final|Native|Public) // @ game+0x8ba190
	void GetMarkingTask(int32_t InBattlePassID, struct TArray<int32_t>& OutTaskID); // Function Solarland.SolarSaveGame.GetMarkingTask // (Final|Native|Public|HasOutParms) // @ game+0x1e0b4e0
	bool DeleteNeverShowCheckWindow(int32_t TargetConfirmID); // Function Solarland.SolarSaveGame.DeleteNeverShowCheckWindow // (Final|Native|Public) // @ game+0x1e0ac10
	void ClearDisplayIDs(); // Function Solarland.SolarSaveGame.ClearDisplayIDs // (Final|Native|Public) // @ game+0x1e0abf0
};

// Class Solarland.SolarSceneConfig
// Size: 0x60 (Inherited: 0x30)
struct USolarSceneConfig : UDataAsset {
	struct FSoftObjectPath MeshMapPath; // 0x30(0x18)
	struct FSoftObjectPath LightmapPath; // 0x48(0x18)
};

// Class Solarland.SolarShieldDamageEffect
// Size: 0x1b0 (Inherited: 0x1a8)
struct USolarShieldDamageEffect : USolarAbilityEffect {
	float ShieldDamage; // 0x1a8(0x04)
	char pad_1AC[0x4]; // 0x1ac(0x04)

	float GetShieldDamage(); // Function Solarland.SolarShieldDamageEffect.GetShieldDamage // (Final|Native|Public|Const) // @ game+0x1e0f4a0
};

// Class Solarland.SolarShieldProgressBoard
// Size: 0x2f0 (Inherited: 0x2b8)
struct USolarShieldProgressBoard : USolarAdvProgressBoard {
	float AutoRechargeSpeed; // 0x2b8(0x04)
	float RechargeTime; // 0x2bc(0x04)
	float PreChangeSpeed; // 0x2c0(0x04)
	char pad_2C4[0x2c]; // 0x2c4(0x2c)

	void UpdateCurrentValue(float Current); // Function Solarland.SolarShieldProgressBoard.UpdateCurrentValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1e10360
	void SetSpeed(float NewSpeed); // Function Solarland.SolarShieldProgressBoard.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e102e0
	void SetProgressColorByID(struct FLinearColor& InColor, int32_t InID); // Function Solarland.SolarShieldProgressBoard.SetProgressColorByID // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void SetPreAddColor(); // Function Solarland.SolarShieldProgressBoard.SetPreAddColor // (Final|Native|Public|BlueprintCallable) // @ game+0x1e102c0
	void PreAddValue(float InCurrentValue, float InChangeValue, enum class EShieldRechargeState RechargeState, bool bInFixPreAdd); // Function Solarland.SolarShieldProgressBoard.PreAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1e10170
	void InitProgressBoard(float Current, float Max, int32_t Fragment); // Function Solarland.SolarShieldProgressBoard.InitProgressBoard // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f520
	void InitProgress(); // Function Solarland.SolarShieldProgressBoard.InitProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f500
	float GetSpeed(); // Function Solarland.SolarShieldProgressBoard.GetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f4d0
	void DoMinusValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.DoMinusValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f380
	void DoAddValue(float InCurrentValue); // Function Solarland.SolarShieldProgressBoard.DoAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f300
	void CancelAddValue(float InCurrentValue, float InChangeValue); // Function Solarland.SolarShieldProgressBoard.CancelAddValue // (Final|Native|Public|BlueprintCallable) // @ game+0x1e0f240
};

// Class Solarland.SolarShieldUpgradeItemShop
// Size: 0x408 (Inherited: 0x238)
struct ASolarShieldUpgradeItemShop : ASolarInteractableActor {
	int32_t groupid; // 0x238(0x04)
	int32_t ServerActiveGroupID; // 0x23c(0x04)
	struct UStaticMeshComponent* BodyMesh; // 0x240(0x08)
	struct USphereComponent* CollisionComp; // 0x248(0x08)
	struct UStaticMeshComponent* HeadUpIconMesh; // 0x250(0x08)
	int32_t UpgradeItemNum; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct TSoftObjectPtr<UParticleSystem> InteractionTriggeredEffect; // 0x260(0x28)
	struct FSolarIntArray InteractedPlayerIDList; // 0x288(0x130)
	char pad_3B8[0x18]; // 0x3b8(0x18)
	struct USphereComponent* AudioTriggerComp; // 0x3d0(0x08)
	struct UAkComponent* AkAudioComponent; // 0x3d8(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x3e0(0x08)
	struct FString SNameHint; // 0x3e8(0x10)
	struct FString SNameStopHint; // 0x3f8(0x10)

	void OnRep_InteractedPlayerIDList(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_InteractedPlayerIDList // (Final|Native|Public) // @ game+0x1e0fda0
	void OnRep_ActiveGroupID(); // Function Solarland.SolarShieldUpgradeItemShop.OnRep_ActiveGroupID // (Final|Native|Public) // @ game+0x1e0fd60
	void OnOtherPlayerInteracted(); // Function Solarland.SolarShieldUpgradeItemShop.OnOtherPlayerInteracted // (Final|Native|Protected) // @ game+0x1e0fd40
	void OnCurrentPlayerChanged(); // Function Solarland.SolarShieldUpgradeItemShop.OnCurrentPlayerChanged // (Final|Native|Protected) // @ game+0x8ba190
	void OnActorEndOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlapAudioSphere // (Final|Native|Protected) // @ game+0x1e0fc00
	void OnActorEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarShieldUpgradeItemShop.OnActorEndOverlap // (Final|Native|Protected) // @ game+0x1d4bf90
	void OnActorBeginOverlapAudioSphere(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlapAudioSphere // (Final|Native|Protected|HasOutParms) // @ game+0x1e0f9f0
	void OnActorBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarShieldUpgradeItemShop.OnActorBeginOverlap // (Final|Native|Protected|HasOutParms) // @ game+0x1e0f7e0
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarShieldUpgradeItemShop.InitSolarAkGameObject // (Final|Native|Protected) // @ game+0x1e0f630
};

// Class Solarland.SolarWheeledVehicle
// Size: 0x14e0 (Inherited: 0x14c0)
struct ASolarWheeledVehicle : ASolarVehiclePawn {
	struct USolarWheeledVehicleMovement* VehicleMovement; // 0x14c0(0x08)
	bool bReplicatedDrift; // 0x14c8(0x01)
	bool bReplicatedIsBurnout; // 0x14c9(0x01)
	char pad_14CA[0x2]; // 0x14ca(0x02)
	float PlatformDetachImpulse; // 0x14cc(0x04)
	char pad_14D0[0x10]; // 0x14d0(0x10)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarWheeledVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x1ec11f0
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarWheeledVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x1ec0ef0
	void ServerSetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicle.ServerSetIsBurnout // (Net|Native|Event|Public|NetServer) // @ game+0x1efe290
	void OnRep_IsBurnout(); // Function Solarland.SolarWheeledVehicle.OnRep_IsBurnout // (Final|Native|Protected) // @ game+0x1efdd10
	void OnRep_Drift(); // Function Solarland.SolarWheeledVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x1efdcf0
};

// Class Solarland.SolarSiegeVehicle
// Size: 0x1550 (Inherited: 0x14e0)
struct ASolarSiegeVehicle : ASolarWheeledVehicle {
	struct TArray<struct FSiegeVehicleOpenTraceData> CheckOpenTraceBox; // 0x14e0(0x10)
	struct TArray<struct FSiegeVehicleOpenCapsuleData> CheckOpenTraceCap; // 0x14f0(0x10)
	float CheckOffsetZ; // 0x1500(0x04)
	char pad_1504[0x4]; // 0x1504(0x04)
	struct USolarSiegeVehicleAnimInstance* SolarVehicleAnimInstance; // 0x1508(0x08)
	struct TArray<struct FName> HolerBoneNames; // 0x1510(0x10)
	struct UParticleSystem* SiegeWeaponFire; // 0x1520(0x08)
	char pad_1528[0x8]; // 0x1528(0x08)
	struct UCameraShake* OpenCameraShake; // 0x1530(0x08)
	float OpenCameraShakeSpeed; // 0x1538(0x04)
	char pad_153C[0x4]; // 0x153c(0x04)
	struct UParticleSystemComponent* MuzzlePSC; // 0x1540(0x08)
	char pad_1548[0x8]; // 0x1548(0x08)

	bool IsSiegeWeaponOpened(); // Function Solarland.SolarSiegeVehicle.IsSiegeWeaponOpened // (Final|Native|Public) // @ game+0x1e0f700
	char GetCurrentVehicleAnimation(); // Function Solarland.SolarSiegeVehicle.GetCurrentVehicleAnimation // (Final|Native|Public) // @ game+0x1e0f470
};

// Class Solarland.SolarWheeledVehicleAnimInstance
// Size: 0x3d0 (Inherited: 0x2f0)
struct USolarWheeledVehicleAnimInstance : USolarVehicleAnimInstance {
	struct FVector FLWheelBoneScale; // 0x2f0(0x0c)
	struct FVector FRWheelBoneScale; // 0x2fc(0x0c)
	struct FVector MLWheelBoneScale; // 0x308(0x0c)
	struct FVector MRWheelBoneScale; // 0x314(0x0c)
	struct FVector BLWheelBoneScale; // 0x320(0x0c)
	struct FVector BRWheelBoneScale; // 0x32c(0x0c)
	struct FVector FLWheelBoneLocation; // 0x338(0x0c)
	struct FVector FRWheelBoneLocation; // 0x344(0x0c)
	struct FVector MLWheelBoneLocation; // 0x350(0x0c)
	struct FVector MRWheelBoneLocation; // 0x35c(0x0c)
	struct FVector BLWheelBoneLocation; // 0x368(0x0c)
	struct FVector BRWheelBoneLocation; // 0x374(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x380(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x38c(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x398(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x3a4(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x3b0(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x3bc(0x0c)
	char pad_3C8[0x8]; // 0x3c8(0x08)

	void AnimNotify_EnablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_EnablePlatform // (Final|Native|Public) // @ game+0x1efd5d0
	void AnimNotify_DisablePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_DisablePlatform // (Final|Native|Public) // @ game+0x1efd5b0
	void AnimNotify_ClosePlatform(); // Function Solarland.SolarWheeledVehicleAnimInstance.AnimNotify_ClosePlatform // (Final|Native|Public) // @ game+0x1efd590
};

// Class Solarland.SolarSiegeVehicleAnimInstance
// Size: 0x410 (Inherited: 0x3d0)
struct USolarSiegeVehicleAnimInstance : USolarWheeledVehicleAnimInstance {
	struct UAnimMontage* VehicleWeaponPostFireMontage; // 0x3d0(0x08)
	struct TArray<struct FVector> SiegeHolderLocations; // 0x3d8(0x10)
	char pad_3E8[0x4]; // 0x3e8(0x04)
	float PreStopSpeed; // 0x3ec(0x04)
	float WeaponFireAlphaF; // 0x3f0(0x04)
	float WeaponFireAlphaB; // 0x3f4(0x04)
	float WeaponFireAlphaR; // 0x3f8(0x04)
	float WeaponFireAlphaL; // 0x3fc(0x04)
	float StopSoundMinSpeed; // 0x400(0x04)
	char pad_404[0xc]; // 0x404(0x0c)

	void AnimNotify_StopLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_StopLeft // (Final|Native|Public) // @ game+0x1e0f220
	void AnimNotify_CloseIdleLeft(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleLeft // (Final|Native|Public) // @ game+0x1e0f200
	void AnimNotify_CloseIdleEnter(); // Function Solarland.SolarSiegeVehicleAnimInstance.AnimNotify_CloseIdleEnter // (Final|Native|Public) // @ game+0x1e0f1e0
};

// Class Solarland.SolarSignificanceInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSignificanceInterface : UInterface {

	void PostGroupIDChangedFunction(int32_t OldGroup, int32_t NewGroup); // Function Solarland.SolarSignificanceInterface.PostGroupIDChangedFunction // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e0ff40
};

// Class Solarland.SolarSignificanceManager
// Size: 0x1c0 (Inherited: 0x138)
struct USolarSignificanceManager : USignificanceManager {
	float CalculateSceneActorTickInterval; // 0x138(0x04)
	char pad_13C[0x1c]; // 0x13c(0x1c)
	struct TArray<struct AActor*> ManagedSceneActors; // 0x158(0x10)
	struct TSet<struct AActor*> ManagedSceneActorSet; // 0x168(0x50)
	char pad_1B8[0x8]; // 0x1b8(0x08)
};

// Class Solarland.SolarSkeletalMeshMergeUtil
// Size: 0x28 (Inherited: 0x28)
struct USolarSkeletalMeshMergeUtil : UBlueprintFunctionLibrary {

	struct USkeletalMesh* MergeMeshes(struct FSkeletalMeshMergeParams& Params); // Function Solarland.SolarSkeletalMeshMergeUtil.MergeMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1e0f730
};

// Class Solarland.SummonItemTurret
// Size: 0x470 (Inherited: 0x398)
struct ASummonItemTurret : ASummonItemBase {
	float DetectableRadius; // 0x398(0x04)
	char pad_39C[0x4]; // 0x39c(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableCollisionTypes; // 0x3a0(0x10)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct ASolarSummonWeapon* CurrentWeapon; // 0x3b8(0x08)
	struct FRotator LookAtTargetRotator; // 0x3c0(0x0c)
	float LookAtTargetYawPerSecond; // 0x3cc(0x04)
	struct UAnimSequence* TurretFireAnimation; // 0x3d0(0x08)
	struct UAnimSequence* TurretStandbyAnimation; // 0x3d8(0x08)
	struct UAnimSequence* TurretTransformAnimation; // 0x3e0(0x08)
	struct AActor* TurretWeaponBP; // 0x3e8(0x08)
	char AnimationIndex; // 0x3f0(0x01)
	char pad_3F1[0xf]; // 0x3f1(0x0f)
	struct UParticleSystem* BoomEffect; // 0x400(0x08)
	float AimMaxAngle; // 0x408(0x04)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct TArray<struct AActor*> RangeTestIgnoreActor; // 0x410(0x10)
	struct TArray<struct AActor*> TargetTestIgnoreActor; // 0x420(0x10)
	struct FVector ImpactDirection; // 0x430(0x0c)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct TArray<enum class EObjectTypeQuery> BlockShotObjectTypes; // 0x440(0x10)
	float BlockShotCheckRadius; // 0x450(0x04)
	float TestEnemyHeight; // 0x454(0x04)
	struct TArray<struct FName> PrioritizeTargetingBoneNames; // 0x458(0x10)
	char pad_468[0x4]; // 0x468(0x04)
	struct FSpawnedActorHandle CachedTurretHandle; // 0x46c(0x04)

	void SpawnTurretWeapon(struct ASolarCharacter* InSummoner, struct FTransform& InTransform, int32_t InSummonerID); // Function Solarland.SummonItemTurret.SpawnTurretWeapon // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1f07db0
	void OnTurretStandby(); // Function Solarland.SummonItemTurret.OnTurretStandby // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnTurretLocked(); // Function Solarland.SummonItemTurret.OnTurretLocked // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnTurretFire(); // Function Solarland.SummonItemTurret.OnTurretFire // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnTurretDead(); // Function Solarland.SummonItemTurret.OnTurretDead // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnTurretAppear(); // Function Solarland.SummonItemTurret.OnTurretAppear // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_UpdateAnimationIndex(); // Function Solarland.SummonItemTurret.OnRep_UpdateAnimationIndex // (Final|Native|Protected) // @ game+0x1f075f0
	void OnRep_LookAtTargetRotator(); // Function Solarland.SummonItemTurret.OnRep_LookAtTargetRotator // (Final|Native|Protected) // @ game+0x1f075b0
	void OnRep_CurrentWeapon(); // Function Solarland.SummonItemTurret.OnRep_CurrentWeapon // (Final|Native|Protected) // @ game+0x1f07590
};

// Class Solarland.SolarSkill_AutomaticTurret
// Size: 0x498 (Inherited: 0x470)
struct ASolarSkill_AutomaticTurret : ASummonItemTurret {
	struct FGameplayEffectSpecHandle FreezeEffectSpecHandle; // 0x470(0x10)
	int32_t TestOverlapDestroyInterval; // 0x480(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x484(0x0c)
	int32_t TestOverlapDestroyTimer; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
};

// Class Solarland.SolarSkill_Projectile
// Size: 0x430 (Inherited: 0x228)
struct ASolarSkill_Projectile : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x230(0x08)
	struct USphereComponent* ProjectileUpdateComponent; // 0x238(0x08)
	struct UCapsuleComponent* DefaultUpdateComponent; // 0x240(0x08)
	struct FVector ProjectileVelocity; // 0x248(0x0c)
	char pad_254[0x4]; // 0x254(0x04)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x258(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x268(0x10)
	bool bDebug; // 0x278(0x01)
	bool bInstantStop; // 0x279(0x01)
	char pad_27A[0x2]; // 0x27a(0x02)
	float ForceStopTime; // 0x27c(0x04)
	float DeferExplodeTime; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct FSoftObjectPath ProjectileStopEffectPath; // 0x288(0x18)
	struct FTransform ProjectileStopEffectTransform; // 0x2a0(0x30)
	struct FSoftObjectPath ProjectileExplosionEffectPath; // 0x2d0(0x18)
	char pad_2E8[0x8]; // 0x2e8(0x08)
	struct FTransform ProjectileExplosionEffectTransform; // 0x2f0(0x30)
	struct FSoftObjectPath ProjectileTrajectoryEffectPath; // 0x320(0x18)
	char pad_338[0x28]; // 0x338(0x28)
	struct UAkComponent* AkAudioComponent; // 0x360(0x08)
	struct FString SetProjectileVelocitySoundEvent1P; // 0x368(0x10)
	struct FString SetProjectileVelocitySoundEvent3P; // 0x378(0x10)
	struct FString SetProjectileVelocitySoundEvent3PEnemy; // 0x388(0x10)
	struct FString OnProjectileMovementStopSoundEvent1P; // 0x398(0x10)
	struct FString OnProjectileMovementStopSoundEvent3P; // 0x3a8(0x10)
	struct FString OnProjectileMovementStopSoundEvent3PEnemy; // 0x3b8(0x10)
	struct FString CommonHitSound1P; // 0x3c8(0x10)
	struct FString CommonHitSound3P; // 0x3d8(0x10)
	struct FString CommonHitSound3PEnemy; // 0x3e8(0x10)
	struct FString ExplosionSound1P; // 0x3f8(0x10)
	struct FString ExplosionSound3P; // 0x408(0x10)
	struct FString ExplosionSound3PEnemy; // 0x418(0x10)
	char pad_428[0x8]; // 0x428(0x08)

	void ReceiveSetProjectileMovement(); // Function Solarland.SolarSkill_Projectile.ReceiveSetProjectileMovement // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveProjectileMovementStop // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveExplosion(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ReceiveExplosion // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void PlayHitSurfaceSound(struct FHitResult& InHitResult); // Function Solarland.SolarSkill_Projectile.PlayHitSurfaceSound // (Final|Native|Protected|HasOutParms) // @ game+0x1e14200
	void OnRep_ProjectileVelocity(); // Function Solarland.SolarSkill_Projectile.OnRep_ProjectileVelocity // (Final|Native|Protected) // @ game+0x1e13930
	void OnProjectileMovementStopInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStopInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1e13850
	void OnProjectileMovementStop(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.OnProjectileMovementStop // (Final|Native|Protected|HasOutParms) // @ game+0x1e13770
	void OnProjectileBounce(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity); // Function Solarland.SolarSkill_Projectile.OnProjectileBounce // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x1e13640
	void OnChangeOwnerCharacterInternal(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacterInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x1257f30
	void OnChangeOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.OnChangeOwnerCharacter // (Final|Native|Protected) // @ game+0x1e135a0
	struct ASolarCharacter* GetOwnerCharacter(); // Function Solarland.SolarSkill_Projectile.GetOwnerCharacter // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1e13020
	void ExplodeInternal(struct FHitResult& InImpactResult); // Function Solarland.SolarSkill_Projectile.ExplodeInternal // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1e12f40
};

// Class Solarland.SolarSkill_ClusterGrenade
// Size: 0x510 (Inherited: 0x430)
struct ASolarSkill_ClusterGrenade : ASolarSkill_Projectile {
	float Speed; // 0x428(0x04)
	float ThrowAngleOffset; // 0x42c(0x04)
	float ExplosionRadius; // 0x430(0x04)
	struct UStaticMeshComponent* ClusterGrenadeMesh; // 0x438(0x08)
	bool bIsLeader; // 0x440(0x01)
	float Damage; // 0x444(0x04)
	struct FRuntimeFloatCurve DamageScaleByDistanceCurve; // 0x448(0x88)
	struct TArray<enum class EObjectTypeQuery> CanDamageObjectTypes; // 0x4d0(0x10)
	float DelayDestroyTime; // 0x4e0(0x04)
	char pad_4E5[0x3]; // 0x4e5(0x03)
	struct TArray<struct FSolarSubClusterGrenadeData> SubClusterGrenades; // 0x4e8(0x10)
	bool bTeammateDamage; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
	struct TArray<struct TWeakObjectPtr<struct ASolarSkill_ClusterGrenade>> ClusterGrenadeIgnoreArray; // 0x500(0x10)
};

// Class Solarland.SolarSkill_EMP
// Size: 0x470 (Inherited: 0x430)
struct ASolarSkill_EMP : ASolarSkill_Projectile {
	float TestRadius; // 0x428(0x04)
	float DamageToShield; // 0x42c(0x04)
	float DamageToSummon; // 0x430(0x04)
	struct TArray<enum class EObjectTypeQuery> TestObjectTypes; // 0x438(0x10)
	float DelayDestroyTime; // 0x448(0x04)
	struct AActor* PerformActorClass; // 0x450(0x08)
	struct AActor* EnemyPerformActorClass; // 0x458(0x08)
	float PerformActorLifeTime; // 0x460(0x04)
	bool bSpawndPerformActor; // 0x464(0x01)
	char pad_465[0xb]; // 0x465(0x0b)
};

// Class Solarland.SolarSkill_EMPForceField
// Size: 0x4f8 (Inherited: 0x398)
struct ASolarSkill_EMPForceField : ASummonItemBase {
	struct FGameplayEffectSpecHandle EMPGameplayEffecctHandle; // 0x398(0x10)
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x3a8(0x10)
	struct FVector2D TestRange; // 0x3b8(0x08)
	struct FName CoreName; // 0x3c0(0x08)
	struct TMap<enum class ESolarEMPParticleType, struct FSolarEMPParticleInfo> EMPParticleTable; // 0x3c8(0x50)
	float ForceFieldReadyTime; // 0x418(0x04)
	float ForceFieldActiveTime; // 0x41c(0x04)
	float ForceFieldEndTime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct FString EMPStartSoundName; // 0x428(0x10)
	struct FString EMPEndSoundName; // 0x438(0x10)
	struct FSoftClassPath EffectActorClassPathForTeammate; // 0x448(0x18)
	struct FSoftClassPath EffectActorClassPathForEnemy; // 0x460(0x18)
	float DamageValueToCharacterShield; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FActiveGameplayEffectHandle> TestActorMap; // 0x480(0x50)
	struct TWeakObjectPtr<struct UShapeComponent> CoreComponent; // 0x4d0(0x08)
	struct TArray<struct UParticleSystemComponent*> ManualReleaseEmitterArray; // 0x4d8(0x10)
	char pad_4E8[0x1]; // 0x4e8(0x01)
	enum class ESolarEMPForceFieldState CurrentEMPState; // 0x4e9(0x01)
	char pad_4EA[0x6]; // 0x4ea(0x06)
	struct ASolarSkill_ForceFieldEffect* EffectActor; // 0x4f0(0x08)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_EMPForceField.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x1e0fdc0
	void OnRep_CurrentState(); // Function Solarland.SolarSkill_EMPForceField.OnRep_CurrentState // (Final|Native|Protected) // @ game+0x1e0fd80
};

// Class Solarland.SolarSkill_ForceFieldEffect
// Size: 0x228 (Inherited: 0x228)
struct ASolarSkill_ForceFieldEffect : AActor {

	void PlayLoopAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayLoopAnimation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlayFadeOutAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeOutAnimation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PlayFadeInAnimation(); // Function Solarland.SolarSkill_ForceFieldEffect.PlayFadeInAnimation // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarSkill_Grenade
// Size: 0x4c0 (Inherited: 0x430)
struct ASolarSkill_Grenade : ASolarSkill_Projectile {
	struct FRuntimeFloatCurve DamageCurve; // 0x428(0x88)
	char pad_4B8[0x8]; // 0x4b8(0x08)
};

// Class Solarland.SolarSkill_Incendiary
// Size: 0x610 (Inherited: 0x430)
struct ASolarSkill_Incendiary : ASolarSkill_Projectile {
	struct TArray<enum class EActorRegisterType> CheckTypes; // 0x428(0x10)
	struct FVector2D Range; // 0x438(0x08)
	float DamageTimeInternal; // 0x440(0x04)
	float Damage; // 0x444(0x04)
	struct FVector FireDecalSize; // 0x448(0x0c)
	struct TSoftObjectPtr<UParticleSystem> FireParticle; // 0x458(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FireDecalMaterial; // 0x480(0x28)
	struct TSoftObjectPtr<UParticleSystem> BuffParticle; // 0x4a8(0x28)
	struct FRotator BuffRotator; // 0x4d0(0x0c)
	struct FName BuffAttachPointName; // 0x4dc(0x08)
	float DelayDestroyTime; // 0x4e4(0x04)
	int32_t FireEffectCountMax; // 0x4e8(0x04)
	float BurnRamainTime; // 0x4ec(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableObjectTypes; // 0x4f0(0x10)
	struct FName FireDecalFadeOutName; // 0x500(0x08)
	float MinimumCheckHeight; // 0x508(0x04)
	float CharacterHeightOffset; // 0x50c(0x04)
	bool bTeammateDamage; // 0x510(0x01)
	bool bOnlyOne; // 0x511(0x01)
	struct FName EffectID; // 0x514(0x08)
	char pad_51E[0x2]; // 0x51e(0x02)
	struct TMap<struct TWeakObjectPtr<struct AActor>, float> CheckedActors; // 0x520(0x50)
	struct TArray<struct UParticleSystemComponent*> FireParticleSystemComponents; // 0x570(0x10)
	struct UDecalComponent* FireDecalComponent; // 0x580(0x08)
	struct UStaticMeshComponent* IncendiaryMesh; // 0x588(0x08)
	struct UAkComponent* AkComponent; // 0x590(0x08)
	bool bInBuring; // 0x598(0x01)
	char pad_599[0x3]; // 0x599(0x03)
	int32_t CurrentFireEffectCount; // 0x59c(0x04)
	char pad_5A0[0x8]; // 0x5a0(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, int32_t> BuffParticleSystemComponents; // 0x5a8(0x50)
	struct UMaterialInstanceDynamic* FireDecalDynamicMaterial; // 0x5f8(0x08)
	float FireDecalFadeOutTimer; // 0x600(0x04)
	char pad_604[0xc]; // 0x604(0x0c)

	void ReceviceExplodeEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceExplodeEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceviceDestroyEvent(); // Function Solarland.SolarSkill_Incendiary.ReceviceDestroyEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceviceDamageActorEvent(struct AActor* InActor); // Function Solarland.SolarSkill_Incendiary.ReceviceDamageActorEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void PostSoundEvent(struct FString InSoundEvent, bool InbHasCamp, struct AActor* InTarget); // Function Solarland.SolarSkill_Incendiary.PostSoundEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e10000
	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarSkill_Incendiary.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x1e0fe80
	struct UObject* GetClassType(); // Function Solarland.SolarSkill_Incendiary.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1e0f440
};

// Class Solarland.SolarSkill_ProjectileInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarSkill_ProjectileInterface : UInterface {

	void SetStartAndTargetTransform(struct FTransform& InStartTransform, struct FTransform& InTargetTransform); // Function Solarland.SolarSkill_ProjectileInterface.SetStartAndTargetTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1e14600
	void SetProjectileVelocity(struct UProjectileMovementComponent* InProjectileMovementComponent, struct FVector& InVelocity, bool bCalculateVelocity, float InSpeed, float InVelocityPitchOffset); // Function Solarland.SolarSkill_ProjectileInterface.SetProjectileVelocity // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1e14440
	void SetGameplayEffectHandle(struct FGameplayEffectSpecHandle InGameplayEffectHandleToSelf, struct FGameplayEffectSpecHandle InGameplayEffectHandleToTarget); // Function Solarland.SolarSkill_ProjectileInterface.SetGameplayEffectHandle // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e142e0
	struct UProjectileMovementComponent* GetProjectileMovementComponent(); // Function Solarland.SolarSkill_ProjectileInterface.GetProjectileMovementComponent // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1ce2530
};

// Class Solarland.SolarSkillAndBuffDurationWidget
// Size: 0x3c0 (Inherited: 0x340)
struct USolarSkillAndBuffDurationWidget : USolarUserWidget {
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Super; // 0x340(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical; // 0x348(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_2; // 0x350(0x08)
	struct USolarSkillSubDurationWidget* UI_Skill_Duration_Tactical_3; // 0x358(0x08)
	struct FBuffDurationInfo MainBuffInfo; // 0x360(0x50)
	struct TArray<struct FBuffDurationInfo> SubBuffInfo; // 0x3b0(0x10)

	void UpdateSubWidget(); // Function Solarland.SolarSkillAndBuffDurationWidget.UpdateSubWidget // (Final|Native|Private) // @ game+0x1e14930
	void OnRoleAbilityBuffResume(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffResume // (Final|Native|Private) // @ game+0x1e13dd0
	void OnRoleAbilityBuffRemoved(bool bIsMainDuration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffRemoved // (Final|Native|Private|HasOutParms) // @ game+0x1e13cf0
	void OnRoleAbilityBuffPause(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffPause // (Final|Native|Private) // @ game+0x1e13bf0
	void OnRoleAbilityBuffApplied(bool bIsMainDuration, struct ASolarCharacter* SourceCharacter, char AbilityIndex, float Duration, struct FActiveGameplayEffectHandle& ActiveEffectHandle); // Function Solarland.SolarSkillAndBuffDurationWidget.OnRoleAbilityBuffApplied // (Final|Native|Private|HasOutParms) // @ game+0x1e13950
	void OnCharacterChange(int32_t InCharacterId); // Function Solarland.SolarSkillAndBuffDurationWidget.OnCharacterChange // (Final|Native|Private) // @ game+0x1e135c0
};

// Class Solarland.SolarSkillGA_SuperEMP
// Size: 0x5d0 (Inherited: 0x5b0)
struct USolarSkillGA_SuperEMP : USolarSkillGA_Summon {
	struct FString LocalActiveAbilityAudioName; // 0x5b0(0x10)
	int32_t EMPLevel; // 0x5c0(0x04)
	char pad_5C4[0xc]; // 0x5c4(0x0c)
};

// Class Solarland.SolarSkillGATA_Projectile
// Size: 0x3b0 (Inherited: 0x340)
struct ASolarSkillGATA_Projectile : AGameplayAbilityTargetActor {
	struct FSolarSkillProjectileData PredictData; // 0x340(0x70)
};

// Class Solarland.SolarSkillGATA_Spline
// Size: 0x3e0 (Inherited: 0x3b0)
struct ASolarSkillGATA_Spline : ASolarSkillGATA_Projectile {
	struct USceneComponent* SplineRoot; // 0x3b0(0x08)
	struct TArray<struct UStaticMeshComponent*> HitPointMeshes; // 0x3b8(0x10)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x3c8(0x10)
	bool bVisibilityPropagateToChildren; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
};

// Class Solarland.SolarSkillGATA_SplineTrace
// Size: 0x380 (Inherited: 0x350)
struct ASolarSkillGATA_SplineTrace : AGameplayAbilityTargetActor_Trace {
	struct UStaticMeshComponent* HitPointMesh; // 0x350(0x08)
	struct USplineMeshComponent* SplineMeshComponent; // 0x358(0x08)
	float PredictTime; // 0x360(0x04)
	float PredictRadius; // 0x364(0x04)
	float PredictSpeed; // 0x368(0x04)
	float PredictOffesetAngle; // 0x36c(0x04)
	struct FName StartSocketName; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)
};

// Class Solarland.SolarSkillGATA_Summon
// Size: 0x490 (Inherited: 0x3b0)
struct ASolarSkillGATA_Summon : ASolarSkillGATA_Projectile {
	struct USceneComponent* PreviewRoot; // 0x3b0(0x08)
	struct USkeletalMeshComponent* PreviewSkeletalMeshComponent; // 0x3b8(0x08)
	struct UStaticMeshComponent* PreviewStaticMeshComponent; // 0x3c0(0x08)
	struct UStaticMeshComponent* PreviewCheckMeshComponent; // 0x3c8(0x08)
	struct FSoftObjectPath SummonConfigPath; // 0x3d0(0x18)
	struct USolarSummonDetectionConfig* SummonConfig; // 0x3e8(0x08)
	struct AActor* SummonActorClass; // 0x3f0(0x08)
	float KeyDownTime; // 0x3f8(0x04)
	bool bStopUpdatePreview; // 0x3fc(0x01)
	char pad_3FD[0x3]; // 0x3fd(0x03)
	struct FHitResult StopPreviewHitResult; // 0x400(0x88)
	struct USplineMeshComponent* SplineComponent; // 0x488(0x08)
};

// Class Solarland.SolarSkillGC_Freeze
// Size: 0x380 (Inherited: 0x298)
struct ASolarSkillGC_Freeze : AGameplayCueNotify_Actor {
	struct UMaterialInterface* FreezeMaterial; // 0x298(0x08)
	struct FAddMaterialChangeParams FreezeMaterialConfig; // 0x2a0(0x28)
	struct FMaterialChangeHandle FreezeMaterialHandle; // 0x2c8(0x08)
	struct UParticleSystem* IceSmokeParticle; // 0x2d0(0x08)
	struct FName IceSmokeAttachPointName; // 0x2d8(0x08)
	struct FTransform IceSmokeTransform; // 0x2e0(0x30)
	struct UParticleSystemComponent* IceSmokeParticleHandle; // 0x310(0x08)
	struct FString FreezeStartSoundName1P; // 0x318(0x10)
	struct FString FreezeStartSoundName3P; // 0x328(0x10)
	struct FString FreezeStartSoundName3PEnemy; // 0x338(0x10)
	struct FString FreezeEndSoundName1P; // 0x348(0x10)
	struct FString FreezeEndSoundName3P; // 0x358(0x10)
	struct FString FreezeEndSoundName3PEnemy; // 0x368(0x10)
	char pad_378[0x8]; // 0x378(0x08)
};

// Class Solarland.SolarSkillGC_SurroundLightning
// Size: 0x2f8 (Inherited: 0x298)
struct ASolarSkillGC_SurroundLightning : AGameplayCueNotify_Actor {
	struct TMap<enum class ESolarSurroundLightningApplyType, struct FSolarSurroundLightningConfig> SurroundLightningApplyTypeConfigs; // 0x298(0x50)
	struct FName EMPEffectID; // 0x2e8(0x08)
	int32_t CharacterEffectHandle; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Solarland.SolarSkillSubDurationWidget
// Size: 0x3a0 (Inherited: 0x340)
struct USolarSkillSubDurationWidget : USolarUserWidget {
	struct USolarImage* Img_Skill; // 0x340(0x08)
	struct UProgressBar* Progress_Duration_L; // 0x348(0x08)
	struct UProgressBar* Progress_Duration_R; // 0x350(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x358(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x360(0x08)
	struct UWidgetAnimation* Prompt_Anim; // 0x368(0x08)
	char pad_370[0x30]; // 0x370(0x30)

	void UpdateProgress(); // Function Solarland.SolarSkillSubDurationWidget.UpdateProgress // (Final|Native|Private) // @ game+0x1e148f0
	void OnRoleAbilityBuffEnd(); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffEnd // (Final|Native|Public) // @ game+0x1e13bd0
	void OnRoleAbilityBuffContinous(struct FBuffDurationInfo& Info); // Function Solarland.SolarSkillSubDurationWidget.OnRoleAbilityBuffContinous // (Final|Native|Public|HasOutParms) // @ game+0x1e13b00
};

// Class Solarland.SolarSkillSubsystem
// Size: 0x40 (Inherited: 0x30)
struct USolarSkillSubsystem : UWorldSubsystem {
	struct TArray<struct TWeakObjectPtr<struct UUserWidget>> FullScreenWidgetArray; // 0x30(0x10)

	bool TryGetGeneralSummonHitResult(struct FHitResult& OutHitResult, struct AActor* InSummoner, struct USolarSummonDetectionConfig* InSummonConfig); // Function Solarland.SolarSkillSubsystem.TryGetGeneralSummonHitResult // (Final|Native|Public|HasOutParms) // @ game+0x1e14770
	bool IsWithinQuickSummonTime(struct USolarSummonDetectionConfig* InSummonConfig, float InStartTime); // Function Solarland.SolarSkillSubsystem.IsWithinQuickSummonTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e134d0
	bool IsSummonInRoom(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceLocation, float Yaw); // Function Solarland.SolarSkillSubsystem.IsSummonInRoom // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e13340
	bool IsSourceCharacterInRoom(struct ASolarCharacter* Character); // Function Solarland.SolarSkillSubsystem.IsSourceCharacterInRoom // (Final|Native|Public|BlueprintCallable) // @ game+0x1e132b0
	void HideSkillFullScreenWidget(struct UObject* InWidgetClass, enum class ESlateVisibility InSlateVisibility); // Function Solarland.SolarSkillSubsystem.HideSkillFullScreenWidget // (Final|Native|Public) // @ game+0x1e131f0
	struct FRotator GetSummonPlaceOrientation(struct FVector& InPlaceLocation, struct FVector& InPlaceNormal); // Function Solarland.SolarSkillSubsystem.GetSummonPlaceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e130e0
	struct UUserWidget* GetSkillFullScreenWidget(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.GetSkillFullScreenWidget // (Final|Native|Public) // @ game+0x1e13050
	bool CanSummonPlaceSpace(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceLocation, struct FVector& InPlaceNormal, struct FRotator& InPlaceOrientation); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e12d40
	bool CanSummonPlaceAngle(struct FSolarSummonCondition& InCondition, struct FVector& InPlaceNormal); // Function Solarland.SolarSkillSubsystem.CanSummonPlaceAngle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e12bd0
	struct UUserWidget* AddSkillFullScreenWidgetToBattlePanel(struct UObject* InWidgetClass); // Function Solarland.SolarSkillSubsystem.AddSkillFullScreenWidgetToBattlePanel // (Final|Native|Public) // @ game+0x1e12b40
};

// Class Solarland.SolarSkillSummonBuffContinousWidget
// Size: 0x368 (Inherited: 0x340)
struct USolarSkillSummonBuffContinousWidget : USolarUserWidget {
	struct UImage* Img_Skill; // 0x340(0x08)
	struct UImage* Progress_Continous; // 0x348(0x08)
	struct UMaterialInstanceDynamic* GridMaterial; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)

	void UpdateProgress(); // Function Solarland.SolarSkillSummonBuffContinousWidget.UpdateProgress // (Final|Native|Private) // @ game+0x1e14910
	void OnSummonBuffAdd(struct FSoftObjectPath& ImagePath, struct AActor* InSummonActor); // Function Solarland.SolarSkillSummonBuffContinousWidget.OnSummonBuffAdd // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1e13ed0
};

// Class Solarland.SolarSoundPlayer
// Size: 0x240 (Inherited: 0x228)
struct ASolarSoundPlayer : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct UAkComponent* AkAudioComponent; // 0x230(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x238(0x08)

	struct ASolarSoundPlayer* PostSoundEventAtLocation(struct UObject* WorldContextObject, struct FString EventName, struct FVector& Location, bool bAutoDestroy); // Function Solarland.SolarSoundPlayer.PostSoundEventAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1e19800
	void PostSoundEvent(struct FString EventName); // Function Solarland.SolarSoundPlayer.PostSoundEvent // (Final|Native|Public) // @ game+0x1e19760
	void InitSolarAkGameObject(struct UActorComponent* Component, bool bReset); // Function Solarland.SolarSoundPlayer.InitSolarAkGameObject // (Final|Native|Public) // @ game+0x1e18f00
};

// Class Solarland.SolarSpawnVehicleAbility
// Size: 0x320 (Inherited: 0x310)
struct ASolarSpawnVehicleAbility : ASolarAbility {
	struct FMulticastInlineDelegate OnSpawnVehicleComplete; // 0x308(0x10)

	void SpawnVehicle(int32_t InVehicleID, struct FTransform& InTransform); // Function Solarland.SolarSpawnVehicleAbility.SpawnVehicle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e1a090
};

// Class Solarland.SolarSpecABP_Skill
// Size: 0x2c0 (Inherited: 0x270)
struct USolarSpecABP_Skill : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	char pad_280[0x4]; // 0x280(0x04)
	float InputDirection; // 0x284(0x04)
	float Speed; // 0x288(0x04)
	char bIsWalking : 1; // 0x28c(0x01)
	char bIsCrouching : 1; // 0x28c(0x01)
	char bIsSixDirRunForward : 1; // 0x28c(0x01)
	char pad_28C_3 : 5; // 0x28c(0x01)
	enum class EWalkMode CurrentWalkMode; // 0x28d(0x01)
	enum class EIdleTurnType IdleTurnType; // 0x28e(0x01)
	char pad_28F[0x1]; // 0x28f(0x01)
	float TurnExplicitTime; // 0x290(0x04)
	float DamageDirection; // 0x294(0x04)
	float DamageReactionAlpha; // 0x298(0x04)
	float DamageNormalizedTime; // 0x29c(0x04)
	enum class EAirMoveMode CurrentAirMoveMode; // 0x2a0(0x01)
	enum class EAirMoveMode LastAirMoveMode; // 0x2a1(0x01)
	char pad_2A2[0xf]; // 0x2a2(0x0f)
	bool bNewJet; // 0x2b1(0x01)
	enum class ESkillAnimType CurrentSkillAnimType; // 0x2b2(0x01)
	enum class ESkillAnimRightHandType CurrentSkillAnimRightHandType; // 0x2b3(0x01)
	char pad_2B4[0xc]; // 0x2b4(0x0c)

	void SetLeftHandIKTransform(struct FTransform& RelativeTrans); // Function Solarland.SolarSpecABP_Skill.SetLeftHandIKTransform // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	struct FVector GetJetPackDashAnimationBlend(); // Function Solarland.SolarSpecABP_Skill.GetJetPackDashAnimationBlend // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1e18970
	struct FVector GetInputVector(); // Function Solarland.SolarSpecABP_Skill.GetInputVector // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e187d0
	float GenJumpDirection(float InInputDirection); // Function Solarland.SolarSpecABP_Skill.GenJumpDirection // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18520
	bool CheckNewJetAndReset(); // Function Solarland.SolarSpecABP_Skill.CheckNewJetAndReset // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1e17840
};

// Class Solarland.SolarSpecABP_Vehicle
// Size: 0x2e0 (Inherited: 0x270)
struct USolarSpecABP_Vehicle : UAnimInstance {
	struct ASolarCharacter* SolarCharacterOwner; // 0x268(0x08)
	float ViewPitch; // 0x270(0x04)
	float ViewYaw; // 0x274(0x04)
	enum class EInVehicleState InVehicleState; // 0x278(0x01)
	enum class EVehicleAnimationType CurrentVehicleAnimationType; // 0x279(0x01)
	float CurrentVehicleRotationValue; // 0x27c(0x04)
	struct FVector2D CurrentInputOnVehicle; // 0x280(0x08)
	float LeanTowardRightValue; // 0x288(0x04)
	bool bVehicleInAir; // 0x28c(0x01)
	struct FRotator OutVehicleShotRotation; // 0x290(0x0c)
	float VehicleDirection; // 0x29c(0x04)
	bool bIronManCanFlyFlight; // 0x2a0(0x01)
	bool bIronManForceOutInVehicleState; // 0x2a1(0x01)
	bool bHasPassenger; // 0x2a2(0x01)
	float VehicleSpeed; // 0x2a4(0x04)
	bool bIronManUseIK; // 0x2a8(0x01)
	enum class EDriveTurnType DriveIdleTurnType; // 0x2a9(0x01)
	float SteeringRoatingratio; // 0x2ac(0x04)
	struct FVector LeftHandOnRudderLocation; // 0x2b0(0x0c)
	struct FVector RightHandOnRudderLocation; // 0x2bc(0x0c)
	struct FVector IronManHandRIKLocation; // 0x2c8(0x0c)
	enum class EWeaponStatus WeaponStatus; // 0x2d4(0x01)
	char pad_2D5[0xb]; // 0x2d5(0x0b)
};

// Class Solarland.SolarSpecialEffectsMgr
// Size: 0x30 (Inherited: 0x28)
struct USolarSpecialEffectsMgr : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Solarland.SolarSpectateInfo
// Size: 0x6e8 (Inherited: 0x228)
struct ASolarSpectateInfo : AActor {
	struct FMulticastInlineDelegate OnBeginUpdateSpectateInfo; // 0x228(0x10)
	struct FMulticastInlineDelegate OnStopUpdateSpectateInfo; // 0x238(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerBeginSpectateMe; // 0x248(0x10)
	struct FMulticastInlineDelegate OnOtherPlayerStopSpectateMe; // 0x258(0x10)
	struct FMulticastInlineDelegate OnBeforeSpectateTargetChange; // 0x268(0x10)
	struct FMulticastInlineDelegate OnSpectateTargetChanged; // 0x278(0x10)
	struct FMulticastInlineDelegate OnSpectatePhaseChanged; // 0x288(0x10)
	struct FMulticastInlineDelegate OnSwitchSpectateTargetFailed; // 0x298(0x10)
	struct FMulticastInlineDelegate OnSpectatorOfMyTargetChanged; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnSpectateCharacterOfMyTargetReadied; // 0x2b8(0x10)
	char pad_2C8[0x160]; // 0x2c8(0x160)
	struct FSpectatingOthersInfo SpectatingOthersInfo; // 0x428(0x68)
	char pad_490[0x50]; // 0x490(0x50)
	struct USolarReplayManager* ReplayManager; // 0x4e0(0x08)
	char pad_4E8[0x8]; // 0x4e8(0x08)
	struct FSpectateConditions SpectateConditions; // 0x4f0(0x20)
	enum class ESpectatePhase SpectatePhase; // 0x510(0x01)
	char pad_511[0x7f]; // 0x511(0x7f)
	struct TArray<struct FGiftSenderInfo> SendGiftPlayerInfo; // 0x590(0x10)
	struct FInteractiveTaskStatus TaskStatus; // 0x5a0(0x78)
	struct UDataTable* InteractiveTaskTable; // 0x618(0x08)
	struct FString TaskTablePath; // 0x620(0x10)
	struct FRotator PlayerCameraRotation; // 0x630(0x0c)
	char pad_63C[0x4]; // 0x63c(0x04)
	struct TArray<struct FReplicateItemData> CharacterBackpackItems; // 0x640(0x10)
	struct TArray<struct FReplicateMaxPileData> CharacterBackpackItemMaxPiles; // 0x650(0x10)
	float CharacterVJetChargeTime; // 0x660(0x04)
	int32_t CharacterVJetTotalTimes; // 0x664(0x04)
	int32_t CharacterVJetRestTimes; // 0x668(0x04)
	int32_t CharacterVJetModuleLevel; // 0x66c(0x04)
	float CharacterVJetStartChargeTime; // 0x670(0x04)
	float CharacterHJetChargeTime; // 0x674(0x04)
	int32_t CharacterHJetTotalTimes; // 0x678(0x04)
	int32_t CharacterHJetRestTimes; // 0x67c(0x04)
	int32_t CharacterHJetModuleLevel; // 0x680(0x04)
	float CharacterHJetStartChargeTime; // 0x684(0x04)
	struct TArray<struct FCharacterRoleAbilityInfo> CharacterRoleAbilitiesInfo; // 0x688(0x10)
	struct FRepCountdownData SpectateCountdownData; // 0x698(0x2c)
	char pad_6C4[0x4]; // 0x6c4(0x04)
	struct TArray<struct FBattleUpgradeEffectParamData> BattleUpgradeEffectData; // 0x6c8(0x10)
	int32_t ExtraARMag; // 0x6d8(0x04)
	int32_t ExtraSGMag; // 0x6dc(0x04)
	bool bExposedByRadar; // 0x6e0(0x01)
	char bShowBattlePrompt : 1; // 0x6e1(0x01)
	char pad_6E1_1 : 7; // 0x6e1(0x01)
	char pad_6E2[0x6]; // 0x6e2(0x06)

	void SetSpectateTargetForPlayingReplay(struct ASolarPlayerState* TargetPlayerState); // Function Solarland.SolarSpectateInfo.SetSpectateTargetForPlayingReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1a010
	void ServerStopSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x12580d0
	void ServerStopSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerStopSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e19ff0
	void ServerSpectatePreviousPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectatePreviousPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258b70
	void ServerSpectateNextPlayer(); // Function Solarland.SolarSpectateInfo.ServerSpectateNextPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258530
	void ServerSetSpectateConditions_Internal(struct FSpectateConditions InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1e19ef0
	void ServerSetSpectateConditions(struct FSpectateConditions& InSpectateConditions); // Function Solarland.SolarSpectateInfo.ServerSetSpectateConditions // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e19de0
	void ServerSetPlayerCameraRotation(struct FRotator Rotation); // Function Solarland.SolarSpectateInfo.ServerSetPlayerCameraRotation // (Final|Net|Native|Event|Private|NetServer|HasDefaults) // @ game+0x1d05720
	void ServerSendGiftAction(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.ServerSendGiftAction // (Net|Native|Event|Public|NetServer) // @ game+0x1e19d20
	void ServerRequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.ServerRequestSendTask // (Net|Native|Event|Public|NetServer) // @ game+0x1e19c90
	void ServerRequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.ServerRequestIncreaseTargetTaskLevel // (Net|Native|Event|Public|NetServer) // @ game+0x7a9ae0
	void ServerRequestAvailableTask(); // Function Solarland.SolarSpectateInfo.ServerRequestAvailableTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x7e16e0
	void ServerChangeLikeValue(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.ServerChangeLikeValue // (Net|Native|Event|Public|NetServer) // @ game+0x1e19b90
	void ServerBeginSpectateOtherPlayer_Internal(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer_Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1257c90
	void ServerBeginSpectateOtherPlayer(); // Function Solarland.SolarSpectateInfo.ServerBeginSpectateOtherPlayer // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x1e19b70
	bool SendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.SendTask // (Final|Native|Public) // @ game+0x1e19ae0
	void SendGift(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.SendGift // (Final|Native|Public) // @ game+0x1e19a20
	void RequestSendTask(int32_t InTaskID); // Function Solarland.SolarSpectateInfo.RequestSendTask // (Final|Native|Public) // @ game+0x1e199a0
	void RequestIncreaseTargetTaskLevel(); // Function Solarland.SolarSpectateInfo.RequestIncreaseTargetTaskLevel // (Final|Native|Public) // @ game+0x1e19980
	void RequestAvailableTask(); // Function Solarland.SolarSpectateInfo.RequestAvailableTask // (Final|Native|Public) // @ game+0x1e19960
	void OnTargetSpecInfoSetToItsPlayerState(struct ASolarSpectateInfo* TargetSpecInfo); // Function Solarland.SolarSpectateInfo.OnTargetSpecInfoSetToItsPlayerState // (Final|Native|Private) // @ game+0x1e196e0
	void OnSwitchSpectateTargetFailed__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSwitchSpectateTargetFailed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnStopUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnStopUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnStopRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStopRecordingReplay // (Final|Native|Public) // @ game+0x1e196c0
	void OnStartRecordingReplay(); // Function Solarland.SolarSpectateInfo.OnStartRecordingReplay // (Final|Native|Public) // @ game+0x1e196a0
	void OnSpectatorOfMyTargetChanged__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatorOfMyTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectateTargetChanged__DelegateSignature(struct ASolarPlayerState* OldTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateTargetChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectatePhaseChanged__DelegateSignature(enum class ESpectatePhase CurrentPhase); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectatePhaseChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnSpectateCharacterOfMyTargetReadied__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnSpectateCharacterOfMyTargetReadied__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnRep_TaskStatus(); // Function Solarland.SolarSpectateInfo.OnRep_TaskStatus // (Final|Native|Public) // @ game+0x1e19680
	void OnRep_SpectatePhase(); // Function Solarland.SolarSpectateInfo.OnRep_SpectatePhase // (Final|Native|Private) // @ game+0x1e19660
	void OnRep_SpectateCountdownData(); // Function Solarland.SolarSpectateInfo.OnRep_SpectateCountdownData // (Final|Native|Protected) // @ game+0x1e19640
	void OnRep_ExposedByRadar(); // Function Solarland.SolarSpectateInfo.OnRep_ExposedByRadar // (Final|Native|Protected) // @ game+0x1e19620
	void OnRep_CharacterVJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetTotalTimes // (Final|Native|Protected) // @ game+0x1e19600
	void OnRep_CharacterVJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetRestTimes // (Final|Native|Protected) // @ game+0x1e195e0
	void OnRep_CharacterVJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterVJetModuleLevel // (Final|Native|Protected) // @ game+0x1e195c0
	void OnRep_CharacterRoleAbilitiesInfo(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterRoleAbilitiesInfo // (Final|Native|Private) // @ game+0x1e195a0
	void OnRep_CharacterHJetTotalTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetTotalTimes // (Final|Native|Protected) // @ game+0x1e19580
	void OnRep_CharacterHJetRestTimes(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetRestTimes // (Final|Native|Protected) // @ game+0x1e19560
	void OnRep_CharacterHJetModuleLevel(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterHJetModuleLevel // (Final|Native|Protected) // @ game+0x1e19540
	void OnRep_CharacterBackpackItems(); // Function Solarland.SolarSpectateInfo.OnRep_CharacterBackpackItems // (Final|Native|Private) // @ game+0x1e19520
	void OnRep_BattleUpgradeEffectData(); // Function Solarland.SolarSpectateInfo.OnRep_BattleUpgradeEffectData // (Final|Native|Protected) // @ game+0x1e19500
	void OnOtherPlayerStopSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerStopSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnOtherPlayerBeginSpectateMe__DelegateSignature(struct ASolarPlayerState* SpectatorPlayerState, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnOtherPlayerBeginSpectateMe__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnOpenAirBoxNum(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnOpenAirBoxNum // (Final|Native|Public) // @ game+0x1e19480
	void OnLikeActionCalled(int32_t Value, int32_t AddInteractValue, enum class ESocialActionType ActionType); // Function Solarland.SolarSpectateInfo.OnLikeActionCalled // (Final|Native|Public) // @ game+0x1e19380
	void OnIncreaseKillNumWithWeaponType(enum class EStatisticsType InStatType, int32_t InWeaponID); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithWeaponType // (Final|Native|Public) // @ game+0x1e192c0
	void OnIncreaseKillNumWithPunch(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithPunch // (Final|Native|Public) // @ game+0x1e19240
	void OnIncreaseKillNumWithAnyVehicle(enum class EStatisticsType InStatType); // Function Solarland.SolarSpectateInfo.OnIncreaseKillNumWithAnyVehicle // (Final|Native|Public) // @ game+0x1e191c0
	void OnGiftActionCalled(int32_t GiftID, int32_t Num); // Function Solarland.SolarSpectateInfo.OnGiftActionCalled // (Final|Native|Public) // @ game+0x1e19100
	void OnCurrentPlayerCountChanged(); // Function Solarland.SolarSpectateInfo.OnCurrentPlayerCountChanged // (Final|Native|Public) // @ game+0x1e190e0
	void OnBeginUpdateSpectateInfo__DelegateSignature(struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeginUpdateSpectateInfo__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnBeforeSpectateTargetChange__DelegateSignature(struct ASolarPlayerState* NewTarget, struct ASolarSpectateInfo* SpectateInfo); // DelegateFunction Solarland.SolarSpectateInfo.OnBeforeSpectateTargetChange__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnAvailableAirDropsNumChanged(); // Function Solarland.SolarSpectateInfo.OnAvailableAirDropsNumChanged // (Final|Native|Public) // @ game+0x1e190e0
	bool NeedUpdateSpectateInfo(); // Function Solarland.SolarSpectateInfo.NeedUpdateSpectateInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e190b0
	bool IsSpectatingOtherPlayer(); // Function Solarland.SolarSpectateInfo.IsSpectatingOtherPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e19080
	bool IsRecordingReplay(); // Function Solarland.SolarSpectateInfo.IsRecordingReplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e19060
	bool IsLocalPlayerSpectatingMe(); // Function Solarland.SolarSpectateInfo.IsLocalPlayerSpectatingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e19030
	bool IsLocalPlayerCameraFocusingMe(); // Function Solarland.SolarSpectateInfo.IsLocalPlayerCameraFocusingMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e19000
	bool IsBeingSpectated(); // Function Solarland.SolarSpectateInfo.IsBeingSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18fd0
	bool IncreaseTaskLevel(struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarSpectateInfo.IncreaseTaskLevel // (Final|Native|Public) // @ game+0x1e18e70
	struct TSet<struct ASolarPlayerState*> GetSpectatorsOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectatorsOfMyTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18da0
	struct TSet<struct ASolarPlayerState*> GetSpectatingMePlayerStates(); // Function Solarland.SolarSpectateInfo.GetSpectatingMePlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18cd0
	struct ASolarPlayerState* GetSpectateTargetPlayerState(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18c90
	struct ASolarCharacter* GetSpectateTargetCharacter(); // Function Solarland.SolarSpectateInfo.GetSpectateTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18c50
	void GetSpectateReportInfo(struct FSpectateReportInfo& SpectateReportInfo, bool HasNextTarget); // Function Solarland.SolarSpectateInfo.GetSpectateReportInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18b50
	struct ASolarSpectateInfo* GetSpectateInfoOfMyTarget(); // Function Solarland.SolarSpectateInfo.GetSpectateInfoOfMyTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e18b20
	struct FSpectateConditions GetSpectateConditions(); // Function Solarland.SolarSpectateInfo.GetSpectateConditions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e189e0
	struct ASolarPlayerState* GetSolarPlayerState(); // Function Solarland.SolarSpectateInfo.GetSolarPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e189b0
	bool GetInteractiveTaskConfigByID(int32_t InTaskID, struct FInteractiveTaskConfig& OutConfig); // Function Solarland.SolarSpectateInfo.GetInteractiveTaskConfigByID // (Final|Native|Public|HasOutParms) // @ game+0x1e18810
	struct TArray<int32_t> GetAvailableTaskByRandom(); // Function Solarland.SolarSpectateInfo.GetAvailableTaskByRandom // (Final|Native|Public) // @ game+0x1e18750
	void GetAllInteractiveTaskConfigFromTable(struct TArray<struct FInteractiveTaskConfig>& OutAllConfig); // Function Solarland.SolarSpectateInfo.GetAllInteractiveTaskConfigFromTable // (Final|Native|Public|HasOutParms) // @ game+0x1e18630
	struct TArray<struct ASolarPlayerState*> GetAllAlivePlayers(); // Function Solarland.SolarSpectateInfo.GetAllAlivePlayers // (Final|Native|Public) // @ game+0x1e185b0
	bool CostCurrencyByTaskAction(int32_t InTaskID, int32_t CurTasklevel); // Function Solarland.SolarSpectateInfo.CostCurrencyByTaskAction // (Final|Native|Public) // @ game+0x1e18460
	void ClientSetSpectatorsOfMyTarget(struct TArray<struct ASolarPlayerState*> SpectatorsOfMyTarget); // Function Solarland.SolarSpectateInfo.ClientSetSpectatorsOfMyTarget // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e183c0
	void ClientSetSpectateTargetInfo(struct ASolarPlayerState* TargetPS, struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarSpectateInfo.ClientSetSpectateTargetInfo // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e182f0
	void ClientSetServerRecording(bool bInServerRecording); // Function Solarland.SolarSpectateInfo.ClientSetServerRecording // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e18260
	void ClientSendSwitchSpectateTargetFailed(); // Function Solarland.SolarSpectateInfo.ClientSendSwitchSpectateTargetFailed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1257b90
	void ClientRemoveSpectatingMePlayer(struct ASolarPlayerState* Player); // Function Solarland.SolarSpectateInfo.ClientRemoveSpectatingMePlayer // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e181d0
	void ClientOnReconnected(enum class ESpectatePhase InSpecPhase, struct FString InTargetPSId, struct TArray<struct FString> InSpectatorsOfMyTargetId, struct TArray<struct FString> InSpectatingMePlayersId); // Function Solarland.SolarSpectateInfo.ClientOnReconnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e18000
	void ClientNotifyTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifyTaskActionResult // (Net|Native|Event|Public|NetClient) // @ game+0x1e17e40
	void ClientNotifySelfTaskActionResult(enum class ESocialActionType ActionType, int32_t InTaskID, int32_t CurTasklevel, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t NowLikeValue); // Function Solarland.SolarSpectateInfo.ClientNotifySelfTaskActionResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1e17c80
	void ClientNotifySelfLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifySelfLikeValueChanged // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1e17ac0
	void ClientNotifyLikeValueChanged(enum class ESocialActionType ActionType, int32_t DeltaValue, int32_t NowValue, struct ASolarPlayerState* SendPlayer, struct ASolarPlayerState* ReceivePlayer, int32_t GiftID); // Function Solarland.SolarSpectateInfo.ClientNotifyLikeValueChanged // (Net|Native|Event|Public|NetClient) // @ game+0x1e17900
	void ClientNotifyAvailableTaskResult(struct TArray<int32_t> AvailableTask); // Function Solarland.SolarSpectateInfo.ClientNotifyAvailableTaskResult // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x7e1700
	void ClientAddSpectatingMePlayer(struct ASolarPlayerState* Player); // Function Solarland.SolarSpectateInfo.ClientAddSpectatingMePlayer // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1e17870
	bool CheckIsCanSpectateOthers(); // Function Solarland.SolarSpectateInfo.CheckIsCanSpectateOthers // (Final|Native|Public) // @ game+0x1e17810
	bool CanISpectate(struct ASolarPlayerState* Target); // Function Solarland.SolarSpectateInfo.CanISpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e17780
};

// Class Solarland.TickWhenPauseCineCameraActor
// Size: 0x860 (Inherited: 0x860)
struct ATickWhenPauseCineCameraActor : ACineCameraActor {
};

// Class Solarland.SolarSpectateLevelSequenceActor
// Size: 0x350 (Inherited: 0x2b8)
struct ASolarSpectateLevelSequenceActor : ALevelSequenceActor {
	struct FSoftObjectPath SwitchTargetSequencePath; // 0x2b8(0x18)
	struct FString AtLeastPlayToMark; // 0x2d0(0x10)
	char pad_2E0[0x18]; // 0x2e0(0x18)
	struct ULevelSequence* SwitchTargetSequence; // 0x2f8(0x08)
	struct ACineCameraActor* SequenceCamera; // 0x300(0x08)
	struct ACameraRig_Crane* SequenceCameraRigCrane; // 0x308(0x08)
	char pad_310[0x40]; // 0x310(0x40)

	void OnSequenceStoped(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceStoped // (Final|Native|Private) // @ game+0x1e1e200
	void OnSequenceFinished(); // Function Solarland.SolarSpectateLevelSequenceActor.OnSequenceFinished // (Final|Native|Private) // @ game+0x1e1e1e0
};

// Class Solarland.SolarSpectatorPawn
// Size: 0x2c8 (Inherited: 0x2b0)
struct ASolarSpectatorPawn : ASpectatorPawn {
	struct USpringArmComponent* SpringArmComponent; // 0x2b0(0x08)
	struct UCameraComponent* CameraComponent; // 0x2b8(0x08)
	struct USolarInputActionContext* InputActionContext; // 0x2c0(0x08)
};

// Class Solarland.SolarSplineMovementComponent
// Size: 0x130 (Inherited: 0xf0)
struct USolarSplineMovementComponent : UMovementComponent {
	struct FMulticastInlineDelegate OnSolarSplineMovementComponentStop; // 0xf0(0x10)
	struct USplineComponent* SplineComponent; // 0x100(0x08)
	float SplineDistance; // 0x108(0x04)
	struct TWeakObjectPtr<struct ASolarProjBullet> SolarProjBullet; // 0x10c(0x08)
	struct FVector LastLocation; // 0x114(0x0c)
	struct FRotator VelocityRotator; // 0x120(0x0c)
	char pad_12C[0x4]; // 0x12c(0x04)
};

// Class Solarland.SolarState
// Size: 0x40 (Inherited: 0x28)
struct USolarState : UObject {
	struct UObject* StateMachineOwner; // 0x28(0x08)
	struct USolarStateMachine* OwnerStateMachine; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)

	void ReceiveUpdateState(float DeltaTime); // Function Solarland.SolarState.ReceiveUpdateState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveInitializeState(); // Function Solarland.SolarState.ReceiveInitializeState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveEndState(struct USolarState* NextState); // Function Solarland.SolarState.ReceiveEndState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveBeginState(); // Function Solarland.SolarState.ReceiveBeginState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USolarState* K2_CreateSolarState(struct USolarStateMachine* StateMachine, struct USolarState* StateClass, struct FName Name); // Function Solarland.SolarState.K2_CreateSolarState // (Final|Native|Static|Protected|BlueprintCallable) // @ game+0x1e1df70
	void GotoState(); // Function Solarland.SolarState.GotoState // (Native|Public|BlueprintCallable) // @ game+0x1e1dd40
	struct USolarState* GetState(struct FName& StateClassName); // Function Solarland.SolarState.GetState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e1dca0
};

// Class Solarland.SolarStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarStateMachine : UObject {
	struct TMap<struct FName, struct USolarState*> StateMap; // 0x28(0x50)
	struct USolarState* CurrentState; // 0x78(0x08)
	struct USolarState* PreviousState; // 0x80(0x08)
	char pad_88[0x10]; // 0x88(0x10)

	bool IsInState(struct FName& StateName); // Function Solarland.SolarStateMachine.IsInState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e1de40
	void AddState(struct USolarState* NewState, struct FName& StateName); // Function Solarland.SolarStateMachine.AddState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e1da40
};

// Class Solarland.SolarSummonBullet
// Size: 0x760 (Inherited: 0x6b0)
struct ASolarSummonBullet : ASolarProjBullet {
	struct FVector BulletEndLocation; // 0x6b0(0x0c)
	struct FHitResult BulletHitResult; // 0x6bc(0x88)
	bool bGoal; // 0x744(0x01)
	char pad_745[0x3]; // 0x745(0x03)
	struct FVector InitialDirection; // 0x748(0x0c)
	char pad_754[0xc]; // 0x754(0x0c)
};

// Class Solarland.SolarSummonDetectionComponent
// Size: 0x110 (Inherited: 0xc8)
struct USolarSummonDetectionComponent : USolarPreviewDetectionComponent {
	char pad_C8[0x40]; // 0xc8(0x40)
	struct USolarQuickSummonProxy* QuickSummonProxy; // 0x108(0x08)

	void ResetQucikSummonTimer(); // Function Solarland.SolarSummonDetectionComponent.ResetQucikSummonTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e220
	bool IsWithinQuickSummonTime(float InDeltaTime); // Function Solarland.SolarSummonDetectionComponent.IsWithinQuickSummonTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1dee0
};

// Class Solarland.SolarSummonDetectionConfig
// Size: 0x2c0 (Inherited: 0xb0)
struct USolarSummonDetectionConfig : USolarPreviewDetectionConfig {
	int32_t ItemID; // 0xb0(0x04)
	char pad_B4[0xc]; // 0xb4(0x0c)
	struct FSolarPreviewStaticMeshData PreviewRangeData; // 0xc0(0x80)
	struct FSolarPreviewStaticMeshData PreviewMobileData; // 0x140(0x80)
	struct FSolarPreviewDecalEffectData PreviewDecalData; // 0x1c0(0x90)
	bool EnableQuickSummon; // 0x250(0x01)
	bool EnableQuickSummonInAir; // 0x251(0x01)
	char pad_252[0x6]; // 0x252(0x06)
	struct USolarQuickSummonProxy* QuickSummonClass; // 0x258(0x08)
	float QuickSummonTime; // 0x260(0x04)
	bool EnableCheckCondition; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct ASolarSummonPlaceholder* SummonPlaceholderClass; // 0x268(0x08)
	struct FSolarSummonCondition SummonCondition; // 0x270(0x48)
	char pad_2B8[0x8]; // 0x2b8(0x08)
};

// Class Solarland.SolarSummonEnergyWall
// Size: 0x3f8 (Inherited: 0x398)
struct ASolarSummonEnergyWall : ASummonItemBase {
	char pad_398[0x8]; // 0x398(0x08)
	float HitLocationLifeTime; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct TMap<struct FName, struct FSolarSummonTimer> HitLocations; // 0x3a8(0x50)

	void OnReceiveHitResult(bool InbVisible, struct FName InHitLocationName, struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.OnReceiveHitResult // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void HandleHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarSummonEnergyWall.HandleHitResult // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1e1dd60
};

// Class Solarland.SolarSummonJumpPad
// Size: 0x460 (Inherited: 0x398)
struct ASolarSummonJumpPad : ASummonItemBase {
	char pad_398[0x58]; // 0x398(0x58)
	struct USkeletalMeshComponent* Mesh; // 0x3f0(0x08)
	struct UAnimSequence* SpawnAnim; // 0x3f8(0x08)
	struct UAnimSequence* LaunchAnim; // 0x400(0x08)
	float HorizantalSpeedMultipleFac; // 0x408(0x04)
	float MaxHorizantalSpeed; // 0x40c(0x04)
	float VerticalSpeed; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct UGameplayEffect* LaunchCDEffect; // 0x418(0x08)
	struct FName SpawnSound; // 0x420(0x08)
	struct FName DestroySound; // 0x428(0x08)
	struct FName HitSoundAttacker2D; // 0x430(0x08)
	struct FName HitSound; // 0x438(0x08)
	struct FName LaunchSound; // 0x440(0x08)
	struct UParticleSystem* SmokeFX; // 0x448(0x08)
	struct UParticleSystem* DestroyFX; // 0x450(0x08)
	int32_t LaunchCount; // 0x458(0x04)
	int32_t HitCount; // 0x45c(0x04)

	void OnRep_LaunchCount(); // Function Solarland.SolarSummonJumpPad.OnRep_LaunchCount // (Final|Native|Protected) // @ game+0x1e1e1c0
	void OnRep_HitCount(); // Function Solarland.SolarSummonJumpPad.OnRep_HitCount // (Final|Native|Protected) // @ game+0x1e1e1a0
	void OnCharacterEndOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterEndOverlap // (Native|Protected|BlueprintCallable) // @ game+0x1e1e110
	void OnCharacterBeginOverlap(struct ASolarCharacter* OtherCharacter); // Function Solarland.SolarSummonJumpPad.OnCharacterBeginOverlap // (Native|Protected|BlueprintCallable) // @ game+0x1e1e080
};

// Class Solarland.SolarSummonLifeCycleComponent
// Size: 0xc8 (Inherited: 0xb0)
struct USolarSummonLifeCycleComponent : UActorComponent {
	struct FMulticastSparseDelegate OnLifeCycleEnd; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	float AliveTimeMax; // 0xb4(0x04)
	float AliveTimer; // 0xb8(0x04)
	float HealthPointsMax; // 0xbc(0x04)
	float HealthPoints; // 0xc0(0x04)
	float HealthPointsDwindle; // 0xc4(0x04)

	void UpdateDwindleHealthPoints(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateDwindleHealthPoints // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e1e540
	void UpdateAliveTime(float InDeltaTime); // Function Solarland.SolarSummonLifeCycleComponent.UpdateAliveTime // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e1e4c0
	void SetHealthPointsMax(float InMaxHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e440
	void SetHealthPointsDwindle(float InDwindleHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e3c0
	void SetHealthPoints(float InHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.SetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e340
	void SetAliveTimeMax(float InMaxAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e2c0
	void SetAliveTime(float InAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.SetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1e240
	void LifeCycleEnd(); // Function Solarland.SolarSummonLifeCycleComponent.LifeCycleEnd // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e1e060
	float GetHealthPointsMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsMax // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1dbf0
	float GetHealthPointsDwindle(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPointsDwindle // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1dbc0
	float GetHealthPoints(); // Function Solarland.SolarSummonLifeCycleComponent.GetHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1db90
	float GetAliveTimeMax(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTimeMax // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1db60
	float GetAliveTime(); // Function Solarland.SolarSummonLifeCycleComponent.GetAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1db30
	void DestroyOwner(); // Function Solarland.SolarSummonLifeCycleComponent.DestroyOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1db10
	void AddHealthPoints(float InExtraHealthPoints); // Function Solarland.SolarSummonLifeCycleComponent.AddHealthPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1d9c0
	void AddAliveTime(float InExtraAliveTime); // Function Solarland.SolarSummonLifeCycleComponent.AddAliveTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1e1d940
};

// Class Solarland.SolarSummonPlaceholder
// Size: 0x228 (Inherited: 0x228)
struct ASolarSummonPlaceholder : AActor {

	void SetCollisionSize(struct FVector& InSize); // Function Solarland.SolarSummonPlaceholder.SetCollisionSize // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarSummonPreviewComponent
// Size: 0x150 (Inherited: 0x150)
struct USolarSummonPreviewComponent : USolarPreviewComponent {

	bool RequestDisplayPreviewDecalEffect(struct UDecalComponent* InDecalComponent, struct FSolarPreviewDecalEffectData& InDecalEffectData, struct FString InDecalMaterialPath, struct FTransform& InDecalRelativeTransform); // Function Solarland.SolarSummonPreviewComponent.RequestDisplayPreviewDecalEffect // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e226c0
};

// Class Solarland.SolarSummonWall
// Size: 0x3c8 (Inherited: 0x398)
struct ASolarSummonWall : ASummonItemBase {
	struct FSoftClassPath EnergyBarrierClassPath; // 0x398(0x18)
	struct FVector EnergyBarrierLocationOffset; // 0x3b0(0x0c)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct ASummonItemBase* EnergyBarrier; // 0x3c0(0x08)

	void SpawnEnergyBarrier(); // Function Solarland.SolarSummonWall.SpawnEnergyBarrier // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22b60
};

// Class Solarland.SolarSummonWeapon
// Size: 0xd20 (Inherited: 0xc40)
struct ASolarSummonWeapon : ASolarWeapon {
	bool bDead; // 0xc38(0x01)
	int32_t SummonerID; // 0xc3c(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> MyOwnerWeapon; // 0xc40(0x08)
	char pad_C4D[0x13]; // 0xc4d(0x13)
	struct TWeakObjectPtr<struct ASummonItemBase> MySpawner; // 0xc60(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> WeaponOwner; // 0xc68(0x08)
	struct USummonWeaponAnimationComponent* SummonWeaponAnimationComponent; // 0xc70(0x08)
	struct FVector ShotDirection; // 0xc78(0x0c)
	float ShotRange; // 0xc84(0x04)
	char pad_C88[0x88]; // 0xc88(0x88)
	struct UGameplayEffect* WeaponCanUseEffect; // 0xd10(0x08)
	char pad_D18[0x8]; // 0xd18(0x08)
};

// Class Solarland.SolarSummonWeapon_Vehicle
// Size: 0xf60 (Inherited: 0xf60)
struct ASolarSummonWeapon_Vehicle : ASolarPlayerItemWeapon {
	bool bRequestSummonDetection; // 0xf58(0x01)
	bool bResponseSummonDetection; // 0xf59(0x01)

	void ServerRequestSummonDetection(struct FSolarSummonData InSummonData); // Function Solarland.SolarSummonWeapon_Vehicle.ServerRequestSummonDetection // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1e22930
	void ClientResponseSummonDetection(bool InbValid, struct FSolarSummonData InSummonData); // Function Solarland.SolarSummonWeapon_Vehicle.ClientResponseSummonDetection // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1e213c0
};

// Class Solarland.SolarSuperSkillDurationWidget
// Size: 0x388 (Inherited: 0x340)
struct USolarSuperSkillDurationWidget : USolarUserWidget {
	struct UImage* Img_Skill; // 0x340(0x08)
	struct UImage* Progress_Duration; // 0x348(0x08)
	char pad_350[0x30]; // 0x350(0x30)
	struct UMaterialInstanceDynamic* GridMaterial; // 0x380(0x08)

	void UpdateProgress(); // Function Solarland.SolarSuperSkillDurationWidget.UpdateProgress // (Final|Native|Private) // @ game+0x1e22c20
	void OnRoleAbilityContinous(int32_t AbilityIndex, bool bTurnOn, float Duration); // Function Solarland.SolarSuperSkillDurationWidget.OnRoleAbilityContinous // (Final|Native|Private) // @ game+0x1e22570
	void OnRoleAbilityChange(int32_t AbilityIndex, bool bHaveRoleAbility, int32_t CharacterId, int32_t PlayerLevel); // Function Solarland.SolarSuperSkillDurationWidget.OnRoleAbilityChange // (Final|Native|Private) // @ game+0x1e22430
};

// Class Solarland.SolarSwitchTargetCameraControlComp
// Size: 0x140 (Inherited: 0xb0)
struct USolarSwitchTargetCameraControlComp : UActorComponent {
	struct ASolarSpectateLevelSequenceActor* SpectateLevelSequenceActorClass; // 0xb0(0x08)
	float CameraBlendCurveHeightScale; // 0xb8(0x04)
	float CameraBlendSpeed; // 0xbc(0x04)
	float MinCameraBlendDistanceBetweenTargets; // 0xc0(0x04)
	char pad_C4[0x3c]; // 0xc4(0x3c)
	struct ASolarSpectateLevelSequenceActor* SpectateLevelSequenceActor; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)
	struct ACameraActor* IntermediatePointCameraActor; // 0x118(0x08)
	char pad_120[0x10]; // 0x120(0x10)
	struct TWeakObjectPtr<struct AActor> IntermediateEndTarget; // 0x130(0x08)
	struct TWeakObjectPtr<struct UCameraComponent> EndTargetCameraCache; // 0x138(0x08)

	void OnViewTargetBlendComplete(); // Function Solarland.SolarSwitchTargetCameraControlComp.OnViewTargetBlendComplete // (Final|Native|Private) // @ game+0x1e226a0
	void OnScoutPlayerWorkComplete(); // Function Solarland.SolarSwitchTargetCameraControlComp.OnScoutPlayerWorkComplete // (Final|Native|Private) // @ game+0x1e22680
};

// Class Solarland.SolarSyncComponent
// Size: 0xb8 (Inherited: 0xb0)
struct USolarSyncComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)

	void SendSyncAxisRotMessage(struct FString Type, struct FRotator& Value); // Function Solarland.SolarSyncComponent.SendSyncAxisRotMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void SendSyncAxisMoveMessage(struct FString Type, float Value, struct FVector& Location); // Function Solarland.SolarSyncComponent.SendSyncAxisMoveMessage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void SendSyncAxisMessage(struct FString Type, float Value); // Function Solarland.SolarSyncComponent.SendSyncAxisMessage // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SendPlayerMoveMessage(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncComponent.SendPlayerMoveMessage // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SendActionMessage(struct FString Type, struct FString Value); // Function Solarland.SolarSyncComponent.SendActionMessage // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RegisterActor(struct AActor* AC); // Function Solarland.SolarSyncComponent.RegisterActor // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarSyncPlayerControllerComponent
// Size: 0x108 (Inherited: 0xb8)
struct USolarSyncPlayerControllerComponent : USolarSyncComponent {
	char pad_B8[0x50]; // 0xb8(0x50)

	void InputTurnRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurnRate // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputTurn(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputTurn // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e221b0
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22170
	void InputReloadReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22130
	void InputReloadPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e220f0
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e220b0
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22070
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22030
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ff0
	void InputMoveRight(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputMoveForward(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputMapReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21e90
	void InputMapPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21e50
	void InputLookUpRate(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUpRate // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputLookUp(float Value); // Function Solarland.SolarSyncPlayerControllerComponent.InputLookUp // (Final|Native|Public|BlueprintCallable) // @ game+0xae7e70
	void InputJumpReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputJumpPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputInteractReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21cc0
	void InputInteractPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21c80
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21c40
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21c00
	void InputGunsightReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21bc0
	void InputGunsightPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21b80
	void InputFreeLookReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputFreeLookPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21b00
	void InputFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ac0
	void InputEquip2Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21a80
	void InputEquip2Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21a40
	void InputEquip1Released(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21a00
	void InputEquip1Pressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e219c0
	void InputEjectReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputEjectPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputCrouchReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputCrouchPressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void InputAltFireReleased(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21900
	void InputAltFirePressed(); // Function Solarland.SolarSyncPlayerControllerComponent.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e218c0
};

// Class Solarland.SolarSyncRemoteController
// Size: 0x380 (Inherited: 0x348)
struct ASolarSyncRemoteController : AAIController {
	char pad_348[0x38]; // 0x348(0x38)

	void TakeWeapon(struct FString Cmd); // Function Solarland.SolarSyncRemoteController.TakeWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22b80
	void OnReceivedServerMoveData(struct FServerMoveData& MoveData); // Function Solarland.SolarSyncRemoteController.OnReceivedServerMoveData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e223a0
	void InputTurnRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurnRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e221d0
	void InputTurn(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputTurn // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e221d0
	void InputSecondWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22190
	void InputSecondWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputSecondWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22150
	void InputReloadReleased(); // Function Solarland.SolarSyncRemoteController.InputReloadReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22110
	void InputReloadPressed(); // Function Solarland.SolarSyncRemoteController.InputReloadPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e220d0
	void InputPrimaryWeaponReleased(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22090
	void InputPrimaryWeaponPressed(); // Function Solarland.SolarSyncRemoteController.InputPrimaryWeaponPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22050
	void InputOutVehicleReleased(); // Function Solarland.SolarSyncRemoteController.InputOutVehicleReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e22010
	void InputOutVehiclePressed(); // Function Solarland.SolarSyncRemoteController.InputOutVehiclePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21fd0
	void InputMoveRight(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveRight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e21f40
	void InputMoveForward(struct FSolarSyncMoveMessageParams& Params); // Function Solarland.SolarSyncRemoteController.InputMoveForward // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e21eb0
	void InputMapReleased(); // Function Solarland.SolarSyncRemoteController.InputMapReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21e70
	void InputMapPressed(); // Function Solarland.SolarSyncRemoteController.InputMapPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21e30
	void InputLookUpRate(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUpRate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e21da0
	void InputLookUp(struct FRotator& Rot); // Function Solarland.SolarSyncRemoteController.InputLookUp // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1e21da0
	void InputJumpReleased(); // Function Solarland.SolarSyncRemoteController.InputJumpReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21d80
	void InputJumpPressed(); // Function Solarland.SolarSyncRemoteController.InputJumpPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21d60
	void InputJetVerticalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21d40
	void InputJetVerticalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetVerticalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21d20
	void InputJetHorizontalReleased(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21d00
	void InputJetHorizontalPressed(); // Function Solarland.SolarSyncRemoteController.InputJetHorizontalPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ce0
	void InputInteractReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ca0
	void InputInteractPressed(); // Function Solarland.SolarSyncRemoteController.InputInteractPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21c60
	void InputInteractAlternativeReleased(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativeReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21c20
	void InputInteractAlternativePressed(); // Function Solarland.SolarSyncRemoteController.InputInteractAlternativePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21be0
	void InputGunsightReleased(); // Function Solarland.SolarSyncRemoteController.InputGunsightReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ba0
	void InputGunsightPressed(); // Function Solarland.SolarSyncRemoteController.InputGunsightPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21b60
	void InputFreeLookReleased(); // Function Solarland.SolarSyncRemoteController.InputFreeLookReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21b40
	void InputFreeLookPressed(); // Function Solarland.SolarSyncRemoteController.InputFreeLookPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21b20
	void InputFireReleased(); // Function Solarland.SolarSyncRemoteController.InputFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21ae0
	void InputFirePressed(); // Function Solarland.SolarSyncRemoteController.InputFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21aa0
	void InputEquip2Released(); // Function Solarland.SolarSyncRemoteController.InputEquip2Released // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21a60
	void InputEquip2Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip2Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21a20
	void InputEquip1Released(); // Function Solarland.SolarSyncRemoteController.InputEquip1Released // (Final|Native|Public|BlueprintCallable) // @ game+0x1e219e0
	void InputEquip1Pressed(); // Function Solarland.SolarSyncRemoteController.InputEquip1Pressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e219a0
	void InputEjectReleased(); // Function Solarland.SolarSyncRemoteController.InputEjectReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21980
	void InputEjectPressed(); // Function Solarland.SolarSyncRemoteController.InputEjectPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21960
	void InputCrouchReleased(); // Function Solarland.SolarSyncRemoteController.InputCrouchReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21940
	void InputCrouchPressed(); // Function Solarland.SolarSyncRemoteController.InputCrouchPressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21920
	void InputAltFireReleased(); // Function Solarland.SolarSyncRemoteController.InputAltFireReleased // (Final|Native|Public|BlueprintCallable) // @ game+0x1e218e0
	void InputAltFirePressed(); // Function Solarland.SolarSyncRemoteController.InputAltFirePressed // (Final|Native|Public|BlueprintCallable) // @ game+0x1e218a0
	void Fire(bool Activate); // Function Solarland.SolarSyncRemoteController.Fire // (Final|Native|Public|BlueprintCallable) // @ game+0x1e21570
};

// Class Solarland.SolarTabControlList
// Size: 0x350 (Inherited: 0x340)
struct USolarTabControlList : USolarUserWidget {
	struct USolarTreeView* TabList; // 0x340(0x08)
	int32_t CompoundStyleFlags; // 0x348(0x04)
	int32_t LeafStyleFlags; // 0x34c(0x04)

	bool IsMatchStyle(int32_t InStyleFlags, int32_t BitMask); // Function Solarland.SolarTabControlList.IsMatchStyle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e222e0
};

// Class Solarland.SolarTabControlListSlot
// Size: 0x348 (Inherited: 0x340)
struct USolarTabControlListSlot : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)

	bool BP_IsItemSelectableChanged(); // Function Solarland.SolarTabControlListSlot.BP_IsItemSelectableChanged // (Event|Protected|BlueprintEvent|Const) // @ game+0x224bbb0
};

// Class Solarland.SolarTableManager
// Size: 0x40 (Inherited: 0x28)
struct USolarTableManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class ESolarSupportLanguages SystemLang; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)

	void SetIMInitFlag(bool Flag); // Function Solarland.SolarTableManager.SetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e22ae0
	void SetCurrentLangEnum(enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.SetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e22a70
	void SetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.SetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e229e0
	void ReceiveInit(); // Function Solarland.SolarTableManager.ReceiveInit // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void OnSetCurrentLang(struct FString InLang); // Function Solarland.SolarTableManager.OnSetCurrentLang // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	bool IsLocalTextIDValid(int32_t ID); // Function Solarland.SolarTableManager.IsLocalTextIDValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e22260
	struct FString GetLocalTextWithLang(int32_t ID, enum class ESolarSupportLanguages InLang); // Function Solarland.SolarTableManager.GetLocalTextWithLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e217a0
	struct FString GetLocalText(int32_t ID); // Function Solarland.SolarTableManager.GetLocalText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e216e0
	bool GetIMInitFlag(); // Function Solarland.SolarTableManager.GetIMInitFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e216b0
	enum class ESolarSupportLanguages GetCurrentLangEnum(); // Function Solarland.SolarTableManager.GetCurrentLangEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e21680
	struct FString GetCurrentLang(); // Function Solarland.SolarTableManager.GetCurrentLang // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e21600
	enum class ESolarSupportLanguages ConvertLangNameToEnum(struct FString LangName); // Function Solarland.SolarTableManager.ConvertLangNameToEnum // (Final|Native|Static|Public) // @ game+0x1e214d0
};

// Class Solarland.SolarTables
// Size: 0x2820 (Inherited: 0x28)
struct USolarTables : UObject {
	struct FSolarTables_Tables Tables; // 0x28(0x27c8)
	struct USolarTables_TablesReader* TablesReader; // 0x27f0(0x08)
	struct FMulticastInlineDelegate OnJsonTableReloadComplete; // 0x27f8(0x10)
	char pad_2808[0x18]; // 0x2808(0x18)

	void UnloadTables(); // Function Solarland.SolarTables.UnloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2c3d0
	void UnitTest(); // Function Solarland.SolarTables.UnitTest // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void ReloadTablesAsync_Internal(); // Function Solarland.SolarTables.ReloadTablesAsync_Internal // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2bba0
	void ReloadTablesAsync(); // Function Solarland.SolarTables.ReloadTablesAsync // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2bb80
	void ReloadTables(); // Function Solarland.SolarTables.ReloadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2bb60
	void LoadTables(); // Function Solarland.SolarTables.LoadTables // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2bb40
	bool IsReloadTablesComplete(); // Function Solarland.SolarTables.IsReloadTablesComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2bb10
	bool IsInstanceValid(); // Function Solarland.SolarTables.IsInstanceValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2bae0
	bool Hotfix_FixValue(struct FString TableName, struct FString RowKey, struct FString ColKey, struct FString NewValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2b8e0
	bool Hotfix_FixRow(struct FString TableName, struct FString RowKey, struct FString NewRowValue, struct FString& ErrorMsg); // Function Solarland.SolarTables.Hotfix_FixRow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1e2b730
	bool HasTableName(struct FString TableName); // Function Solarland.SolarTables.HasTableName // (Final|Native|Public|BlueprintCallable) // @ game+0x1e2b680
	struct USolarTables* GetInstance(); // Function Solarland.SolarTables.GetInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e2a060
	void DestroyInstance(); // Function Solarland.SolarTables.DestroyInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1e29e60
};

// Class Solarland.SolarTableReaderBase
// Size: 0x30 (Inherited: 0x28)
struct USolarTableReaderBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	int32_t RandomRangeInt(struct FSolarTablesRangeInt& InData); // Function Solarland.SolarTableReaderBase.RandomRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb5df0
	float RandomRangeFloat(struct FSolarTablesRangeFloat& InData); // Function Solarland.SolarTableReaderBase.RandomRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb5d50
	bool IsReaderValid(); // Function Solarland.SolarTableReaderBase.IsReaderValid // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1eb5cc0
	struct FString GetLocText(struct FSolarTablesLocalText& InData); // Function Solarland.SolarTableReaderBase.GetLocText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb53d0
	struct FString GetDeviceRes(struct FSolarTablesDeviceRes& InData); // Function Solarland.SolarTableReaderBase.GetDeviceRes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb52e0
	bool ContainsRangeInt(struct FSolarTablesRangeInt& InData, int32_t In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeInt // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb4f60
	bool ContainsRangeFloat(struct FSolarTablesRangeFloat& InData, float In, bool bEqualMin, bool bEqualMax); // Function Solarland.SolarTableReaderBase.ContainsRangeFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1eb4e00
};

// Class Solarland.SolarTables_Reader_AccountFixedExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFixedExp : USolarTableReaderBase {

	struct FSolarTablesData_AccountFixedExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFixedExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2bbc0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2ab70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a660
	struct FSolarTablesData_AccountFixedExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29eb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFixedExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_AccountFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_AccountFlag : USolarTableReaderBase {

	struct FSolarTablesData_AccountFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_AccountFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2bda0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_AccountFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2ac50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_AccountFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_AccountFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a1b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_AccountFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29ef0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_AccountFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Achievement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Achievement : USolarTableReaderBase {

	struct FSolarTablesData_Achievement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Achievement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2bee0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Achievement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2ad30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Achievement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Achievement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a7e0
	struct FSolarTablesData_Achievement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Achievement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a2c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Achievement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Achievement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Achievement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29f30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Achievement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Airline
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Airline : USolarTableReaderBase {

	struct FSolarTablesData_Airline TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Airline.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2c020
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b390
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Airline.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2ae10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Airline.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Airline.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a8a0
	struct FSolarTablesData_Airline GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Airline.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a3a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Airline.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Airline.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Airline.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29f70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Airline.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ArmorProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ArmorProperty : USolarTableReaderBase {

	struct FSolarTablesData_ArmorProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ArmorProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2c160
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b480
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ArmorProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aef0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a960
	struct FSolarTablesData_ArmorProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a490
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29fb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ArmorProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Armory
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Armory : USolarTableReaderBase {

	struct FSolarTablesData_Armory TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Armory.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2c2a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Armory.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2afd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Armory.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Armory.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aa20
	struct FSolarTablesData_Armory GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Armory.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a570
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Armory.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Armory.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Armory.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29ff0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Armory.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BackpackProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e347b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e341f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33cb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33830
	struct FSolarTablesData_BackpackProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33280
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33100
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BackpackTrailProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BackpackTrailProperty : USolarTableReaderBase {

	struct FSolarTablesData_BackpackTrailProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e34a30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e342f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33d90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e338f0
	struct FSolarTablesData_BackpackTrailProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33370
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33140
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BackpackTrailProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BattleEndRankSettlement
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleEndRankSettlement : USolarTableReaderBase {

	struct FSolarTablesData_BattleEndRankSettlement TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e34ce0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e343f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33e70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e339b0
	struct FSolarTablesData_BattleEndRankSettlement GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33460
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33180
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleEndRankSettlement.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BattleRoyaleMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleRoyaleMode : USolarTableReaderBase {

	struct FSolarTablesData_BattleRoyaleMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e34f40
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e344e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33f50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33a70
	struct FSolarTablesData_BattleRoyaleMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33560
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e331c0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleRoyaleMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BattleUpgradeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeContent : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e35320
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e345d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e34030
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33b30
	struct FSolarTablesData_BattleUpgradeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33640
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33200
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffect
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffect : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffect TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e35460
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e34110
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_BattleUpgradeEffect GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33740
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33240
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffect.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BattleUpgradeEffectPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BattleUpgradeEffectPool : USolarTableReaderBase {

	struct FSolarTablesData_BattleUpgradeEffectPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c100
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bd30
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b7f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f0
	struct FSolarTablesData_BattleUpgradeEffectPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3aed0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ad50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BattleUpgradeEffectPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Behavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Behavior : USolarTableReaderBase {

	struct FSolarTablesData_Behavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Behavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c370
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Behavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b8d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Behavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Behavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_Behavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Behavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3afd0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Behavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Behavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Behavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ad90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Behavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_BpAward
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_BpAward : USolarTableReaderBase {

	struct FSolarTablesData_BpAward TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_BpAward.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c590
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3be20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_BpAward.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b9b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_BpAward.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_BpAward.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b5b0
	struct FSolarTablesData_BpAward GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_BpAward.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b0f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_BpAward.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_BpAward.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_BpAward.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3add0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_BpAward.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_CapsuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CapsuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_CapsuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CapsuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c6e0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bf10
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ba90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b670
	struct FSolarTablesData_CapsuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b210
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ae10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CapsuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_CharacterAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c960
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c010
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bb70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b730
	struct FSolarTablesData_CharacterAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b300
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ae50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_CharacterPassiveAbility
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterPassiveAbility : USolarTableReaderBase {

	struct FSolarTablesData_CharacterPassiveAbility TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ca90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bd30
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bc50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f0
	struct FSolarTablesData_CharacterPassiveAbility GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b3f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3ae90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterPassiveAbility.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_CharacterVoiceover
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_CharacterVoiceover : USolarTableReaderBase {

	struct FSolarTablesData_CharacterVoiceover TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_CharacterVoiceover.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44850
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44130
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_CharacterVoiceover GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43970
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e437b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_CharacterVoiceover.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Chest
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Chest : USolarTableReaderBase {

	struct FSolarTablesData_Chest TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Chest.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44ac0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b480
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Chest.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44210
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Chest.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Chest.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a960
	struct FSolarTablesData_Chest GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Chest.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43a80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Chest.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Chest.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Chest.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e437f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Chest.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ChestSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ChestSpawn : USolarTableReaderBase {

	struct FSolarTablesData_ChestSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ChestSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44c00
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e345d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ChestSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e442f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33b30
	struct FSolarTablesData_ChestSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43b60
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43830
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ChestSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ClanFlag
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ClanFlag : USolarTableReaderBase {

	struct FSolarTablesData_ClanFlag TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ClanFlag.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44d50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ClanFlag.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e443d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ClanFlag.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_ClanFlag GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43c70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ClanFlag.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43870
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ClanFlag.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_DayAndNight
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DayAndNight : USolarTableReaderBase {

	struct FSolarTablesData_DayAndNight TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DayAndNight.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44e90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DayAndNight.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e444b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DayAndNight.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_DayAndNight GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43d80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DayAndNight.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e438b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DayAndNight.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_DsVariableRange
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_DsVariableRange : USolarTableReaderBase {

	struct FSolarTablesData_DsVariableRange TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_DsVariableRange.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e45090
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e345d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_DsVariableRange.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44590
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33b30
	struct FSolarTablesData_DsVariableRange GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43e70
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e438f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_DsVariableRange.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Emote
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Emote : USolarTableReaderBase {

	struct FSolarTablesData_Emote TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Emote.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e451d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44750
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Emote.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44670
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Emote.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Emote.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e44070
	struct FSolarTablesData_Emote GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Emote.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43f80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Emote.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Emote.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Emote.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43930
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Emote.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_EnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4b340
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4ad20
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a9c0
	struct FSolarTablesData_EnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a7c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a550
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EscapeExp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EscapeExp : USolarTableReaderBase {

	struct FSolarTablesData_EscapeExp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EscapeExp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4b480
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EscapeExp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4ae00
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EscapeExp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_EscapeExp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a8a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EscapeExp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a590
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EscapeExp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EShop
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShop : USolarTableReaderBase {

	struct FSolarTablesData_EShop TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShop.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4aee0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e345d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShop.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4aa80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShop.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShop.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33b30
	struct FSolarTablesData_EShop GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShop.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a5d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShop.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShop.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShop.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a490
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShop.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EShopDemoModel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopDemoModel : USolarTableReaderBase {

	struct FSolarTablesData_EShopDemoModel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopDemoModel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4b020
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4ab60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a660
	struct FSolarTablesData_EShopDemoModel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a4d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopDemoModel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EShopGoodsPool
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPool : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPool TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPool.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4b200
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c010
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4ac40
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b730
	struct FSolarTablesData_EShopGoodsPool GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a6d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a510
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPool.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EShopGoodsPoolGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopGoodsPoolGroup : USolarTableReaderBase {

	struct FSolarTablesData_EShopGoodsPoolGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53bd0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bd30
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53490
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f0
	struct FSolarTablesData_EShopGoodsPoolGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3aed0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52cc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopGoodsPoolGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_EShopSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_EShopSpawn : USolarTableReaderBase {

	struct FSolarTablesData_EShopSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_EShopSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53e40
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_EShopSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53570
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_EShopSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52e40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52d00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_EShopSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ExtraEnergyProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ExtraEnergyProperty : USolarTableReaderBase {

	struct FSolarTablesData_ExtraEnergyProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53f80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e539d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53650
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53310
	struct FSolarTablesData_ExtraEnergyProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52f50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52d40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ExtraEnergyProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GameMap
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameMap : USolarTableReaderBase {

	struct FSolarTablesData_GameMap TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameMap.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e541f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e539d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameMap.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53730
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameMap.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameMap.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53310
	struct FSolarTablesData_GameMap GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameMap.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53040
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameMap.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameMap.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameMap.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52d80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameMap.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GameModeGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeGroup : USolarTableReaderBase {

	struct FSolarTablesData_GameModeGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e544a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53810
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aa20
	struct FSolarTablesData_GameModeGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53130
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52dc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GameModeMain
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameModeMain : USolarTableReaderBase {

	struct FSolarTablesData_GameModeMain TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameModeMain.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e545f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53ad0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameModeMain.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e538f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameModeMain.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e533d0
	struct FSolarTablesData_GameModeMain GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53220
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameModeMain.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52e00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameModeMain.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GameTimeLine
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GameTimeLine : USolarTableReaderBase {

	struct FSolarTablesData_GameTimeLine TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GameTimeLine.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5be40
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e344e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GameTimeLine.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b4b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33a70
	struct FSolarTablesData_GameTimeLine GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5abd0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5aa50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GameTimeLine.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GetPoint
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GetPoint : USolarTableReaderBase {

	struct FSolarTablesData_GetPoint TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GetPoint.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5c140
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GetPoint.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b590
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GetPoint.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GetPoint.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_GetPoint GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GetPoint.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43d80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GetPoint.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GetPoint.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5aa90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GetPoint.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GlobalOutcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalOutcome : USolarTableReaderBase {

	struct FSolarTablesData_GlobalOutcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalOutcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5c350
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b9f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b670
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b190
	struct FSolarTablesData_GlobalOutcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5aad0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalOutcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GlobalSensitivity
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GlobalSensitivity : USolarTableReaderBase {

	struct FSolarTablesData_GlobalSensitivity TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GlobalSensitivity.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5c4c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5bae0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b750
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b250
	struct FSolarTablesData_GlobalSensitivity GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5ae10
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5ab10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GlobalSensitivity.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_GunProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_GunProperty : USolarTableReaderBase {

	struct FSolarTablesData_GunProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_GunProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5c750
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5bbe0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_GunProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b830
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_GunProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_GunProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b310
	struct FSolarTablesData_GunProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_GunProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5af00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_GunProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_GunProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5ab50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_GunProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_InputAction
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputAction : USolarTableReaderBase {

	struct FSolarTablesData_InputAction TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputAction.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5c9c0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5bce0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b910
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputAction.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputAction.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b3d0
	struct FSolarTablesData_InputAction GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputAction.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5afe0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputAction.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputAction.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputAction.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5ab90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputAction.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_InputMapping
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_InputMapping : USolarTableReaderBase {

	struct FSolarTablesData_InputMapping TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_InputMapping.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e643c0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64150
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63c10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_InputMapping.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_InputMapping.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63a70
	struct FSolarTablesData_InputMapping GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_InputMapping.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63420
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_InputMapping.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_InputMapping.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e632a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_InputMapping.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Item : USolarTableReaderBase {

	struct FSolarTablesData_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64730
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63cf0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aa20
	struct FSolarTablesData_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e635b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e632e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ItemBehavior
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemBehavior : USolarTableReaderBase {

	struct FSolarTablesData_ItemBehavior TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemBehavior.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64870
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemBehavior.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63dd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a9c0
	struct FSolarTablesData_ItemBehavior GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e636a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63320
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemBehavior.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ItemCustomType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemCustomType : USolarTableReaderBase {

	struct FSolarTablesData_ItemCustomType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemCustomType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e649b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bd30
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemCustomType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63eb0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f0
	struct FSolarTablesData_ItemCustomType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63780
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63360
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemCustomType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ItemQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemQuality : USolarTableReaderBase {

	struct FSolarTablesData_ItemQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64c30
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e642c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63f90
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63b50
	struct FSolarTablesData_ItemQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63870
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e633a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ItemSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemSound : USolarTableReaderBase {

	struct FSolarTablesData_ItemSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64e20
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3be20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e64070
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b5b0
	struct FSolarTablesData_ItemSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63960
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e633e0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ItemWeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ItemWeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_ItemWeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ItemWeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b7e0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b480
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b040
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6ade0
	struct FSolarTablesData_ItemWeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a950
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a7d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ItemWeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_JetPackModuleProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_JetPackModuleProperty : USolarTableReaderBase {

	struct FSolarTablesData_JetPackModuleProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6ba50
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e539d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b120
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53310
	struct FSolarTablesData_JetPackModuleProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52f50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a810
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_JetPackModuleProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_LanguageSwitcher
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LanguageSwitcher : USolarTableReaderBase {

	struct FSolarTablesData_LanguageSwitcher TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LanguageSwitcher.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6bcc0
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b200
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6aea0
	struct FSolarTablesData_LanguageSwitcher GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6aa30
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a850
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LanguageSwitcher.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_LobbyAutoDownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_LobbyAutoDownload : USolarTableReaderBase {

	struct FSolarTablesData_LobbyAutoDownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6c140
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b2e0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_LobbyAutoDownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6abf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a890
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_LobbyAutoDownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization : USolarTableReaderBase {

	struct FSolarTablesData_Localization TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6c340
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b3c0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a8d0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_BattleUI
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_BattleUI : USolarTableReaderBase {

	struct FSolarTablesData_Localization_BattleUI TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_BattleUI.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6c530
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b4a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_BattleUI GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6a910
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_BattleUI.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_EventSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_EventSystem : USolarTableReaderBase {

	struct FSolarTablesData_Localization_EventSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_EventSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e70190
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fd30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_EventSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fbf0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_EventSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_General
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_General : USolarTableReaderBase {

	struct FSolarTablesData_Localization_General TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_General.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e70380
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_General.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fe10
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_General.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_General.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_General GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_General.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_General.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_General.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fc30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_General.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_Heroes
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Heroes : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Heroes TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Heroes.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e70570
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fef0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_Heroes GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fc70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Heroes.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_Item
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Item : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Item TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Item.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e70760
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Item.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6ffd0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Item.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_Item GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Item.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fcb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Item.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_Tournament
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Tournament : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Tournament TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Tournament.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e70950
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e700b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_Tournament GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6fcf0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Tournament.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Localization_Uncategorized
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Localization_Uncategorized : USolarTableReaderBase {

	struct FSolarTablesData_Localization_Uncategorized TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e778d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6b6e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e772a0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6af80
	struct FSolarTablesData_Localization_Uncategorized GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e6acf0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76ad0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Localization_Uncategorized.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_MapMarkIcon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MapMarkIcon : USolarTableReaderBase {

	struct FSolarTablesData_MapMarkIcon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MapMarkIcon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77ac0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77380
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_MapMarkIcon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76c50
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76b10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MapMarkIcon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_MatchRule
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MatchRule : USolarTableReaderBase {

	struct FSolarTablesData_MatchRule TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MatchRule.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77db0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e777e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MatchRule.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77460
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MatchRule.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MatchRule.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77120
	struct FSolarTablesData_MatchRule GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MatchRule.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76d40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MatchRule.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MatchRule.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76b50
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MatchRule.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_MaterialProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_MaterialProperty : USolarTableReaderBase {

	struct FSolarTablesData_MaterialProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_MaterialProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77f90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b480
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_MaterialProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77540
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a960
	struct FSolarTablesData_MaterialProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76e30
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76b90
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_MaterialProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_NameCardBackground
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardBackground : USolarTableReaderBase {

	struct FSolarTablesData_NameCardBackground TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardBackground.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e781f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3be20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardBackground.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77620
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e771e0
	struct FSolarTablesData_NameCardBackground GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76f10
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76bd0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardBackground.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_NameCardPose
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_NameCardPose : USolarTableReaderBase {

	struct FSolarTablesData_NameCardPose TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_NameCardPose.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e784f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_NameCardPose.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77700
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_NameCardPose.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aa20
	struct FSolarTablesData_NameCardPose GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77030
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_NameCardPose.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e76c10
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_NameCardPose.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ObGift
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ObGift : USolarTableReaderBase {

	struct FSolarTablesData_ObGift TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ObGift.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7ed10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e777e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ObGift.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e6f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ObGift.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ObGift.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77120
	struct FSolarTablesData_ObGift GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ObGift.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e070
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ObGift.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ObGift.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ObGift.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7deb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ObGift.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Outcome
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Outcome : USolarTableReaderBase {

	struct FSolarTablesData_Outcome TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Outcome.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7ee40
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e777e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Outcome.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e7d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Outcome.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Outcome.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77120
	struct FSolarTablesData_Outcome GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Outcome.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e160
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Outcome.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Outcome.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Outcome.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7def0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Outcome.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_OutcomeContent
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeContent : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeContent TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeContent.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7ef90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e345d0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeContent.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e8b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33b30
	struct FSolarTablesData_OutcomeContent GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e250
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7df30
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeContent.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_OutcomeSet
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_OutcomeSet : USolarTableReaderBase {

	struct FSolarTablesData_OutcomeSet TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_OutcomeSet.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7f0d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_OutcomeSet.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e990
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_OutcomeSet GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52e40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7df70
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_OutcomeSet.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_PickupPriorityItem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityItem : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityItem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityItem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7f210
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7ea70
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e570
	struct FSolarTablesData_PickupPriorityItem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e360
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7dfb0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityItem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_PickupPriorityWeaponPart
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PickupPriorityWeaponPart : USolarTableReaderBase {

	struct FSolarTablesData_PickupPriorityWeaponPart TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7f3f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7eb50
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e630
	struct FSolarTablesData_PickupPriorityWeaponPart GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7dff0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PickupPriorityWeaponPart.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_PlayerOperationListLayout
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_PlayerOperationListLayout : USolarTableReaderBase {

	struct FSolarTablesData_PlayerOperationListLayout TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7f5d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3be20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7ec30
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b5b0
	struct FSolarTablesData_PlayerOperationListLayout GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e450
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e030
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_PlayerOperationListLayout.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_QuickChat
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickChat : USolarTableReaderBase {

	struct FSolarTablesData_QuickChat TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickChat.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86b90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e53ad0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickChat.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86650
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickChat.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickChat.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86590
	struct FSolarTablesData_QuickChat GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickChat.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86000
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickChat.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickChat.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85e80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickChat.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_QuickVoice
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_QuickVoice : USolarTableReaderBase {

	struct FSolarTablesData_QuickVoice TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_QuickVoice.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86d80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e777e0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_QuickVoice.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86730
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_QuickVoice.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e77120
	struct FSolarTablesData_QuickVoice GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e860f0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_QuickVoice.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85ec0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_QuickVoice.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_RankLevel
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankLevel : USolarTableReaderBase {

	struct FSolarTablesData_RankLevel TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankLevel.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86ec0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankLevel.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86810
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankLevel.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankLevel.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a9c0
	struct FSolarTablesData_RankLevel GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankLevel.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e861e0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankLevel.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankLevel.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85f00
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankLevel.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_RankMatch
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_RankMatch : USolarTableReaderBase {

	struct FSolarTablesData_RankMatch TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_RankMatch.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e87000
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5bbe0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_RankMatch.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e868f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_RankMatch.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_RankMatch.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b310
	struct FSolarTablesData_RankMatch GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_RankMatch.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e862c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_RankMatch.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_RankMatch.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85f40
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_RankMatch.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Rescue
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Rescue : USolarTableReaderBase {

	struct FSolarTablesData_Rescue TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Rescue.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e87150
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b9f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Rescue.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e869d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Rescue.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Rescue.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b190
	struct FSolarTablesData_Rescue GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Rescue.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e863a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Rescue.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Rescue.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Rescue.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85f80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Rescue.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_SecondMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_SecondMode : USolarTableReaderBase {

	struct FSolarTablesData_SecondMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_SecondMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e874a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3bd30
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_SecondMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86ab0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_SecondMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_SecondMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b4f0
	struct FSolarTablesData_SecondMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_SecondMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e86490
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_SecondMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_SecondMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e85fc0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_SecondMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_ShieldProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_ShieldProperty : USolarTableReaderBase {

	struct FSolarTablesData_ShieldProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_ShieldProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93620
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93420
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_ShieldProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93260
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e930e0
	struct FSolarTablesData_ShieldProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e92f00
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e92e80
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_ShieldProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Skin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Skin : USolarTableReaderBase {

	struct FSolarTablesData_Skin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Skin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93890
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93520
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Skin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e93340
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Skin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Skin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e931a0
	struct FSolarTablesData_Skin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Skin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e92ff0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Skin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Skin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Skin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e92ec0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Skin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_TablesReader
// Size: 0x378 (Inherited: 0x28)
struct USolarTables_TablesReader : UObject {
	struct USolarTables_Reader_AccountFixedExp* AccountFixedExp; // 0x28(0x08)
	struct USolarTables_Reader_AccountFlag* AccountFlag; // 0x30(0x08)
	struct USolarTables_Reader_Airline* Airline; // 0x38(0x08)
	struct USolarTables_Reader_Armory* Armory; // 0x40(0x08)
	struct USolarTables_Reader_BattleUpgradeEffect* BattleUpgradeEffect; // 0x48(0x08)
	struct USolarTables_Reader_BattleUpgradeContent* BattleUpgradeContent; // 0x50(0x08)
	struct USolarTables_Reader_BattleUpgradeEffectPool* BattleUpgradeEffectPool; // 0x58(0x08)
	struct USolarTables_Reader_BattleEndRankSettlement* BattleEndRankSettlement; // 0x60(0x08)
	struct USolarTables_Reader_BpAward* BpAward; // 0x68(0x08)
	struct USolarTables_Reader_Behavior* Behavior; // 0x70(0x08)
	struct USolarTables_Reader_EscapeExp* EscapeExp; // 0x78(0x08)
	struct USolarTables_Reader_UnitCharacter* UnitCharacter; // 0x80(0x08)
	struct USolarTables_Reader_CharacterAbility* CharacterAbility; // 0x88(0x08)
	struct USolarTables_Reader_CharacterPassiveAbility* CharacterPassiveAbility; // 0x90(0x08)
	struct USolarTables_Reader_GetPoint* GetPoint; // 0x98(0x08)
	struct USolarTables_Reader_ChestSpawn* ChestSpawn; // 0xa0(0x08)
	struct USolarTables_Reader_ClanFlag* ClanFlag; // 0xa8(0x08)
	struct USolarTables_Reader_DayAndNight* DayAndNight; // 0xb0(0x08)
	struct USolarTables_Reader_DsVariableRange* DsVariableRange; // 0xb8(0x08)
	struct USolarTables_Reader_EShop* EShop; // 0xc0(0x08)
	struct USolarTables_Reader_EShopDemoModel* EShopDemoModel; // 0xc8(0x08)
	struct USolarTables_Reader_EShopGoodsPool* EShopGoodsPool; // 0xd0(0x08)
	struct USolarTables_Reader_EShopGoodsPoolGroup* EShopGoodsPoolGroup; // 0xd8(0x08)
	struct USolarTables_Reader_EShopSpawn* EShopSpawn; // 0xe0(0x08)
	struct USolarTables_Reader_GameModeGroup* GameModeGroup; // 0xe8(0x08)
	struct USolarTables_Reader_GameModeMain* GameModeMain; // 0xf0(0x08)
	struct USolarTables_Reader_BattleRoyaleMode* BattleRoyaleMode; // 0xf8(0x08)
	struct USolarTables_Reader_OutcomeSet* OutcomeSet; // 0x100(0x08)
	struct USolarTables_Reader_GameTimeLine* GameTimeLine; // 0x108(0x08)
	struct USolarTables_Reader_GlobalOutcome* GlobalOutcome; // 0x110(0x08)
	struct USolarTables_Reader_GlobalSensitivity* GlobalSensitivity; // 0x118(0x08)
	struct USolarTables_Reader_InputMapping* InputMapping; // 0x120(0x08)
	struct USolarTables_Reader_InputAction* InputAction; // 0x128(0x08)
	struct USolarTables_Reader_Item* Item; // 0x130(0x08)
	struct USolarTables_Reader_GunProperty* GunProperty; // 0x138(0x08)
	struct USolarTables_Reader_ArmorProperty* ArmorProperty; // 0x140(0x08)
	struct USolarTables_Reader_BackpackProperty* BackpackProperty; // 0x148(0x08)
	struct USolarTables_Reader_BackpackTrailProperty* BackpackTrailProperty; // 0x150(0x08)
	struct USolarTables_Reader_CapsuleProperty* CapsuleProperty; // 0x158(0x08)
	struct USolarTables_Reader_Chest* Chest; // 0x160(0x08)
	struct USolarTables_Reader_Emote* Emote; // 0x168(0x08)
	struct USolarTables_Reader_EnergyProperty* EnergyProperty; // 0x170(0x08)
	struct USolarTables_Reader_ExtraEnergyProperty* ExtraEnergyProperty; // 0x178(0x08)
	struct USolarTables_Reader_ItemWeaponParts* ItemWeaponParts; // 0x180(0x08)
	struct USolarTables_Reader_ItemBehavior* ItemBehavior; // 0x188(0x08)
	struct USolarTables_Reader_JetPackModuleProperty* JetPackModuleProperty; // 0x190(0x08)
	struct USolarTables_Reader_MaterialProperty* MaterialProperty; // 0x198(0x08)
	struct USolarTables_Reader_ShieldProperty* ShieldProperty; // 0x1a0(0x08)
	struct USolarTables_Reader_VehicleSkinProperty* VehicleSkinProperty; // 0x1a8(0x08)
	struct USolarTables_Reader_WeaponSkinProperty* WeaponSkinProperty; // 0x1b0(0x08)
	struct USolarTables_Reader_ItemCustomType* ItemCustomType; // 0x1b8(0x08)
	struct USolarTables_Reader_ItemQuality* ItemQuality; // 0x1c0(0x08)
	struct USolarTables_Reader_ItemSound* ItemSound; // 0x1c8(0x08)
	struct USolarTables_Reader_LobbyAutoDownload* LobbyAutoDownload; // 0x1d0(0x08)
	struct USolarTables_Reader_Localization* Localization; // 0x1d8(0x08)
	struct USolarTables_Reader_LanguageSwitcher* LanguageSwitcher; // 0x1e0(0x08)
	struct USolarTables_Reader_Localization_BattleUI* Localization_BattleUI; // 0x1e8(0x08)
	struct USolarTables_Reader_Localization_EventSystem* Localization_EventSystem; // 0x1f0(0x08)
	struct USolarTables_Reader_Localization_General* Localization_General; // 0x1f8(0x08)
	struct USolarTables_Reader_Localization_Heroes* Localization_Heroes; // 0x200(0x08)
	struct USolarTables_Reader_Localization_Item* Localization_Item; // 0x208(0x08)
	struct USolarTables_Reader_Localization_Tournament* Localization_Tournament; // 0x210(0x08)
	struct USolarTables_Reader_Localization_Uncategorized* Localization_Uncategorized; // 0x218(0x08)
	struct USolarTables_Reader_GameMap* GameMap; // 0x220(0x08)
	struct USolarTables_Reader_MapMarkIcon* MapMarkIcon; // 0x228(0x08)
	struct USolarTables_Reader_MatchRule* MatchRule; // 0x230(0x08)
	struct USolarTables_Reader_RankMatch* RankMatch; // 0x238(0x08)
	struct USolarTables_Reader_NameCardBackground* NameCardBackground; // 0x240(0x08)
	struct USolarTables_Reader_NameCardPose* NameCardPose; // 0x248(0x08)
	struct USolarTables_Reader_ObGift* ObGift; // 0x250(0x08)
	struct USolarTables_Reader_Outcome* Outcome; // 0x258(0x08)
	struct USolarTables_Reader_OutcomeContent* OutcomeContent; // 0x260(0x08)
	struct USolarTables_Reader_PickupPriorityItem* PickupPriorityItem; // 0x268(0x08)
	struct USolarTables_Reader_PickupPriorityWeaponPart* PickupPriorityWeaponPart; // 0x270(0x08)
	struct USolarTables_Reader_QuickChat* QuickChat; // 0x278(0x08)
	struct USolarTables_Reader_QuickVoice* QuickVoice; // 0x280(0x08)
	struct USolarTables_Reader_CharacterVoiceover* CharacterVoiceover; // 0x288(0x08)
	struct USolarTables_Reader_VODownload* VODownload; // 0x290(0x08)
	struct USolarTables_Reader_RankLevel* RankLevel; // 0x298(0x08)
	struct USolarTables_Reader_Rescue* Rescue; // 0x2a0(0x08)
	struct USolarTables_Reader_Skin* Skin; // 0x2a8(0x08)
	struct USolarTables_Reader_Achievement* Achievement; // 0x2b0(0x08)
	struct USolarTables_Reader_TaskSystem* TaskSystem; // 0x2b8(0x08)
	struct USolarTables_Reader_TaskProgress* TaskProgress; // 0x2c0(0x08)
	struct USolarTables_Reader_PlayerOperationListLayout* PlayerOperationListLayout; // 0x2c8(0x08)
	struct USolarTables_Reader_Variables* Variables; // 0x2d0(0x08)
	struct USolarTables_Reader_Vehicle* Vehicle; // 0x2d8(0x08)
	struct USolarTables_Reader_VehicleSkin* VehicleSkin; // 0x2e0(0x08)
	struct USolarTables_Reader_VehicleType* VehicleType; // 0x2e8(0x08)
	struct USolarTables_Reader_VehicleSpawn* VehicleSpawn; // 0x2f0(0x08)
	struct USolarTables_Reader_VehicleSpawnGroup* VehicleSpawnGroup; // 0x2f8(0x08)
	struct USolarTables_Reader_WarmGame* WarmGame; // 0x300(0x08)
	struct USolarTables_Reader_WarmGameMode* WarmGameMode; // 0x308(0x08)
	struct USolarTables_Reader_Weapon* Weapon; // 0x310(0x08)
	struct USolarTables_Reader_WeaponDamage* WeaponDamage; // 0x318(0x08)
	struct USolarTables_Reader_WeaponAmmo* WeaponAmmo; // 0x320(0x08)
	struct USolarTables_Reader_WeaponBattleUpgrade* WeaponBattleUpgrade; // 0x328(0x08)
	struct USolarTables_Reader_WeaponDefault* WeaponDefault; // 0x330(0x08)
	struct USolarTables_Reader_WeaponKillTip* WeaponKillTip; // 0x338(0x08)
	struct USolarTables_Reader_WeaponParts* WeaponParts; // 0x340(0x08)
	struct USolarTables_Reader_WeaponPartsOp* WeaponPartsOp; // 0x348(0x08)
	struct USolarTables_Reader_WeaponQuality* WeaponQuality; // 0x350(0x08)
	struct USolarTables_Reader_SecondMode* SecondMode; // 0x358(0x08)
	struct USolarTables_Reader_WeaponSkin* WeaponSkin; // 0x360(0x08)
	struct USolarTables_Reader_WeaponSound* WeaponSound; // 0x368(0x08)
	struct USolarTables_Reader_WeaponStatu* WeaponStatu; // 0x370(0x08)
};

// Class Solarland.SolarTables_Reader_TaskProgress
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskProgress : USolarTableReaderBase {

	struct FSolarTablesData_TaskProgress TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskProgress.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a730
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskProgress.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99e80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskProgress.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a660
	struct FSolarTablesData_TaskProgress GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskProgress.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99530
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskProgress.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_TaskSystem
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_TaskSystem : USolarTableReaderBase {

	struct FSolarTablesData_TaskSystem TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_TaskSystem.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a910
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e342f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_TaskSystem.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99f60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_TaskSystem.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e338f0
	struct FSolarTablesData_TaskSystem GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e996b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_TaskSystem.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99570
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_TaskSystem.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_UnitCharacter
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_UnitCharacter : USolarTableReaderBase {

	struct FSolarTablesData_UnitCharacter TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_UnitCharacter.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9aa80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a3c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_UnitCharacter.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a040
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99c20
	struct FSolarTablesData_UnitCharacter GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e997a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e995b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_UnitCharacter.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Variables
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Variables : USolarTableReaderBase {

	struct FSolarTablesData_Variables TryGetRowData(struct FString Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Variables.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9ac60
	bool HasRowKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a4c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a120
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Variables.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<struct FString>& OutKeys); // Function Solarland.SolarTables_Reader_Variables.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99ce0
	struct FSolarTablesData_Variables GetRowData(struct FString Key); // Function Solarland.SolarTables_Reader_Variables.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99880
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Variables.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Variables.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Variables.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e995f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Variables.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Vehicle
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Vehicle : USolarTableReaderBase {

	struct FSolarTablesData_Vehicle TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Vehicle.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9aff0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e343f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Vehicle.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a200
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Vehicle.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Vehicle.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e339b0
	struct FSolarTablesData_Vehicle GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Vehicle.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99a20
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Vehicle.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Vehicle.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99630
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Vehicle.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VehicleSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkin : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9b260
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a630
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9a2e0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99dc0
	struct FSolarTablesData_VehicleSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99b30
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e99670
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VehicleSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0be0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5bae0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0630
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e5b250
	struct FSolarTablesData_VehicleSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0290
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0030
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VehicleSpawn
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawn : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawn TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawn.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0e40
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0710
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_VehicleSpawn GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52e40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0070
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawn.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VehicleSpawnGroup
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleSpawnGroup : USolarTableReaderBase {

	struct FSolarTablesData_VehicleSpawnGroup TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0f80
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea07f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_VehicleSpawnGroup GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e52e40
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea00b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleSpawnGroup.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VehicleType
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VehicleType : USolarTableReaderBase {

	struct FSolarTablesData_VehicleType TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VehicleType.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea10c0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e642c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VehicleType.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea08d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VehicleType.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VehicleType.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e63b50
	struct FSolarTablesData_VehicleType GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VehicleType.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0380
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VehicleType.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VehicleType.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea00f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VehicleType.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_VODownload
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_VODownload : USolarTableReaderBase {

	struct FSolarTablesData_VODownload TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_VODownload.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0a90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3be20
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_VODownload.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0550
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_VODownload.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_VODownload.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e771e0
	struct FSolarTablesData_VODownload GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_VODownload.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0170
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_VODownload.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_VODownload.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_VODownload.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e9fff0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_VODownload.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WarmGame
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGame : USolarTableReaderBase {

	struct FSolarTablesData_WarmGame TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGame.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea12b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGame.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea09b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGame.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGame.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a9c0
	struct FSolarTablesData_WarmGame GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGame.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0470
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGame.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGame.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea0130
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGame.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WarmGameMode
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WarmGameMode : USolarTableReaderBase {

	struct FSolarTablesData_WarmGameMode TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WarmGameMode.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea8130
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3c010
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WarmGameMode.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7bc0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e3b730
	struct FSolarTablesData_WarmGameMode GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7770
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7670
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WarmGameMode.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_Weapon
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_Weapon : USolarTableReaderBase {

	struct FSolarTablesData_Weapon TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_Weapon.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea8440
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7f40
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_Weapon.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7ca0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_Weapon.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_Weapon.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7a40
	struct FSolarTablesData_Weapon GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_Weapon.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7860
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_Weapon.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_Weapon.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_Weapon.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea76b0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_Weapon.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponAmmo
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponAmmo : USolarTableReaderBase {

	struct FSolarTablesData_WeaponAmmo TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponAmmo.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea8610
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea8030
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7d80
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7b00
	struct FSolarTablesData_WeaponAmmo GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7950
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea76f0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponAmmo.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponBattleUpgrade
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponBattleUpgrade : USolarTableReaderBase {

	struct FSolarTablesData_WeaponBattleUpgrade TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea8820
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7e60
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_WeaponBattleUpgrade GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43d80
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ea7730
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponBattleUpgrade.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponDamage
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDamage : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDamage TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDamage.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaea90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e346c0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDamage.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae370
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e33bf0
	struct FSolarTablesData_WeaponDamage GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e360
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadd20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDamage.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponDefault
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponDefault : USolarTableReaderBase {

	struct FSolarTablesData_WeaponDefault TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponDefault.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaec90
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b480
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponDefault.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae450
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a960
	struct FSolarTablesData_WeaponDefault GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadee0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadd60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponDefault.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponKillTip
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponKillTip : USolarTableReaderBase {

	struct FSolarTablesData_WeaponKillTip TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponKillTip.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaede0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b1a0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae530
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a720
	struct FSolarTablesData_WeaponKillTip GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadfc0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadda0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponKillTip.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponParts
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponParts : USolarTableReaderBase {

	struct FSolarTablesData_WeaponParts TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponParts.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaef10
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae990
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponParts.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae610
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponParts.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae2b0
	struct FSolarTablesData_WeaponParts GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae0d0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponParts.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadde0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponParts.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponPartsOp
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponPartsOp : USolarTableReaderBase {

	struct FSolarTablesData_WeaponPartsOp TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponPartsOp.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaf0f0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae6f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e7e630
	struct FSolarTablesData_WeaponPartsOp GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eade20
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponPartsOp.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponQuality
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponQuality : USolarTableReaderBase {

	struct FSolarTablesData_WeaponQuality TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponQuality.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaf2d0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b0b0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponQuality.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae7d0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a660
	struct FSolarTablesData_WeaponQuality GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a0c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eade60
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponQuality.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponSkin
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkin : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkin TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkin.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eaf4b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b580
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkin.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae8b0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aa20
	struct FSolarTablesData_WeaponSkin GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eae1c0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eadea0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkin.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponSkinProperty
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSkinProperty : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSkinProperty TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb6070
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2b290
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5830
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e4a9c0
	struct FSolarTablesData_WeaponSkinProperty GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e636a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5220
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSkinProperty.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponSound
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponSound : USolarTableReaderBase {

	struct FSolarTablesData_WeaponSound TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponSound.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb61b0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5ad0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponSound.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5910
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponSound.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb56b0
	struct FSolarTablesData_WeaponSound GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb54b0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponSound.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5260
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponSound.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.SolarTables_Reader_WeaponStatu
// Size: 0x30 (Inherited: 0x30)
struct USolarTables_Reader_WeaponStatu : USolarTableReaderBase {

	struct FSolarTablesData_WeaponStatu TryGetRowData(int32_t Key, bool& HasKey); // Function Solarland.SolarTables_Reader_WeaponStatu.TryGetRowData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb63a0
	bool HasRowKey(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasRowKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e343f0
	bool HasColKey(struct FString Key); // Function Solarland.SolarTables_Reader_WeaponStatu.HasColKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb59f0
	struct FString GetTableName(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetTableName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2aae0
	int32_t GetRowKeys(struct TArray<int32_t>& OutKeys); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowKeys // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e339b0
	struct FSolarTablesData_WeaponStatu GetRowData(int32_t Key); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb55a0
	int32_t GetRowCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetRowCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a090
	int32_t GetDataNum(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetDataNum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e2a030
	struct TArray<struct FString> GetColKeys(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb52a0
	int32_t GetColCount(); // Function Solarland.SolarTables_Reader_WeaponStatu.GetColCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e29e80
};

// Class Solarland.TaskFormula
// Size: 0x230 (Inherited: 0x228)
struct ATaskFormula : AInfo {
	struct USolarTaskComponent* TaskSystem; // 0x228(0x08)

	void SetTaskProgress(int64_t InTaskID, int64_t ProgressValue, bool bOverrideLastMatch); // Function Solarland.TaskFormula.SetTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1eb5f60
	void IncreaseTaskProgress(int64_t InTaskID, int64_t ProgressValue); // Function Solarland.TaskFormula.IncreaseTaskProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1eb5bd0
	int32_t GetTaskConditionValue(int64_t InTaskID, int64_t Index); // Function Solarland.TaskFormula.GetTaskConditionValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1eb5770
};

// Class Solarland.SolarTaskComponent
// Size: 0x1a8 (Inherited: 0xb0)
struct USolarTaskComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate TaskUpdateDelegate; // 0xb8(0x10)
	struct FMulticastInlineDelegate TaskCompoleteDelegate; // 0xc8(0x10)
	struct FMulticastInlineDelegate MarkingTaskChangedDelegate; // 0xd8(0x10)
	struct FMulticastInlineDelegate ClientTaskUpdatedDelegate; // 0xe8(0x10)
	struct FMulticastInlineDelegate ClientBattlePassTimeInfoDelegate; // 0xf8(0x10)
	struct UDataTable* TaskTypeHandleConfig; // 0x108(0x08)
	struct ATaskFormula* TaskFormula; // 0x110(0x08)
	struct ATaskFormula* FormulaInst; // 0x118(0x08)
	struct TArray<int64_t> MarkingTask; // 0x120(0x10)
	struct FBattlePassTimeInfo BattlePassTimeInfo; // 0x130(0x18)
	struct TArray<struct FTaskBriefData> tasks; // 0x148(0x10)
	char pad_158[0x50]; // 0x158(0x50)

	void ServerEnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.ServerEnableMarkTask // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1eb5e90
	void OnRep_Tasks(); // Function Solarland.SolarTaskComponent.OnRep_Tasks // (Final|Native|Public) // @ game+0x1eb5d30
	void OnRep_MarkingTask(); // Function Solarland.SolarTaskComponent.OnRep_MarkingTask // (Final|Native|Public) // @ game+0x1eb5d10
	void OnRep_BattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.OnRep_BattlePassTimeInfo // (Final|Native|Public) // @ game+0x1eb5cf0
	bool IsMaxLevel(); // Function Solarland.SolarTaskComponent.IsMaxLevel // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool IsEnable(); // Function Solarland.SolarTaskComponent.IsEnable // (Final|BlueprintCosmetic|Native|Public) // @ game+0x1eb5c90
	struct FBattlePassTimeInfo GetBattlePassTimeInfo(); // Function Solarland.SolarTaskComponent.GetBattlePassTimeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1eb51f0
	struct TArray<struct FTaskBriefData> GetAllTaskBriefData(); // Function Solarland.SolarTaskComponent.GetAllTaskBriefData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb51c0
	struct TArray<int64_t> GetAllMarkTask(); // Function Solarland.SolarTaskComponent.GetAllMarkTask // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eb5190
	void EnableMarkTask(int64_t InTaskID, bool bMarking); // Function Solarland.SolarTaskComponent.EnableMarkTask // (Final|Native|Public|BlueprintCallable) // @ game+0x1eb50c0
	void ClientNotifyTaskComplete(struct FTaskBriefData InTaskInfo); // Function Solarland.SolarTaskComponent.ClientNotifyTaskComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1eb4d60
};

// Class Solarland.SolarTcpNetworkManager
// Size: 0x4f0 (Inherited: 0x28)
struct USolarTcpNetworkManager : UObject {
	char pad_28[0x21]; // 0x28(0x21)
	bool bIsSsmMatchEnd; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct ASolarTCPSocketClient* SocketClient; // 0x50(0x08)
	struct USCMMatchChannelAction* MatchChannelAction; // 0x58(0x08)
	bool IsSsm; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FString EncryptKeyClientTCPDynamic; // 0x68(0x10)
	bool bEncrypt; // 0x78(0x01)
	bool bCompression; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	struct FDelegate DisconnectedDelegate; // 0x7c(0x10)
	struct FDelegate ConnectedDelegate; // 0x8c(0x10)
	struct FDelegate MessageReceivedDelegate; // 0x9c(0x10)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FSolarPlayerReport MyReport; // 0xb0(0x410)
	char pad_4C0[0x30]; // 0x4c0(0x30)

	void UpdateTeamRank(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.UpdateTeamRank // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void UpdatePlayerData(struct FString PlayerId, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void UpdatePlayerBattleInfo(struct ASolarPlayerState* PS); // Function Solarland.SolarTcpNetworkManager.UpdatePlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool UpdateBotAIData(int32_t AIIndex, struct ASolarPlayerState* PlayerState); // Function Solarland.SolarTcpNetworkManager.UpdateBotAIData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void TryEndBattle(); // Function Solarland.SolarTcpNetworkManager.TryEndBattle // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SyncSsmDataToGameState(); // Function Solarland.SolarTcpNetworkManager.SyncSsmDataToGameState // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SsmDSSendGiftRequest(int32_t GiftID, int32_t Num, struct FString SendPlayerId, struct FString RecivePlayerId, struct ASolarPlayerState* SendPlayer); // Function Solarland.SolarTcpNetworkManager.SsmDSSendGiftRequest // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SsmDSChangeRoleIDRequest(struct FString InPlayerID, int32_t InRoleID); // Function Solarland.SolarTcpNetworkManager.SsmDSChangeRoleIDRequest // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SetKnockoutPoints(struct FString InClanId, int32_t InKnockoutPoints); // Function Solarland.SolarTcpNetworkManager.SetKnockoutPoints // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void RequestOpenMatchChannel(int32_t InMatchType, struct TArray<int32_t>& InPlayerStructure, int32_t InMaxMatchTime); // Function Solarland.SolarTcpNetworkManager.RequestOpenMatchChannel // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void ReportTournamentSpectate(struct TMap<struct FString, struct FString>& TournamentSpectateData); // Function Solarland.SolarTcpNetworkManager.ReportTournamentSpectate // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void ReportPlayerBattleInfo(struct ASolarPlayerState* PS); // Function Solarland.SolarTcpNetworkManager.ReportPlayerBattleInfo // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void RecordLastUsedVehicle(); // Function Solarland.SolarTcpNetworkManager.RecordLastUsedVehicle // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void PlayerRequireToChangeGold(int32_t InChangedGoldType, int32_t InGoldNum, struct FString InPlayerID, struct ASolarPlayerState* InPlayer); // Function Solarland.SolarTcpNetworkManager.PlayerRequireToChangeGold // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void PlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.PlayerCancelJoin // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OpenSupplement(int32_t MaxSecond); // Function Solarland.SolarTcpNetworkManager.OpenSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnStartBattleResponse(); // Function Solarland.SolarTcpNetworkManager.OnStartBattleResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x1ebb0f0
	void OnRecvData(struct TArray<char>& Data); // Function Solarland.SolarTcpNetworkManager.OnRecvData // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool OnReceivedTeamPreJoinRequest(struct TArray<struct FString>& PlayerIds, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.OnReceivedTeamPreJoinRequest // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ebafb0
	void OnReceivedPlayerJoinData(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerJoinData // (Final|Native|Public|BlueprintCallable) // @ game+0x1ebaf10
	void OnReceivedPlayerCancelJoin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnReceivedPlayerCancelJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x1ebae70
	void OnPostLoadMapWithWorld(struct UWorld* World); // Function Solarland.SolarTcpNetworkManager.OnPostLoadMapWithWorld // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnPlayerLogin(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.OnPlayerLogin // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnMessageReceived(int32_t ConnId, struct TArray<char>& Message); // Function Solarland.SolarTcpNetworkManager.OnMessageReceived // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x1ebad90
	void OnDisconnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnDisconnected // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnConnected(int32_t ConnId); // Function Solarland.SolarTcpNetworkManager.OnConnected // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyTournamentSpectateState(bool bIsEnterReplay, struct FString& BattleID); // Function Solarland.SolarTcpNetworkManager.NotifyTournamentSpectateState // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void NotifyRoomDataChanged(bool bEnableInvite); // Function Solarland.SolarTcpNetworkManager.NotifyRoomDataChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyPlayerReward_CustomMode(struct FSCustomMode_PlayerReport& Report); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward_CustomMode // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void NotifyPlayerReward(); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerReward // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyPlayerOffline(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerOffline // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyPlayerEnterBattle(struct ASolarPlayerController* PC); // Function Solarland.SolarTcpNetworkManager.NotifyPlayerEnterBattle // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyOBPlayersChanged(struct TArray<struct FString>& PlayerIds); // Function Solarland.SolarTcpNetworkManager.NotifyOBPlayersChanged // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void NotifyClientBattleStateFish(); // Function Solarland.SolarTcpNetworkManager.NotifyClientBattleStateFish // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void NotifyBattleGroupResultRequest(char TeamID, int32_t Rank); // Function Solarland.SolarTcpNetworkManager.NotifyBattleGroupResultRequest // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool IsEnableAITeamManager(); // Function Solarland.SolarTcpNetworkManager.IsEnableAITeamManager // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool IsAllowReconnectGame(); // Function Solarland.SolarTcpNetworkManager.IsAllowReconnectGame // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void HandlePlayerLogoutInPreparatoryPhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInPreparatoryPhase // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void HandlePlayerLogoutInBattlePhase(struct AController* PC); // Function Solarland.SolarTcpNetworkManager.HandlePlayerLogoutInBattlePhase // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void GetWeaponUpgradeSlotByWeaponID(struct TArray<struct FUpgradeSlotStruct>& outData, struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponUpgradeSlotByWeaponID // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	int32_t GetWeaponSkinIDByWeaponID(struct FString PlayerId, int32_t weaponid); // Function Solarland.SolarTcpNetworkManager.GetWeaponSkinIDByWeaponID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetWarmGameType(); // Function Solarland.SolarTcpNetworkManager.GetWarmGameType // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetTournamentID(); // Function Solarland.SolarTcpNetworkManager.GetTournamentID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void GetStartBattleRequestInfo(struct FStartBattleRequestInfo& OutResult); // Function Solarland.SolarTcpNetworkManager.GetStartBattleRequestInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	struct FSolarGameModeInfo GetSolarGameModeInfo(); // Function Solarland.SolarTcpNetworkManager.GetSolarGameModeInfo // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetRuleID(); // Function Solarland.SolarTcpNetworkManager.GetRuleID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void GetReportWeaponExpIds(struct TArray<int32_t>& OutWeaponExpIds); // Function Solarland.SolarTcpNetworkManager.GetReportWeaponExpIds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1ebac00
	int32_t GetRankMatchID(); // Function Solarland.SolarTcpNetworkManager.GetRankMatchID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<int32_t> GetPlayerUsableTailFlameIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableTailFlameIds // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<int32_t> GetPlayerUsableJetpackIds(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerUsableJetpackIds // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<char> GetPlayerTeamIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerTeamIDs // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<struct FString> GetPlayerRoleAndOpenIDs(); // Function Solarland.SolarTcpNetworkManager.GetPlayerRoleAndOpenIDs // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetPlayerCount // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetPlayerClanID(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.GetPlayerClanID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void GetPlayerBattleRequestInfo(struct FString InSolarPlayerID, struct FPlayerBattleRequestInfo& OutResult); // Function Solarland.SolarTcpNetworkManager.GetPlayerBattleRequestInfo // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	int32_t GetNumMode(); // Function Solarland.SolarTcpNetworkManager.GetNumMode // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<int32_t> GetMLRelatedAIDataMLRatio(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLRatio // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TArray<int32_t> GetMLRelatedAIDataMLFeature(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLFeature // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool GetMLRelatedAIDataMLClosed(); // Function Solarland.SolarTcpNetworkManager.GetMLRelatedAIDataMLClosed // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetMaxPlayerNum(); // Function Solarland.SolarTcpNetworkManager.GetMaxPlayerNum // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetLocalPlayerID(); // Function Solarland.SolarTcpNetworkManager.GetLocalPlayerID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetLocalIPAddress(); // Function Solarland.SolarTcpNetworkManager.GetLocalIPAddress // (Final|Native|Public|BlueprintCallable) // @ game+0x1ebab80
	struct FKnockoutParams GetKnockoutPointParams(); // Function Solarland.SolarTcpNetworkManager.GetKnockoutPointParams // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool GetIsCloseMatch(); // Function Solarland.SolarTcpNetworkManager.GetIsCloseMatch // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool GetHasMonster(); // Function Solarland.SolarTcpNetworkManager.GetHasMonster // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool GetHasMachineLearning(); // Function Solarland.SolarTcpNetworkManager.GetHasMachineLearning // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetGameModeGroupId(); // Function Solarland.SolarTcpNetworkManager.GetGameModeGroupId // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetEntryID(); // Function Solarland.SolarTcpNetworkManager.GetEntryID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	float GetBotShootSimulatorRatio(); // Function Solarland.SolarTcpNetworkManager.GetBotShootSimulatorRatio // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetBattleID(); // Function Solarland.SolarTcpNetworkManager.GetBattleID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct TMap<int32_t, int32_t> GetAILevelConfig(); // Function Solarland.SolarTcpNetworkManager.GetAILevelConfig // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetAIAccompanyTimelineID(); // Function Solarland.SolarTcpNetworkManager.GetAIAccompanyTimelineID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetAboutToEnterPlayerCount(); // Function Solarland.SolarTcpNetworkManager.GetAboutToEnterPlayerCount // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void FakePlayerJoin(struct FString PlayerId, int32_t TeamID); // Function Solarland.SolarTcpNetworkManager.FakePlayerJoin // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void CloseSupplement(); // Function Solarland.SolarTcpNetworkManager.CloseSupplement // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	bool CheckPlayerLeave(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckPlayerLeave // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckJoinToken(struct FString Token, struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckJoinToken // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfPlayerHasJoined(struct FString PlayerId); // Function Solarland.SolarTcpNetworkManager.CheckIfPlayerHasJoined // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void CheckBattleOver(); // Function Solarland.SolarTcpNetworkManager.CheckBattleOver // (Event|Public|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarTeammateHUDWidgetComponent
// Size: 0x6e0 (Inherited: 0x6a0)
struct USolarTeammateHUDWidgetComponent : UWidgetComponent {
	float CheckHUDDistanceToCenter; // 0x698(0x04)
	float HUDTranslucentValue; // 0x69c(0x04)
	float LocationUpdateTolerance; // 0x6a0(0x04)
	float InterpolationTimeRatio; // 0x6a4(0x04)
	float InterpolationEaseInOutExp; // 0x6a8(0x04)
	struct UCurveFloat* DistanceToScaleCurve; // 0x6b0(0x08)
	bool bUseDistanceToCharacterForScale; // 0x6b8(0x01)
	char pad_6BD[0x23]; // 0x6bd(0x23)
};

// Class Solarland.SolarTeamRescueComponent
// Size: 0xf8 (Inherited: 0xb0)
struct USolarTeamRescueComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* OwnerChara; // 0xb8(0x08)
	float MaxRescureDis; // 0xc0(0x04)
	float MaxRescureAngle; // 0xc4(0x04)
	float RescueRecoveryHp; // 0xc8(0x04)
	float TempTime; // 0xcc(0x04)
	float CheckInterval; // 0xd0(0x04)
	float TempReqTime; // 0xd4(0x04)
	float RequestTimeout; // 0xd8(0x04)
	bool bSendRequest; // 0xdc(0x01)
	bool bLastRescueBtnVisibility; // 0xdd(0x01)
	char pad_DE[0x2]; // 0xde(0x02)
	struct ASolarCharacter* ClosestTarget; // 0xe0(0x08)
	struct TArray<struct TWeakObjectPtr<struct ASolarCharacter>> NearByDeathVergeTeamMates; // 0xe8(0x10)

	void TryRescueClosestTeammateLuaCall(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammateLuaCall // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void TryRescueClosestTeammate(); // Function Solarland.SolarTeamRescueComponent.TryRescueClosestTeammate // (Final|Native|Public) // @ game+0x1ebbd50
	void ShowTeamRescueToUI(bool IsShow); // Function Solarland.SolarTeamRescueComponent.ShowTeamRescueToUI // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetRescueBtnVisibility(bool bIsVisible); // Function Solarland.SolarTeamRescueComponent.SetRescueBtnVisibility // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x1ebb8b0
	void ReqStartTeamRescue(struct ASolarCharacter* TargetCharacter); // Function Solarland.SolarTeamRescueComponent.ReqStartTeamRescue // (Final|Native|Public) // @ game+0x1ebb130
	void ReqCancelTeamRescure(); // Function Solarland.SolarTeamRescueComponent.ReqCancelTeamRescure // (Final|Native|Public) // @ game+0x1ebb110
	void OnRescueStateChangeInternal(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChangeInternal // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRescueStateChange(); // Function Solarland.SolarTeamRescueComponent.OnRescueStateChange // (Final|Native|Public) // @ game+0x1ebb0d0
	void DetectRescueTeammate(float DeltaTime); // Function Solarland.SolarTeamRescueComponent.DetectRescueTeammate // (Final|Native|Protected) // @ game+0x1ebaaa0
	bool CanRescue(struct ASolarCharacter* Player, bool bStart); // Function Solarland.SolarTeamRescueComponent.CanRescue // (Final|Native|Public) // @ game+0x1eba9e0
};

// Class Solarland.SolarTestActor
// Size: 0x228 (Inherited: 0x228)
struct ASolarTestActor : AActor {
};

// Class Solarland.SolarTextBlock
// Size: 0x340 (Inherited: 0x160)
struct USolarTextBlock : UTextLayoutWidget {
	bool bEnableLocText; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct FText Text; // 0x168(0x18)
	int32_t LocTextID; // 0x180(0x04)
	enum class ESolarSupportLanguages PreviewLang; // 0x184(0x01)
	bool bUsingAccurateScale; // 0x185(0x01)
	char pad_186[0x2]; // 0x186(0x02)
	struct FVector2D CalcSize; // 0x188(0x08)
	struct FDelegate TextDelegate; // 0x190(0x10)
	struct FSlateColor ColorAndOpacity; // 0x1a0(0x28)
	struct FDelegate ColorAndOpacityDelegate; // 0x1c8(0x10)
	struct FSlateFontInfo Font; // 0x1d8(0x58)
	struct FSlateFontSizeForLang SpecialLangFont; // 0x230(0x18)
	struct FSlateBrush StrikeBrush; // 0x248(0x98)
	struct FVector2D ShadowOffset; // 0x2e0(0x08)
	struct FLinearColor ShadowColorAndOpacity; // 0x2e8(0x10)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x2f8(0x10)
	float MinDesiredWidth; // 0x308(0x04)
	bool bWrapWithInvalidationPanel; // 0x30c(0x01)
	bool bAutoWrapText; // 0x30d(0x01)
	bool bSimpleTextMode; // 0x30e(0x01)
	char pad_30F[0x31]; // 0x30f(0x31)

	void SetWrapTextAt(float InWrapTextAt); // Function Solarland.SolarTextBlock.SetWrapTextAt // (Native|Public|BlueprintCallable) // @ game+0x1257610
	void SetWrappingPolicy(enum class ETextWrappingPolicy InWrappingPolicy); // Function Solarland.SolarTextBlock.SetWrappingPolicy // (Native|Public|BlueprintCallable) // @ game+0x1ebbcd0
	void SetText(struct FText InText); // Function Solarland.SolarTextBlock.SetText // (Native|Public|BlueprintCallable) // @ game+0x1ebbbf0
	void SetStrikeBrush(struct FSlateBrush InStrikeBrush); // Function Solarland.SolarTextBlock.SetStrikeBrush // (Native|Public|BlueprintCallable) // @ game+0x1ebba40
	void SetShadowOffset(struct FVector2D InShadowOffset); // Function Solarland.SolarTextBlock.SetShadowOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1ebb9c0
	void SetShadowColorAndOpacity(struct FLinearColor InShadowColorAndOpacity); // Function Solarland.SolarTextBlock.SetShadowColorAndOpacity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1ebb940
	void SetOpacity(float InOpacity); // Function Solarland.SolarTextBlock.SetOpacity // (Native|Public|BlueprintCallable) // @ game+0x1ebb830
	void SetMinDesiredWidth(float InMinDesiredWidth); // Function Solarland.SolarTextBlock.SetMinDesiredWidth // (Native|Public|BlueprintCallable) // @ game+0x1ebb7b0
	void SetMargin(struct FMargin InMargin); // Function Solarland.SolarTextBlock.SetMargin // (Native|Public|BlueprintCallable) // @ game+0x1ebb720
	void SetLocTextID(int32_t InLocTextID); // Function Solarland.SolarTextBlock.SetLocTextID // (Native|Public|BlueprintCallable) // @ game+0x1ebb690
	void SetLocLangTextData(struct FText InText, bool InEnableLocText, int32_t InLocTextID, enum class ESolarSupportLanguages InPreviewLang, struct FSlateFontSizeForLang InSlateFontSizeForLang); // Function Solarland.SolarTextBlock.SetLocLangTextData // (Native|Public|BlueprintCallable) // @ game+0x1ebb440
	void SetLineHeightPercentage(float InLineHeightPercentage); // Function Solarland.SolarTextBlock.SetLineHeightPercentage // (Native|Public|BlueprintCallable) // @ game+0x1257590
	void SetFont(struct FSlateFontInfo InFontInfo); // Function Solarland.SolarTextBlock.SetFont // (Native|Public|BlueprintCallable) // @ game+0x1ebb330
	void SetColorAndOpacity(struct FSlateColor InColorAndOpacity); // Function Solarland.SolarTextBlock.SetColorAndOpacity // (Native|Public|BlueprintCallable) // @ game+0x1ebb240
	void SetAutoWrapText(bool InAutoTextWrap); // Function Solarland.SolarTextBlock.SetAutoWrapText // (Native|Public|BlueprintCallable) // @ game+0x1ebb1b0
	struct FVector2D GetTextSize(); // Function Solarland.SolarTextBlock.GetTextSize // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ebad50
	struct FText GetText(); // Function Solarland.SolarTextBlock.GetText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ebacb0
	struct UMaterialInstanceDynamic* GetDynamicOutlineMaterial(); // Function Solarland.SolarTextBlock.GetDynamicOutlineMaterial // (Native|Public|BlueprintCallable) // @ game+0x1ebab50
	struct UMaterialInstanceDynamic* GetDynamicFontMaterial(); // Function Solarland.SolarTextBlock.GetDynamicFontMaterial // (Native|Public|BlueprintCallable) // @ game+0x1ebab20
};

// Class Solarland.SolarThrow
// Size: 0x50 (Inherited: 0x28)
struct USolarThrow : UObject {
	bool bLastPress; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float PressTime; // 0x2c(0x04)
	float FirstPressTimeSec; // 0x30(0x04)
	float ContinuePressTimeSec; // 0x34(0x04)
	struct ASolarThrowBullet* ThrowBullet; // 0x38(0x08)
	struct ASolarThrowBullet* LoadedBulletInstance; // 0x40(0x08)
	struct ASolarCharacterBase* CharacterOwner; // 0x48(0x08)

	void SetCharacterOwner(struct ASolarCharacterBase* Owner); // Function Solarland.SolarThrow.SetCharacterOwner // (Final|Native|Public) // @ game+0x1ec1080
	void Reset(); // Function Solarland.SolarThrow.Reset // (Final|Native|Public) // @ game+0x1ec0e10
	bool LoadBullet(struct UMeshComponent* Mesh, struct FName& Socket); // Function Solarland.SolarThrow.LoadBullet // (Final|Native|Public|HasOutParms) // @ game+0x1ec0820
	struct FThrowInputResult InputPress(bool& bPress); // Function Solarland.SolarThrow.InputPress // (Final|Native|Public|HasOutParms) // @ game+0x1ec0590
	bool HasLoadBullet(); // Function Solarland.SolarThrow.HasLoadBullet // (Final|Native|Public|Const) // @ game+0x1ec0470
	void Fire(struct FVector& ThrowVec); // Function Solarland.SolarThrow.Fire // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1ebfea0
};

// Class Solarland.SolarThrowBullet
// Size: 0x268 (Inherited: 0x228)
struct ASolarThrowBullet : AActor {
	float InitSpeed; // 0x228(0x04)
	float PrepareTime; // 0x22c(0x04)
	bool bReleaseFire; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct UParticleSystem* HitEffect; // 0x238(0x08)
	struct TArray<struct UGameplayEffect*> ApplyEffects; // 0x240(0x10)
	struct TWeakObjectPtr<struct USolarThrow> Throwner; // 0x250(0x08)
	struct UBoxComponent* CollisionComp; // 0x258(0x08)
	struct UProjectileMovementComponent* MovementComp; // 0x260(0x08)

	void TryApplyHitEffects(struct FHitResult& HitResult); // Function Solarland.SolarThrowBullet.TryApplyHitEffects // (Native|Public|HasOutParms) // @ game+0x1e13850
	void PlayHitEffect(struct FHitResult& HitResult); // Function Solarland.SolarThrowBullet.PlayHitEffect // (Native|Public|HasOutParms) // @ game+0x1e12f40
	void OnStop(struct FHitResult& HitResult); // Function Solarland.SolarThrowBullet.OnStop // (Native|Public|HasOutParms) // @ game+0x1ec0cb0
	void LaunchWithParams(struct FVector& ThrowVec); // Function Solarland.SolarThrowBullet.LaunchWithParams // (Native|Public|HasOutParms|HasDefaults) // @ game+0x1ec0790
};

// Class Solarland.SolarTimeLineManager
// Size: 0x288 (Inherited: 0x228)
struct ASolarTimeLineManager : AActor {
	char pad_228[0x60]; // 0x228(0x60)

	void NotifyWeatherCHange(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyWeatherCHange // (Final|Native|Private) // @ game+0x1ec0ad0
	void NotifyPoisonShrink(int32_t ID); // Function Solarland.SolarTimeLineManager.NotifyPoisonShrink // (Final|Native|Private) // @ game+0x1ec0a50
	void NotifyBombing(struct TArray<int32_t> IDs); // Function Solarland.SolarTimeLineManager.NotifyBombing // (Final|Native|Private) // @ game+0x1ec0970
	void NotifyAirDrops(int32_t ChestSpawnID); // Function Solarland.SolarTimeLineManager.NotifyAirDrops // (Final|Native|Private) // @ game+0x1ec08f0
	void Exec_NotifyBombing(int32_t ZoneId); // Function Solarland.SolarTimeLineManager.Exec_NotifyBombing // (Exec|Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarTimerManager
// Size: 0x38 (Inherited: 0x28)
struct USolarTimerManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	bool bFullCleanup; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)

	void UnPauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.UnPauseTimerInternal // (Final|Native|Public) // @ game+0x1ec1300
	void TimerCallbackToLuaInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.TimerCallbackToLuaInternal // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FTimerHandle SetTimerForNextTickInternal(struct FString CallbackKey); // Function Solarland.SolarTimerManager.SetTimerForNextTickInternal // (Final|Native|Public) // @ game+0x1ec1120
	void PauseTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.PauseTimerInternal // (Final|Native|Public) // @ game+0x1ec0d90
	void OnLuaContextCleanup(bool InBFullCleanup); // Function Solarland.SolarTimerManager.OnLuaContextCleanup // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool IsValidTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsValidTimerInternal // (Final|Native|Public) // @ game+0x1dd10a0
	bool IsTimerActiveInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.IsTimerActiveInternal // (Final|Native|Public) // @ game+0x1ec0700
	void ClearTimerInternal(struct FTimerHandle Handle); // Function Solarland.SolarTimerManager.ClearTimerInternal // (Final|Native|Public) // @ game+0x1ebfd20
	struct FTimerHandle AddTimerInternal(struct FString CallbackKey, float Rate, bool IsLoop, float InitialStartDelay); // Function Solarland.SolarTimerManager.AddTimerInternal // (Final|Native|Public) // @ game+0x1ebfb30
};

// Class Solarland.SolarTransformerVehicle
// Size: 0x1670 (Inherited: 0x14c0)
struct ASolarTransformerVehicle : ASolarVehiclePawn {
	struct USolarWheeledVehicleMovement* WheeledMovement; // 0x14c0(0x08)
	struct USolarLeggedVehicleMovement* LeggedMovement; // 0x14c8(0x08)
	enum class ETransformerType OriginTransformerType; // 0x14d0(0x01)
	char pad_14D1[0x3]; // 0x14d1(0x03)
	float AdditionalVelocityOnZToLeg; // 0x14d4(0x04)
	float MaxVelocityOnXYToWheel; // 0x14d8(0x04)
	char pad_14DC[0x4]; // 0x14dc(0x04)
	struct FTransformerSetting TransformerSettings[0x2]; // 0x14e0(0x160)
	enum class ETransformerType CurrentTransformerType; // 0x1640(0x01)
	char pad_1641[0x7]; // 0x1641(0x07)
	struct UCapsuleComponent* VehicleCapsule; // 0x1648(0x08)
	bool bReplicatedDrift; // 0x1650(0x01)
	bool bReplicatedRequestJump; // 0x1651(0x01)
	char pad_1652[0x16]; // 0x1652(0x16)
	int32_t LeggedHealthUIID; // 0x1668(0x04)
	char pad_166C[0x4]; // 0x166c(0x04)

	void StatVehicleAutoSteering(bool bInSameDirection); // Function Solarland.SolarTransformerVehicle.StatVehicleAutoSteering // (Net|Native|Event|Protected|NetServer) // @ game+0x1ec11f0
	void SetCurrentWeaponActive(); // Function Solarland.SolarTransformerVehicle.SetCurrentWeaponActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec1100
	void ServerSetIsDrift(bool bInDrift, char InDriveType); // Function Solarland.SolarTransformerVehicle.ServerSetIsDrift // (Net|Native|Event|Protected|NetServer) // @ game+0x1ec0ef0
	void OnTransformingFinished(); // Function Solarland.SolarTransformerVehicle.OnTransformingFinished // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnRep_ReplicatedJumpRequest(); // Function Solarland.SolarTransformerVehicle.OnRep_ReplicatedJumpRequest // (Final|Native|Protected) // @ game+0x1ec0c90
	void OnRep_Drift(); // Function Solarland.SolarTransformerVehicle.OnRep_Drift // (Final|Native|Protected) // @ game+0x1ec0c50
	void OnRep_CurrentTransformerType(); // Function Solarland.SolarTransformerVehicle.OnRep_CurrentTransformerType // (Final|Native|Protected) // @ game+0x1ec0c30
};

// Class Solarland.SolarTransformerVehicleAnim
// Size: 0x420 (Inherited: 0x2f0)
struct USolarTransformerVehicleAnim : USolarVehicleAnimInstance {
	char pad_2F0[0x8]; // 0x2f0(0x08)
	enum class ETransformerType TransformerType; // 0x2f8(0x01)
	char pad_2F9[0x3]; // 0x2f9(0x03)
	float UpdateWeaponRotatorAlpha; // 0x2fc(0x04)
	struct FVector FLWheelBoneScale; // 0x300(0x0c)
	struct FVector FRWheelBoneScale; // 0x30c(0x0c)
	struct FVector BLWheelBoneScale; // 0x318(0x0c)
	struct FVector BRWheelBoneScale; // 0x324(0x0c)
	struct FVector FLWheelBoneLocation; // 0x330(0x0c)
	struct FVector FRWheelBoneLocation; // 0x33c(0x0c)
	struct FVector BLWheelBoneLocation; // 0x348(0x0c)
	struct FVector BRWheelBoneLocation; // 0x354(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x360(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x36c(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x378(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x384(0x0c)
	bool bVehicleJumpReqeust; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float YawDifference; // 0x394(0x04)
	enum class EVehicleRotateAnimationType VehicleRotateType; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	struct FVector RotationBlend; // 0x39c(0x0c)
	struct FVector FLFootIKEffectorLocation; // 0x3a8(0x0c)
	struct FVector FRFootIKEffectorLocation; // 0x3b4(0x0c)
	struct FVector BLFootIKEffectorLocation; // 0x3c0(0x0c)
	struct FVector BRFootIKEffectorLocation; // 0x3cc(0x0c)
	float FLFootIKAlpha; // 0x3d8(0x04)
	float FRFootIKAlpha; // 0x3dc(0x04)
	float BLFootIKAlpha; // 0x3e0(0x04)
	float BRFootIKAlpha; // 0x3e4(0x04)
	struct TArray<float> FootRotatorOffsets; // 0x3e8(0x10)
	float LeftFootLocationX; // 0x3f8(0x04)
	float RightFootLocationX; // 0x3fc(0x04)
	struct FVector BodyRelativeLocation; // 0x400(0x0c)
	struct FRotator BodyRelativeRotator; // 0x40c(0x0c)
	float ProceduralWalkingAlhpa; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
};

// Class Solarland.SolarTreasureBoxSpawner
// Size: 0x420 (Inherited: 0x390)
struct ASolarTreasureBoxSpawner : ASolarItemSpawner {
	int32_t ChestSpawnID; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)
	struct TArray<struct FSpawonTreasureBoxIdAndWeight> SpawnTreasureBox; // 0x398(0x10)
	char pad_3A8[0x10]; // 0x3a8(0x10)
	struct FRandomStream ItemStream; // 0x3b8(0x08)
	char pad_3C0[0x54]; // 0x3c0(0x54)
	struct FSpawnedActorHandle CachedActorHandle; // 0x414(0x04)
	char pad_418[0x8]; // 0x418(0x08)

	int32_t GetTargetTreasureBoxID(); // Function Solarland.SolarTreasureBoxSpawner.GetTargetTreasureBoxID // (Final|Native|Public) // @ game+0x1ec0160
	int32_t GetOutcomeIdTreasureBoxId(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.GetOutcomeIdTreasureBoxId // (Final|Native|Public) // @ game+0x1ec00d0
	struct FSolarItemData CreateItemDataByKey(int32_t ItemID); // Function Solarland.SolarTreasureBoxSpawner.CreateItemDataByKey // (Final|Native|Public) // @ game+0x1ebfda0
};

// Class Solarland.SolarTreatmentComponent
// Size: 0xe0 (Inherited: 0xb0)
struct USolarTreatmentComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnCharacterHealthLow; // 0xb8(0x10)
	int32_t MedicineItemId; // 0xc8(0x04)
	float DefaultTreatmentDuration; // 0xcc(0x04)
	struct ASolarCharacter* OwnerCharacter; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)

	void TryStopTreatment(); // Function Solarland.SolarTreatmentComponent.TryStopTreatment // (Final|Native|Public) // @ game+0x1ec12e0
	void TryStatisticsTreatedTimes(); // Function Solarland.SolarTreatmentComponent.TryStatisticsTreatedTimes // (Final|Native|Public) // @ game+0x1ec12c0
	void TryStartTreatment(); // Function Solarland.SolarTreatmentComponent.TryStartTreatment // (Final|Native|Public) // @ game+0x1ec12a0
	void StopProgress(); // Function Solarland.SolarTreatmentComponent.StopProgress // (Final|Native|Public) // @ game+0x1ec1280
	void StartProgress(); // Function Solarland.SolarTreatmentComponent.StartProgress // (Final|Native|Public) // @ game+0x1ec11d0
	bool IsMedicineEnough(); // Function Solarland.SolarTreatmentComponent.IsMedicineEnough // (Final|Native|Public|Const) // @ game+0x1ec06d0
	bool IsFullHealth(); // Function Solarland.SolarTreatmentComponent.IsFullHealth // (Final|Native|Public|Const) // @ game+0x1ec06a0
	bool IsAbleToContinueTreatment(); // Function Solarland.SolarTreatmentComponent.IsAbleToContinueTreatment // (Final|Native|Public|Const) // @ game+0x1ec0640
	void IncreaseTreatedTimes(); // Function Solarland.SolarTreatmentComponent.IncreaseTreatedTimes // (Final|Native|Public) // @ game+0x1ec04a0
	struct FString GetModuleName_Implementation(); // Function Solarland.SolarTreatmentComponent.GetModuleName_Implementation // (Native|Public|Const) // @ game+0x1e01310
	bool CanStartTreatment(); // Function Solarland.SolarTreatmentComponent.CanStartTreatment // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	bool CanBeTreated(); // Function Solarland.SolarTreatmentComponent.CanBeTreated // (Final|Native|Public|Const) // @ game+0x1ebfcf0
};

// Class Solarland.SolarTreeView
// Size: 0x9a8 (Inherited: 0x9a8)
struct USolarTreeView : UTreeView {
};

// Class Solarland.TutorialGlobalConfig
// Size: 0xd0 (Inherited: 0x30)
struct UTutorialGlobalConfig : UDataAsset {
	bool bSwitch; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TMap<struct FString, enum class ETutorialStage> MapName2TutorialStage; // 0x38(0x50)
	float SubtitleDisappearTime; // 0x88(0x04)
	float AsyncLoadUIDelayTime; // 0x8c(0x04)
	float SameConditionCheckInterval; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
	struct FTutorialLevelConfig TutorialLevelConfig; // 0x98(0x38)

	enum class ETutorialStage GetTutorialStageByLevelName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialStageByLevelName // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec03c0
	struct FString GetTutorialLevelMainMapPath(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapPath // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec0340
	struct FString GetTutorialLevelMainMapName(); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelMainMapName // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec02c0
	struct FTutorialLevelConfigData GetTutorialLevelConfigDataByName(struct FString LevelName); // Function Solarland.TutorialGlobalConfig.GetTutorialLevelConfigDataByName // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec0190
};

// Class Solarland.SolarTutorialManager
// Size: 0x4c8 (Inherited: 0x30)
struct USolarTutorialManager : USolarGameManager {
	char pad_30[0x22]; // 0x30(0x22)
	enum class ETutorialStage CurrentTutorialStage; // 0x52(0x01)
	char pad_53[0x5]; // 0x53(0x05)
	struct FMulticastInlineDelegate OnRegisterEvent; // 0x58(0x10)
	struct FMulticastInlineDelegate OnStepActionBegan; // 0x68(0x10)
	struct FMulticastInlineDelegate OnStepActionEnded; // 0x78(0x10)
	struct FMulticastInlineDelegate OnStepActionReset; // 0x88(0x10)
	struct FMulticastInlineDelegate OnStepActionDisposed; // 0x98(0x10)
	char pad_A8[0x50]; // 0xa8(0x50)
	struct UTutorialGlobalConfig* TutorialGlobalConfig; // 0xf8(0x08)
	struct TMap<int32_t, struct FTutorialTableRow> TutorialTableMapRows; // 0x100(0x50)
	struct TArray<struct FTutorialActionTableRow> ActionTableRows; // 0x150(0x10)
	struct TMap<int32_t, struct FTutorialConditionTableRow> ConditionTableMapRows; // 0x160(0x50)
	struct TMap<int32_t, struct UTutorial*> Tutorials; // 0x1b0(0x50)
	char pad_200[0x164]; // 0x200(0x164)
	char bIsConditionCheckCodeParsed : 1; // 0x364(0x01)
	char pad_364_1 : 7; // 0x364(0x01)
	char pad_365[0x3]; // 0x365(0x03)
	int64_t LastCheckTimestamp; // 0x368(0x08)
	struct FString TutorialDataTablePath; // 0x370(0x10)
	struct FString ActionDataTablePath; // 0x380(0x10)
	struct FString ConditionDataTablePath; // 0x390(0x10)
	struct FString TutorialGlobalConfigPath; // 0x3a0(0x10)
	struct TMap<uint16_t, struct FName> OriginCheckFuncNames; // 0x3b0(0x50)
	struct TMap<uint16_t, struct UFunction*> CheckFuncs; // 0x400(0x50)
	char pad_450[0x10]; // 0x450(0x10)
	struct TMap<struct FString, struct FCacheConditionInfo> CacheRanConditions; // 0x460(0x50)
	char pad_4B0[0x10]; // 0x4b0(0x10)
	struct UTutorialLevelSaveGame* CurrentTutorialLevelSaveGame; // 0x4c0(0x08)

	struct TArray<struct FString> TriggerWidgetClicked(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWidgetClicked // (Final|Native|Private|HasOutParms) // @ game+0x1ec7ac0
	struct TArray<struct FString> TriggerWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerWeaponSlotHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x1ec7990
	struct TArray<struct FString> TriggerUseSpecifiedWeaponAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedWeaponAbility // (Final|Native|Private|HasOutParms) // @ game+0x1ec7860
	struct TArray<struct FString> TriggerUseSpecifiedVehicleWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleWeapon // (Final|Native|Private|HasOutParms) // @ game+0x1ec7730
	struct TArray<struct FString> TriggerUseSpecifiedVehicleAbility(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerUseSpecifiedVehicleAbility // (Final|Native|Private|HasOutParms) // @ game+0x1ec7600
	void TriggerTutorialModuleEvents(enum class ETutorialModule Module); // Function Solarland.SolarTutorialManager.TriggerTutorialModuleEvents // (Final|Native|Public) // @ game+0x1ec7580
	struct TArray<struct FString> TriggerTutorialLevelDone(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerTutorialLevelDone // (Final|Native|Private|HasOutParms) // @ game+0x1ec7450
	void TriggerTutorialEvents(struct TArray<enum class ETutorialTriggerType>& TriggerTypeArrays, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvents // (Final|Native|Public|HasOutParms) // @ game+0x1ec7350
	void TriggerTutorialEventInternal(char TriggerID); // Function Solarland.SolarTutorialManager.TriggerTutorialEventInternal // (Final|Native|Protected) // @ game+0x1ec72d0
	void TriggerTutorialEvent(enum class ETutorialTriggerType TriggerType, bool bPostTrigger); // Function Solarland.SolarTutorialManager.TriggerTutorialEvent // (Final|Native|Public) // @ game+0x1ec7200
	struct TArray<struct FString> TriggerSprintingContinuously(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerSprintingContinuously // (Final|Native|Private|HasOutParms) // @ game+0x1ec70d0
	struct TArray<struct FString> TriggerShieldNotFull(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerShieldNotFull // (Final|Native|Private|HasOutParms) // @ game+0x1ec6fa0
	struct TArray<struct FString> TriggerRunningStep(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerRunningStep // (Final|Native|Private|HasOutParms) // @ game+0x1ec6e70
	struct TArray<struct FString> TriggerPlayerLevelGreaterThan(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerLevelGreaterThan // (Final|Native|Private|HasOutParms) // @ game+0x1ec6d40
	struct TArray<struct FString> TriggerPlayerInTargetStage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerPlayerInTargetStage // (Final|Native|Private|HasOutParms) // @ game+0x1ec6c10
	struct TArray<struct FString> TriggerOpenTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x1ec6ae0
	struct TArray<struct FString> TriggerOpenBigMapUMG(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerOpenBigMapUMG // (Final|Native|Private|HasOutParms) // @ game+0x1ec69b0
	struct TArray<struct FString> TriggerNearAirDropBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerNearAirDropBox // (Final|Native|Private|HasOutParms) // @ game+0x1ec6880
	struct TArray<struct FString> TriggerJumpBegin(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerJumpBegin // (Final|Native|Private|HasOutParms) // @ game+0x1ec6750
	struct TArray<struct FString> TriggerHasTakenDamage(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasTakenDamage // (Final|Native|Private|HasOutParms) // @ game+0x1ec6620
	struct TArray<struct FString> TriggerHasSpecifiedItem(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedItem // (Final|Native|Private|HasOutParms) // @ game+0x1ec64f0
	struct TArray<struct FString> TriggerHasSpecifiedEquipmentByType(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerHasSpecifiedEquipmentByType // (Final|Native|Private|HasOutParms) // @ game+0x1ec63c0
	struct TArray<struct FString> TriggerFeatureUnlock(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerFeatureUnlock // (Final|Native|Private|HasOutParms) // @ game+0x1ec6290
	void TriggerEvent(enum class ETutorialModule Module); // Function Solarland.SolarTutorialManager.TriggerEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec6210
	struct TArray<struct FString> TriggerEquipSpecifiedWeapon(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerEquipSpecifiedWeapon // (Final|Native|Private|HasOutParms) // @ game+0x1ec60e0
	struct TArray<struct FString> TriggerBotAIDying(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerBotAIDying // (Final|Native|Private|HasOutParms) // @ game+0x1ec5fb0
	struct TArray<struct FString> TriggerApproachElectronicTreasureBox(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerApproachElectronicTreasureBox // (Final|Native|Private|HasOutParms) // @ game+0x1ec5e80
	struct TArray<struct FString> TriggerAirDropBoxLanded(struct TArray<struct FString>& Params); // Function Solarland.SolarTutorialManager.TriggerAirDropBoxLanded // (Final|Native|Private|HasOutParms) // @ game+0x1ec5d50
	void TickActivatedTutorials(); // Function Solarland.SolarTutorialManager.TickActivatedTutorials // (Final|Native|Public) // @ game+0x1ec5d30
	void SetWidgetInteractionFlag(struct FString InWidgetName, enum class EWidgetInteractionFlag InWidgetInteractionFlag); // Function Solarland.SolarTutorialManager.SetWidgetInteractionFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void SetTutorialTipsUIInteractionFlag(int32_t TutorialID, bool boolChange); // Function Solarland.SolarTutorialManager.SetTutorialTipsUIInteractionFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void SetSignNameBoolChange(struct FString SignName, bool NboolChangeum); // Function Solarland.SolarTutorialManager.SetSignNameBoolChange // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void SetFlagNameIntCount(struct FString FlagName, int32_t Num); // Function Solarland.SolarTutorialManager.SetFlagNameIntCount // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	void SetAirDropBoxLandedAddOneNum(int32_t Value); // Function Solarland.SolarTutorialManager.SetAirDropBoxLandedAddOneNum // (Final|Native|Public) // @ game+0x1ec5cb0
	void SaveTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.SaveTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec5c90
	void SaveLevelTutorialID(struct FString InLevelName, int32_t InTutorialID); // Function Solarland.SolarTutorialManager.SaveLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec5bb0
	void SaveLevelTutorialHasFinished(struct FString InLevelName, bool InFinished); // Function Solarland.SolarTutorialManager.SaveLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec5ad0
	void SaveLevelPlayerStartTag(struct FString InLevelName, struct FString InPlayerStartTag); // Function Solarland.SolarTutorialManager.SaveLevelPlayerStartTag // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec59e0
	void ReceivePostSetupData(); // Function Solarland.SolarTutorialManager.ReceivePostSetupData // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnSingleTutorialStart(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialStart // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnSingleTutorialFinished(int32_t TutorialID); // Function Solarland.SolarTutorialManager.ReceiveOnSingleTutorialFinished // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnPostLoadMapWithWorld(struct FString LevelName); // Function Solarland.SolarTutorialManager.ReceiveOnPostLoadMapWithWorld // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveOnAllTutorialsFinished(); // Function Solarland.SolarTutorialManager.ReceiveOnAllTutorialsFinished // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveLoadTutorialLevelData(); // Function Solarland.SolarTutorialManager.ReceiveLoadTutorialLevelData // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ReceiveLoadData(); // Function Solarland.SolarTutorialManager.ReceiveLoadData // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void ReceiveClearData(); // Function Solarland.SolarTutorialManager.ReceiveClearData // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	void OnPostLoadMap(struct FString LevelName); // Function Solarland.SolarTutorialManager.OnPostLoadMap // (Final|Native|Private) // @ game+0x1ec5940
	bool IsInTutorialLevel(); // Function Solarland.SolarTutorialManager.IsInTutorialLevel // (Final|Native|Public|Const) // @ game+0x1ec5910
	void InitGuideActorByActionID(struct TArray<int32_t> ActionIDs, struct ATutorialLevelInteractableActor* TutorialGuideActor); // Function Solarland.SolarTutorialManager.InitGuideActorByActionID // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec57f0
	bool HasAnyTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyTutorialPlaying // (Final|Native|Public) // @ game+0x1ec57c0
	bool HasAnyMandatoryTutorialPlaying(); // Function Solarland.SolarTutorialManager.HasAnyMandatoryTutorialPlaying // (Final|Native|Public) // @ game+0x1ec5790
	void GM_OpenUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_OpenUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void GM_CloseUI(int32_t ID); // Function Solarland.SolarTutorialManager.GM_CloseUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	enum class EWidgetInteractionFlag GetWidgetInteractionFlag(struct FString InWidgetName); // Function Solarland.SolarTutorialManager.GetWidgetInteractionFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	bool GetTutorialTipsUIInteractionFlag(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTutorialTipsUIInteractionFlag // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	int32_t GetTutorialSingleRoundTriggerMax(int32_t TutorialID); // Function Solarland.SolarTutorialManager.GetTutorialSingleRoundTriggerMax // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	struct UTutorialLevelSaveGame* GetTutorialLevelSaveGame(); // Function Solarland.SolarTutorialManager.GetTutorialLevelSaveGame // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ec5760
	bool GetSignNameBoolChange(struct FString SignName); // Function Solarland.SolarTutorialManager.GetSignNameBoolChange // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	int32_t GetLevelTutorialID(struct FString InLevelName, int32_t DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialID // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec5670
	bool GetLevelTutorialHasFinished(struct FString InLevelName, bool DefaultValue); // Function Solarland.SolarTutorialManager.GetLevelTutorialHasFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x1ec5580
	int32_t GetFlagNameIntCount(struct FString FlagName); // Function Solarland.SolarTutorialManager.GetFlagNameIntCount // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0xae69f0
	char GetCurrentPlayerLevel(); // Function Solarland.SolarTutorialManager.GetCurrentPlayerLevel // (Event|Protected|BlueprintEvent) // @ game+0xae69f0
	struct FTutorialActionTableRow GetActionDataByID(int32_t ActionDataID); // Function Solarland.SolarTutorialManager.GetActionDataByID // (Final|Native|Public) // @ game+0x1ec54c0
	void EnterTutorialLevel(struct FString LevelName, int32_t Proficiency); // Function Solarland.SolarTutorialManager.EnterTutorialLevel // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckTutorialTipUIOnClick(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckTutorialTipUIOnClick // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	void CheckTutorials(enum class ETutorialModule InTutorialModule, float InCheckInterval, bool bForceCheck); // Function Solarland.SolarTutorialManager.CheckTutorials // (Final|Native|Public) // @ game+0x1ec53b0
	bool CheckIfWidgetReleased(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetReleased // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfWidgetPressed(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPressed // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfWidgetPlayAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetPlayAnimationFinish // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfWidgetClicked(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWidgetClicked // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfWeaponSlotHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfWeaponSlotHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x1ec52d0
	bool CheckIfUIPanelOpened(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfUIPanelOpened // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfTutorialLevelDone(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTutorialLevelDone // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfTakeDamage(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfTakeDamage // (Final|Native|Public|HasOutParms) // @ game+0x1ec51f0
	bool CheckIfSprintingContinuously(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfSprintingContinuously // (Final|Native|Public|HasOutParms) // @ game+0x1ec5110
	bool CheckIfShieldNotFull(); // Function Solarland.SolarTutorialManager.CheckIfShieldNotFull // (Final|Native|Public) // @ game+0x1ec50e0
	bool CheckIfRunningStep(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfRunningStep // (Final|Native|Public|HasOutParms) // @ game+0x1ec5000
	bool CheckIfReloading(); // Function Solarland.SolarTutorialManager.CheckIfReloading // (Final|Native|Public) // @ game+0x1ec4fd0
	bool CheckIfRechargingShield(); // Function Solarland.SolarTutorialManager.CheckIfRechargingShield // (Final|Native|Public) // @ game+0x1ec4fa0
	bool CheckIfPlayerLevel(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerLevel // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfPlayerInTargetScene(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfPlayerInTargetScene // (Final|Native|Public|HasOutParms) // @ game+0x1ec4ec0
	bool CheckIfOpenBigMapUMG(); // Function Solarland.SolarTutorialManager.CheckIfOpenBigMapUMG // (Final|Native|Public) // @ game+0x1ec4e90
	bool CheckIfNearAirDropBox(); // Function Solarland.SolarTutorialManager.CheckIfNearAirDropBox // (Final|Native|Public) // @ game+0x1ec4e60
	bool CheckIfJumpBegin(); // Function Solarland.SolarTutorialManager.CheckIfJumpBegin // (Final|Native|Public) // @ game+0x1ec4e30
	bool CheckIfJetFlyingVertically(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingVertically // (Final|Native|Public) // @ game+0x1ec4e00
	bool CheckIfJetFlyingHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfJetFlyingHorizontally // (Final|Native|Public) // @ game+0x1ec4dd0
	bool CheckIfInWater(); // Function Solarland.SolarTutorialManager.CheckIfInWater // (Final|Native|Public) // @ game+0x1ec4da0
	bool CheckIfInVehicle(); // Function Solarland.SolarTutorialManager.CheckIfInVehicle // (Final|Native|Public) // @ game+0x1ec4d70
	bool CheckIfInAir(); // Function Solarland.SolarTutorialManager.CheckIfInAir // (Final|Native|Public) // @ game+0x1ec4d40
	bool CheckIfHasSpecifiedItem(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedItem // (Final|Native|Public|HasOutParms) // @ game+0x1ec4c60
	bool CheckIfHasSpecifiedEquipmentByType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentByType // (Final|Native|Public|HasOutParms) // @ game+0x1ec4b80
	bool CheckIfHasSpecifiedEquipmentById(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfHasSpecifiedEquipmentById // (Final|Native|Public|HasOutParms) // @ game+0x1ec4aa0
	bool CheckIfHasShield(); // Function Solarland.SolarTutorialManager.CheckIfHasShield // (Final|Native|Public) // @ game+0x1ec4a70
	bool CheckIfHasMatched(); // Function Solarland.SolarTutorialManager.CheckIfHasMatched // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfGrowTaskInLevelReceivedAnimationFinish(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowTaskInLevelReceivedAnimationFinish // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfGrowLevelRewardIsInStatus(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfGrowLevelRewardIsInStatus // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfFeatureUnlock(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureUnlock // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfFeatureOpen(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfFeatureOpen // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfEquipSpecifiedWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfEquipSpecifiedWeapon // (Final|Native|Public|HasOutParms) // @ game+0x1ec4990
	bool CheckIfDying(); // Function Solarland.SolarTutorialManager.CheckIfDying // (Final|Native|Public) // @ game+0x1ec4960
	bool CheckIfDead(); // Function Solarland.SolarTutorialManager.CheckIfDead // (Final|Native|Public) // @ game+0x1ec4930
	bool CheckIfCurrentWeaponAmmoFull(); // Function Solarland.SolarTutorialManager.CheckIfCurrentWeaponAmmoFull // (Final|Native|Public) // @ game+0x1ec4900
	bool CheckIfConsumingMedicine(); // Function Solarland.SolarTutorialManager.CheckIfConsumingMedicine // (Final|Native|Public) // @ game+0x1ec48d0
	bool CheckIfClaimBattlePassLevelReward(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfClaimBattlePassLevelReward // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfCanUseSpecifiedWeaponAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedWeaponAbility // (Final|Native|Public|HasOutParms) // @ game+0x1ec47f0
	bool CheckIfCanUseSpecifiedVehicleWeapon(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleWeapon // (Final|Native|Public|HasOutParms) // @ game+0x1ec4710
	bool CheckIfCanUseSpecifiedVehicleAbility(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfCanUseSpecifiedVehicleAbility // (Final|Native|Public|HasOutParms) // @ game+0x1ec4630
	bool CheckIfCanOpenTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfCanOpenTreasureBox // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfCanJetFlyVertically(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyVertically // (Final|Native|Public) // @ game+0x1ec4600
	bool CheckIfCanJetFlyHorizontally(); // Function Solarland.SolarTutorialManager.CheckIfCanJetFlyHorizontally // (Final|Native|Public) // @ game+0x1ec45d0
	bool CheckIfBoughtBattlePass(); // Function Solarland.SolarTutorialManager.CheckIfBoughtBattlePass // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfBotAIDying(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBotAIDying // (Final|Native|Public|HasOutParms) // @ game+0x1ec44f0
	bool CheckIfBattlePassLevelGreaterThan(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfBattlePassLevelGreaterThan // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfApproachElectronicTreasureBox(); // Function Solarland.SolarTutorialManager.CheckIfApproachElectronicTreasureBox // (Final|Native|Public) // @ game+0x1ec44c0
	bool CheckIfAlreadyTriggeredMaxCount(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckIfAlreadyTriggeredMaxCount // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
	bool CheckIfAirDropBoxLanded(); // Function Solarland.SolarTutorialManager.CheckIfAirDropBoxLanded // (Final|Native|Public) // @ game+0x1ec4490
	bool CheckConsumeItemButtonType(struct TArray<struct FString>& InParams); // Function Solarland.SolarTutorialManager.CheckConsumeItemButtonType // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarUAV
// Size: 0x418 (Inherited: 0x398)
struct ASolarUAV : ASummonItemBase {
	bool bShowDebug; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float DebugLineThickness; // 0x39c(0x04)
	struct USkeletalMeshComponent* Mesh; // 0x3a0(0x08)
	struct USpringArmComponent* SpringArm; // 0x3a8(0x08)
	struct FName AttachCharacterSocketName; // 0x3b0(0x08)
	struct UAnimationAsset* AppearAnim; // 0x3b8(0x08)
	float AppearAnimLength; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct UAnimationAsset* DisappearAnim; // 0x3c8(0x08)
	float DisppearAnimLength; // 0x3d0(0x04)
	char pad_3D4[0xc]; // 0x3d4(0x0c)
	bool bProbeCollisionConfig; // 0x3e0(0x01)
	char pad_3E1[0x3]; // 0x3e1(0x03)
	float ProbeCollisionInterval; // 0x3e4(0x04)
	float ProbeCollisionRadius; // 0x3e8(0x04)
	float AvoidCollisionMaxHeight; // 0x3ec(0x04)
	float AvoidCollisionOverTime; // 0x3f0(0x04)
	float AvoidCollisionCDTime; // 0x3f4(0x04)
	char pad_3F8[0x20]; // 0x3f8(0x20)

	void UAVDestroy(); // Function Solarland.SolarUAV.UAVDestroy // (Native|Public|BlueprintCallable) // @ game+0x1258630
	void OnCharacterInVehicleTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAV.OnCharacterInVehicleTag // (Final|Native|Protected) // @ game+0x1ecaab0
	void Disappear(); // Function Solarland.SolarUAV.Disappear // (Native|Public|BlueprintCallable) // @ game+0x1257d10
};

// Class Solarland.SolarUAVRescue
// Size: 0x800 (Inherited: 0x418)
struct ASolarUAVRescue : ASolarUAV {
	char pad_418[0x1]; // 0x418(0x01)
	enum class EUAVRescueState NewState; // 0x419(0x01)
	char pad_41A[0x6]; // 0x41a(0x06)
	struct UAnimationAsset* SuspendAnim_Active_NotWork; // 0x420(0x08)
	struct UAnimationAsset* SuspendAnim_Active_Work; // 0x428(0x08)
	struct UAnimationAsset* SuspendAnim_Deactive; // 0x430(0x08)
	struct UAnimationAsset* ActiveAnim; // 0x438(0x08)
	struct UAnimationAsset* DeactiveAnim; // 0x440(0x08)
	struct UAnimationAsset* BeginWorkAnim; // 0x448(0x08)
	struct UAnimationAsset* EndWorkAnim; // 0x450(0x08)
	struct UAnimationAsset* ExplodeAnim; // 0x458(0x08)
	struct UParticleSystem* ActiveEffect; // 0x460(0x08)
	struct UParticleSystem* ActiveLoopEffect; // 0x468(0x08)
	struct UParticleSystem* ChaActiveEffect; // 0x470(0x08)
	struct UParticleSystem* ExplodeEffect; // 0x478(0x08)
	struct UParticleSystem* DeathVergeEffect; // 0x480(0x08)
	struct FName ChaActiveEffectSocket; // 0x488(0x08)
	struct UCurveFloat* AppearCurve; // 0x490(0x08)
	struct UMaterialInstance* Material_Appearing; // 0x498(0x08)
	struct UMaterialInstance* Material_EndAppear; // 0x4a0(0x08)
	struct FString BeginSound; // 0x4a8(0x10)
	struct FString EndSound; // 0x4b8(0x10)
	struct FString ActiveChaSound; // 0x4c8(0x10)
	struct FString ActiveAnimSound; // 0x4d8(0x10)
	struct FString BeginActiveLoopSound; // 0x4e8(0x10)
	struct FString EndActiveLoopSound; // 0x4f8(0x10)
	struct FString DeactiveAnimSound; // 0x508(0x10)
	struct FString ExplodeSound; // 0x518(0x10)
	struct FString BeginDeathVergeLoopSound; // 0x528(0x10)
	struct FString EndDeathVergeLoopSound; // 0x538(0x10)
	float ActorWorldLocZOffset; // 0x548(0x04)
	float MeshRelativeLocXOffset; // 0x54c(0x04)
	float MeshRelativeLocYOffset; // 0x550(0x04)
	float ChaSpeedThreshold; // 0x554(0x04)
	float MeshMoveSpeed; // 0x558(0x04)
	float MeshRotateSpeed; // 0x55c(0x04)
	float MeshYawOffset; // 0x560(0x04)
	bool bLookAtCamera; // 0x564(0x01)
	char pad_565[0x3]; // 0x565(0x03)
	float CameraLagSpeed_Fast; // 0x568(0x04)
	float CameraRotationLagSpeed_Fast; // 0x56c(0x04)
	bool bDealCharacterMoveJitter; // 0x570(0x01)
	char pad_571[0x3]; // 0x571(0x03)
	float ChaMoveJitterCheckInterval; // 0x574(0x04)
	float ChaMoveJitterHorSpeedDiffRange; // 0x578(0x04)
	float ChaMoveJitterCountThreshold; // 0x57c(0x04)
	float CameraLagSpeedChangeDelta; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct UCurveFloat* ActivatingScaleCurve; // 0x588(0x08)
	struct UCurveFloat* DeactivatingScaleCurve; // 0x590(0x08)
	float ActiveDuration; // 0x598(0x04)
	float ActiveEffectLength; // 0x59c(0x04)
	float DeathVergeHealthThreshold; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	struct FSoftObjectPath UAVIcon; // 0x5a8(0x18)
	char pad_5C0[0x10]; // 0x5c0(0x10)
	struct UParticleSystemComponent* DeathVergeEffectHandle; // 0x5d0(0x08)
	struct UParticleSystemComponent* ActiveLoopEffectHandle; // 0x5d8(0x08)
	bool bFollowCharacter; // 0x5e0(0x01)
	char pad_5E1[0x2]; // 0x5e1(0x02)
	bool bAppearEnd; // 0x5e3(0x01)
	char pad_5E4[0x24]; // 0x5e4(0x24)
	bool bActive; // 0x608(0x01)
	bool bPermanent; // 0x609(0x01)
	bool bExplodeEffect; // 0x60a(0x01)
	char pad_60B[0x45]; // 0x60b(0x45)
	float HealTickInterval; // 0x650(0x04)
	float HealHealthAmount; // 0x654(0x04)
	float HealShieldAmount; // 0x658(0x04)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct UParticleSystem* HealLineEffect; // 0x660(0x08)
	struct FName HealMeshSocket; // 0x668(0x08)
	struct FString BeginHealSound; // 0x670(0x10)
	struct FString BeginHealLoopSound; // 0x680(0x10)
	struct FString EndHealSound; // 0x690(0x10)
	struct FString EndHealLoopSound; // 0x6a0(0x10)
	struct FString BeginHealHPLoopSound; // 0x6b0(0x10)
	struct FString EndHealHPLoopSound; // 0x6c0(0x10)
	struct FString BeginHealShieldLoopSound; // 0x6d0(0x10)
	struct FString EndHealShieldLoopSound; // 0x6e0(0x10)
	struct UParticleSystemComponent* HealLineEffectHandle; // 0x6f0(0x08)
	char pad_6F8[0x8]; // 0x6f8(0x08)
	struct UParticleSystem* RescueEffect; // 0x700(0x08)
	struct UParticleSystem* RescueEffect_Enermy; // 0x708(0x08)
	struct FTransform RescueEffectTransform; // 0x710(0x30)
	struct FName RescueMeshSocket; // 0x740(0x08)
	float RescueTime; // 0x748(0x04)
	bool bCheckRescueBlock; // 0x74c(0x01)
	char pad_74D[0x3]; // 0x74d(0x03)
	float CheckRescueBlockInteval; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
	struct FString BeginRescueLoopSound; // 0x758(0x10)
	struct FString EndRescueLoopSound; // 0x768(0x10)
	struct FString CompleteRescueSound; // 0x778(0x10)
	struct UParticleSystemComponent* RescueEffectHandle; // 0x788(0x08)
	char pad_790[0x10]; // 0x790(0x10)
	bool bNavigateToOwner; // 0x7a0(0x01)
	char pad_7A1[0x3]; // 0x7a1(0x03)
	float RecordInterval; // 0x7a4(0x04)
	float NavigateInterval; // 0x7a8(0x04)
	float BeginNavigateDistance; // 0x7ac(0x04)
	float EndNavigateDistance; // 0x7b0(0x04)
	char pad_7B4[0x2c]; // 0x7b4(0x2c)
	struct UGameplayEffect* UAVHealBuffGameplayEffect; // 0x7e0(0x08)
	struct UGameplayEffect* UAVRescueGameplayEffect; // 0x7e8(0x08)
	char pad_7F0[0x10]; // 0x7f0(0x10)

	void TickRescue(float DeltaTime); // Function Solarland.SolarUAVRescue.TickRescue // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ecb8b0
	void TickNavigate(float DeltaTime); // Function Solarland.SolarUAVRescue.TickNavigate // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ecb830
	void TickHeal(float DeltaTime); // Function Solarland.SolarUAVRescue.TickHeal // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ecb7b0
	void ServerSetRescueBlocked(bool bBlocked); // Function Solarland.SolarUAVRescue.ServerSetRescueBlocked // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1ecb240
	void OnRescueComplete(); // Function Solarland.SolarUAVRescue.OnRescueComplete // (Final|Native|Private) // @ game+0x1ecad50
	void OnRep_NewState(); // Function Solarland.SolarUAVRescue.OnRep_NewState // (Final|Native|Protected) // @ game+0x1ecad30
	void OnRep_Active(); // Function Solarland.SolarUAVRescue.OnRep_Active // (Final|Native|Private) // @ game+0x1ecad10
	void OnCheckUAVInvisible(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCheckUAVInvisible // (Final|Native|Private) // @ game+0x1ecac30
	void OnCharacterEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Solarland.SolarUAVRescue.OnCharacterEndPlay // (Final|Native|Protected) // @ game+0x1ecab70
	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x1eca9f0
	void OnCharacterDeathStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVRescue.OnCharacterDeathStatusTag // (Final|Native|Private) // @ game+0x1eca930
	float GetRescueTime(); // Function Solarland.SolarUAVRescue.GetRescueTime // (Final|Native|Public|Const) // @ game+0x1eca2c0
};

// Class Solarland.SolarUAVShield
// Size: 0x470 (Inherited: 0x418)
struct ASolarUAVShield : ASolarUAV {
	struct ASolarEnergyShield* EnergyShieldClass; // 0x418(0x08)
	struct FTransform EnergyShieldSpawnTransform; // 0x420(0x30)
	struct FString StartSound; // 0x450(0x10)
	char pad_460[0x8]; // 0x460(0x08)
	struct ASolarEnergyShield* EnergyShield; // 0x468(0x08)

	void OnCharacterDeathVergeStatusTag(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarUAVShield.OnCharacterDeathVergeStatusTag // (Final|Native|Private) // @ game+0x1ecaab0
};

// Class Solarland.SolarUDPManager
// Size: 0x50 (Inherited: 0x28)
struct USolarUDPManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	int32_t SendBufferSize; // 0x30(0x04)
	int32_t ReceiveBufferSize; // 0x34(0x04)
	char pad_38[0x18]; // 0x38(0x18)

	void OnMessageReceived(struct TArray<char>& Data); // Function Solarland.SolarUDPManager.OnMessageReceived // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0xae69f0
};

// Class Solarland.SolarUIRoot
// Size: 0x340 (Inherited: 0x340)
struct USolarUIRoot : USolarUserWidget {
};

// Class Solarland.SolarUnArmWeapon
// Size: 0x3c8 (Inherited: 0x228)
struct ASolarUnArmWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	float Angle; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> HitDetectableTypes; // 0x238(0x10)
	float Interval; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct UUserWidget* Crosshair; // 0x250(0x08)
	struct FSoftObjectPath FireIconPath; // 0x258(0x18)
	struct TArray<struct ASolarAbilityEffectAccessory*> AbilityEffectAccessoryClass; // 0x270(0x10)
	struct FSlateBrush FireBtnBrush; // 0x280(0x98)
	struct USolarAbilitySystemComponent* AbilitySystemComponent; // 0x318(0x08)
	char pad_320[0x8]; // 0x320(0x08)
	struct ASolarCharacterBase* AttackTargetCharacter; // 0x328(0x08)
	char pad_330[0x50]; // 0x330(0x50)
	struct ASolarAbility* MeleeAbilityClass; // 0x380(0x08)
	struct TArray<struct USolarGameplayAbility*> MeleeAbilities; // 0x388(0x10)
	struct TArray<struct FGameplayAbilitySpecHandle> AbilitySpecHandles; // 0x398(0x10)
	char pad_3A8[0x20]; // 0x3a8(0x20)

	void TryDealMeleeDamage(struct FVector& Location, float DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.TryDealMeleeDamage // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1ecb930
	void ServerDealMeleeDamage(struct ASolarCharacterBase* Target, struct FVector ClientHitLoc, bool bHeavyPunch); // Function Solarland.SolarUnArmWeapon.ServerDealMeleeDamage // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x1ecb0e0
	bool HitAnyCharacters(struct ASolarCharacterBase*& HitTarget, struct FVector& Location, float& DetectSphereRadius); // Function Solarland.SolarUnArmWeapon.HitAnyCharacters // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1eca4d0
	struct FSlateBrush GetFireButtonBrush(); // Function Solarland.SolarUnArmWeapon.GetFireButtonBrush // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eca130
	struct ASolarCharacterBase* GetAttackTargetCharacter(); // Function Solarland.SolarUnArmWeapon.GetAttackTargetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1eca110
};

// Class Solarland.SolarUserWidgetSettings
// Size: 0x110 (Inherited: 0x38)
struct USolarUserWidgetSettings : UDeveloperSettings {
	struct FSoftObjectPath SolarImage_Mat_Normal_91; // 0x38(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_91; // 0x50(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_91; // 0x68(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_181; // 0x80(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_181; // 0x98(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_181; // 0xb0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Normal_361; // 0xc8(0x18)
	struct FSoftObjectPath SolarImage_Mat_Mirror_361; // 0xe0(0x18)
	struct FSoftObjectPath SolarImage_Mat_Quarter_361; // 0xf8(0x18)
};

// Class Solarland.SolarAyncTask
// Size: 0x38 (Inherited: 0x28)
struct USolarAyncTask : UObject {
	struct FMulticastInlineDelegate OnAsyncTask; // 0x28(0x10)
};

// Class Solarland.SolarHelper
// Size: 0x28 (Inherited: 0x28)
struct USolarHelper : UObject {

	void OnAsyncTask__DelegateSignature(); // DelegateFunction Solarland.SolarHelper.OnAsyncTask__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	struct FString GetUE4LogFilePath(); // Function Solarland.SolarHelper.GetUE4LogFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x97ca40
	struct FString GetSavedPath(); // Function Solarland.SolarHelper.GetSavedPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x90c7c0
	struct FString GetProjectPath(); // Function Solarland.SolarHelper.GetProjectPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x97c9c0
	struct FString GetGamePersistentDownloadDir(); // Function Solarland.SolarHelper.GetGamePersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x97bac0
	struct FString GetFileText(struct FString Path); // Function Solarland.SolarHelper.GetFileText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecfdb0
	struct TArray<char> GetFileBinary(struct FString Path); // Function Solarland.SolarHelper.GetFileBinary // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecfcd0
	bool CleanAllCacheData(); // Function Solarland.SolarHelper.CleanAllCacheData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecf4c0
};

// Class Solarland.SolarUtils
// Size: 0x28 (Inherited: 0x28)
struct USolarUtils : UObject {

	struct UTextureRenderTarget2D* WidgetToTexture(struct UUserWidget* Widget, struct FVector2D& DrawSize); // Function Solarland.SolarUtils.WidgetToTexture // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ed1f20
	struct FVector2D TransformScreenPositionToLocal(struct UObject* WorldContextObject, struct FVector2D& InScreenPositon, struct FVector2D AnchorsVector); // Function Solarland.SolarUtils.TransformScreenPositionToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1ed1e10
	bool NeedOptimizeShow(struct UObject* WorldContext, struct FVector Location, float Radius, float BackThreshold); // Function Solarland.SolarUtils.NeedOptimizeShow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x1ed0760
	struct FString GetAndroidSavedPngPath(); // Function Solarland.SolarUtils.GetAndroidSavedPngPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecfbc0
	bool ExportRenderTarget2DAsPNG(struct UTextureRenderTarget2D* TexRT, struct FString TotalFileName); // Function Solarland.SolarUtils.ExportRenderTarget2DAsPNG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecfa70
	void ExportImageToSystemAlbum(struct FString InFilePath); // Function Solarland.SolarUtils.ExportImageToSystemAlbum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ce6730
};

// Class Solarland.SolarUWSettlementBase
// Size: 0x350 (Inherited: 0x340)
struct USolarUWSettlementBase : USolarUserWidget {
	int32_t MvpCharacterID; // 0x340(0x04)
	int32_t MvpSkinID; // 0x344(0x04)
	struct TWeakObjectPtr<struct USettlementStageManager> SettlementStageManager; // 0x348(0x08)

	void SetStageManager(struct USettlementStageManager* InStageManager); // Function Solarland.SolarUWSettlementBase.SetStageManager // (Final|Native|Public) // @ game+0x1ed1bd0
	void PlayMvpCharacterVoice(); // Function Solarland.SolarUWSettlementBase.PlayMvpCharacterVoice // (Final|Native|Public) // @ game+0x1ed0f20
};

// Class Solarland.SolarVaultSystemSettings
// Size: 0x228 (Inherited: 0x38)
struct USolarVaultSystemSettings : UDeveloperSettings {
	float MaxFacingAngle2D; // 0x38(0x04)
	float MinFallingVeloZ; // 0x3c(0x04)
	float MaxFallingVeloZ; // 0x40(0x04)
	float VaultFallingVeloAngleTolerance; // 0x44(0x04)
	bool bEnableAutoVaultWhileFalling; // 0x48(0x01)
	bool bPreventAutoVaultToFalling; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	float AutoMaxFacingAngle2D; // 0x4c(0x04)
	float AutoVaultDistThreshold; // 0x50(0x04)
	float JoystickForwardRange; // 0x54(0x04)
	float JoystickBackwardRange; // 0x58(0x04)
	bool bEnableWallRun; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	float MinWallRunTriggerHeight; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TArray<float> WallRunStepHeights; // 0x68(0x10)
	float WallRunDistThreshold; // 0x78(0x04)
	float WallRunFallingVeloAngleTolerance; // 0x7c(0x04)
	bool bEnableAutoWallRun; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	float AutoWallRunDistThreshold; // 0x84(0x04)
	struct TMap<enum class EObstacleDetectorType, struct FDetectorShapeParams> DetectorShapeParams; // 0x88(0x50)
	float PlatformNorAngleTolerance; // 0xd8(0x04)
	float VaultWallNorAngleTolerance; // 0xdc(0x04)
	float MinPlatformWidth; // 0xe0(0x04)
	float EdgeOffset; // 0xe4(0x04)
	float TraceTolerance; // 0xe8(0x04)
	float MaxIllegalCornerHeight; // 0xec(0x04)
	float MaxIllegalCornerWidth; // 0xf0(0x04)
	float CancelDistFromWall; // 0xf4(0x04)
	float CapsuleHalfHeightScaler; // 0xf8(0x04)
	float WallRunWallNorAngleTolerance; // 0xfc(0x04)
	float VeloThreshold; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct TMap<enum class EVaultType, struct FVector> WarpTargetOffsets; // 0x108(0x50)
	char pad_158[0x50]; // 0x158(0x50)
	struct FName LandWarpTargetName; // 0x1a8(0x08)
	struct FName HandWarpTargetName; // 0x1b0(0x08)
	struct FName FootWarpTargetName; // 0x1b8(0x08)
	float ServerDistThreshold; // 0x1c0(0x04)
	float TargetSelectRange; // 0x1c4(0x04)
	float TargetSelectAngle; // 0x1c8(0x04)
	float ChaseLowerLimit; // 0x1cc(0x04)
	float DistanceWeight; // 0x1d0(0x04)
	float AngleWeight; // 0x1d4(0x04)
	struct FName EnemyWarpTargetName; // 0x1d8(0x08)
	struct TSoftClassPtr<UObject> TrackWidgetClass; // 0x1e0(0x28)
	char pad_208[0x20]; // 0x208(0x20)

	struct USolarVaultSystemSettings* Get(); // Function Solarland.SolarVaultSystemSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1ecfb50
};

// Class Solarland.SolarVehicleAbilitySystemComponent
// Size: 0x1310 (Inherited: 0x12f8)
struct USolarVehicleAbilitySystemComponent : UAbilitySystemComponent {
	char pad_12F8[0x18]; // 0x12f8(0x18)
};

// Class Solarland.WheeledVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleAnim : UInterface {
};

// Class Solarland.LeggedVehicleAnim
// Size: 0x28 (Inherited: 0x28)
struct ULeggedVehicleAnim : UInterface {
};

// Class Solarland.SolarVehicleAttributeSet
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData CurrentVehicleHealth; // 0x30(0x10)
	struct FGameplayAttributeData MaxVehicleHealth; // 0x40(0x10)
	struct FGameplayAttributeData MaxBrokenHealth; // 0x50(0x10)
	struct FGameplayAttributeData StealthMaterialPercent; // 0x60(0x10)
	struct FGameplayAttributeData SpeedMultiplier; // 0x70(0x10)
	struct FGameplayAttributeData CurrentVehicleWholeShield; // 0x80(0x10)
	struct FGameplayAttributeData MaxVehicleWholeShield; // 0x90(0x10)

	void OnRep_StealthMaterialPercent(struct FGameplayAttributeData& OldStealthMaterialPercent); // Function Solarland.SolarVehicleAttributeSet.OnRep_StealthMaterialPercent // (Native|Protected|HasOutParms) // @ game+0x1c5b280
	void OnRep_SpeedMultiplier(struct FGameplayAttributeData& OldSpeedMultiplier); // Function Solarland.SolarVehicleAttributeSet.OnRep_SpeedMultiplier // (Native|Protected|HasOutParms) // @ game+0x1c5af50
	void OnRep_MaxVehicleWholeShield(struct FGameplayAttributeData& OldMaxVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x1c60450
	void OnRep_MaxVehicleHealth(struct FGameplayAttributeData& OldMaxVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x1c3c9c0
	void OnRep_MaxBrokenHealth(struct FGameplayAttributeData& OldMaxBrokenHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_MaxBrokenHealth // (Native|Protected|HasOutParms) // @ game+0x1c5b480
	void OnRep_CurrentVehicleWholeShield(struct FGameplayAttributeData& OldVehicleWholeShield); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleWholeShield // (Native|Protected|HasOutParms) // @ game+0x1c5b3d0
	void OnRep_CurrentVehicleHealth(struct FGameplayAttributeData& OldVehicleHealth); // Function Solarland.SolarVehicleAttributeSet.OnRep_CurrentVehicleHealth // (Native|Protected|HasOutParms) // @ game+0x1c3ca70
};

// Class Solarland.SolarVehicleCameraComponent
// Size: 0xa40 (Inherited: 0x9c0)
struct USolarVehicleCameraComponent : USolarCameraComponent {
	char pad_9C0[0x38]; // 0x9c0(0x38)
	struct ASolarVehiclePawn* Vehicle; // 0x9f8(0x08)
	char pad_A00[0x40]; // 0xa00(0x40)
};

// Class Solarland.SolarVehicleGameplayAbility
// Size: 0x4d8 (Inherited: 0x400)
struct USolarVehicleGameplayAbility : UGameplayAbility {
	bool bCancelAfterVacateSeat; // 0x400(0x01)
	bool bCancelManually; // 0x401(0x01)
	char AbilityIndex; // 0x402(0x01)
	char pad_403[0x5]; // 0x403(0x05)
	struct FGameplayTagContainer GameplayCueTags; // 0x408(0x20)
	struct FString AbilityActivateVirationHeString; // 0x428(0x10)
	struct FString AbilityEndVirationHeString; // 0x438(0x10)
	bool bCheckInstigatorBeforeActivation; // 0x448(0x01)
	bool bActivateAbilityOnGranted; // 0x449(0x01)
	char pad_44A[0x2]; // 0x44a(0x02)
	float DurationTime; // 0x44c(0x04)
	struct UGameplayEffect* ActivateEffect; // 0x450(0x08)
	struct TSoftObjectPtr<UTexture2D> AbilityIcon; // 0x458(0x28)
	struct TSoftObjectPtr<UTexture2D> ActivatedAbilityIcon; // 0x480(0x28)
	int32_t AbilityDescription; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct FString AbilityTextType; // 0x4b0(0x10)
	float DamageToVehicle; // 0x4c0(0x04)
	float DamageToCharacter; // 0x4c4(0x04)
	char pad_4C8[0x10]; // 0x4c8(0x10)
};

// Class Solarland.SolarVehicleGA_EMP
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_EMP : USolarVehicleGameplayAbility {
	struct ASolarSkill_EMP* EMPActorClass; // 0x4d8(0x08)
	struct UGameplayEffect* ApplyToTargetGameplayEffectClass; // 0x4e0(0x08)
	int32_t EMPLevel; // 0x4e8(0x04)
	char pad_4EC[0x4]; // 0x4ec(0x04)
};

// Class Solarland.SolarVehicleGA_EquipWeapon
// Size: 0x528 (Inherited: 0x4d8)
struct USolarVehicleGA_EquipWeapon : USolarVehicleGameplayAbility {
	struct FVector AdditionalTargetOffset; // 0x4d8(0x0c)
	float BlendTime; // 0x4e4(0x04)
	float EquipDelayTimer; // 0x4e8(0x04)
	float MaxDegreeBetweenMeshUpAndGloblaUp; // 0x4ec(0x04)
	struct TArray<struct FVehicleEquipWeaponOverlapBox> EquipWeaponOverlapBoxes; // 0x4f0(0x10)
	struct TArray<struct FVehicleEquipWeaponOverlapCapsule> EquipWeaponOverlapCapsules; // 0x500(0x10)
	int32_t FailToEquipWeaponNotice; // 0x510(0x04)
	bool bSendMeshRelativeTransform; // 0x514(0x01)
	char pad_515[0x13]; // 0x515(0x13)
};

// Class Solarland.SolarVehicleGA_HoverFly
// Size: 0x500 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverFly : USolarVehicleGameplayAbility {
	float MaxFlyHeight; // 0x4d8(0x04)
	float MaxHeightTimer; // 0x4dc(0x04)
	struct FName AddedForceBoneName; // 0x4e0(0x08)
	enum class EInputButton SkillButton; // 0x4e8(0x01)
	char pad_4E9[0x3]; // 0x4e9(0x03)
	float MinimumTime; // 0x4ec(0x04)
	float MaximumTime; // 0x4f0(0x04)
	char pad_4F4[0x4]; // 0x4f4(0x04)
	struct USolarVehicleAT_HoverFly* HoverFlyTask; // 0x4f8(0x08)
};

// Class Solarland.SolarVehicleAT_HoverFly
// Size: 0xa8 (Inherited: 0x80)
struct USolarVehicleAT_HoverFly : UAbilityTask {
	char pad_80[0x28]; // 0x80(0x28)
};

// Class Solarland.SolarVehicleGA_HoverJump
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverJump : USolarVehicleGameplayAbility {
	float HoverJumpHeight; // 0x4d8(0x04)
	float GravityScale; // 0x4dc(0x04)
	float ServerEndTimerWhenNotReceiveBuffer; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct USolarVehicleAT_HoverJump* HoverJumpTask; // 0x4e8(0x08)
};

// Class Solarland.SolarVehicleAT_HoverJump
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_HoverJump : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Solarland.SolarVehicleGA_HoverRolling
// Size: 0x4d8 (Inherited: 0x4d8)
struct USolarVehicleGA_HoverRolling : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_IronManLaser
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_IronManLaser : USolarVehicleGameplayAbility {
	float TraceLength; // 0x4d8(0x04)
	float TraceLengthScaleOnServer; // 0x4dc(0x04)
	float MaxFadingLaserLifeTime; // 0x4e0(0x04)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct UGameplayEffect* EffectToDriver; // 0x4e8(0x08)
};

// Class Solarland.SolarVehicleAT_IronManLaser
// Size: 0xd0 (Inherited: 0x80)
struct USolarVehicleAT_IronManLaser : UAbilityTask {
	char pad_80[0x50]; // 0x80(0x50)

	void OnNotifyEndQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyEndQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x1ed7c20
	void OnNotifyBeginQueryActor(struct FName NotifyName, struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload); // Function Solarland.SolarVehicleAT_IronManLaser.OnNotifyBeginQueryActor // (Final|Native|Private|HasOutParms) // @ game+0x1ed7b40
	void OnMontageEnded(struct UAnimMontage* Montage, bool bInterrupted); // Function Solarland.SolarVehicleAT_IronManLaser.OnMontageEnded // (Final|Native|Private) // @ game+0x1ed7a70
};

// Class Solarland.SolarVehicleGA_Jump
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_Jump : USolarVehicleGameplayAbility {
	float LandedDamageRadius; // 0x4d8(0x04)
	float LandedDamageHeight; // 0x4dc(0x04)

	void ApplyDamageOnLanding(struct FHitResult& LandedHit); // Function Solarland.SolarVehicleGA_Jump.ApplyDamageOnLanding // (Final|Native|Public|HasOutParms) // @ game+0x1ed76d0
};

// Class Solarland.SolarVehicleGA_NOS
// Size: 0x508 (Inherited: 0x4d8)
struct USolarVehicleGA_NOS : USolarVehicleGameplayAbility {
	struct FName VerticalAxisName; // 0x4d8(0x08)
	struct FName HorizontalAxisName; // 0x4e0(0x08)
	float VerticalAxisValueForCancel; // 0x4e8(0x04)
	float JoyStickCancelDegree; // 0x4ec(0x04)
	float CancelTimeForInput; // 0x4f0(0x04)
	float CancelTimeForHit; // 0x4f4(0x04)
	float CancelSpeedForHit; // 0x4f8(0x04)
	char pad_4FC[0x4]; // 0x4fc(0x04)
	struct USolarVehicleAT_NOS* NosTask; // 0x500(0x08)
};

// Class Solarland.SolarVehicleAT_NOS
// Size: 0x90 (Inherited: 0x80)
struct USolarVehicleAT_NOS : UAbilityTask {
	char pad_80[0x10]; // 0x80(0x10)

	void OnHitDuringNos(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarVehicleAT_NOS.OnHitDuringNos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1ed78a0
};

// Class Solarland.SolarVehicleGA_Radar
// Size: 0x4e8 (Inherited: 0x4d8)
struct USolarVehicleGA_Radar : USolarVehicleGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x4d8(0x08)
	char pad_4E0[0x8]; // 0x4e0(0x08)
};

// Class Solarland.SolarVehicleGA_SeatEject
// Size: 0x500 (Inherited: 0x4d8)
struct USolarVehicleGA_SeatEject : USolarVehicleGameplayAbility {
	struct FRotator EjectRotation; // 0x4d8(0x0c)
	struct FVehicleEjectParams EjectParams; // 0x4e4(0x10)
	struct FGameplayTag GameplayCueTag; // 0x4f4(0x08)
	char pad_4FC[0x4]; // 0x4fc(0x04)
};

// Class Solarland.SolarVehicleGA_SelfHealing
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_SelfHealing : USolarVehicleGameplayAbility {
	uint32_t FullHealthNotifyId; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
};

// Class Solarland.SolarVehicleGA_ShieldTrigger
// Size: 0x4d8 (Inherited: 0x4d8)
struct USolarVehicleGA_ShieldTrigger : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_SiegeWeapon
// Size: 0x4d8 (Inherited: 0x4d8)
struct USolarVehicleGA_SiegeWeapon : USolarVehicleGameplayAbility {
};

// Class Solarland.SolarVehicleGA_Smoke
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_Smoke : USolarVehicleGameplayAbility {
	struct ASolarVehicleSmoke* VehicleSmoke; // 0x4d8(0x08)
};

// Class Solarland.SolarVehicleGA_Stealth
// Size: 0x500 (Inherited: 0x4d8)
struct USolarVehicleGA_Stealth : USolarVehicleGameplayAbility {
	char pad_4D8[0x28]; // 0x4d8(0x28)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x1ed7dc0
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarVehicleGA_Stealth.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x1ed7d00
	void OnCancelStealthByPassenger(); // Function Solarland.SolarVehicleGA_Stealth.OnCancelStealthByPassenger // (Final|Native|Public) // @ game+0x1ed7880
};

// Class Solarland.SolarVehicleGA_WeaponFire
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_WeaponFire : USolarVehicleGameplayAbility {
	enum class EWeaponFireModeType WeaponFireModeType; // 0x4d8(0x01)
	enum class EInputButton SkillButton; // 0x4d9(0x01)
	char pad_4DA[0x2]; // 0x4da(0x02)
	struct FName CancelSkillButtonName; // 0x4dc(0x08)
	char pad_4E4[0x4]; // 0x4e4(0x04)
	struct UAbilityTask_WaitInputAction* WaitCancelInputTask; // 0x4e8(0x08)
};

// Class Solarland.SolarVehicleGA_WeaponFireTask
// Size: 0xe0 (Inherited: 0x80)
struct USolarVehicleGA_WeaponFireTask : UAbilityTask {
	struct TWeakObjectPtr<struct ASolarVehiclePawn> VehiclePawn; // 0x80(0x08)
	struct TWeakObjectPtr<struct ASolarVehicleWeapon> VehicleWeapon; // 0x88(0x08)
	char pad_90[0x40]; // 0x90(0x40)
	enum class EWeaponFireModeType WeaponFireModeType; // 0xd0(0x01)
	enum class EInputButton SkillButton; // 0xd1(0x01)
	char pad_D2[0xe]; // 0xd2(0x0e)
};

// Class Solarland.SolarVehicleGA_WheelTransform
// Size: 0x580 (Inherited: 0x4d8)
struct USolarVehicleGA_WheelTransform : USolarVehicleGameplayAbility {
	struct TArray<struct UGameplayEffect*> WheeledEffects; // 0x4d8(0x10)
	struct TArray<struct UGameplayEffect*> LeggedEffects; // 0x4e8(0x10)
	char pad_4F8[0x10]; // 0x4f8(0x10)
	struct TSoftObjectPtr<UTexture2D> AbilityIcons[0x2]; // 0x508(0x50)
	int32_t InhibitTransformNoticeIDByBrokenWeakPointNums; // 0x558(0x04)
	bool bCheckBrokenWeakPointNumConfig; // 0x55c(0x01)
	char pad_55D[0x3]; // 0x55d(0x03)
	int32_t InhibitTransformIfSurpassBrokenWeakPointNumConfig; // 0x560(0x04)
	int32_t InhibitTransformNoticeIDByBlock; // 0x564(0x04)
	struct FVector TransformToWheelBoxExtent; // 0x568(0x0c)
	float TransformToWheelOverlapOffset; // 0x574(0x04)
	float MaxFallingSpeedForTransformingWheel; // 0x578(0x04)
	int32_t InhibitTransformNoticeIDByFallingSpeed; // 0x57c(0x04)
};

// Class Solarland.SolarVehicleGA_WholeShield
// Size: 0x4f0 (Inherited: 0x4d8)
struct USolarVehicleGA_WholeShield : USolarVehicleGameplayAbility {
	char pad_4D8[0x18]; // 0x4d8(0x18)
};

// Class Solarland.SolarVehicleGA_ZombieTruck
// Size: 0x4e0 (Inherited: 0x4d8)
struct USolarVehicleGA_ZombieTruck : USolarVehicleGameplayAbility {
	float PlatformAttachDegree; // 0x4d8(0x04)
	char pad_4DC[0x4]; // 0x4dc(0x04)
};

// Class Solarland.SolarVehicleWeapon
// Size: 0x1380 (Inherited: 0xc40)
struct ASolarVehicleWeapon : ASolarWeapon {
	char pad_C40[0x8]; // 0xc40(0x08)
	float MaxWeaponPitch; // 0xc48(0x04)
	float MinWeaponPitch; // 0xc4c(0x04)
	float MaxWeaponYaw; // 0xc50(0x04)
	float MinWeaponYaw; // 0xc54(0x04)
	float PitchFollowSpeed; // 0xc58(0x04)
	float YawFollowSpeed; // 0xc5c(0x04)
	bool bAbsoluteRotator; // 0xc60(0x01)
	bool bHasScope; // 0xc61(0x01)
	bool bHiddenMesh; // 0xc62(0x01)
	char pad_C63[0x1]; // 0xc63(0x01)
	struct FVector ScopeCameraOffset; // 0xc64(0x0c)
	struct FVector ScopeTargetOffset; // 0xc70(0x0c)
	float ScopeCameraDistance; // 0xc7c(0x04)
	float ScopeBlendTime; // 0xc80(0x04)
	float ScopeFOVSwitchSpeed; // 0xc84(0x04)
	enum class EVehicleWeaponScopeType DefaultWeaponScopeType; // 0xc88(0x01)
	char pad_C89[0x7]; // 0xc89(0x07)
	struct UVehicleWeaponScopeWidget* ScopeUI; // 0xc90(0x08)
	float PitchCameraOffset; // 0xc98(0x04)
	bool bCameraFocusWeapon; // 0xc9c(0x01)
	bool bUseNormalCameraMode; // 0xc9d(0x01)
	enum class EWeaponFireModeType FireType; // 0xc9e(0x01)
	char pad_C9F[0x1]; // 0xc9f(0x01)
	struct FName FireSocketName; // 0xca0(0x08)
	struct TArray<struct FName> MuzzleCheckSocketNames; // 0xca8(0x10)
	enum class EAxis FireAixsType; // 0xcb8(0x01)
	char pad_CB9[0x3]; // 0xcb9(0x03)
	struct FName TurretVSocketName; // 0xcbc(0x08)
	struct FName TurretHSocketName; // 0xcc4(0x08)
	char pad_CCC[0x4]; // 0xccc(0x04)
	struct ASolarVehiclePawn* AttachedVehicle; // 0xcd0(0x08)
	struct ASolarCharacter* WeaponOwner; // 0xcd8(0x08)
	bool bVehicleWeaponScopeOpen; // 0xce0(0x01)
	bool bActivedWeapon; // 0xce1(0x01)
	char pad_CE2[0x2]; // 0xce2(0x02)
	uint32_t RotationYawAndPitchPacket; // 0xce4(0x04)
	char pad_CE8[0x18]; // 0xce8(0x18)
	struct USkeletalMeshComponent* VehicleMesh; // 0xd00(0x08)
	struct TSoftClassPtr<UObject> VehicleStencilClass; // 0xd08(0x28)
	struct USkeletalMeshComponent* VehicleStencilNew; // 0xd30(0x08)
	struct FName AttachBoneName; // 0xd38(0x08)
	struct TWeakObjectPtr<struct ASolarCharacter> CahedLastOwner; // 0xd40(0x08)
	char pad_D48[0x328]; // 0xd48(0x328)
	char bUseAssistLock : 1; // 0x1070(0x01)
	char bShowAssistLockUI : 1; // 0x1070(0x01)
	char pad_1070_2 : 6; // 0x1070(0x01)
	char pad_1071[0x3]; // 0x1071(0x03)
	struct FVector2D AssistLockImageSize; // 0x1074(0x08)
	char bAutoLockSpreadSwitch : 1; // 0x107c(0x01)
	char pad_107C_1 : 7; // 0x107c(0x01)
	char pad_107D[0x3]; // 0x107d(0x03)
	float AutoLockSpreadDecPerSecond; // 0x1080(0x04)
	float PreSelectProgress; // 0x1084(0x04)
	struct FRuntimeFloatCurve ProgressUpgradeSpeedCurve; // 0x1088(0x88)
	enum class EAssistLockState AssistLockState; // 0x1110(0x01)
	bool bSimulateWeaponFireSocket; // 0x1111(0x01)
	char pad_1112[0x2]; // 0x1112(0x02)
	float TriggerSmoothReticleDistance; // 0x1114(0x04)
	struct FVector2D SmoothReticleSpeed; // 0x1118(0x08)
	struct FTransform CachedWeaponRelativeTransform; // 0x1120(0x30)
	struct FTransform CachedFireMuzzleTransform; // 0x1150(0x30)
	struct FTransform CachedTurretVSocketTransform; // 0x1180(0x30)
	struct FTransform CachedTurretHSocketTransform; // 0x11b0(0x30)
	float WeaponFollowCameraYaw; // 0x11e0(0x04)
	float WeaponFollowCameraPitch; // 0x11e4(0x04)
	struct FRotator SimulateWeaponRot; // 0x11e8(0x0c)
	char pad_11F4[0xc]; // 0x11f4(0x0c)
	struct FTransform SimulateMuzzleTransform; // 0x1200(0x30)
	struct FRotator SimulateWeaponTargetRotator; // 0x1230(0x0c)
	char pad_123C[0x4]; // 0x123c(0x04)
	struct ASolarBullet* VehicleWeaponPrimaryOverrideBulletClass; // 0x1240(0x08)
	struct ASolarBullet* VehicleWeaponSecondaryOverrideBulletClass; // 0x1248(0x08)
	struct FGameplayTagContainer BlockVehicleWeaponFireTags; // 0x1250(0x20)
	char pad_1270[0x19]; // 0x1270(0x19)
	bool bEnablePreAimingLaser; // 0x1289(0x01)
	bool bNotOptTickIntervalPreAimingActive; // 0x128a(0x01)
	char pad_128B[0x1]; // 0x128b(0x01)
	struct FName PreAimingLaserLaunchScoket; // 0x128c(0x08)
	char pad_1294[0x4]; // 0x1294(0x04)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserFX; // 0x1298(0x28)
	struct TSoftObjectPtr<UParticleSystem> PreAimingLaserEnermyFX; // 0x12c0(0x28)
	int32_t PreAimingLaserChagringPhase; // 0x12e8(0x04)
	char pad_12EC[0x4]; // 0x12ec(0x04)
	struct UParticleSystemComponent* PreAimingLaserEffect; // 0x12f0(0x08)
	bool bEnableBackupAmmo; // 0x12f8(0x01)
	char pad_12F9[0x3]; // 0x12f9(0x03)
	int32_t BackupAmmoFireCost; // 0x12fc(0x04)
	int32_t MaxBackupAmmo; // 0x1300(0x04)
	float ReloadBackupAmmoInterval; // 0x1304(0x04)
	int32_t ReloadBackupAmmoNum; // 0x1308(0x04)
	int32_t CurrentBackupAmmo; // 0x130c(0x04)
	char pad_1310[0x8]; // 0x1310(0x08)
	bool bEnableRechamber; // 0x1318(0x01)
	char pad_1319[0x3]; // 0x1319(0x03)
	float PlayRechamberFinishTime; // 0x131c(0x04)
	struct FString RechamberStartAndStopSound; // 0x1320(0x10)
	struct FString RechamberFinishSound; // 0x1330(0x10)
	struct FString ReloadSoundName1P; // 0x1340(0x10)
	struct FString ReloadSoundName3P; // 0x1350(0x10)
	struct FString ReloadSoundName3PEnemy; // 0x1360(0x10)
	bool bKeepReloadAfterUncontrol; // 0x1370(0x01)
	char pad_1371[0x3]; // 0x1371(0x03)
	struct FActiveGameplayEffectHandle ActivedReloadEffectHandle; // 0x1374(0x08)
	char pad_137C[0x4]; // 0x137c(0x04)

	void VehicleWeaponOpenScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponOpenScope // (Final|Native|Public) // @ game+0x1ede160
	void VehicleWeaponCloseScope(); // Function Solarland.SolarVehicleWeapon.VehicleWeaponCloseScope // (Final|Native|Public) // @ game+0x1ede140
	void UpdateWeaponSimulateTransform(float DeltaTime); // Function Solarland.SolarVehicleWeapon.UpdateWeaponSimulateTransform // (Native|Protected) // @ game+0x1ede0c0
	void ServerUpdateVehicleWeaponRotate(uint32_t PackedRotation); // Function Solarland.SolarVehicleWeapon.ServerUpdateVehicleWeaponRotate // (Net|Native|Event|Protected|NetServer) // @ game+0x1edde80
	void ResetWeaponRotation(float DeltaTime); // Function Solarland.SolarVehicleWeapon.ResetWeaponRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x1eddd40
	void RegisterReloadEffectTag(); // Function Solarland.SolarVehicleWeapon.RegisterReloadEffectTag // (Final|Native|Public) // @ game+0x1eddd20
	void OnVehicleWeaponUnControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponUnControlled // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnVehicleWeaponReloadTagChanged(struct FGameplayTag Tag, int32_t NewCount); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponReloadTagChanged // (Final|Native|Protected) // @ game+0x1edd990
	void OnVehicleWeaponControlled(); // Function Solarland.SolarVehicleWeapon.OnVehicleWeaponControlled // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnStencilLoaded(); // Function Solarland.SolarVehicleWeapon.OnStencilLoaded // (Final|Native|Public) // @ game+0x1edd970
	void OnRep_BackupAmmoChanged(int32_t InOldAmmo); // Function Solarland.SolarVehicleWeapon.OnRep_BackupAmmoChanged // (Final|Native|Protected) // @ game+0x1edd8f0
	void LocallyVehicleWeaponTick(float DeltaTime); // Function Solarland.SolarVehicleWeapon.LocallyVehicleWeaponTick // (Native|Protected) // @ game+0x1edd870
	bool IsPlayerLocallyControlledWeapon(); // Function Solarland.SolarVehicleWeapon.IsPlayerLocallyControlledWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1edd840
	void InitializeVehicleWeapon(struct ASolarVehiclePawn* VehicleWeaponOwner, struct FName& WeaponAttachSocket); // Function Solarland.SolarVehicleWeapon.InitializeVehicleWeapon // (Native|Protected|HasOutParms) // @ game+0x1edd760
	struct FVector GetShotTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetShotTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x1edd700
	enum class EWeaponFireModeType GetFireType(); // Function Solarland.SolarVehicleWeapon.GetFireType // (Final|Native|Public|Const) // @ game+0x1edd6e0
	struct FVector GetAimTargetLocation(); // Function Solarland.SolarVehicleWeapon.GetAimTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1edd6a0
	bool CheckCanOpenScope(); // Function Solarland.SolarVehicleWeapon.CheckCanOpenScope // (Native|Public) // @ game+0x1edd5c0
	bool CanEnterFireState(); // Function Solarland.SolarVehicleWeapon.CanEnterFireState // (Native|Public) // @ game+0x1edd590
};

// Class Solarland.SolarVehicleGatlingWeapon
// Size: 0x1380 (Inherited: 0x1380)
struct ASolarVehicleGatlingWeapon : ASolarVehicleWeapon {
};

// Class Solarland.SolarVehicleGC_BrokenDanger
// Size: 0x80 (Inherited: 0x50)
struct USolarVehicleGC_BrokenDanger : UGameplayCueNotify_Static {
	struct TSoftObjectPtr<UMaterialInterface> SourceMaterial; // 0x50(0x28)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Solarland.SolarVehicleGC_EquipWeapon
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_EquipWeapon : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleGC_HoverJump
// Size: 0x60 (Inherited: 0x50)
struct USolarVehicleGC_HoverJump : UGameplayCueNotify_Static {
	struct TArray<struct FVehicleVFX> HoverJumpVFXes; // 0x50(0x10)
};

// Class Solarland.SolarVehicleGC_ZombieTruck
// Size: 0x50 (Inherited: 0x50)
struct USolarVehicleGC_ZombieTruck : UGameplayCueNotify_Static {
};

// Class Solarland.SolarVehicleHealthWidget
// Size: 0x490 (Inherited: 0x340)
struct USolarVehicleHealthWidget : USolarUserWidget {
	struct TMap<int32_t, struct FVehicleHealthResource> VehicleHealthResourceMap; // 0x340(0x50)
	struct UProgressBar* ProgressBar_Health; // 0x390(0x08)
	struct UTextBlock* Txt_Health; // 0x398(0x08)
	struct UTextBlock* Txt_Health_percent; // 0x3a0(0x08)
	struct UImage* Img_Health; // 0x3a8(0x08)
	struct UCanvasPanel* UI_Vehicle_Health_Anim; // 0x3b0(0x08)
	struct UWidgetAnimation* CarHealth_Loop_Anim; // 0x3b8(0x08)
	struct TArray<struct UImage*> WeakPointImgs; // 0x3c0(0x10)
	struct FLinearColor VehicleNormalColor; // 0x3d0(0x10)
	struct FLinearColor VehicleDamageColor; // 0x3e0(0x10)
	struct FLinearColor VehicleBrokenColor; // 0x3f0(0x10)
	struct FLinearColor VehicleFillImageNormalColor; // 0x400(0x10)
	struct FLinearColor VehicleFillImageDamageColor; // 0x410(0x10)
	struct FLinearColor VehicleFillImageBrokenColor; // 0x420(0x10)
	struct FLinearColor WeakNormalColor; // 0x430(0x10)
	struct FLinearColor WeakDamageColor; // 0x440(0x10)
	struct FLinearColor WeakBrokenColor; // 0x450(0x10)
	struct FLinearColor RepairingColor; // 0x460(0x10)
	char pad_470[0x20]; // 0x470(0x20)

	void InitHealthUI(struct ASolarVehiclePawn* InVehiclePawn, bool bInDriveControl); // Function Solarland.SolarVehicleHealthWidget.InitHealthUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1ed77b0
};

// Class Solarland.SolarVehicleHoverWeapon
// Size: 0x13e0 (Inherited: 0x1380)
struct ASolarVehicleHoverWeapon : ASolarVehicleWeapon {
	float MoveDelayTime; // 0x1380(0x04)
	float InterpSpeed; // 0x1384(0x04)
	struct FVector WeaponOpenOffset; // 0x1388(0x0c)
	char pad_1394[0x4]; // 0x1394(0x04)
	struct UCurveFloat* WeaponHoverOffsetCurve; // 0x1398(0x08)
	char pad_13A0[0x40]; // 0x13a0(0x40)
};

// Class Solarland.WheeledVehicleInterface
// Size: 0x28 (Inherited: 0x28)
struct UWheeledVehicleInterface : UInterface {
};

// Class Solarland.VehicleWeaponAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UVehicleWeaponAnimInterface : UInterface {
};

// Class Solarland.SolarVehicleIronManWeapon
// Size: 0x13e0 (Inherited: 0x1380)
struct ASolarVehicleIronManWeapon : ASolarVehicleWeapon {
	struct TSoftObjectPtr<UAnimMontage> DriverStandAttackRight; // 0x1380(0x28)
	struct TSoftObjectPtr<UAnimMontage> DriverLieAttackRight; // 0x13a8(0x28)
	struct FName AttackSectionName; // 0x13d0(0x08)
	char pad_13D8[0x8]; // 0x13d8(0x08)

	struct USkeletalMeshComponent* GetDriverCharacterMesh(); // Function Solarland.SolarVehicleIronManWeapon.GetDriverCharacterMesh // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x1eda650
};

// Class Solarland.SolarVehicleLegTurretWeapon
// Size: 0x13e0 (Inherited: 0x1380)
struct ASolarVehicleLegTurretWeapon : ASolarVehicleWeapon {
	struct TArray<struct FBoneIKPreset> TargetIKSettings; // 0x1380(0x10)
	float IKBlendSpeed; // 0x1390(0x04)
	struct FName LeftMuzzleName; // 0x1394(0x08)
	struct FName RightMuzzleName; // 0x139c(0x08)
	struct FVector TargetLeftBoneIK; // 0x13a4(0x0c)
	struct FVector TargetRightBoneIK; // 0x13b0(0x0c)
	struct FVector CurrentLeftBoneIK; // 0x13bc(0x0c)
	struct FVector CurrentRightBoneIK; // 0x13c8(0x0c)
	char pad_13D4[0xc]; // 0x13d4(0x0c)
};

// Class Solarland.SolarVehicleNosGCNotify_Actor
// Size: 0x2a0 (Inherited: 0x298)
struct ASolarVehicleNosGCNotify_Actor : AGameplayCueNotify_Actor {
	char pad_298[0x8]; // 0x298(0x08)
};

// Class Solarland.SolarVehicleRocketLauncherWeapon
// Size: 0x1730 (Inherited: 0x1380)
struct ASolarVehicleRocketLauncherWeapon : ASolarVehicleWeapon {
	struct TArray<struct FBombingAreaData> BombingAreaDatas; // 0x1380(0x10)
	struct TMap<int32_t, struct FBombingAreaAsset> BombingAreaAssetMap; // 0x1390(0x50)
	int32_t SpawnedAreaCounter; // 0x13e0(0x04)
	int32_t PlayedMuzlleEffectCounter; // 0x13e4(0x04)
	struct FTimerHandle FiringEffectTimeHandle; // 0x13e8(0x08)
	struct FVector CurrentAimPoint; // 0x13f0(0x0c)
	char pad_13FC[0x4]; // 0x13fc(0x04)
	struct TArray<struct FSpawnedRocketData> SpawnedRocketDatas; // 0x1400(0x10)
	char pad_1410[0x13c]; // 0x1410(0x13c)
	bool bReloadingAfterUncontrol; // 0x154c(0x01)
	char pad_154D[0x1b]; // 0x154d(0x1b)
	struct FBombingAreaAsset PreviewRangeAsset; // 0x1568(0x60)
	struct FBombingAreaAsset BombingAreaAimAsset; // 0x15c8(0x60)
	struct FBombingAreaAsset BombingAreaWarningAsset; // 0x1628(0x60)
	struct FVector BombingAreaDecalSize; // 0x1688(0x0c)
	char pad_1694[0x4]; // 0x1694(0x04)
	struct TSoftObjectPtr<UStaticMesh> AlertLineMeshClass; // 0x1698(0x28)
	struct TSoftObjectPtr<UParticleSystem> FireMuzzleParticle; // 0x16c0(0x28)
	float AreaMeshScale; // 0x16e8(0x04)
	float FirstRocketSpawnTimer; // 0x16ec(0x04)
	float RocketSpawnDelay; // 0x16f0(0x04)
	float AlertLineRemainTime; // 0x16f4(0x04)
	float RocketSpawnInterval; // 0x16f8(0x04)
	float BombingAreaDisplayDelay; // 0x16fc(0x04)
	int32_t LaunchRocketNum; // 0x1700(0x04)
	float BombingAreaRadius; // 0x1704(0x04)
	float MiniSpawnDistance; // 0x1708(0x04)
	float SpawnRocketHight; // 0x170c(0x04)
	struct FVector2D AimDistanceRange; // 0x1710(0x08)
	struct TArray<struct FName> MuzzleSocketNames; // 0x1718(0x10)
	float MuzzleEffectInterval; // 0x1728(0x04)
	char pad_172C[0x4]; // 0x172c(0x04)

	void ServerActivateRocketLauncherFire(struct FVector_NetQuantize InTargetLocation); // Function Solarland.SolarVehicleRocketLauncherWeapon.ServerActivateRocketLauncherFire // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1eda9f0
	void PlayRocketLauncherFireEffect(); // Function Solarland.SolarVehicleRocketLauncherWeapon.PlayRocketLauncherFireEffect // (Final|Native|Public) // @ game+0x1eda9b0
	void OnVitrualRocketSpawn(struct FVector InLocation); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnVitrualRocketSpawn // (Final|Native|Protected|HasDefaults) // @ game+0x1eda920
	void OnRep_RocketSpawnerChanged(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnRep_RocketSpawnerChanged // (Final|Native|Protected) // @ game+0x1eda8a0
	void OnLocallyActiveFire(); // Function Solarland.SolarVehicleRocketLauncherWeapon.OnLocallyActiveFire // (Final|Native|Public) // @ game+0x1eda740
	void MulticastPrepareRocketSpawn(struct FVector_NetQuantize InLocation); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastPrepareRocketSpawn // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1eda6a0
	void MulticastActivateRocketLauncherFire(); // Function Solarland.SolarVehicleRocketLauncherWeapon.MulticastActivateRocketLauncherFire // (Net|Native|Event|NetMulticast|Protected) // @ game+0x1257dd0
	void InternalWeaponFireOnClient(); // Function Solarland.SolarVehicleRocketLauncherWeapon.InternalWeaponFireOnClient // (Final|Native|Public) // @ game+0x1eda680
};

// Class Solarland.SolarVehicleSettings
// Size: 0x200 (Inherited: 0x38)
struct USolarVehicleSettings : UDeveloperSettings {
	float HpLowerLimitInNormalStatus; // 0x38(0x04)
	float HpLowerLimitInDamagedStatus; // 0x3c(0x04)
	float VehicleHitTimer; // 0x40(0x04)
	float ReplicatedDelayTimer; // 0x44(0x04)
	float WaterToDestoryTime; // 0x48(0x04)
	float MaxWarningTweenRate; // 0x4c(0x04)
	float MinWarningTweenRate; // 0x50(0x04)
	float MinDangerWarningOpacity; // 0x54(0x04)
	float MinProgressBarWarningOpacity; // 0x58(0x04)
	float VehicleBurningSpendTimer; // 0x5c(0x04)
	float VehicleBurningDeltaTime; // 0x60(0x04)
	float DisableOverlapTimer; // 0x64(0x04)
	float ResetOwnerTimer; // 0x68(0x04)
	int32_t MeshLodLevelForDefaultDeviceLocalPlayer; // 0x6c(0x04)
	int32_t MeshLodLevelForLowDeviceLocalPlayer; // 0x70(0x04)
	float AutoBrakeTimerWithoutDriver; // 0x74(0x04)
	struct FName WeakPointVFXParamterName; // 0x78(0x08)
	float WeakPointVFXDefaultValue; // 0x80(0x04)
	float WeakPointVFXStartValue; // 0x84(0x04)
	float WeakPointVFXTargetValue; // 0x88(0x04)
	float WeakPointVFXDuration; // 0x8c(0x04)
	struct FName LeftFootLocationXCurve; // 0x90(0x08)
	struct FName RightFootLocationXCurve; // 0x98(0x08)
	struct FName LeftFootLocationZCurve; // 0xa0(0x08)
	struct FName RightFootLocationZCurve; // 0xa8(0x08)
	float WeaponMagnifiers[0x4]; // 0xb0(0x10)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> VehiclePreviewChangeMat; // 0xc0(0x50)
	struct TMap<struct FString, struct TSoftObjectPtr<UMaterialInterface>> VehiclePreviewChangeMirrorMat; // 0x110(0x50)
	struct TSoftObjectPtr<UCurveFloat> VehiclePreviewMatCurve; // 0x160(0x28)
	int32_t VehiclePreviewMeshSortPriority; // 0x188(0x04)
	int32_t VehiclePreviewMirrorMeshSortPriority; // 0x18c(0x04)
	int32_t VehiclePreviewVFXSortPriority; // 0x190(0x04)
	int32_t VehiclePreviewMirrorVFXSortPriority; // 0x194(0x04)
	char VehiclePreviewPlayAnimSound[0x8]; // 0x198(0x08)
	float VehicleHitTimerForAntiCheating; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct TMap<enum class ESolarShakeMainType, float> VehicleVibrationMultiplier; // 0x1a8(0x50)
	float ForceUpdateProceduralAnimationToTargetTimeThreshold; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)

	struct USolarVehicleSettings* Get(); // Function Solarland.SolarVehicleSettings.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1eda5e0
};

// Class Solarland.SolarVehicleSiegeWeapon
// Size: 0x14b0 (Inherited: 0x1380)
struct ASolarVehicleSiegeWeapon : ASolarVehicleWeapon {
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInSameTeam; // 0x1380(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInSameTeam; // 0x13a8(0x28)
	struct TSoftObjectPtr<UParticleSystem> BulletTargetAreaInEnemy; // 0x13d0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BulletDecalMaterialInEnemy; // 0x13f8(0x28)
	float AreaParticleScale; // 0x1420(0x04)
	struct FVector AreaDecalSize; // 0x1424(0x0c)
	float AreaFadeOutTime; // 0x1430(0x04)
	struct FName AreaFadeOutName; // 0x1434(0x08)
	float AreaDisplayDistance; // 0x143c(0x04)
	float AreaBlockThreshold; // 0x1440(0x04)
	char pad_1444[0x4]; // 0x1444(0x04)
	struct TMap<int32_t, struct FBulletExplodedAreaData> BulletAreaParticleMap; // 0x1448(0x50)
	struct TArray<struct ASolarProjBullet*> CreatedBullets; // 0x1498(0x10)
	char pad_14A8[0x8]; // 0x14a8(0x08)
};

// Class Solarland.SolarVehicleSmoke
// Size: 0x3e8 (Inherited: 0x228)
struct ASolarVehicleSmoke : AActor {
	float Duration; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct FRuntimeFloatCurve AppearCurve; // 0x230(0x88)
	struct FRuntimeFloatCurve DisappearCurve; // 0x2b8(0x88)
	struct TSoftObjectPtr<UParticleSystem> SmokeEffect; // 0x340(0x28)
	struct UAkComponent* AkAudioComponent; // 0x368(0x08)
	struct FName SmokeFadeName; // 0x370(0x08)
	struct FString SoundBegin; // 0x378(0x10)
	struct FString SoundLoop; // 0x388(0x10)
	struct FString SoundLoopEnd; // 0x398(0x10)
	int32_t SmokeTranslucentSortPriority; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UParticleSystemComponent* SmokeEffectComp; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	bool bSmokeWaitToDestory; // 0x3c0(0x01)
	char pad_3C1[0x27]; // 0x3c1(0x27)

	void OnRep_SmokeWaitToDestory(); // Function Solarland.SolarVehicleSmoke.OnRep_SmokeWaitToDestory // (Final|Native|Protected) // @ game+0x1eda8c0
	void OnEffectPlayOver(); // Function Solarland.SolarVehicleSmoke.OnEffectPlayOver // (Final|Native|Protected) // @ game+0x1eda720
};

// Class Solarland.SolarVehicleSoundDataAsset
// Size: 0x608 (Inherited: 0x30)
struct USolarVehicleSoundDataAsset : UDataAsset {
	struct FString Engine_3P; // 0x30(0x10)
	struct FString Engine_3P_Enemy; // 0x40(0x10)
	struct FString Engine_Down_3P; // 0x50(0x10)
	struct FString Engine_Down_3P_Enemy; // 0x60(0x10)
	struct FString Engine_RTPC; // 0x70(0x10)
	struct FString Engine_Stop_3P; // 0x80(0x10)
	struct FString Engine_Stop_3P_Enemy; // 0x90(0x10)
	struct FString Engine_Input_RTPC; // 0xa0(0x10)
	float MaxMoveSpeed; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString MoveSpeed_Acc_RTPC; // 0xb8(0x10)
	struct FString Tire_3P; // 0xc8(0x10)
	struct FString Tire_3P_Enemy; // 0xd8(0x10)
	struct FString Tire_End_3P; // 0xe8(0x10)
	struct FString Tire_End_3P_Enemy; // 0xf8(0x10)
	struct FString Tire_RTPC; // 0x108(0x10)
	struct FString Tire_Group; // 0x118(0x10)
	struct TMap<enum class EPhysicalSurface, struct FString> Tire_States; // 0x128(0x50)
	bool bUseEngineRpm; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
	struct FString Vehicle_Collision_3P; // 0x180(0x10)
	struct FString Vehicle_Collision_3P_Enemy; // 0x190(0x10)
	struct FString Vehicle_Collision_RTPC; // 0x1a0(0x10)
	struct FString Play_Booster_3P; // 0x1b0(0x10)
	struct FString Play_Booster_3P_Enemy; // 0x1c0(0x10)
	struct FString Stop_Booster_3P; // 0x1d0(0x10)
	struct FString Stop_Booster_3P_Enemy; // 0x1e0(0x10)
	struct FString Vehicle_Speedboard_1P; // 0x1f0(0x10)
	struct FString Vehicle_Speedboard_3P; // 0x200(0x10)
	struct FString Vehicle_Speedboard_3P_Enemy; // 0x210(0x10)
	struct FString Vehicle_Eject_1P; // 0x220(0x10)
	struct FString Vehicle_Eject_3P; // 0x230(0x10)
	struct FString Vehicle_Eject_3P_Enemy; // 0x240(0x10)
	struct FString Play_Vehicle_Destroyed; // 0x250(0x10)
	struct FString Weakpoint_Broken_3P; // 0x260(0x10)
	struct FString Weakpoint_Broken_3P_Enemy; // 0x270(0x10)
	struct FString Weakpoint_Fixed_3P; // 0x280(0x10)
	struct FString Weakpoint_Fixed_3P_Enemy; // 0x290(0x10)
	struct FString Engine_Start_3P; // 0x2a0(0x10)
	struct FString Engine_Start_3P_Enemy; // 0x2b0(0x10)
	struct FString Braking_Loop_RTPC; // 0x2c0(0x10)
	struct FString Play_Braking_Loop_3P; // 0x2d0(0x10)
	struct FString Play_Braking_Loop_3P_Enemy; // 0x2e0(0x10)
	struct FString Stop_Braking_Loop_3P; // 0x2f0(0x10)
	struct FString Stop_Braking_Loop_3P_Enemy; // 0x300(0x10)
	float BrakingLoopSoundDegree; // 0x310(0x04)
	float BrakingLoopSoundSpeed; // 0x314(0x04)
	struct FString Play_Reverse_Loop; // 0x318(0x10)
	struct FString Stop_Reverse_Loop; // 0x328(0x10)
	struct FString Drift_RTPC; // 0x338(0x10)
	struct FString Drift_Start; // 0x348(0x10)
	struct FString Drift_Stop; // 0x358(0x10)
	char SpeedDifferenceInKmThresholdForHitSound; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct FString Play_SelfHealing_3P; // 0x370(0x10)
	struct FString Stop_SelfHealing_3P; // 0x380(0x10)
	struct FString Play_vehicle_crash_ground_3P; // 0x390(0x10)
	struct FString Play_vehicle_crash_ground_3P_enemy; // 0x3a0(0x10)
	struct FString Vehicle_Crash_Ground_RTPC; // 0x3b0(0x10)
	float VehicleCrashGroundRtpcMultiplier; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct FString Play_vehicle_crash_water_3P; // 0x3c8(0x10)
	struct FString Play_vehicle_crash_water_3P_enemy; // 0x3d8(0x10)
	struct FString Play_vehicle_fixing_weakpoint_3P; // 0x3e8(0x10)
	struct FString Stop_vehicle_fixing_weakpoint_3P; // 0x3f8(0x10)
	struct FString Play_VehicleWholdShieldBegin_Start_1P; // 0x408(0x10)
	struct FString Play_VehicleWholdShieldBegin_Loop_1P; // 0x418(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Start_3P; // 0x428(0x10)
	struct FString Stop_VehicleWholdShieldBegin_Loop_3P; // 0x438(0x10)
	struct FString Play_VehicleWholdShieldEnd_Start_1P; // 0x448(0x10)
	struct FString Play_VehicleWholdShieldEnd_Loop_1P; // 0x458(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Start_3P; // 0x468(0x10)
	struct FString Stop_VehicleWholdShieldEnd_Loop_3P; // 0x478(0x10)
	struct FString Play_HitVehicleWholdShield_1P; // 0x488(0x10)
	struct FString Play_HitVehicleWholdShield_3P; // 0x498(0x10)
	struct FString HoverJumpOnActive1P; // 0x4a8(0x10)
	struct FString HoverJumpOnActive3P; // 0x4b8(0x10)
	struct FString HoverJumpWhileActive1P; // 0x4c8(0x10)
	struct FString HoverJumpWhileActive3P; // 0x4d8(0x10)
	struct FString HoverJumpOnRemove1P; // 0x4e8(0x10)
	struct FString HoverJumpOnRemove3P; // 0x4f8(0x10)
	struct FString Play_VehicleTrumpet_1P; // 0x508(0x10)
	struct FString Play_VehicleTrumpet_3P; // 0x518(0x10)
	struct FString Stop_VehicleTrumpet_1P; // 0x528(0x10)
	struct FString Stop_VehicleTrumpet_3P; // 0x538(0x10)
	struct FString Play_vehicle_common_braking_loop_3P; // 0x548(0x10)
	struct FString Play_vehicle_common_braking_loop_3P_enemy; // 0x558(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P; // 0x568(0x10)
	struct FString Stop_vehicle_common_braking_loop_3P_enemy; // 0x578(0x10)
	struct FString Play_Vehicle_UpShift_3P; // 0x588(0x10)
	struct FString Play_Vehicle_UpShift_3P_Enemy; // 0x598(0x10)
	struct FString Play_Vehicle_DownShift_3P; // 0x5a8(0x10)
	struct FString Play_Vehicle_DownShift_3P_Enemy; // 0x5b8(0x10)
	struct FString Play_IronMan_Laser_Hit; // 0x5c8(0x10)
	struct FString FootPlant; // 0x5d8(0x10)
	struct FString Landing_3P; // 0x5e8(0x10)
	struct FString Landing_3P_Enemy; // 0x5f8(0x10)
};

// Class Solarland.SolarVehicleSpawnEffect
// Size: 0x278 (Inherited: 0x228)
struct ASolarVehicleSpawnEffect : AActor {
	struct UBoxComponent* BoxCollision; // 0x228(0x08)
	int32_t VehicleID; // 0x230(0x04)
	struct FVector BoxExtent; // 0x234(0x0c)
	float EffectTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct TSoftClassPtr<UObject> EffectClass; // 0x248(0x28)
	struct ASolarSummonPlaceholder* EffectActor; // 0x270(0x08)

	void StartPlayEffect(); // Function Solarland.SolarVehicleSpawnEffect.StartPlayEffect // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarVehicleSpawner
// Size: 0x430 (Inherited: 0x390)
struct ASolarVehicleSpawner : ASolarItemSpawner {
	char pad_390[0x4]; // 0x390(0x04)
	int32_t SpawnID; // 0x394(0x04)
	enum class EVehicleSpawnType VehicleSpawnType; // 0x398(0x01)
	char pad_399[0x7]; // 0x399(0x07)
	bool bVehicleRefresh; // 0x3a0(0x01)
	char pad_3A1[0x3]; // 0x3a1(0x03)
	int32_t VehicleRefreshSecond; // 0x3a4(0x04)
	bool bVehicleRefreshRand; // 0x3a8(0x01)
	bool bVehicleRefreshWaitPreBroken; // 0x3a9(0x01)
	char pad_3AA[0x6]; // 0x3aa(0x06)
	int64_t VehicleRefreshCheckRoleDisSquared; // 0x3b0(0x08)
	struct TArray<enum class EObjectTypeQuery> VehicleCheckObjectTypes; // 0x3b8(0x10)
	struct FVector VehicleCheckBoxSize; // 0x3c8(0x0c)
	char pad_3D4[0x1c]; // 0x3d4(0x1c)
	struct TSoftClassPtr<UObject> VehicleSpawnEffectClass; // 0x3f0(0x28)
	struct ASolarVehicleSpawnEffect* VehicleSpawnEffect; // 0x418(0x08)
	char pad_420[0x8]; // 0x420(0x08)
	struct FSpawnedActorHandle CachedActorHandle; // 0x428(0x04)
	char pad_42C[0x4]; // 0x42c(0x04)

	void StartVehicleRefreshTimer(); // Function Solarland.SolarVehicleSpawner.StartVehicleRefreshTimer // (Final|Native|Protected) // @ game+0x1edaa70
	void PlayVehicleSpawnEffectFinished(); // Function Solarland.SolarVehicleSpawner.PlayVehicleSpawnEffectFinished // (Final|Native|Protected) // @ game+0x1eda9d0
	void OnVehicleRefreshCheck(); // Function Solarland.SolarVehicleSpawner.OnVehicleRefreshCheck // (Final|Native|Protected) // @ game+0x1eda900
	void OnVehicleRefresh(); // Function Solarland.SolarVehicleSpawner.OnVehicleRefresh // (Final|Native|Protected) // @ game+0x1eda8e0
	void OnPreVehicleDriverGetOn(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.SolarVehicleSpawner.OnPreVehicleDriverGetOn // (Final|Native|Protected) // @ game+0x1eda7e0
	void OnPreVehicleDestroyed(struct AActor* DestroyedActor); // Function Solarland.SolarVehicleSpawner.OnPreVehicleDestroyed // (Final|Native|Protected) // @ game+0x1eda760
};

// Class Solarland.SolarVehicleSpringArmComponent
// Size: 0x420 (Inherited: 0x400)
struct USolarVehicleSpringArmComponent : USolarSpringArmComponent {
	struct USolarVehicleCameraComponent* VehicleCamera; // 0x3f8(0x08)
	struct ASolarVehiclePawn* VehiclePawn; // 0x400(0x08)
	char pad_410[0x10]; // 0x410(0x10)
};

// Class Solarland.SolarVehicleStateMachine
// Size: 0x98 (Inherited: 0x28)
struct USolarVehicleStateMachine : UObject {
	struct ASolarVehiclePawn* Owner; // 0x28(0x08)
	struct USolarLeggedVehicleMovement* MovementComponent; // 0x30(0x08)
	char pad_38[0x60]; // 0x38(0x60)
};

// Class Solarland.SolarVehicleSubsystem
// Size: 0xa0 (Inherited: 0x30)
struct USolarVehicleSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnVehicleSpawned; // 0x30(0x10)
	struct FMulticastInlineDelegate OnVehicleDestroyed; // 0x40(0x10)
	char pad_50[0x50]; // 0x50(0x50)

	void GetActiveVehicleList(struct TArray<struct AActor*>& OutActiveVehicles); // Function Solarland.SolarVehicleSubsystem.GetActiveVehicleList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1edd5f0
};

// Class Solarland.SolarVehicleWeakPointComponent
// Size: 0x600 (Inherited: 0x600)
struct USolarVehicleWeakPointComponent : UStaticMeshComponent {
};

// Class Solarland.SolarVibrateManager
// Size: 0xc0 (Inherited: 0x30)
struct USolarVibrateManager : USolarGameManager {
	char pad_30[0x20]; // 0x30(0x20)
	struct UGameplayVibrateDataAsset* GameplayVibrateDataAsset; // 0x50(0x08)
	struct TMap<enum class EGameplayVibrateCategory, enum class EGameplayVibrateIntensity> CurrentVibrateCategoryIntensity; // 0x58(0x50)
	struct UDataTable* WeaponVibrateTable; // 0xa8(0x08)
	struct UVibrateConfig* VibrateConfig; // 0xb0(0x08)
	enum class EWeaponVibrateFactor WeaponVibrateFactor; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float CacheWeaponChargeTime; // 0xbc(0x04)

	void Stop(); // Function Solarland.SolarVibrateManager.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x1ede0a0
	void SetWeaponVibrateFactor(); // Function Solarland.SolarVibrateManager.SetWeaponVibrateFactor // (Final|Native|Public) // @ game+0x1ede080
	void SetVibrateAbilityEnable(bool bOnEnable); // Function Solarland.SolarVibrateManager.SetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x1eddff0
	void SetGameplayVibrateIntensityByUserSetting(); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensityByUserSetting // (Final|Native|Protected) // @ game+0x1eddfd0
	void SetGameplayVibrateIntensity(enum class EGameplayVibrateCategory Category, enum class EGameplayVibrateIntensity Intensity); // Function Solarland.SolarVibrateManager.SetGameplayVibrateIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x1eddf10
	void SendLoopParam(int32_t Amplitude, int32_t Interval); // Function Solarland.SolarVibrateManager.SendLoopParam // (Final|Native|Public|BlueprintCallable) // @ game+0x1edddc0
	void PlayWeaponVibrate(int32_t InWeaponID, enum class EWeaponVibrateType InType, float InChargeTime); // Function Solarland.SolarVibrateManager.PlayWeaponVibrate // (Final|Native|Public) // @ game+0x1eddc10
	void Play(struct FString Name, int32_t Duration, int32_t Loop, int32_t Priority, int32_t Interval, int32_t Amplitude); // Function Solarland.SolarVibrateManager.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x1edda50
	bool GetVibrateAbilityEnable(); // Function Solarland.SolarVibrateManager.GetVibrateAbilityEnable // (Final|Native|Public|BlueprintCallable) // @ game+0x1edd730
};

// Class Solarland.SolarVirtualBulletAKComponent
// Size: 0x510 (Inherited: 0x500)
struct USolarVirtualBulletAKComponent : UAkComponent {
	char pad_500[0x10]; // 0x500(0x10)
};

// Class Solarland.SolarVirtualBulletCollector
// Size: 0x150 (Inherited: 0xb0)
struct USolarVirtualBulletCollector : UActorComponent {
	struct ASolarWeapon* CacheWeapon; // 0xb0(0x08)
	struct ASolarCharacterBase* CacheCharacter; // 0xb8(0x08)
	struct UWorld* CacheWorld; // 0xc0(0x08)
	struct TArray<struct FSolarVirtualBullet> Bullets; // 0xc8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInSimulated; // 0xd8(0x10)
	struct TArray<struct FSolarVirtualBullet> BulletsInDedicatedServer; // 0xe8(0x10)
	char pad_F8[0x50]; // 0xf8(0x50)
	struct ASolarBullet* EffectBulletCDO; // 0x148(0x08)
};

// Class Solarland.SolarWarmClockComponent
// Size: 0x110 (Inherited: 0xb0)
struct USolarWarmClockComponent : UActorComponent {
	float RingWarmClockTimeMin; // 0xb0(0x04)
	float RingWarmClockTimeMax; // 0xb4(0x04)
	int32_t MaxWarmBotNum; // 0xb8(0x04)
	float RangeCheckNearby; // 0xbc(0x04)
	int32_t NumLimitNearby; // 0xc0(0x04)
	float StartFirstDelay; // 0xc4(0x04)
	char pad_C8[0x10]; // 0xc8(0x10)
	struct TArray<struct USolarWarmTargetComponent*> WarmTargetCompList; // 0xd8(0x10)
	bool bEnableRecordMoveTrail; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float TrailSampleInterval; // 0xec(0x04)
	int32_t TrailSampleMaxCount; // 0xf0(0x04)
	char pad_F4[0x1c]; // 0xf4(0x1c)
};

// Class Solarland.SolarWarmGameComponent
// Size: 0xb0 (Inherited: 0xb0)
struct USolarWarmGameComponent : UActorComponent {

	bool IsWarmGame(); // Function Solarland.SolarWarmGameComponent.IsWarmGame // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void GetAIPickResult(struct TArray<int32_t>& InCharactetIDs, int32_t& OutCharacterID, int32_t& OutSkinId); // Function Solarland.SolarWarmGameComponent.GetAIPickResult // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWarmTargetComponent
// Size: 0xc0 (Inherited: 0xb0)
struct USolarWarmTargetComponent : UActorComponent {
	struct ASolarPlayerController* WarmPlayerController; // 0xb0(0x08)
	bool bEnableWarmClock; // 0xb8(0x01)
	bool bEnableWarmDrop; // 0xb9(0x01)
	bool bExcludeHasEnemyPlayer; // 0xba(0x01)
	bool bExcludeHasTeammatePlayer; // 0xbb(0x01)
	bool bExcludeHasEnemyBot; // 0xbc(0x01)
	bool bExcludeHasSpectator; // 0xbd(0x01)
	char pad_BE[0x2]; // 0xbe(0x02)
};

// Class Solarland.SolarWaterActorNew
// Size: 0x240 (Inherited: 0x238)
struct ASolarWaterActorNew : AStaticMeshActor {
	struct FSpawnedActorHandle CachedActorHandle; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)

	void OnExitWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SolarWaterActorNew.OnExitWaterSurface // (Final|Native|Protected) // @ game+0x1ee97f0
	void OnEnterWaterSurface(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SolarWaterActorNew.OnEnterWaterSurface // (Final|Native|Protected|HasOutParms) // @ game+0x1ee95e0
	float GetWaterLineHeight(); // Function Solarland.SolarWaterActorNew.GetWaterLineHeight // (Final|Native|Public|Const) // @ game+0x1ee8250
};

// Class Solarland.ParticleLoopListener
// Size: 0x40 (Inherited: 0x28)
struct UParticleLoopListener : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnParticleFinished(struct UParticleSystemComponent* PS); // Function Solarland.ParticleLoopListener.OnParticleFinished // (Final|Native|Public) // @ game+0x1ee9ba0
};

// Class Solarland.SolarWeaponAbilityBlackHole
// Size: 0x628 (Inherited: 0x398)
struct ASolarWeaponAbilityBlackHole : ASummonItemBase {
	char pad_398[0x8]; // 0x398(0x08)
	struct USphereComponent* CoreComponent; // 0x3a0(0x08)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FSolarBlackHoleTestActorInfo> TestActorMap; // 0x3a8(0x50)
	struct FName CoreTag; // 0x3f8(0x08)
	struct TArray<enum class EActorRegisterType> TestTypes; // 0x400(0x10)
	float TestRadius; // 0x410(0x04)
	float ForbidAttractiveDistance; // 0x414(0x04)
	float AttractiveSpeedWhenNoInput; // 0x418(0x04)
	float AttractiveSpeedFactorForCharacterInWater; // 0x41c(0x04)
	struct FRuntimeFloatCurve MaxAttractiveSpeedReduceCurve; // 0x420(0x88)
	struct FRuntimeFloatCurve AttractiveSpeedReduceAngleWeightCurve; // 0x4a8(0x88)
	struct FGameplayEffectSpecHandle ToSelfGameplayEffectHandle; // 0x530(0x10)
	struct FGameplayEffectSpecHandle ToTargetGameplayEffectHandle; // 0x540(0x10)
	struct TMap<enum class ESolarBlackHoleParticle, struct FSolarBlackHoleParticleInfo> ParticleInfoTable; // 0x550(0x50)
	char pad_5A0[0x10]; // 0x5a0(0x10)
	enum class ESolarBlackHoleState CurrentBlackHoleState; // 0x5b0(0x01)
	char pad_5B1[0xb]; // 0x5b1(0x0b)
	float BlackHoleReadyDuration; // 0x5bc(0x04)
	float BlackHoleActiveDuration; // 0x5c0(0x04)
	float BlackHoleEndDuration; // 0x5c4(0x04)
	struct TArray<struct USplineComponent*> CardSplineArray; // 0x5c8(0x10)
	char pad_5D8[0x8]; // 0x5d8(0x08)
	struct TArray<struct AActor*> CardArray; // 0x5e0(0x10)
	char pad_5F0[0x8]; // 0x5f0(0x08)
	struct FVector CardStartLocation; // 0x5f8(0x0c)
	char pad_604[0xc]; // 0x604(0x0c)
	float CardSpeed; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct AActor* CardClass; // 0x618(0x08)
	float DefaultCardPathLength; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)

	void OnTestActorEndPlay(struct AActor* InActor, enum class EEndPlayReason InEndPlayReason); // Function Solarland.SolarWeaponAbilityBlackHole.OnTestActorEndPlay // (Final|Native|Protected) // @ game+0x1ef10c0
};

// Class Solarland.SolarWeaponAbilityIncendiary
// Size: 0x400 (Inherited: 0x228)
struct ASolarWeaponAbilityIncendiary : AActor {
	struct TArray<enum class EActorRegisterType> CheckTypes; // 0x228(0x10)
	struct FVector2D Range; // 0x238(0x08)
	float DamageTimeInternal; // 0x240(0x04)
	float Damage; // 0x244(0x04)
	struct FVector FireDecalSize; // 0x248(0x0c)
	char pad_254[0x4]; // 0x254(0x04)
	struct TSoftObjectPtr<UParticleSystem> FireParticle; // 0x258(0x28)
	struct TSoftObjectPtr<UMaterialInterface> FireDecalMaterial; // 0x280(0x28)
	struct TSoftObjectPtr<UParticleSystem> BuffParticle; // 0x2a8(0x28)
	struct FRotator BuffRotator; // 0x2d0(0x0c)
	struct FName BuffAttachPointName; // 0x2dc(0x08)
	float DelayDestroyTime; // 0x2e4(0x04)
	int32_t FireEffectCountMax; // 0x2e8(0x04)
	float Lifetime; // 0x2ec(0x04)
	struct TArray<enum class EObjectTypeQuery> DetectableObjectTypes; // 0x2f0(0x10)
	struct FName FireDecalFadeOutName; // 0x300(0x08)
	float MinimumCheckHeight; // 0x308(0x04)
	float CharacterHeightOffset; // 0x30c(0x04)
	bool bTeammateDamage; // 0x310(0x01)
	bool bOnlyOne; // 0x311(0x01)
	char pad_312[0x6]; // 0x312(0x06)
	struct UUserWidget* FullEffectWidgetClass; // 0x318(0x08)
	struct TMap<struct AActor*, float> CheckedActors; // 0x320(0x50)
	struct TArray<struct UParticleSystemComponent*> FireParticleSystemComponents; // 0x370(0x10)
	struct UDecalComponent* FireDecalComponent; // 0x380(0x08)
	struct UAkComponent* AkComponent; // 0x388(0x08)
	bool bActive; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	int32_t CurrentFireEffectCount; // 0x394(0x04)
	char pad_398[0x8]; // 0x398(0x08)
	struct TMap<struct AActor*, struct UParticleSystemComponent*> BuffParticleSystemComponents; // 0x3a0(0x50)
	struct UMaterialInstanceDynamic* FireDecalDynamicMaterial; // 0x3f0(0x08)
	float FireDecalFadeOutTimer; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	void ReceviceDestroyEvent(); // Function Solarland.SolarWeaponAbilityIncendiary.ReceviceDestroyEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceviceDamageActorEvent(struct AActor* InActor); // Function Solarland.SolarWeaponAbilityIncendiary.ReceviceDamageActorEvent // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void PostSoundEvent(struct FString InSoundEvent, bool InbHasCamp, struct AActor* InTarget); // Function Solarland.SolarWeaponAbilityIncendiary.PostSoundEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ef1a40
	struct UObject* GetClassType(); // Function Solarland.SolarWeaponAbilityIncendiary.GetClassType // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x1eefaa0
};

// Class Solarland.SolarWeaponAbilityTemp
// Size: 0x320 (Inherited: 0x310)
struct ASolarWeaponAbilityTemp : ASolarAbility {
	struct UGameplayAbility* GameplayAbilityClass; // 0x308(0x08)
	struct FGameplayAbilitySpecHandle GameplayAbilitySpecHandle; // 0x310(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
};

// Class Solarland.SolarWeaponAT_TaskBase
// Size: 0xb0 (Inherited: 0x80)
struct USolarWeaponAT_TaskBase : USolarAbilityTask {
	struct FMulticastInlineDelegate OnTaskEnd; // 0x80(0x10)
	struct UGameplayAbility* OwnerAbility; // 0x90(0x08)
	struct ASolarCharacter* TaskCharacter; // 0x98(0x08)
	struct ASolarWeapon* TaskWeapon; // 0xa0(0x08)
	struct UWeaponSystemBase* TaskWeaponSysBase; // 0xa8(0x08)

	struct USolarWeaponAT_TaskBase* CreateTaskDynamically(struct USolarWeaponAT_TaskBase* RealClass, struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_TaskBase.CreateTaskDynamically // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1eef970
};

// Class Solarland.SolarWeaponAT_CtrlFireBase
// Size: 0xc0 (Inherited: 0xb0)
struct USolarWeaponAT_CtrlFireBase : USolarWeaponAT_TaskBase {
	struct FMulticastInlineDelegate OnDoFire; // 0xb0(0x10)
};

// Class Solarland.SolarWeaponAT_CtrlFireCharge
// Size: 0xc0 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireCharge : USolarWeaponAT_CtrlFireBase {
};

// Class Solarland.SolarWeaponAT_CtrlFireGatling
// Size: 0xc8 (Inherited: 0xc0)
struct USolarWeaponAT_CtrlFireGatling : USolarWeaponAT_CtrlFireBase {
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Solarland.SolarWeaponAT_FireBase
// Size: 0xe0 (Inherited: 0xb0)
struct USolarWeaponAT_FireBase : USolarWeaponAT_TaskBase {
	char pad_B0[0x18]; // 0xb0(0x18)
	struct UAmmoConfig* Ammo; // 0xc8(0x08)
	char pad_D0[0x10]; // 0xd0(0x10)

	void K2_RequireEndFireTask(); // Function Solarland.SolarWeaponAT_FireBase.K2_RequireEndFireTask // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void K2_RealFireTick(float DeltaTime); // Function Solarland.SolarWeaponAT_FireBase.K2_RealFireTick // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void K2_PrepareRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_PrepareRealFire // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void K2_ActivateRealFire(); // Function Solarland.SolarWeaponAT_FireBase.K2_ActivateRealFire // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponAT_FireBurst
// Size: 0x100 (Inherited: 0xe0)
struct USolarWeaponAT_FireBurst : USolarWeaponAT_FireBase {
	int32_t BurstMaxCount; // 0xe0(0x04)
	float BurstFireInterval; // 0xe4(0x04)
	float FireGroupInterval; // 0xe8(0x04)
	bool bAutoNextBurst; // 0xec(0x01)
	char pad_ED[0x13]; // 0xed(0x13)
};

// Class Solarland.WeaponFireLaserCollector
// Size: 0x240 (Inherited: 0xb0)
struct UWeaponFireLaserCollector : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarWeapon* OwnerWeapon; // 0xb8(0x08)
	struct UAkComponent* FireAkComponent; // 0xc0(0x08)
	struct UAkComponent* ImpactAkComponent; // 0xc8(0x08)
	struct FWeaponFireLaserElement ActElement; // 0xd0(0x48)
	struct TArray<struct FWeaponFireLaserElement> FadingElements; // 0x118(0x10)
	char pad_128[0x18]; // 0x128(0x18)
	struct UParticleSystem* ExplodeEffectParticle; // 0x140(0x08)
	struct UParticleSystem* DecalsEffectParticle; // 0x148(0x08)
	struct TArray<struct UParticleSystemComponent*> CacheParticles; // 0x150(0x10)
	char pad_160[0xe0]; // 0x160(0xe0)
};

// Class Solarland.SolarWeaponAT_FireLaser
// Size: 0x230 (Inherited: 0xe0)
struct USolarWeaponAT_FireLaser : USolarWeaponAT_FireBase {
	float LaserMaxTime; // 0xe0(0x04)
	int32_t DamageCount; // 0xe4(0x04)
	struct UGameplayEffect* VehicleBlockEffect; // 0xe8(0x08)
	struct UCurveFloat* LaserAttackCurve; // 0xf0(0x08)
	struct UParticleSystem* LaserEffectParticle; // 0xf8(0x08)
	struct UCurveFloat* LaserEffectCurve; // 0x100(0x08)
	struct UParticleSystem* ExplodeEffectParticle; // 0x108(0x08)
	struct FTransform ExplodeEffectTransform; // 0x110(0x30)
	struct UParticleSystem* DecalsEffectParticle; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct FTransform DecalEffectTransform; // 0x150(0x30)
	float UpdateExplodeInterval; // 0x180(0x04)
	float UpdateSimInterval; // 0x184(0x04)
	float LaserEffectFadeSpeed; // 0x188(0x04)
	float MaxFadingLifeTime; // 0x18c(0x04)
	float UIAnimLength; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct FString LaserFireSound; // 0x198(0x10)
	struct FString LaserStopSound; // 0x1a8(0x10)
	struct FString LaserBigSound; // 0x1b8(0x10)
	struct FString LaserImpactFireSound; // 0x1c8(0x10)
	struct FString LaserImpactStopSound; // 0x1d8(0x10)
	struct FString LaserImpactBigSound; // 0x1e8(0x10)
	bool bShowLaserDamageDebug; // 0x1f8(0x01)
	char pad_1F9[0x3]; // 0x1f9(0x03)
	struct FName BeamLifeTimeParamName; // 0x1fc(0x08)
	struct FName BeamSizeParamName; // 0x204(0x08)
	char pad_20C[0x24]; // 0x20c(0x24)

	struct USolarWeaponAT_FireLaser* CreateTask(struct UGameplayAbility* OwningAbility, struct FName TaskInstanceName, struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponAT_FireLaser.CreateTask // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1eef880
};

// Class Solarland.SolarWeaponAT_FireNormal
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireNormal : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireRocket
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireRocket : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireSingle
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSingle : USolarWeaponAT_FireBase {
	bool bAutoNextFire; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Solarland.SolarWeaponAT_FireSkill
// Size: 0xe0 (Inherited: 0xe0)
struct USolarWeaponAT_FireSkill : USolarWeaponAT_FireBase {
};

// Class Solarland.SolarWeaponAT_FireSummon
// Size: 0xe8 (Inherited: 0xe0)
struct USolarWeaponAT_FireSummon : USolarWeaponAT_FireBase {
	char pad_E0[0x8]; // 0xe0(0x08)
};

// Class Solarland.SolarWeaponAT_WaitStateForEvent
// Size: 0xb8 (Inherited: 0x80)
struct USolarWeaponAT_WaitStateForEvent : USolarAbilityTask {
	char pad_80[0x20]; // 0x80(0x20)
	struct ASolarWeapon* TaskWeapon; // 0xa0(0x08)
	char pad_A8[0x10]; // 0xa8(0x10)
};

// Class Solarland.SolarWeaponBattleWidgetMobile
// Size: 0x5f8 (Inherited: 0x340)
struct USolarWeaponBattleWidgetMobile : USolarUserWidget {
	struct TArray<struct UUserWidget*> WeaponSlotWidgets; // 0x340(0x10)
	struct TMap<struct FString, struct UWidget*> ExcelLayoutWidgetMap; // 0x350(0x50)
	struct TMap<int32_t, struct FString> CharacterStateMap; // 0x3a0(0x50)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActivedPlayerWeapon; // 0x3f0(0x08)
	int32_t SkillCDTimeTextLocalizationID; // 0x3f8(0x04)
	char pad_3FC[0x94]; // 0x3fc(0x94)
	struct UExpWidget* WP_Exp; // 0x490(0x08)
	struct USolarWeaponSkillWidget* FireActiveControl; // 0x498(0x08)
	struct USolarMovablePad* SecondaryFirePad; // 0x4a0(0x08)
	struct UImage* SecondaryFireIcon; // 0x4a8(0x08)
	struct UWidgetSwitcher* WGS_Fire_Left; // 0x4b0(0x08)
	struct UButton* BT_Weapon_Exit; // 0x4b8(0x08)
	struct UButton* Btn_RoleAbility_Cancel; // 0x4c0(0x08)
	struct UButton* BT_Fire_Left; // 0x4c8(0x08)
	struct UButton* BT_AutoScopeFire_Left; // 0x4d0(0x08)
	struct UButton* BT_Cancel_Left; // 0x4d8(0x08)
	struct UButton* BT_Cancel_Right; // 0x4e0(0x08)
	struct UButton* BT_Cancel_QuickAds; // 0x4e8(0x08)
	struct UButton* BT_Reload_2; // 0x4f0(0x08)
	struct USolarMovablePad* GunsightPad; // 0x4f8(0x08)
	struct UCheckBox* GunsightImageCheckBox; // 0x500(0x08)
	struct UCanvasPanel* Panel_Fire_Right; // 0x508(0x08)
	struct UCanvasPanel* Panel_QuickADS; // 0x510(0x08)
	struct UWidgetSwitcher* WGS_QuickAds; // 0x518(0x08)
	struct UWidgetSwitcher* WGS_Fire_Right; // 0x520(0x08)
	struct USolarMovablePad* QuickAdsFirePad; // 0x528(0x08)
	struct UCanvasPanel* Panel_Fire; // 0x530(0x08)
	struct UCanvasPanel* Panel_Reload; // 0x538(0x08)
	struct UCanvasPanel* Panel_Gunsight; // 0x540(0x08)
	struct UCanvasPanel* Panel_Weapon_2; // 0x548(0x08)
	struct UCanvasPanel* Panel_Weapon_3; // 0x550(0x08)
	struct UCanvasPanel* Panel_SuperSkill; // 0x558(0x08)
	struct UCanvasPanel* Panel_TacticalSkill; // 0x560(0x08)
	struct UImage* FireIconRight; // 0x568(0x08)
	struct UImage* FireIconLeft; // 0x570(0x08)
	struct USolarMovablePad* FirePadRight; // 0x578(0x08)
	struct USolarMovablePad* AutoScopeFirePadRight; // 0x580(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot0; // 0x588(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot1; // 0x590(0x08)
	struct USolarWeaponSlotWidgetMobile* WP_Slot2; // 0x598(0x08)
	struct UWidgetAnimation* Enter_Anim; // 0x5a0(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x5a8(0x08)
	struct UCanvasPanel* Weapon_UI; // 0x5b0(0x08)
	struct USolarTextBlock* Txt_NextLvDMG; // 0x5b8(0x08)
	struct UCanvasPanel* Panel_NextLv_Content; // 0x5c0(0x08)
	char pad_5C8[0x8]; // 0x5c8(0x08)
	struct USolarAdapterWidget* Panel_Weapon_1_KeyMapping; // 0x5d0(0x08)
	struct USolarAdapterWidget* Panel_Weapon_2_KeyMapping; // 0x5d8(0x08)
	struct USolarAdapterWidget* Panel_Weapon_3_KeyMapping; // 0x5e0(0x08)
	struct TArray<struct USolarAdapterWidget*> WeaponKeyMappingArray; // 0x5e8(0x10)

	void SetWidgetVisiblityByCharacterState(int32_t InCharacterState); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByCharacterState // (Final|Native|Public) // @ game+0x1ef1c70
	void SetWidgetVisiblityByActionID(int32_t InActionID, bool InbVisible); // Function Solarland.SolarWeaponBattleWidgetMobile.SetWidgetVisiblityByActionID // (Final|Native|Public) // @ game+0x1ef1bb0
	void OnWeaponUpgrade(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x1ef19c0
	void OnWeaponSlotUpdateParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateParts // (Final|Native|Protected) // @ game+0x1ef1940
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x1ef18c0
	void OnWeaponSlotToggleOverload(int32_t InWeaponSlotID, bool InbEnter); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotToggleOverload // (Final|Native|Protected) // @ game+0x1ef1800
	void OnWeaponSlotSetSkillPoint(int32_t InWeaponSlotID, bool InbCDFinished, int32_t InSkillPoint); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotSetSkillPoint // (Final|Native|Protected) // @ game+0x1ef1700
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x1ef1640
	void OnWeaponSlotInsufficientAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotInsufficientAmmo // (Final|Native|Protected) // @ game+0x1ef15c0
	void OnWeaponSlotEquip(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEquip // (Final|Native|Protected) // @ game+0x1ef1500
	void OnWeaponSlotEnterSkillCD(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotEnterSkillCD // (Final|Native|Protected) // @ game+0x1ef1480
	void OnWeaponSlotAddEXP(int32_t InWeaponSlotID, int32_t InExp); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotAddEXP // (Final|Native|Protected) // @ game+0x1ef13c0
	void OnWeaponSlotActive(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSlotActive // (Final|Native|Protected) // @ game+0x1ef1300
	void OnWeaponSetAutoScopeFireButtonIcon(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponSetAutoScopeFireButtonIcon // (Final|Native|Protected) // @ game+0x1ef12e0
	void OnWeaponRefreshFireButtonState(struct UWeaponSystemPlayerBase* WeaponSys, bool bInForceRefresh); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponRefreshFireButtonState // (Final|Native|Protected) // @ game+0x1ef1210
	void OnWeaponChangeAimIconState(bool bInOpenScope); // Function Solarland.SolarWeaponBattleWidgetMobile.OnWeaponChangeAimIconState // (Final|Native|Protected) // @ game+0x1ef1180
	void OnSwitchEMP(struct ASolarCharacter* InCharacter, bool InbSwitchOnEMP); // Function Solarland.SolarWeaponBattleWidgetMobile.OnSwitchEMP // (Final|Native|Protected) // @ game+0x1ef0ff0
	void OnRoleAbilityHideHUD(bool bHide); // Function Solarland.SolarWeaponBattleWidgetMobile.OnRoleAbilityHideHUD // (Final|Native|Protected) // @ game+0x1ef0f60
	void OnReleasedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedSkillCancelButton // (Final|Native|Protected) // @ game+0x1ef0f40
	void OnReleasedSkillButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedSkillButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef0da0
	void OnReleasedRighrFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedRighrFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef0c00
	void OnReleasedReloadeButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedReloadeButton // (Final|Native|Protected) // @ game+0x1ef0be0
	void OnReleasedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef0a40
	void OnReleasedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedLeftFireButton // (Final|Native|Protected) // @ game+0x1ef0a20
	void OnReleasedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelRightButton // (Final|Native|Protected) // @ game+0x1ef0a00
	void OnReleasedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x1ef09e0
	void OnReleasedAllFireButtons(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnReleasedAllFireButtons // (Final|Native|Protected) // @ game+0x1ef09c0
	void OnPressedSkillCancelButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedSkillCancelButton // (Final|Native|Protected) // @ game+0x1ef09a0
	void OnPressedSkillButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedSkillButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef0800
	void OnPressedRightFireButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedRightFireButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef0660
	void OnPressedReloadButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedReloadButton // (Final|Native|Protected) // @ game+0x1ef0640
	void OnPressedQuickAdsButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedQuickAdsButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef04a0
	void OnPressedLeftFireButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedLeftFireButton // (Final|Native|Protected) // @ game+0x1ef0480
	void OnPressedGunSightButton(struct FGeometry& InGeometry, struct FPointerEvent& InPointerEvent); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedGunSightButton // (Final|Native|Protected|HasOutParms) // @ game+0x1ef02e0
	void OnPressedCancelRightButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelRightButton // (Final|Native|Protected) // @ game+0x1ef02c0
	void OnPressedCancelQuickAdsButton(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnPressedCancelQuickAdsButton // (Final|Native|Protected) // @ game+0x1ef02a0
	void OnExitSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnExitSpectateMode // (Final|Native|Protected) // @ game+0x1c82d20
	void OnEnterSpectateMode(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterSpectateMode // (Final|Native|Protected) // @ game+0x1c3c770
	void OnEnterParachuting(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterParachuting // (Final|Native|Protected) // @ game+0x1ef0280
	void OnEnterCruising(); // Function Solarland.SolarWeaponBattleWidgetMobile.OnEnterCruising // (Final|Native|Protected) // @ game+0x1ef0260
	void OnChangeSkydiveFlyState(bool InbFly); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeSkydiveFlyState // (Final|Native|Protected) // @ game+0x1ef01d0
	void OnChangeDriveState(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeDriveState // (Final|Native|Protected) // @ game+0x1ef0150
	void OnChangeCharacterSwimState(bool InbSwmming); // Function Solarland.SolarWeaponBattleWidgetMobile.OnChangeCharacterSwimState // (Final|Native|Protected) // @ game+0x1ef00c0
	bool IsAutoFire(); // Function Solarland.SolarWeaponBattleWidgetMobile.IsAutoFire // (Final|Native|Protected|Const) // @ game+0x1ef0090
	struct TArray<struct UUserWidget*> GetWeaponWidgets(); // Function Solarland.SolarWeaponBattleWidgetMobile.GetWeaponWidgets // (Native|Event|Protected|BlueprintEvent) // @ game+0x1ef0010
	bool GetSkillPointData(struct AActor* InWeapon, bool& OutbCD, int32_t& OutSkillPoint, int32_t& OutSkillMaxPoint); // Function Solarland.SolarWeaponBattleWidgetMobile.GetSkillPointData // (Final|Native|Protected|HasOutParms) // @ game+0x1eefe70
	bool GetSkillButtonBrush(struct AActor* InWeapon, struct FSlateBrush& OutBrush); // Function Solarland.SolarWeaponBattleWidgetMobile.GetSkillButtonBrush // (Final|Native|Protected|HasOutParms) // @ game+0x1eefca0
	bool GetFireButtonBrush(struct AActor* InWeapon, struct FSlateBrush& OutBrush); // Function Solarland.SolarWeaponBattleWidgetMobile.GetFireButtonBrush // (Final|Native|Protected|HasOutParms) // @ game+0x1eefad0
};

// Class Solarland.SolarWeaponBattleWidgetPC
// Size: 0x448 (Inherited: 0x340)
struct USolarWeaponBattleWidgetPC : USolarUserWidget {
	struct UImage* SecondaryFireIcon; // 0x340(0x08)
	struct UUserWidget* UI_Component_Keyboard; // 0x348(0x08)
	struct UWidgetActiveControl* FireActiveControl; // 0x350(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot0; // 0x358(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot1; // 0x360(0x08)
	struct USolarWeaponSlotWidgetPC* WP_Slot2; // 0x368(0x08)
	struct UHorizontalBox* Tips_Reload; // 0x370(0x08)
	struct USolarTextBlock* SolarTextBlock_2; // 0x378(0x08)
	float DisplayReloadTipAmmoRate; // 0x380(0x04)
	float DisplayReloadTipDuration; // 0x384(0x04)
	struct FSlateColor CanReloadTipColor; // 0x388(0x28)
	struct FSlateColor CannotReloadTipColor; // 0x3b0(0x28)
	char pad_3D8[0x40]; // 0x3d8(0x40)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> CurrentActiveWeapon; // 0x418(0x08)
	struct TArray<struct USolarWeaponSlotWidgetPC*> WeaponSlotWidgets; // 0x420(0x10)
	bool bCanDisplayReloadTip; // 0x430(0x01)
	char pad_431[0x7]; // 0x431(0x07)
	struct FTimerHandle ReloadTipTimerHandle; // 0x438(0x08)
	struct FTimerHandle UpdateWeaponSkillCDTimerHandle; // 0x440(0x08)

	void OnUpdateWeaponParts(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateWeaponParts // (Final|Native|Private) // @ game+0x1ef4c50
	void OnUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x1ef4bd0
	void OnSetSkillPoint(int32_t InWeaponSlotID, bool InbSkillCDEnd, int32_t InSkillPoint); // Function Solarland.SolarWeaponBattleWidgetPC.OnSetSkillPoint // (Final|Native|Private) // @ game+0x1ef4ad0
	void OnQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.SolarWeaponBattleWidgetPC.OnQuitReload // (Final|Native|Private) // @ game+0x1ef4a10
	void OnEquipWeapon(int32_t InWeaponSlotID, struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnEquipWeapon // (Final|Native|Private) // @ game+0x1ef4950
	void OnEnterSkillCD(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnEnterSkillCD // (Final|Native|Private) // @ game+0x1ef48d0
	void OnEnterReload(int32_t InWeaponSlotID); // Function Solarland.SolarWeaponBattleWidgetPC.OnEnterReload // (Final|Native|Private) // @ game+0x1ef4850
	void OnDrivingStateChanged(enum class EDriveState InDriveState); // Function Solarland.SolarWeaponBattleWidgetPC.OnDrivingStateChanged // (Final|Native|Private) // @ game+0x1ef47d0
	void OnActiveWeapon(int32_t InWeaponSlotID, struct AActor* InActiveWeapon); // Function Solarland.SolarWeaponBattleWidgetPC.OnActiveWeapon // (Final|Native|Private) // @ game+0x1ef46d0
};

// Class Solarland.SolarWeaponCrosshairPanelWidget
// Size: 0x430 (Inherited: 0x340)
struct USolarWeaponCrosshairPanelWidget : USolarUserWidget {
	struct UUserWidget* HUD_Reload; // 0x340(0x08)
	struct UImage* HUD_Forbid; // 0x348(0x08)
	struct UWidgetSwitcher* HUD_Overload; // 0x350(0x08)
	struct UUserWidget* HUD_ChargeProgress; // 0x358(0x08)
	struct UFeedbackWidget* HUD_Feedback; // 0x360(0x08)
	struct UCanvasPanel* Panel_CrosshairSlot; // 0x368(0x08)
	struct UCanvasPanel* Panel_BulletContainerSlot; // 0x370(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_NoAmmoAlert; // 0x378(0x08)
	struct USolarWeaponNoAmmoAlertWidget* HUD_RechamberHint; // 0x380(0x08)
	struct TMap<struct UUserWidget*, struct UUserWidget*> CrosshairWidgetPool; // 0x388(0x50)
	struct FSolarWeaponCrosshairData CurrentWeaponCrosshairData; // 0x3d8(0x38)
	struct UCrossHairWidget* ActiveCrosshair; // 0x410(0x08)
	struct USolarWeaponBulletContainerWidget* ActiveBulletContainer; // 0x418(0x08)
	struct USolarWeaponRechamberWidget* ActiveRechamberWidget; // 0x420(0x08)
	enum class ECrossHairState CurrentCrosshairState; // 0x428(0x01)
	enum class ECrossHairState LastCrosshairState; // 0x429(0x01)
	char pad_42A[0x6]; // 0x42a(0x06)

	void RemoveWeaponWidget(struct UUserWidget* CrosshairWidgetToRemove, bool bInRemainCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveWeaponWidget // (Final|Native|Public) // @ game+0x1ef4d60
	void RemoveActiveWeaponWidget(bool bRemianCache); // Function Solarland.SolarWeaponCrosshairPanelWidget.RemoveActiveWeaponWidget // (Final|Native|Public) // @ game+0x1ef4cd0
	void ClearAllWeaponWidget(); // Function Solarland.SolarWeaponCrosshairPanelWidget.ClearAllWeaponWidget // (Final|Native|Public) // @ game+0x1ef45c0
	struct UUserWidget* AddWeaponRechamberWidgetToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponRechamberWidgetToPanel // (Final|Native|Public) // @ game+0x1ef4530
	struct UUserWidget* AddWeaponCrosshairToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairToPanel // (Final|Native|Public) // @ game+0x1ef44a0
	void AddWeaponCrosshairAndBulletContainer(struct FSolarWeaponCrosshairData& InWeaponCrosshairData); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponCrosshairAndBulletContainer // (Final|Native|Public|HasOutParms) // @ game+0x1ef43b0
	struct UUserWidget* AddWeaponBulletContainerToPanel(struct UUserWidget* InWidgetClass); // Function Solarland.SolarWeaponCrosshairPanelWidget.AddWeaponBulletContainerToPanel // (Final|Native|Public) // @ game+0x1ef4320
};

// Class Solarland.SolarWeaponFireInputResolver
// Size: 0x88 (Inherited: 0x28)
struct USolarWeaponFireInputResolver : UObject {
	char pad_28[0x60]; // 0x28(0x60)

	enum class ESolarWeaponFireInputButtonState GetRightFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetRightFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef46b0
	enum class ESolarWeaponFireInputButtonState GetQuickAdsButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetQuickAdsButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef4690
	enum class ESolarWeaponFireInputButtonState GetLeftFireButtonState(); // Function Solarland.SolarWeaponFireInputResolver.GetLeftFireButtonState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef4670
};

// Class Solarland.SolarWeaponState
// Size: 0x40 (Inherited: 0x28)
struct USolarWeaponState : UObject {
	struct USolarWeaponState* NextState; // 0x28(0x08)
	bool bRunning; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct USolarWeaponStateMachine* OwnerStateMachine; // 0x38(0x08)

	void UpdateState(float DeltaTime); // Function Solarland.SolarWeaponState.UpdateState // (Native|Public|BlueprintCallable) // @ game+0x1efe690
	bool IsRunning(); // Function Solarland.SolarWeaponState.IsRunning // (Final|Native|Public|BlueprintCallable) // @ game+0x1efdb10
	void GotoNext(); // Function Solarland.SolarWeaponState.GotoNext // (Native|Protected|BlueprintCallable) // @ game+0x79f570
	void EnterState(struct USolarWeaponState* InPrevState); // Function Solarland.SolarWeaponState.EnterState // (Native|Public|BlueprintCallable) // @ game+0x1efd870
	void EndState(struct USolarWeaponState* InNextState); // Function Solarland.SolarWeaponState.EndState // (Native|Public|BlueprintCallable) // @ game+0x1efd7e0
};

// Class Solarland.SolarWeaponStateBP
// Size: 0x40 (Inherited: 0x40)
struct USolarWeaponStateBP : USolarWeaponState {

	void OnUpdateState(float DeltaTime); // Function Solarland.SolarWeaponStateBP.OnUpdateState // (Native|Event|Protected|BlueprintEvent) // @ game+0x1efddf0
	void OnInitilize(struct USolarWeaponStateMachine* MyStateMachine); // Function Solarland.SolarWeaponStateBP.OnInitilize // (Native|Event|Protected|BlueprintEvent) // @ game+0xb5b310
	void OnEnterState(struct USolarWeaponState* InPrevState); // Function Solarland.SolarWeaponStateBP.OnEnterState // (Native|Event|Protected|BlueprintEvent) // @ game+0xb5b280
	void OnEndState(struct USolarWeaponState* InNextState); // Function Solarland.SolarWeaponStateBP.OnEndState // (Native|Event|Protected|BlueprintEvent) // @ game+0xb5b3a0
};

// Class Solarland.SolarWeaponFireState
// Size: 0x50 (Inherited: 0x40)
struct USolarWeaponFireState : USolarWeaponStateBP {
	char pad_40[0x8]; // 0x40(0x08)
	struct TWeakObjectPtr<struct ASolarWeapon> OwnerWeapon; // 0x48(0x08)
};

// Class Solarland.SolarWeaponFireStateBolt
// Size: 0x58 (Inherited: 0x50)
struct USolarWeaponFireStateBolt : USolarWeaponFireState {
	char pad_50[0x8]; // 0x50(0x08)

	float GetElapsedTime(); // Function Solarland.SolarWeaponFireStateBolt.GetElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x846ee0
};

// Class Solarland.SolarWeaponFireStateBurst
// Size: 0x50 (Inherited: 0x50)
struct USolarWeaponFireStateBurst : USolarWeaponFireState {
};

// Class Solarland.SolarWeaponFireStateFire
// Size: 0x58 (Inherited: 0x50)
struct USolarWeaponFireStateFire : USolarWeaponFireState {
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Solarland.SolarWeaponFireStateGatlingRoll
// Size: 0x58 (Inherited: 0x50)
struct USolarWeaponFireStateGatlingRoll : USolarWeaponFireState {
	char pad_50[0x8]; // 0x50(0x08)

	void OnBeginIncrease(); // Function Solarland.SolarWeaponFireStateGatlingRoll.OnBeginIncrease // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef47b0
	void OnBeginDecrease(); // Function Solarland.SolarWeaponFireStateGatlingRoll.OnBeginDecrease // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef4790
	float GetGatlingRollSpeedInterp(); // Function Solarland.SolarWeaponFireStateGatlingRoll.GetGatlingRollSpeedInterp // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef4640
	float GetGatlingRollSpeed(); // Function Solarland.SolarWeaponFireStateGatlingRoll.GetGatlingRollSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef4610
	float GetGatlingHoldTime(); // Function Solarland.SolarWeaponFireStateGatlingRoll.GetGatlingHoldTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef45e0
};

// Class Solarland.SolarWeaponFireStateIdle
// Size: 0x58 (Inherited: 0x50)
struct USolarWeaponFireStateIdle : USolarWeaponFireState {
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Solarland.SolarWeaponStateMachine
// Size: 0xf0 (Inherited: 0x28)
struct USolarWeaponStateMachine : UObject {
	char pad_28[0x38]; // 0x28(0x38)
	struct USolarWeaponState* CurrentState; // 0x60(0x08)
	struct USolarWeaponState* StartStateSubClass; // 0x68(0x08)
	struct USolarWeaponState* CurStateSubClass; // 0x70(0x08)
	struct TArray<struct FWeaponStateFlowItem> FlowData; // 0x78(0x10)
	struct TMap<struct USolarWeaponState*, struct USolarWeaponState*> StateMap; // 0x88(0x50)
	struct TArray<struct FWeaponStateMapItem> StateFlowMap; // 0xd8(0x10)
	bool bRunning; // 0xe8(0x01)
	bool bPause; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)

	void Update(float DeltaTime); // Function Solarland.SolarWeaponStateMachine.Update // (Native|Public|BlueprintCallable) // @ game+0x1efe690
	void Start(); // Function Solarland.SolarWeaponStateMachine.Start // (Native|Public|BlueprintCallable) // @ game+0x1efe670
	void Resume(); // Function Solarland.SolarWeaponStateMachine.Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x1efe270
	void Reset(bool bAutoStart); // Function Solarland.SolarWeaponStateMachine.Reset // (Native|Public|BlueprintCallable) // @ game+0x1efe1e0
	void Pause(); // Function Solarland.SolarWeaponStateMachine.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x1efe1c0
	void LogStartMsg(struct USolarWeaponState* State); // Function Solarland.SolarWeaponStateMachine.LogStartMsg // (Final|Native|Private) // @ game+0x8e33f0
	void LogEndMsg(struct USolarWeaponState* Last); // Function Solarland.SolarWeaponStateMachine.LogEndMsg // (Final|Native|Private) // @ game+0x8e33f0
	void LogChangeMsg(struct USolarWeaponState* From, struct USolarWeaponState* To); // Function Solarland.SolarWeaponStateMachine.LogChangeMsg // (Final|Native|Private) // @ game+0x1efdb70
	bool IsRunning(); // Function Solarland.SolarWeaponStateMachine.IsRunning // (Final|Native|Public|Const) // @ game+0x1efdb30
	bool IsPause(); // Function Solarland.SolarWeaponStateMachine.IsPause // (Final|Native|Public|BlueprintCallable) // @ game+0x1efdaf0
	void GotoState(struct USolarWeaponState*& InWeaponState); // Function Solarland.SolarWeaponStateMachine.GotoState // (Final|Native|Public|HasOutParms) // @ game+0x1efda60
	void GotoNext(); // Function Solarland.SolarWeaponStateMachine.GotoNext // (Native|Public|BlueprintCallable) // @ game+0x1efda40
	struct USolarWeaponState* GetStateInstance(struct USolarWeaponState*& StateSubClass); // Function Solarland.SolarWeaponStateMachine.GetStateInstance // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1efd9a0
	bool GetNextState(struct USolarWeaponState*& Next); // Function Solarland.SolarWeaponStateMachine.GetNextState // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1efd900
	bool CheckCurStateToNextState(struct FWeaponStateFlowItem& StateFlowItem); // Function Solarland.SolarWeaponStateMachine.CheckCurStateToNextState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1efd6a0
	bool CheckConditionNative(struct FName& ConditionFunc); // Function Solarland.SolarWeaponStateMachine.CheckConditionNative // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x1efd5f0
};

// Class Solarland.SolarWeaponFireStateMachine
// Size: 0x100 (Inherited: 0xf0)
struct USolarWeaponFireStateMachine : USolarWeaponStateMachine {
	bool bTryGotoOverloading; // 0xf0(0x01)
	bool bTryGotoIdle; // 0xf1(0x01)
	bool bTryGotoBurst; // 0xf2(0x01)
	bool bTryGotoFiring; // 0xf3(0x01)
	bool bTryGotoReload; // 0xf4(0x01)
	bool bTryGotoBolt; // 0xf5(0x01)
	bool bTryGotoGatlingRoll; // 0xf6(0x01)
	char pad_F7[0x9]; // 0xf7(0x09)

	bool ToReload(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToReload // (Native|Event|Public|BlueprintEvent) // @ game+0x1efa510
	bool ToOverloading(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToOverloading // (Native|Event|Public|BlueprintEvent) // @ game+0x1efa470
	bool ToIdle(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToIdle // (Native|Event|Public|BlueprintEvent) // @ game+0x1efa3d0
	bool ToGatlingRoll(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToGatlingRoll // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef96c0
	bool ToFiring(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToFiring // (Native|Event|Public|BlueprintEvent) // @ game+0x1efa330
	bool ToBurst(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToBurst // (Native|Event|Public|BlueprintEvent) // @ game+0x1efa290
	bool ToBolt(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponFireStateMachine.ToBolt // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef9760
};

// Class Solarland.SolarWeaponFireStateOverload
// Size: 0x50 (Inherited: 0x50)
struct USolarWeaponFireStateOverload : USolarWeaponFireState {
};

// Class Solarland.SolarWeaponFireStateReload
// Size: 0x58 (Inherited: 0x50)
struct USolarWeaponFireStateReload : USolarWeaponFireState {
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Solarland.SolarWeaponGA_Rocket
// Size: 0x4a8 (Inherited: 0x460)
struct USolarWeaponGA_Rocket : USolarCharacterGameplayAbility {
	struct FGameplayTag CueTag; // 0x460(0x08)
	float Lifetime; // 0x468(0x04)
	char pad_46C[0x4]; // 0x46c(0x04)
	struct FTimerHandle LifeTimeEndTimerHandle; // 0x470(0x08)
	enum class ESkillAnimType SkillAnimType; // 0x478(0x01)
	char pad_479[0x3]; // 0x479(0x03)
	float DelayEndAbilityTime; // 0x47c(0x04)
	struct UUserWidget* InCrossHairClass; // 0x480(0x08)
	struct ASolarBurstRocketBullet* BurstBulletClass; // 0x488(0x08)
	struct ASolarBurstRocketBullet* CacheBurstBullet; // 0x490(0x08)
	char pad_498[0x8]; // 0x498(0x08)
	struct UCrossHairWidget* CrossHairWidget; // 0x4a0(0x08)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGA_Rocket.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ef9e90
	void OnStartRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnStartRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnEndRocketAbility(struct ASolarCharacter* Character); // Function Solarland.SolarWeaponGA_Rocket.OnEndRocketAbility // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponGameplayAbility
// Size: 0x428 (Inherited: 0x418)
struct USolarWeaponGameplayAbility : USolarGameplayAbility {
	struct FGameplayTag CueTag; // 0x418(0x08)
	float Lifetime; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)

	void SetLifeTime(float InLifeTime); // Function Solarland.SolarWeaponGameplayAbility.SetLifeTime // (Final|Native|Public|BlueprintCallable) // @ game+0x1ef9f10
};

// Class Solarland.SolarWeaponInternalSetting
// Size: 0xe0 (Inherited: 0x38)
struct USolarWeaponInternalSetting : UDeveloperSettings {
	struct FSoftObjectPath GlobalWeaponConfig; // 0x38(0x18)
	struct FSoftObjectPath ThermalImageryMat; // 0x50(0x18)
	struct FSoftObjectPath WeaponPartUpgradeMat; // 0x68(0x18)
	struct FSoftObjectPath UnArmWeaponClassPath; // 0x80(0x18)
	struct FSoftObjectPath WeaponDataTable; // 0x98(0x18)
	struct FSoftObjectPath WeaponAppearanceDataTable; // 0xb0(0x18)
	struct FSoftObjectPath DefaultProjectileSplineClassPath; // 0xc8(0x18)
};

// Class Solarland.SolarWeaponMergeMeshManager
// Size: 0x38 (Inherited: 0x28)
struct USolarWeaponMergeMeshManager : UObject {
	struct TArray<struct FWeaponMergeMeshStruct> MergeMeshArray; // 0x28(0x10)
};

// Class Solarland.SolarWeaponNoAmmoAlertWidget
// Size: 0x390 (Inherited: 0x340)
struct USolarWeaponNoAmmoAlertWidget : USolarUserWidget {
	struct TMap<enum class EWeaponType, struct FSolarNoAmmoAlertWidgetLayout> NoAmmoAlertLayout; // 0x340(0x50)

	struct UWidgetAnimation* K2_GetAlertAnim(); // Function Solarland.SolarWeaponNoAmmoAlertWidget.K2_GetAlertAnim // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponPartEffectTipWidget
// Size: 0x380 (Inherited: 0x340)
struct USolarWeaponPartEffectTipWidget : USolarUserWidget {
	struct UWidgetAnimation* Anim_Bubble_UP; // 0x340(0x08)
	struct UWidgetAnimation* Anim_Bubble_Down; // 0x348(0x08)
	struct UWidgetAnimation* Anim_Exit_UP; // 0x350(0x08)
	struct UWidgetAnimation* Anim_Exit_Down; // 0x358(0x08)
	struct USolarTextBlock* Txt_Effect; // 0x360(0x08)
	struct USolarTextBlock* Txt_Percent; // 0x368(0x08)
	bool bTipToUp; // 0x370(0x01)
	char pad_371[0x3]; // 0x371(0x03)
	float TipDuration; // 0x374(0x04)
	float TipTimer; // 0x378(0x04)
	bool bContinueShowTip; // 0x37c(0x01)
	bool bPlayExitAnimation; // 0x37d(0x01)
	char pad_37E[0x2]; // 0x37e(0x02)

	void ChangeTipDirection(bool InbToUp); // Function Solarland.SolarWeaponPartEffectTipWidget.ChangeTipDirection // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponPenertrableInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarWeaponPenertrableInterface : UInterface {

	void ReceiveHitResult(struct FHitResult& InHitResult); // Function Solarland.SolarWeaponPenertrableInterface.ReceiveHitResult // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x1ef9c80
};

// Class Solarland.SolarWeaponProjectileSpline
// Size: 0x268 (Inherited: 0x228)
struct ASolarWeaponProjectileSpline : AActor {
	struct USplineComponent* Spline; // 0x228(0x08)
	char pad_230[0x4]; // 0x230(0x04)
	struct TWeakObjectPtr<struct USolarSummonPreviewComponent> PreviewComponent; // 0x234(0x08)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct USplineMeshComponent* SplineMeshComponentCache; // 0x240(0x08)
	struct UStaticMeshComponent* PreviewedStaticMesh; // 0x248(0x08)
	struct USkeletalMeshComponent* PreviewedSkeletalMesh; // 0x250(0x08)
	struct UStaticMeshComponent* PreviewedRangeMesh; // 0x258(0x08)
	struct USceneComponent* PreviewRoot; // 0x260(0x08)

	void ShowHitPointAt(struct FVector& Loc); // Function Solarland.SolarWeaponProjectileSpline.ShowHitPointAt // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x224bbb0
	void SetPreviewTransform(struct FVector& PreviewLoc, struct FVector& PreviewUpDir, struct FVector& PreviewScale); // Function Solarland.SolarWeaponProjectileSpline.SetPreviewTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1efa020
	void SetPoints(struct TArray<struct FVector>& Points); // Function Solarland.SolarWeaponProjectileSpline.SetPoints // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void SetNeedUpdateDisplayThrowTrajectory(bool Value); // Function Solarland.SolarWeaponProjectileSpline.SetNeedUpdateDisplayThrowTrajectory // (Final|Native|Public|BlueprintCallable) // @ game+0x1ef9f90
	bool RequestDisplayPreview(struct USolarSummonDetectionComponent* InSummonDetectionComponent, struct FVector& InSummonLocation, struct FVector& InSummonNormal); // Function Solarland.SolarWeaponProjectileSpline.RequestDisplayPreview // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x1ef9d60
	void HideHitPoint(); // Function Solarland.SolarWeaponProjectileSpline.HideHitPoint // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void HideAllSummonPreview(); // Function Solarland.SolarWeaponProjectileSpline.HideAllSummonPreview // (Native|Event|Public|BlueprintEvent) // @ game+0x1257f30
	void Hide(); // Function Solarland.SolarWeaponProjectileSpline.Hide // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USplineMeshComponent* GetSplineMeshComponent(); // Function Solarland.SolarWeaponProjectileSpline.GetSplineMeshComponent // (Event|Protected|BlueprintEvent|Const) // @ game+0x224bbb0
	void DrawSplineMesh(struct TArray<struct FVector>& InPredictPoints); // Function Solarland.SolarWeaponProjectileSpline.DrawSplineMesh // (Final|Native|Public|HasOutParms) // @ game+0x1ef8f60
	void ChangeSummonPreviewAttachParent(); // Function Solarland.SolarWeaponProjectileSpline.ChangeSummonPreviewAttachParent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponPropertySlotWidget
// Size: 0x3b0 (Inherited: 0x340)
struct USolarWeaponPropertySlotWidget : USolarUserWidget {
	struct TArray<struct UWidget*> LockWidgetsCache; // 0x340(0x10)
	struct UImage* PropertyIconBackgroundCache; // 0x350(0x08)
	struct UImage* PropertyIconBorderCache; // 0x358(0x08)
	struct UImage* PropertyIconCache; // 0x360(0x08)
	struct FSoftObjectPath PropertyEmptyIconPath; // 0x368(0x18)
	struct FLinearColor PropertyIconBorderInvalidColor; // 0x380(0x10)
	struct FLinearColor PropertyIconBackgroundInvalidColor; // 0x390(0x10)
	struct FLinearColor PropertyIconBackgroundValidColor; // 0x3a0(0x10)

	void UpdatePropertySlot(struct FUpgradeSlotStruct& InSlotData); // Function Solarland.SolarWeaponPropertySlotWidget.UpdatePropertySlot // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1efa5b0
	struct UImage* GetPropertyIconCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ef93a0
	struct UImage* GetPropertyIconBorderCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorderCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ef9370
	struct UImage* GetPropertyIconBorder(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBorder // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UImage* GetPropertyIconBackgroundCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackgroundCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ef9340
	struct UImage* GetPropertyIconBackground(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIconBackground // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UImage* GetPropertyIcon(); // Function Solarland.SolarWeaponPropertySlotWidget.GetPropertyIcon // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct TArray<struct UWidget*> GetLockWidgetsCache(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgetsCache // (Final|Native|Protected|BlueprintCallable) // @ game+0x1ef92c0
	struct TArray<struct UWidget*> GetLockWidgets(); // Function Solarland.SolarWeaponPropertySlotWidget.GetLockWidgets // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.SolarWeaponRechamberWidget
// Size: 0x358 (Inherited: 0x340)
struct USolarWeaponRechamberWidget : USolarUserWidget {
	struct UImage* img_FireCD; // 0x340(0x08)
	struct UWidgetAnimation* EmptyBullet_Anim; // 0x348(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x350(0x08)
};

// Class Solarland.SolarWeaponSkeletalMeshInterface
// Size: 0x28 (Inherited: 0x28)
struct USolarWeaponSkeletalMeshInterface : UInterface {
};

// Class Solarland.SolarWeaponSkillState
// Size: 0x58 (Inherited: 0x40)
struct USolarWeaponSkillState : USolarWeaponStateBP {
	char pad_40[0x8]; // 0x40(0x08)
	struct TWeakObjectPtr<struct ASolarWeapon> OwnerWeapon; // 0x48(0x08)
	char pad_50[0x4]; // 0x50(0x04)
	bool bNeedUseInhibitCharacterTags; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Solarland.SolarWeaponSkillStateCD
// Size: 0x68 (Inherited: 0x58)
struct USolarWeaponSkillStateCD : USolarWeaponSkillState {
	char pad_58[0x10]; // 0x58(0x10)
};

// Class Solarland.SolarWeaponSkillStateBurst
// Size: 0x78 (Inherited: 0x68)
struct USolarWeaponSkillStateBurst : USolarWeaponSkillStateCD {
	char pad_68[0x10]; // 0x68(0x10)
};

// Class Solarland.SolarWeaponSkillStateCharged
// Size: 0x68 (Inherited: 0x68)
struct USolarWeaponSkillStateCharged : USolarWeaponSkillStateCD {
};

// Class Solarland.SolarWeaponSkillStateFireCharged
// Size: 0x58 (Inherited: 0x58)
struct USolarWeaponSkillStateFireCharged : USolarWeaponSkillState {

	bool CanFireChargeFire(); // Function Solarland.SolarWeaponSkillStateFireCharged.CanFireChargeFire // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef8f10
	bool CanFireChargeBurst(); // Function Solarland.SolarWeaponSkillStateFireCharged.CanFireChargeBurst // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1ef8ee0
};

// Class Solarland.SolarWeaponSkillStateIdle
// Size: 0x58 (Inherited: 0x58)
struct USolarWeaponSkillStateIdle : USolarWeaponSkillState {
};

// Class Solarland.SolarWeaponSkillStateMachine
// Size: 0x100 (Inherited: 0xf0)
struct USolarWeaponSkillStateMachine : USolarWeaponStateMachine {
	char pad_F0[0x10]; // 0xf0(0x10)

	bool IsTriggerSkillSuccessed(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponSkillStateMachine.IsTriggerSkillSuccessed // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef9760
	bool IsTriggerSkillFailed(struct USolarWeaponState* CurState); // Function Solarland.SolarWeaponSkillStateMachine.IsTriggerSkillFailed // (Native|Event|Public|BlueprintEvent) // @ game+0x1ef96c0
};

// Class Solarland.SolarWeaponSkillStatePreBurst
// Size: 0x58 (Inherited: 0x58)
struct USolarWeaponSkillStatePreBurst : USolarWeaponSkillState {
};

// Class Solarland.SolarWeaponSkillStatePreCharged
// Size: 0x60 (Inherited: 0x58)
struct USolarWeaponSkillStatePreCharged : USolarWeaponSkillState {
	char pad_58[0x8]; // 0x58(0x08)
};

// Class Solarland.SolarWeaponSkillStatePreSummon
// Size: 0x60 (Inherited: 0x58)
struct USolarWeaponSkillStatePreSummon : USolarWeaponSkillState {
	char pad_58[0x8]; // 0x58(0x08)
};

// Class Solarland.SolarWeaponSkillStatePreThrow
// Size: 0x58 (Inherited: 0x58)
struct USolarWeaponSkillStatePreThrow : USolarWeaponSkillState {
};

// Class Solarland.SolarWeaponSkillStatePreTrigger
// Size: 0x58 (Inherited: 0x58)
struct USolarWeaponSkillStatePreTrigger : USolarWeaponSkillState {
};

// Class Solarland.SolarWeaponSkillStateSummon
// Size: 0x68 (Inherited: 0x68)
struct USolarWeaponSkillStateSummon : USolarWeaponSkillStateCD {
};

// Class Solarland.SolarWeaponSkillStateThrow
// Size: 0x68 (Inherited: 0x68)
struct USolarWeaponSkillStateThrow : USolarWeaponSkillStateCD {
};

// Class Solarland.SolarWeaponSkillStateTrigger
// Size: 0x68 (Inherited: 0x68)
struct USolarWeaponSkillStateTrigger : USolarWeaponSkillStateCD {
};

// Class Solarland.WidgetActiveControl
// Size: 0x440 (Inherited: 0x340)
struct UWidgetActiveControl : USolarUserWidget {
	struct UNamedSlot* ControlledWidget; // 0x340(0x08)
	struct UImage* Progress_Grid; // 0x348(0x08)
	struct UImage* BT_CD_Prompt; // 0x350(0x08)
	struct UImage* BT_Mask_Grid_Forbidden; // 0x358(0x08)
	struct UImage* BT_Icon_Grid_Forbidden; // 0x360(0x08)
	struct USolarTextBlock* BT_Txt_CD; // 0x368(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x370(0x08)
	struct UCanvasPanel* LightAngel; // 0x378(0x08)
	struct UImage* img_Quick; // 0x380(0x08)
	struct UWidgetAnimation* Anim_BT_CD_Prompt; // 0x388(0x08)
	struct UWidgetAnimation* Anim_Loop_Lightning; // 0x390(0x08)
	struct UWidgetAnimation* Anim_Loop_Flicker; // 0x398(0x08)
	struct UMaterialInterface* GridSource; // 0x3a0(0x08)
	struct UObject* CDMaskSource; // 0x3a8(0x08)
	struct UMaterialInterface* PromptSource; // 0x3b0(0x08)
	struct UObject* ForbiddenIconSource; // 0x3b8(0x08)
	struct UObject* ForbiddenMaskSource; // 0x3c0(0x08)
	bool bUseEnableForActive; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	int32_t GridNumber; // 0x3cc(0x04)
	int32_t CDTimerPrecision; // 0x3d0(0x04)
	float GridConsumedEffectSpeed; // 0x3d4(0x04)
	struct FLinearColor CDTxtColorSpeedup; // 0x3d8(0x10)
	struct FLinearColor CDTxtColorNormal; // 0x3e8(0x10)
	struct UTextBlock* GridCountTextBlockCache; // 0x3f8(0x08)
	struct UCanvasPanel* PanelDisableCache; // 0x400(0x08)
	char pad_408[0x10]; // 0x408(0x10)
	bool bWidgetActive; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct UMaterialInstanceDynamic* GridMaterial; // 0x420(0x08)
	bool bNeedUpdateGrid; // 0x428(0x01)
	bool bNeedUpdateGridEffect; // 0x429(0x01)
	char pad_42A[0x2]; // 0x42a(0x02)
	float GridPercent; // 0x42c(0x04)
	float GridEffectPercent; // 0x430(0x04)
	bool bGridVisualForbidden; // 0x434(0x01)
	bool bNeedUpdateCD; // 0x435(0x01)
	char pad_436[0x2]; // 0x436(0x02)
	float CDPercent; // 0x438(0x04)
	bool bCDVisualForbidden; // 0x43c(0x01)
	bool bPlayingCDAnim; // 0x43d(0x01)
	char pad_43E[0x2]; // 0x43e(0x02)

	void UpdateGridPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f426b0
	void UpdateGridEffectPercent(float Percent); // Function Solarland.WidgetActiveControl.UpdateGridEffectPercent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f42630
	void UpdateCDText(struct FString Value); // Function Solarland.WidgetActiveControl.UpdateCDText // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42590
	void UpdateCDFloatAsText(float Value); // Function Solarland.WidgetActiveControl.UpdateCDFloatAsText // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f42510
	void UpdateCD(float Percent); // Function Solarland.WidgetActiveControl.UpdateCD // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f42490
	void StopUpdateGrid(); // Function Solarland.WidgetActiveControl.StopUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1257710
	void StopCD(bool bPlayPrompt); // Function Solarland.WidgetActiveControl.StopCD // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1f42380
	void StartUpdateGrid(); // Function Solarland.WidgetActiveControl.StartUpdateGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1258990
	void StartCD(); // Function Solarland.WidgetActiveControl.StartCD // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42360
	bool ShouldWidgetActive(); // Function Solarland.WidgetActiveControl.ShouldWidgetActive // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1f42220
	bool ShouldVisualForbiddenNew(); // Function Solarland.WidgetActiveControl.ShouldVisualForbiddenNew // (Final|Native|Public|BlueprintCallable) // @ game+0x1f421f0
	bool ShouldVisualForbidden(); // Function Solarland.WidgetActiveControl.ShouldVisualForbidden // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1f421c0
	void SetTotalGrid(int32_t NewGridNum); // Function Solarland.WidgetActiveControl.SetTotalGrid // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42140
	void SetGridNewPercent(float RestPercent); // Function Solarland.WidgetActiveControl.SetGridNewPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x1f42030
	void SetGridForbiddenVisualNew(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisualNew // (Native|Protected|BlueprintCallable) // @ game+0x1f41fa0
	void SetGridForbiddenVisual(bool bForbidden); // Function Solarland.WidgetActiveControl.SetGridForbiddenVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1c7c820
	void SetGridCountText(int32_t InCount); // Function Solarland.WidgetActiveControl.SetGridCountText // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41f20
	void SetCoolingDownVisual(bool bInCD); // Function Solarland.WidgetActiveControl.SetCoolingDownVisual // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1f045d0
	void SetControlledWidgetActive(bool bActive); // Function Solarland.WidgetActiveControl.SetControlledWidgetActive // (Final|Native|Public|BlueprintCallable) // @ game+0x1f41e00
	void PlayCooledDownAnim(); // Function Solarland.WidgetActiveControl.PlayCooledDownAnim // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f41640
	bool IsEnoughOneGrid(); // Function Solarland.WidgetActiveControl.IsEnoughOneGrid // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1f41290
	bool IsCooledDown(); // Function Solarland.WidgetActiveControl.IsCooledDown // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x1f411d0
	void HideCooledDownPrompt(); // Function Solarland.WidgetActiveControl.HideCooledDownPrompt // (Final|Native|Private) // @ game+0x1f410b0
	struct UTextBlock* GetGridCountTextBlock(); // Function Solarland.WidgetActiveControl.GetGridCountTextBlock // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	struct UCanvasPanel* GetDisablePanel(); // Function Solarland.WidgetActiveControl.GetDisablePanel // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ForceStopCD(); // Function Solarland.WidgetActiveControl.ForceStopCD // (Final|Native|Public|BlueprintCallable) // @ game+0x1f407e0
};

// Class Solarland.SolarWeaponSkillWidget
// Size: 0x468 (Inherited: 0x440)
struct USolarWeaponSkillWidget : UWidgetActiveControl {
	struct UWidgetAnimation* Anim_EMP_Exit; // 0x440(0x08)
	struct UWidgetAnimation* Anim_EMP_Enter; // 0x448(0x08)
	struct UImage* img_SkillBg; // 0x450(0x08)
	struct USolarTextBlock* Txt_SkillType; // 0x458(0x08)
	struct UOverlay* Panel_Skill; // 0x460(0x08)
};

// Class Solarland.SolarWeaponSlotWidgetMobile
// Size: 0x5c0 (Inherited: 0x340)
struct USolarWeaponSlotWidgetMobile : USolarUserWidget {
	struct TMap<enum class EShootingOpt, int32_t> ShootModeNames; // 0x340(0x50)
	int32_t SlotID; // 0x390(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotOwnerPlayerWeapon; // 0x394(0x08)
	char pad_39C[0x24]; // 0x39c(0x24)
	float ClipTextBlockCheckedOpacity; // 0x3c0(0x04)
	float ClipTextBlockUnCheckedOpacity; // 0x3c4(0x04)
	bool bHideWidgetWhenNoWeapon; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x3d0(0x50)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartsWidgets; // 0x420(0x10)
	int32_t LevelTextLocalizationID; // 0x430(0x04)
	int32_t SkillCDTextLocalizationID; // 0x434(0x04)
	int32_t IncreaseDamageTextLocalizationID; // 0x438(0x04)
	int32_t LevelUpDamageTextLocalizationID; // 0x43c(0x04)
	struct FLinearColor AmmoNotEnoughColor; // 0x440(0x10)
	struct FLinearColor ExtraAmmoColor; // 0x450(0x10)
	struct UWidgetAnimation* FX_Weapon_Reload; // 0x460(0x08)
	struct UWidgetAnimation* FX_Weapon_AmmoEmpty; // 0x468(0x08)
	struct UCheckBox* CheckBox_WP; // 0x470(0x08)
	struct UTextBlock* Text_WP_Bullte; // 0x478(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x480(0x08)
	struct UTextBlock* Txt_Level; // 0x488(0x08)
	struct UImage* Img_WP; // 0x490(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x498(0x08)
	struct UHorizontalBox* HorizontalBox_WP_Clip; // 0x4a0(0x08)
	struct UWidget* Panel_Part; // 0x4a8(0x08)
	struct UWidget* HorizontalBox_Lv; // 0x4b0(0x08)
	struct UImage* img_Bg_Black; // 0x4b8(0x08)
	struct USolarTextBlock* Txt_FireMode; // 0x4c0(0x08)
	struct UImage* Img_BG; // 0x4c8(0x08)
	struct UImage* img_Bg_Border; // 0x4d0(0x08)
	struct UImage* img_Bg_Gradient; // 0x4d8(0x08)
	struct UOverlay* Overlay_Bg; // 0x4e0(0x08)
	struct UImage* img_NotSelect; // 0x4e8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part; // 0x4f0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x4f8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x500(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x508(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x510(0x08)
	struct USolarTextBlock* Txt_OriginalLevel; // 0x518(0x08)
	struct USolarTextBlock* Txt_NewLevel; // 0x520(0x08)
	struct USolarTextBlock* Txt_SkillCD; // 0x528(0x08)
	struct UWidgetAnimation* LevelUp_Anim; // 0x530(0x08)
	struct UImage* Img_Frame_VX; // 0x538(0x08)
	struct UImage* Img_BG_Light; // 0x540(0x08)
	struct UImage* Img_BG_Light_2; // 0x548(0x08)
	struct UImage* MI_Frame_VX; // 0x550(0x08)
	struct UImage* img_Select; // 0x558(0x08)
	struct UCanvasPanel* Panel_DMG; // 0x560(0x08)
	struct USolarTextBlock* Txt_WeaponDMG; // 0x568(0x08)
	struct UImage* IMG_DMG_BG_00; // 0x570(0x08)
	struct UImage* IMG_DMG_BG_01; // 0x578(0x08)
	struct USolarTextBlock* Txt_Upgrade; // 0x580(0x08)
	float PartEffectTipDuration; // 0x588(0x04)
	char pad_58C[0x4]; // 0x58c(0x04)
	struct USolarWeaponPartEffectTipWidget* UI_Weapon_Update; // 0x590(0x08)
	struct UCanvasPanel* PartEffectPanelUp; // 0x598(0x08)
	struct UCanvasPanel* PartEffectPanelDown; // 0x5a0(0x08)
	struct TArray<struct FSolarWeaponPartEffectDesc> PartEffectTipArray; // 0x5a8(0x10)
	struct TWeakObjectPtr<struct USolarAdapterWidget> KeyboardTip; // 0x5b8(0x08)

	void SetWeaponSlotPartsVisibility(bool InbVisible); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotPartsVisibility // (Final|Native|Protected|BlueprintCallable) // @ game+0x1efa200
	void SetWeaponSlotAmmoCount(); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponSlotAmmoCount // (Final|Native|Protected|BlueprintCallable) // @ game+0x1efa1e0
	void SetWeaponQualityByLevel(int32_t InWeaponLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.SetWeaponQualityByLevel // (Final|Native|Protected|BlueprintCallable) // @ game+0x1efa160
	void OnWeaponUpgrade(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x1ef9bc0
	void OnWeaponUpdateOverload(float InProgress); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpdateOverload // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponUpdateAmmoCount // (Final|Native|Public) // @ game+0x1ef9b00
	void OnWeaponToggleOverload(bool InbEnterOverload, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponToggleOverload // (Final|Native|Protected) // @ game+0x1ef9a40
	void OnWeaponQuitReload(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponQuitReload // (Native|Event|Public|BlueprintEvent) // @ game+0x1259730
	void OnWeaponInsufficientAmmo(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnWeaponInsufficientAmmo // (Native|Event|Public|BlueprintEvent) // @ game+0x1257790
	void OnToggleCheckedState(bool InbChecked); // Function Solarland.SolarWeaponSlotWidgetMobile.OnToggleCheckedState // (Final|Native|Protected) // @ game+0x1ef99b0
	void OnLoadWeaponAssetsCompleted(); // Function Solarland.SolarWeaponSlotWidgetMobile.OnLoadWeaponAssetsCompleted // (Final|Native|Protected) // @ game+0x1ef9990
	void OnCharacterSet(struct ASolarCharacter* InCharacter); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterSet // (Final|Native|Protected) // @ game+0x1ef9910
	void OnCharacterLevelUp(int32_t InNewLevel, int32_t InOldLevel, struct FString InDynamicTip); // Function Solarland.SolarWeaponSlotWidgetMobile.OnCharacterLevelUp // (Final|Native|Protected) // @ game+0x1ef9800
	void K2_OnSetWeapon(struct ASolarPlayerWeapon* InPlayerWeapon); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnSetWeapon // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void K2_OnCharacterLevelUp(int32_t InLevel); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnCharacterLevelUp // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void K2_OnActiveWeapon(bool bInActive); // Function Solarland.SolarWeaponSlotWidgetMobile.K2_OnActiveWeapon // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsDisplayCompleteInfo(); // Function Solarland.SolarWeaponSlotWidgetMobile.IsDisplayCompleteInfo // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef9690
	struct UTexture2D* GetWeaponTexture(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponTexture // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef9660
	struct FString GetWeaponShootModeName(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponShootModeName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1ef95e0
	struct FText GetWeaponName(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1ef9540
	int32_t GetWeaponLevel(); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponLevel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x1ef9510
	bool GetWeaponAmmoData(int32_t& OutClipAmmoCount, int32_t& OutExtraAmmoCount, int32_t& OutSpareAmmoCount); // Function Solarland.SolarWeaponSlotWidgetMobile.GetWeaponAmmoData // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ef93d0
	struct FString GetLocalizationDataByID(int32_t InLocalizationID); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLocalizationDataByID // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1ef91f0
	void GetLevelText(int32_t InLocalizationLevelID, struct FString InReplaceText, struct FString& OutHeadText, struct FString& OutTailText); // Function Solarland.SolarWeaponSlotWidgetMobile.GetLevelText // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1ef9010
	void ClearLoadWeaponAssetsTimer(); // Function Solarland.SolarWeaponSlotWidgetMobile.ClearLoadWeaponAssetsTimer // (Final|Native|Protected) // @ game+0x1ef8f40
	void AsyncRequestLoadWeaponAssets(); // Function Solarland.SolarWeaponSlotWidgetMobile.AsyncRequestLoadWeaponAssets // (Final|Native|Protected) // @ game+0x1ef8ec0
};

// Class Solarland.SolarWeaponSlotWidgetPC
// Size: 0x508 (Inherited: 0x340)
struct USolarWeaponSlotWidgetPC : USolarUserWidget {
	struct FString KeyActionName; // 0x340(0x10)
	struct UImage* Img_WP; // 0x350(0x08)
	struct USolarComponentKeyWidget* UI_Component_Keyboard; // 0x358(0x08)
	struct UCanvasPanel* HorizontalBox_WP_Clip; // 0x360(0x08)
	struct UTextBlock* Text_WP_Clip; // 0x368(0x08)
	struct UTextBlock* Text_WP_Clip_2; // 0x370(0x08)
	struct UHorizontalBox* HorizontalBox_Lv; // 0x378(0x08)
	struct UTextBlock* Txt_Lvl_Head; // 0x380(0x08)
	struct UTextBlock* Txt_Level; // 0x388(0x08)
	struct UTextBlock* Txt_Lvl_Tail; // 0x390(0x08)
	struct USolarTextBlock* Txt_FireMode; // 0x398(0x08)
	struct UCanvasPanel* Panel_Part; // 0x3a0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_2; // 0x3a8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_3; // 0x3b0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_4; // 0x3b8(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_5; // 0x3c0(0x08)
	struct UUIWeaponPartWidget* UI_Weapon_Part_6; // 0x3c8(0x08)
	struct UCanvasPanel* Panel_WP_Unarm; // 0x3d0(0x08)
	struct UImage* img_Bg_Border; // 0x3d8(0x08)
	struct UImage* img_Bg_Black; // 0x3e0(0x08)
	struct UImage* img_Bg_Gradient; // 0x3e8(0x08)
	struct UImage* img_NotSelect; // 0x3f0(0x08)
	struct UOverlay* Overlay_Bg; // 0x3f8(0x08)
	int32_t LevelLocalizationID; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct FString LevelVariate; // 0x408(0x10)
	struct TMap<enum class EShootingOpt, int32_t> ShootModeLocalizationIDMap; // 0x418(0x50)
	struct TArray<struct FLinearColor> WeaponQualityColors; // 0x468(0x10)
	struct TArray<struct FLinearColor> WeaponBGQualityColors; // 0x478(0x10)
	struct TWeakObjectPtr<struct ASolarPlayerWeapon> SlotWeapon; // 0x488(0x08)
	char pad_490[0x10]; // 0x490(0x10)
	struct FTimerHandle LoadWeaponIconTimerHandle; // 0x4a0(0x08)
	struct TArray<struct UUIWeaponPartWidget*> WeaponPartWidgets; // 0x4a8(0x10)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x4b8(0x50)

	void SetWeaponSlot(struct ASolarPlayerWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.SetWeaponSlot // (Final|Native|Public) // @ game+0x1efe5f0
	void OnUpgradeWeapon(int32_t InLevel, uint32_t InWeaponUniqueID); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpgradeWeapon // (Final|Native|Private) // @ game+0x1efde70
	void OnUpdateAmmo(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.SolarWeaponSlotWidgetPC.OnUpdateAmmo // (Final|Native|Private) // @ game+0x1efdd30
	void ActiveWeaponSlot(bool InbActive); // Function Solarland.SolarWeaponSlotWidgetPC.ActiveWeaponSlot // (Final|Native|Public) // @ game+0x1efd500
};

// Class Solarland.SolarWeaponSubsystem
// Size: 0x238 (Inherited: 0x30)
struct USolarWeaponSubsystem : UWorldSubsystem {
	char pad_30[0x168]; // 0x30(0x168)
	struct TMap<struct UObject*, struct ASolarWeaponProjectileSpline*> CacheSolarWeaponProjectileSplineMap; // 0x198(0x50)
	struct TMap<int32_t, struct FSolarTablesData_ItemWeaponParts> WeaponPartsItemTableCache; // 0x1e8(0x50)

	bool DiscardWeaponFromBackpack(struct ASolarWeapon* InPendingWeapon); // Function Solarland.SolarWeaponSubsystem.DiscardWeaponFromBackpack // (Final|Native|Public|BlueprintCallable) // @ game+0x1efd750
};

// Class Solarland.SolarWFStateBolting
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateBolting : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateBurstCD
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateBurstCD : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateFire
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateFire : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateFireCD
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateFireCD : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateIdle
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateIdle : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateInsuffAmmo
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateInsuffAmmo : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateOverload
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateOverload : USolarWeaponFireState {
};

// Class Solarland.SolarWFStatePrefire
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStatePrefire : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateReloading
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateReloading : USolarWeaponFireState {
};

// Class Solarland.SolarWFStateWaitBolt
// Size: 0x50 (Inherited: 0x50)
struct USolarWFStateWaitBolt : USolarWeaponFireState {
};

// Class Solarland.SolarWheeledVehicleMovement
// Size: 0x998 (Inherited: 0x138)
struct USolarWheeledVehicleMovement : UPawnMovementComponent {
	float LowFrameRateDeltaTime; // 0x138(0x04)
	float MinLocationDiffForSuspensionTrace; // 0x13c(0x04)
	float TimerForPenetration; // 0x140(0x04)
	float PenetrationThreshold; // 0x144(0x04)
	float Mass; // 0x148(0x04)
	float CenterOfMassOffsetOnZ; // 0x14c(0x04)
	float CenterOfMassOffsetOnX; // 0x150(0x04)
	float SuspensionClampRatioInLowFrame; // 0x154(0x04)
	struct FRuntimeFloatCurve AccelerationCurve; // 0x158(0x88)
	struct FRuntimeFloatCurve AccelerationCurveReverse; // 0x1e0(0x88)
	int32_t ReverseEvaluationAccuracy; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct FRuntimeFloatCurve SteerAngleLimit; // 0x270(0x88)
	struct FRuntimeFloatCurve SteeringResetSpeed; // 0x2f8(0x88)
	struct FRuntimeFloatCurve SteeringSpeed; // 0x380(0x88)
	struct FRuntimeFloatCurve SteeringFraction; // 0x408(0x88)
	struct FRuntimeFloatCurve SteerAngleMutiplier; // 0x490(0x88)
	float LowSteeringSpeed; // 0x518(0x04)
	float LowSteeringSpeedAccelerationMultiplier; // 0x51c(0x04)
	float LowSteeringSpeedAngleLimitMultiplier; // 0x520(0x04)
	float LowSpeedSteeringThresholdOnHorizontalInput; // 0x524(0x04)
	float FlightStabilizationDamping; // 0x528(0x04)
	float LateralFrictionWhenOnlySteeringWheelsOnGround; // 0x52c(0x04)
	struct TArray<struct FWheelData> Wheels; // 0x530(0x10)
	float RotationMinAngle; // 0x540(0x04)
	float MaxPitchRotation; // 0x544(0x04)
	float MaxRollRotation; // 0x548(0x04)
	float RotationTimeLimit; // 0x54c(0x04)
	bool bOpenTimeLimit; // 0x550(0x01)
	char pad_551[0x3]; // 0x551(0x03)
	float PitchTorqueInDegree; // 0x554(0x04)
	float RollTorqueInDegree; // 0x558(0x04)
	float TorqueForUpsideDown; // 0x55c(0x04)
	float MaxAngularVelocityInAir; // 0x560(0x04)
	float TorqueLerpAcceleration; // 0x564(0x04)
	float BalanceAngularVelocityWheelsOnGround; // 0x568(0x04)
	char pad_56C[0x4]; // 0x56c(0x04)
	struct UCurveFloat* DustEffectScaleCurve; // 0x570(0x08)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> BrokenWheelDustEffect; // 0x578(0x50)
	float WheelDecelerationInBrakeLock; // 0x5c8(0x04)
	float WheelLerpSpeedInSlip; // 0x5cc(0x04)
	float GravityAcceleration; // 0x5d0(0x04)
	float GravityAccelerationInAir; // 0x5d4(0x04)
	float MinHeightForGravityAccelerationInAir; // 0x5d8(0x04)
	float MaxHeightForGravityAccelerationInAir; // 0x5dc(0x04)
	float GravityTransitionDuration; // 0x5e0(0x04)
	float MaxStaticDegree; // 0x5e4(0x04)
	struct FRuntimeFloatCurve GravityMultiplierForAcceleration; // 0x5e8(0x88)
	float DecelerationUnderWater; // 0x670(0x04)
	bool bAutoSteeringEnabled; // 0x674(0x01)
	char pad_675[0x3]; // 0x675(0x03)
	float AutoSteeringThresholdTime; // 0x678(0x04)
	float AutoSteeringSpeedThreshold; // 0x67c(0x04)
	float AutoSteeringTraceRadius; // 0x680(0x04)
	struct FVector LeftAutoSteeringTraceStart; // 0x684(0x0c)
	struct FVector RightAutoSteeringTraceStart; // 0x690(0x0c)
	float LeftToRightTangentDegree; // 0x69c(0x04)
	float AutoSteeringAngleLimit; // 0x6a0(0x04)
	float AutoSteeringSpeed; // 0x6a4(0x04)
	float AutoSteeringResetSpeed; // 0x6a8(0x04)
	float AutoSteeringLimitInputY; // 0x6ac(0x04)
	float ThrottleInputThreshold; // 0x6b0(0x04)
	char pad_6B4[0x4]; // 0x6b4(0x04)
	struct FRuntimeFloatCurve SteerInputCurve; // 0x6b8(0x88)
	float BrakeDelayTime; // 0x740(0x04)
	float ThrottleReleaseDelayTime; // 0x744(0x04)
	float MicroThrottleInputThreshold; // 0x748(0x04)
	float MicroThrottleInputSpeed; // 0x74c(0x04)
	float SteeringLimitMultiplierInDrift; // 0x750(0x04)
	float AccelerationMultiplierInDrift; // 0x754(0x04)
	float AccelerationInDriftLerpSpeed; // 0x758(0x04)
	float AccelerationOutDriftLerpSpeed; // 0x75c(0x04)
	float MinDriftSpeed; // 0x760(0x04)
	float DriftCompensationRate; // 0x764(0x04)
	float DriftCancelTimeWithoutInput; // 0x768(0x04)
	char pad_76C[0x4]; // 0x76c(0x04)
	struct TMap<enum class EPhysicalSurface, struct TSoftObjectPtr<UParticleSystem>> DriftParticles; // 0x770(0x50)
	float TimerForAntiStuck; // 0x7c0(0x04)
	float StuckAcceleration; // 0x7c4(0x04)
	float StuckAccelerationLerpSpeed; // 0x7c8(0x04)
	float MinAntiRollThreshold; // 0x7cc(0x04)
	float MaxAntiRollThreshold; // 0x7d0(0x04)
	char pad_7D4[0x4]; // 0x7d4(0x04)
	struct TArray<struct FGearSetting> ForwardGears; // 0x7d8(0x10)
	float ReverseRpm; // 0x7e8(0x04)
	float SlipRpmMultiplier; // 0x7ec(0x04)
	float RpmSlipSpeed; // 0x7f0(0x04)
	float BurnoutDelayTime; // 0x7f4(0x04)
	float BurnoutSoundRatio; // 0x7f8(0x04)
	char pad_7FC[0x154]; // 0x7fc(0x154)
	struct ASolarVehiclePawn* VehiclePawn; // 0x950(0x08)
	struct USkeletalMeshComponent* VehicleMesh; // 0x958(0x08)
	float InputVecXForRotateInAir; // 0x960(0x04)
	float InputVecYForRotateInAir; // 0x964(0x04)
	float BalanceRotateSpendTime; // 0x968(0x04)
	float InputRotateSpendTime; // 0x96c(0x04)
	struct TArray<char> InAirWheelsIndex; // 0x970(0x10)
	char pad_980[0x10]; // 0x980(0x10)
	struct UAkComponent* AkAudioComponent; // 0x990(0x08)

	void SetIsDrift(bool bInDrift, bool bResetDrift); // Function Solarland.SolarWheeledVehicleMovement.SetIsDrift // (Final|Native|Public|BlueprintCallable) // @ game+0x1efe520
	void SetIsBurnout(bool bInBurnout); // Function Solarland.SolarWheeledVehicleMovement.SetIsBurnout // (Final|Native|Public) // @ game+0x1efe490
	void SetDriveType(enum class EWheeledVehicleDriveUserType InType); // Function Solarland.SolarWheeledVehicleMovement.SetDriveType // (Final|Native|Static|Public) // @ game+0x1efe420
	void SetCanAutoSteering(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAutoSteering // (Final|Native|Static|Public) // @ game+0x1efe3a0
	void SetCanAdjustInAir(bool bCan); // Function Solarland.SolarWheeledVehicleMovement.SetCanAdjustInAir // (Final|Native|Static|Public) // @ game+0x1efe320
	void OnVehicleSkinSoundUpdate(struct USolarVehicleSoundDataAsset* OldVehicleSoundDataAsset, struct USolarVehicleSoundDataAsset* NewVehicleSoundDataAsset); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleSkinSoundUpdate // (Final|Native|Protected) // @ game+0x1efe100
	void OnVehicleHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Solarland.SolarWheeledVehicleMovement.OnVehicleHit // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1efdf30
	void OnDriverGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.SolarWheeledVehicleMovement.OnDriverGetOffVehicle // (Final|Native|Protected) // @ game+0x1efdc30
};

// Class Solarland.SolarWheeledVehicleStencilAnimInstance
// Size: 0x350 (Inherited: 0x270)
struct USolarWheeledVehicleStencilAnimInstance : UAnimInstance {
	struct FVector FLWheelBoneScale; // 0x268(0x0c)
	struct FVector FRWheelBoneScale; // 0x274(0x0c)
	struct FVector MLWheelBoneScale; // 0x280(0x0c)
	struct FVector MRWheelBoneScale; // 0x28c(0x0c)
	struct FVector BLWheelBoneScale; // 0x298(0x0c)
	struct FVector BRWheelBoneScale; // 0x2a4(0x0c)
	struct FVector FLWheelBoneLocation; // 0x2b0(0x0c)
	struct FVector FRWheelBoneLocation; // 0x2bc(0x0c)
	struct FVector MLWheelBoneLocation; // 0x2c8(0x0c)
	struct FVector MRWheelBoneLocation; // 0x2d4(0x0c)
	struct FVector BLWheelBoneLocation; // 0x2e0(0x0c)
	struct FVector BRWheelBoneLocation; // 0x2ec(0x0c)
	struct FRotator FLWheelBoneRotation; // 0x2f8(0x0c)
	struct FRotator FRWheelBoneRotation; // 0x304(0x0c)
	struct FRotator MLWheelBoneRotation; // 0x310(0x0c)
	struct FRotator MRWheelBoneRotation; // 0x31c(0x0c)
	struct FRotator BLWheelBoneRotation; // 0x328(0x0c)
	struct FRotator BRWheelBoneRotation; // 0x334(0x0c)
	struct TWeakObjectPtr<struct USolarWheeledVehicleAnimInstance> VehicleAnim; // 0x340(0x08)
};

// Class Solarland.SolarWidgetExitCallbackProxy
// Size: 0x40 (Inherited: 0x28)
struct USolarWidgetExitCallbackProxy : UObject {
	char pad_28[0x18]; // 0x28(0x18)

	void OnAnimationFinished(); // Function Solarland.SolarWidgetExitCallbackProxy.OnAnimationFinished // (Final|Native|Protected) // @ game+0x1f04590
};

// Class Solarland.SolarWorldSettings
// Size: 0x480 (Inherited: 0x400)
struct ASolarWorldSettings : AWorldSettings {
	int32_t MapID; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct FSoftObjectPath PreloadAssets; // 0x408(0x18)
	bool bAsyncPreload; // 0x420(0x01)
	bool bHoldAllMips; // 0x421(0x01)
	char pad_422[0x6]; // 0x422(0x06)
	struct USolarPostProcessSettingItem* PostProcessItemClass; // 0x428(0x08)
	int32_t CurrentActiveColorThemeIndex; // 0x430(0x04)
	int32_t SolarMapTypeValue; // 0x434(0x04)
	bool MapEnableLowMemoryGraphOpt; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
	struct FTransform SpectatorPawnStartPoint; // 0x440(0x30)
	struct USolarPostProcessSettingItem* PostProcessItem; // 0x470(0x08)
	char pad_478[0x8]; // 0x478(0x08)
};

// Class Solarland.SpatializeInfo
// Size: 0x230 (Inherited: 0x228)
struct ASpatializeInfo : AInfo {
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Solarland.SpatializeInfoTrack
// Size: 0x478 (Inherited: 0x230)
struct ASpatializeInfoTrack : ASpatializeInfo {
	struct FTrackArray TrackArray; // 0x230(0x130)
	char pad_360[0x8c]; // 0x360(0x8c)
	float Timeout; // 0x3ec(0x04)
	float MinRevealDistance; // 0x3f0(0x04)
	int32_t MaxTrackNum; // 0x3f4(0x04)
	struct TMap<struct FTrackItem, struct A3DMeshWidgetTrack*> CurTrackWidgets; // 0x3f8(0x50)
	char pad_448[0x30]; // 0x448(0x30)

	void UpdateWidgets(bool bFromNetUpdate); // Function Solarland.SpatializeInfoTrack.UpdateWidgets // (Final|Native|Private) // @ game+0x1f04af0
};

// Class Solarland.StripBulletContainer
// Size: 0x3f0 (Inherited: 0x3b0)
struct UStripBulletContainer : USolarWeaponBulletContainerWidget {
	struct UImage* AmmoGauge_BG; // 0x3b0(0x08)
	struct UGaugeImage* AmmoGauge; // 0x3b8(0x08)
	struct UImage* AmmoGauge_Empty; // 0x3c0(0x08)
	struct UImage* AmmoGauge_Light; // 0x3c8(0x08)
	struct UCanvasPanel* BulletLightSlot; // 0x3d0(0x08)
	struct UWidgetAnimation* Gauge_Anim; // 0x3d8(0x08)
	struct UWidgetAnimation* Battle_Light_Anim; // 0x3e0(0x08)
	char pad_3E8[0x8]; // 0x3e8(0x08)

	void ReceiveUpdateBulletEvent(float AmmoProgress, bool bIsReloading, bool bIsFirstIn, bool bIsQuitReload); // Function Solarland.StripBulletContainer.ReceiveUpdateBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1f04660
	void ReceiveUpdateAllBulletEvent(); // Function Solarland.StripBulletContainer.ReceiveUpdateAllBulletEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0xb56310
	void ReceiveReloadFinishEvent(bool bIsReloadSuccess); // Function Solarland.StripBulletContainer.ReceiveReloadFinishEvent // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x1f045d0
};

// Class Solarland.SolarStrongholdNamesConfig
// Size: 0x80 (Inherited: 0x30)
struct USolarStrongholdNamesConfig : UDataAsset {
	struct TMap<struct FString, struct FVector4> NamesMap; // 0x30(0x50)
};

// Class Solarland.STutorialLevelGameMode
// Size: 0x4e0 (Inherited: 0x4e0)
struct ASTutorialLevelGameMode : ASBattleGameMode {
};

// Class Solarland.STutorialLevelGameState
// Size: 0x3e8 (Inherited: 0x3e8)
struct ASTutorialLevelGameState : ASolarGameState {
};

// Class Solarland.SubPoolOfHomeActor
// Size: 0x50 (Inherited: 0x28)
struct USubPoolOfHomeActor : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct ASolarHomeActor*> UseActors; // 0x30(0x10)
	struct TArray<struct ASolarHomeActor*> UnUseActors; // 0x40(0x10)
};

// Class Solarland.SummonItemHealPile
// Size: 0x590 (Inherited: 0x398)
struct ASummonItemHealPile : ASummonItemBase {
	struct TArray<struct FChargingInfo> ChargingInfoList; // 0x398(0x10)
	enum class EActorRegisterType ActorRegisterType; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)
	struct USphereComponent* CollisionComp; // 0x3b0(0x08)
	struct UStaticMeshComponent* NormalMesh; // 0x3b8(0x08)
	float SphereRadius; // 0x3c0(0x04)
	int32_t OwnerTeam; // 0x3c4(0x04)
	struct FVector TestOverlapDestroyBoxExtent; // 0x3c8(0x0c)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct UParticleSystemComponent* RangeLoopEffect; // 0x3d8(0x08)
	struct TArray<struct UParticleSystemComponent*> ChargeParticleEffects; // 0x3e0(0x10)
	float HealQuantity; // 0x3f0(0x04)
	float HealFrequency; // 0x3f4(0x04)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct UMaterialInstanceDynamic* DynamicMatHealPile; // 0x400(0x08)
	struct FSoftObjectPath NormalMeshPath; // 0x408(0x18)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleStartPath; // 0x420(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleLoopPath; // 0x448(0x28)
	struct TSoftObjectPtr<UParticleSystem> RangeParticleEndPath; // 0x470(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleStartPath; // 0x498(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleLoopPath; // 0x4c0(0x28)
	struct TSoftObjectPtr<UParticleSystem> EnemyRangeParticleEndPath; // 0x4e8(0x28)
	struct FVector RangeEffectScale; // 0x510(0x0c)
	char pad_51C[0x4]; // 0x51c(0x04)
	struct FSoftObjectPath ChargeParticleEffectPath; // 0x520(0x18)
	struct FVector BeamStartPos; // 0x538(0x0c)
	char pad_544[0x4]; // 0x544(0x04)
	struct FSoftObjectPath OutlineMatPath; // 0x548(0x18)
	struct UParticleSystem* BoomEffect; // 0x560(0x08)
	struct USolarAkGameObject* SolarAkGameObject; // 0x568(0x08)
	char pad_570[0x10]; // 0x570(0x10)
	struct FTimerHandle ServerChargingTimerHandle; // 0x580(0x08)
	struct FTimerHandle ClientChargingTimerHandle; // 0x588(0x08)

	void TestDestroy(); // Function Solarland.SummonItemHealPile.TestDestroy // (Final|Native|Public) // @ game+0x1f07f00
	void SetIsActivated(bool bActivated); // Function Solarland.SummonItemHealPile.SetIsActivated // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ServerSetHealingPile(bool bEnter, struct ASolarCharacter* ChargingCharacter); // Function Solarland.SummonItemHealPile.ServerSetHealingPile // (Final|Native|Public) // @ game+0x1f07a90
	void RemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.RemoveChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x1f07a10
	void RemoveAllEffects(); // Function Solarland.SummonItemHealPile.RemoveAllEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x1f079f0
	void ReceiveNormalMeshLoadedEvent(); // Function Solarland.SummonItemHealPile.ReceiveNormalMeshLoadedEvent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveChargingPileInitialize(); // Function Solarland.SummonItemHealPile.ReceiveChargingPileInitialize // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnUntrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function Solarland.SummonItemHealPile.OnUntrigger // (Final|Native|Public) // @ game+0x1f07820
	void OnTrigger(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Solarland.SummonItemHealPile.OnTrigger // (Final|Native|Public|HasOutParms) // @ game+0x1f07610
	void OnRep_ChargingInfoListChanged(); // Function Solarland.SummonItemHealPile.OnRep_ChargingInfoListChanged // (Final|Native|Public) // @ game+0x1f07570
	bool IsOwnerTeammate(); // Function Solarland.SummonItemHealPile.IsOwnerTeammate // (Final|Native|Public|BlueprintCallable) // @ game+0x1f07400
	void CreateChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.CreateChargeParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x1f07060
	void ClientRemoveChargeParticle(struct ASolarCharacter* InCharacter); // Function Solarland.SummonItemHealPile.ClientRemoveChargeParticle // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1f06fd0
	void ClientHealPileSound(struct ASolarCharacter* ChargingCharacter, enum class EPileHealingType HealingType); // Function Solarland.SummonItemHealPile.ClientHealPileSound // (Net|Native|Event|NetMulticast|Public|NetClient) // @ game+0x1f06f00
};

// Class Solarland.WeaponAnimationComponent
// Size: 0x118 (Inherited: 0xb0)
struct UWeaponAnimationComponent : UActorComponent {
	struct UWeaponAnimInstance* WeaponAnimInstance; // 0xb0(0x08)
	struct ASolarWeapon* MyWeapon; // 0xb8(0x08)
	struct UWeaponNetComponent* WeaponNetComp; // 0xc0(0x08)
	struct TMap<enum class EWeaponAnimState, struct UAnimSequence*> AnimSequenceMap; // 0xc8(0x50)

	void SRecieveProto_SwitchStateAction(struct FString paramters); // Function Solarland.WeaponAnimationComponent.SRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x1d13fc0
	void SetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.SetWeaponAnimState // (Final|Native|Public) // @ game+0x1f23280
	void PostWeaponAnimStateToSimulation(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed, bool bForceSetAnimState); // Function Solarland.WeaponAnimationComponent.PostWeaponAnimStateToSimulation // (Final|Native|Protected) // @ game+0x1f23460
	void InternalSetWeaponAnimState(enum class EWeaponAnimState InWeaponAnimState, float InAnimPlaySpeed); // Function Solarland.WeaponAnimationComponent.InternalSetWeaponAnimState // (Final|Native|Protected) // @ game+0x1f23280
	void InitSkeletaMesh(struct USkeletalMeshComponent* Mesh); // Function Solarland.WeaponAnimationComponent.InitSkeletaMesh // (Native|Public) // @ game+0x1f231f0
	void GotoState(enum class EWeaponAnimState State, float Interval); // Function Solarland.WeaponAnimationComponent.GotoState // (Final|Native|Public) // @ game+0x1f230e0
	void CRecieveProto_SwitchStateAction(bool bAutonomous, struct FString paramters); // Function Solarland.WeaponAnimationComponent.CRecieveProto_SwitchStateAction // (Final|Native|Protected) // @ game+0x1f22fc0
};

// Class Solarland.SummonWeaponAnimationComponent
// Size: 0x120 (Inherited: 0x118)
struct USummonWeaponAnimationComponent : UWeaponAnimationComponent {
	char pad_118[0x8]; // 0x118(0x08)
};

// Class Solarland.WeaponAnimInstance
// Size: 0x2d0 (Inherited: 0x270)
struct UWeaponAnimInstance : UAnimInstance {
	bool bInterrupt; // 0x268(0x01)
	bool bReload; // 0x269(0x01)
	bool bOverload; // 0x26a(0x01)
	bool bBolt; // 0x26b(0x01)
	struct TArray<struct FAnimMsgData> MsgArray; // 0x270(0x10)
	struct FAnimMsgData CurrentMsg; // 0x280(0x08)
	bool bCurrentMsgUsed; // 0x288(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct UAnimSequence* IdleAnim; // 0x290(0x08)
	struct UAnimSequence* FireAnim; // 0x298(0x08)
	struct UAnimSequence* AltFireAnim; // 0x2a0(0x08)
	struct UAnimSequence* ReloadAnim; // 0x2a8(0x08)
	struct UAnimSequence* OverloadAnim; // 0x2b0(0x08)
	struct UAnimSequence* OpenScopeAnim; // 0x2b8(0x08)
	struct UAnimSequence* CloseScopeAnim; // 0x2c0(0x08)
	struct UAnimSequence* BoltAnim; // 0x2c8(0x08)

	bool SwitchStateCheck(enum class EWeaponAnimState CheckState); // Function Solarland.WeaponAnimInstance.SwitchStateCheck // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f23c10
	void SetInterruptIsTrue(); // Function Solarland.WeaponAnimInstance.SetInterruptIsTrue // (Final|Native|Public) // @ game+0x1f23740
	bool RouterNodeJudge(); // Function Solarland.WeaponAnimInstance.RouterNodeJudge // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f235b0
	void OnQuitState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnQuitState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f233e0
	void OnEnterState(enum class EWeaponAnimState State); // Function Solarland.WeaponAnimInstance.OnEnterState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23360
	void Interrupt(); // Function Solarland.WeaponAnimInstance.Interrupt // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23340
	bool HasMsg(); // Function Solarland.WeaponAnimInstance.HasMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f231c0
	bool ConsumMsg(); // Function Solarland.WeaponAnimInstance.ConsumMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f230b0
	bool AddMsg(enum class EWeaponAnimState State, float Speed); // Function Solarland.WeaponAnimInstance.AddMsg // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f22ef0
};

// Class Solarland.SummonWeaponAnimInstance
// Size: 0x2e0 (Inherited: 0x2d0)
struct USummonWeaponAnimInstance : UWeaponAnimInstance {
	float ViewYaw; // 0x2d0(0x04)
	float ViewPitch; // 0x2d4(0x04)
	bool IsLocked; // 0x2d8(0x01)
	bool IsFire; // 0x2d9(0x01)
	bool bAppearCompleted; // 0x2da(0x01)
	bool bTransform; // 0x2db(0x01)
	char pad_2DC[0x4]; // 0x2dc(0x04)
};

// Class Solarland.TalentDataAsset
// Size: 0xa0 (Inherited: 0x30)
struct UTalentDataAsset : UPrimaryDataAsset {
	struct FSoftClassPath TalentClassPath; // 0x30(0x18)
	struct FSoftObjectPath TalentIconPath; // 0x48(0x18)
	struct FText TalentName; // 0x60(0x18)
	int32_t NameTextID; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FText TalentDescription; // 0x80(0x18)
	int32_t DescriptionTextID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Solarland.TeamBoostProjectile
// Size: 0x288 (Inherited: 0x228)
struct ATeamBoostProjectile : AActor {
	float BaseMoveSpeed; // 0x228(0x04)
	float MaxMoveSpeed; // 0x22c(0x04)
	float MoveAcceleration; // 0x230(0x04)
	float HeightOffset; // 0x234(0x04)
	float FinishDistance; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct FActorParticleEffectSpawnInfo> ProjectileParticleSpawnInfos; // 0x240(0x10)
	struct TArray<struct UParticleSystemComponent*> ProjectileParticleComponents; // 0x250(0x10)
	struct TWeakObjectPtr<struct ASolarCharacter> TargetCharacter; // 0x260(0x08)
	char pad_268[0x20]; // 0x268(0x20)

	void OnRep_TargetCharacter(); // Function Solarland.TeamBoostProjectile.OnRep_TargetCharacter // (Final|Native|Private) // @ game+0x1f075d0
};

// Class Solarland.TeammateHUD
// Size: 0x390 (Inherited: 0x340)
struct UTeammateHUD : USolarUserWidget {
	struct USolarTextBlock* Txt_Distance; // 0x340(0x08)
	struct USolarTextBlock* Txt_Distance_Unit; // 0x348(0x08)
	struct UUIComponentNationalFlag* NationalFlag; // 0x350(0x08)
	struct UTextBlock* Txt_NickName; // 0x358(0x08)
	struct UImage* BTN_Rescue; // 0x360(0x08)
	struct UWidget* Img_UVASign; // 0x368(0x08)
	struct FString PlayerNameSeparator; // 0x370(0x10)
	char pad_380[0x10]; // 0x380(0x10)

	void UpdateName(struct FString InNickname); // Function Solarland.TeammateHUD.UpdateName // (Final|Native|Protected) // @ game+0x1f08020
	void UpdateMemberNum(char PosInTeam); // Function Solarland.TeammateHUD.UpdateMemberNum // (Final|Native|Protected) // @ game+0x1f07fa0
	void UpdateDistance(float InDis); // Function Solarland.TeammateHUD.UpdateDistance // (Final|Native|Protected) // @ game+0x1f07f20
	void SetRescueVisibility(bool bShow); // Function Solarland.TeammateHUD.SetRescueVisibility // (Final|Native|Protected) // @ game+0x1f07be0
	void SetDodgeDisplay(bool bShow); // Function Solarland.TeammateHUD.SetDodgeDisplay // (Final|Native|Protected) // @ game+0x1f07b50
	void RefreshPosInTeam(char PosInTeam, struct FTeamMemberColor& ColorConfig); // Function Solarland.TeammateHUD.RefreshPosInTeam // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshIsSkydivingCaptain(bool bIsCaptain); // Function Solarland.TeammateHUD.RefreshIsSkydivingCaptain // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OuterSetDistanceDisplay(bool bShown); // Function Solarland.TeammateHUD.OuterSetDistanceDisplay // (Final|Native|Protected) // @ game+0x1f07960
	void OnLocalPlayerSkydivingCaptainChanged(int32_t TeamIndex, struct FString playerName, bool bIsLocalPlayer); // Function Solarland.TeammateHUD.OnLocalPlayerSkydivingCaptainChanged // (Final|Native|Protected) // @ game+0x1f07450
	void OnClickBTN_Rescue(); // Function Solarland.TeammateHUD.OnClickBTN_Rescue // (Final|Native|Protected) // @ game+0x1f07430
};

// Class Solarland.TeammateTalentWidget
// Size: 0x370 (Inherited: 0x340)
struct UTeammateTalentWidget : USolarUserWidget {
	struct UImage* Img_Icon_Ability; // 0x340(0x08)
	struct UImage* Img_Icon_CD; // 0x348(0x08)
	struct UGaugeImage* Progress_CD_Mask; // 0x350(0x08)
	struct UWidgetAnimation* Anim_TalentShow; // 0x358(0x08)
	struct UWidgetAnimation* Anim_Cooldown; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)

	void SetTalentState(enum class ETalentState InTalentUIState, float InAdditionalParam); // Function Solarland.TeammateTalentWidget.SetTalentState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f07cf0
	void SetTalentIconByID(char InTalentID); // Function Solarland.TeammateTalentWidget.SetTalentIconByID // (Final|Native|Public|BlueprintCallable) // @ game+0x1f07c70
};

// Class Solarland.TechDesignUIOperationDispatcher
// Size: 0x12a0 (Inherited: 0x10c0)
struct UTechDesignUIOperationDispatcher : UHUDDispatcherBase {
	struct FDelegate OnWidgetAddToBattleUIRequest; // 0x10c0(0x10)
	struct FDelegate OnWidgetAddToBackpackUIRequest; // 0x10d0(0x10)
	struct FDelegate OnWidgetAddToMapUIRequest; // 0x10e0(0x10)
	struct FDelegate OnClearBattleUISlotRequest; // 0x10f0(0x10)
	struct FDelegate OnClearBackpackUISlotRequest; // 0x1100(0x10)
	struct FDelegate OnClearMapUISlotRequest; // 0x1110(0x10)
	struct FDelegate OnSetBattleUISubItemVisibilityByGameMode; // 0x1120(0x10)
	struct FDelegate RegisterCustomMapMarkToMiniMap; // 0x1130(0x10)
	struct FDelegate RegisterCustomMapMarkToBigMap; // 0x1140(0x10)
	struct FDelegate RemoveCustomMapMarkFromMiniMap; // 0x1150(0x10)
	struct FDelegate RemoveCustomMapMarkFromBigMap; // 0x1160(0x10)
	struct FDelegate RegisterCustomRotBarMark; // 0x1170(0x10)
	struct FDelegate RemoveCustomRotBarMark; // 0x1180(0x10)
	struct FMulticastInlineDelegate OnAllPlayerNavVisibilityChanged; // 0x1190(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityChanged; // 0x11a0(0x10)
	struct FMulticastInlineDelegate OnPowerBarVisibilityChanged; // 0x11b0(0x10)
	struct FMulticastInlineDelegate OnRotationBarVisibilityChanged; // 0x11c0(0x10)
	struct FMulticastInlineDelegate OnMiniMapFovChangeRequested; // 0x11d0(0x10)
	struct FMulticastInlineDelegate OnMiniMapPlayVoiceRequested; // 0x11e0(0x10)
	struct FDelegate OnMiniMapInitMarkIconRequested; // 0x11f0(0x10)
	struct FDelegate OnBigMapAddDotLineRequested; // 0x1200(0x10)
	struct FDelegate OnMiniMapAddDotLineRequested; // 0x1210(0x10)
	struct FMulticastInlineDelegate OnBigMapRemoveDotLineRequested; // 0x1220(0x10)
	struct FMulticastInlineDelegate OnMiniMapRemoveDotLineRequested; // 0x1230(0x10)
	struct FDelegate RegisterPositionMark; // 0x1240(0x10)
	struct FDelegate RegisterActorMark; // 0x1250(0x10)
	struct FMulticastInlineDelegate OnBattleUIVisibilityHasChanged; // 0x1260(0x10)
	struct FDelegate OnGettingCanvasPositionOnBattleUI; // 0x1270(0x10)
	struct FDelegate OnGettingWidgetRenderTransOnBattleUI; // 0x1280(0x10)
	struct FDelegate OnGettingTextOnBackpackUI; // 0x1290(0x10)

	void SimpleTDDelegate__DelegateSignature(); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.SimpleTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	void OnWidgetVisibilityHasChanged__DelegateSignature(bool bVisible); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetVisibilityHasChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	struct FString OnWidgetAddToBattleUIRequest__DelegateSignature(struct UPanelSlot*& Result, struct UWidget* WidgetForAdd, struct FName& PanelNameToAdd, bool bReplaceOld); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnWidgetAddToBattleUIRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	struct FString OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature(enum class ECustomGameModeTypeForUI GameModeType); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnSetBattleUISubItemVisibilityByGameMode__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	struct FString OnRegisterPositionMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct FVector& Position); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterPositionMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	struct FString OnRegisterActorMarkRequested__DelegateSignature(struct UActorMarkBase*& Result, struct UActorMarkBase* MarkClass, struct AActor* FollowActor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnRegisterActorMarkRequested__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnMiniMapPlayVoiceRequested__DelegateSignature(enum class EMarkerType VoiceType, struct FMapVoiceData& VoiceData); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapPlayVoiceRequested__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x224bbb0
	struct UMapMarkBase* OnMiniMapInitMarkIconRequested__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& Pivot, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapInitMarkIconRequested__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnMiniMapFovChangeRequested__DelegateSignature(float TargetFOV, float PlayTime, bool bWithIconScale); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMiniMapFovChangeRequested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	int32_t OnMapAddDotLineRequested__DelegateSignature(struct AActor* StartPointActor, struct AActor* EndPointActor, struct FLinearColor DotLineColor); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnMapAddDotLineRequested__DelegateSignature // (Public|Delegate|HasDefaults) // @ game+0x224bbb0
	struct FString OnGettingWidgetTransRequest__DelegateSignature(struct FWidgetTransform& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingWidgetTransRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	struct FString OnGettingVector2DRequest__DelegateSignature(struct FVector2D& Result, struct FName& WidgetName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingVector2DRequest__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	struct FString OnGettingTextRequest__DelegateSignature(struct FText& Result, struct FName& TextBlockName); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnGettingTextRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void OnCustomRotationBarMarkRemoved__DelegateSignature(struct URotationBarMarkWidget* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	struct URotationBarMarkWidget* OnCustomRotationBarMarkRegistered__DelegateSignature(struct URotationBarMarkWidget* RotationBarMarkClass, struct FVector& MarkPos, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomRotationBarMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	void OnCustomMapMarkRemoved__DelegateSignature(struct UMapMarkBase* MarkToRemove); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRemoved__DelegateSignature // (Public|Delegate) // @ game+0x224bbb0
	struct UMapMarkBase* OnCustomMapMarkRegistered__DelegateSignature(struct UMapMarkBase* MapMarkClass, struct FVector2D& MarkPos, bool bSupportEdge, bool bSupportEdgeInBigMap, int32_t ZOrder); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnCustomMapMarkRegistered__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // @ game+0x224bbb0
	struct FString OnClearBattleUISlotRequest__DelegateSignature(struct FName& PanelNameToClear); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.OnClearBattleUISlotRequest__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x224bbb0
	void IntTDDelegate__DelegateSignature(int32_t Value); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.IntTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
	bool GetWidgetRenderTransOnBattleUI(struct FWidgetTransform& Result, struct FName WidgetName); // Function Solarland.TechDesignUIOperationDispatcher.GetWidgetRenderTransOnBattleUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f072e0
	bool GetTextOnBackpackUI(struct FText& Result, struct FName TextBlockName); // Function Solarland.TechDesignUIOperationDispatcher.GetTextOnBackpackUI // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f071c0
	bool GetCanvasPositionOnBattleUI(struct FVector2D& Result, struct FName ChildName); // Function Solarland.TechDesignUIOperationDispatcher.GetCanvasPositionOnBattleUI // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f070e0
	void BroadcastRotationBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastRotationBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f06e70
	void BroadcastPowerBarVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastPowerBarVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f06de0
	void BroadcastBattleUIVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastBattleUIVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f06d50
	void BroadcastAllPlayerNavVisibilityChanged(bool bVisible); // Function Solarland.TechDesignUIOperationDispatcher.BroadcastAllPlayerNavVisibilityChanged // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x1f06cc0
	void BoolTDDelegate__DelegateSignature(bool bValue); // DelegateFunction Solarland.TechDesignUIOperationDispatcher.BoolTDDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x224bbb0
};

// Class Solarland.Temp_BigMap
// Size: 0x348 (Inherited: 0x340)
struct UTemp_BigMap : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)

	void OnBigMapVisibilitySet(bool bVisible); // Function Solarland.Temp_BigMap.OnBigMapVisibilitySet // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0c560
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_BigMap.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b820
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_BigMap.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b460
};

// Class Solarland.Temp_Settings
// Size: 0x348 (Inherited: 0x340)
struct UTemp_Settings : USolarUserWidget {
	char pad_340[0x8]; // 0x340(0x08)

	void SaveAndQuit(); // Function Solarland.Temp_Settings.SaveAndQuit // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnSettingRequestOpened(int32_t InOwnerType); // Function Solarland.Temp_Settings.OnSettingRequestOpened // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.Temp_SolarBattleControl
// Size: 0x4a0 (Inherited: 0x340)
struct UTemp_SolarBattleControl : USolarUserWidget {
	char pad_340[0xb8]; // 0x340(0xb8)
	struct TMap<struct FString, struct UObject*> IconMap; // 0x3f8(0x50)
	char pad_448[0x8]; // 0x448(0x08)
	struct UUserWidget* UI_KillInfo_A; // 0x450(0x08)
	struct UUserWidget* UI_KillInfo_B; // 0x458(0x08)
	char pad_460[0x10]; // 0x460(0x10)
	struct FString RevengeIconName; // 0x470(0x10)
	struct USolarInputButton* Btn_Parachute; // 0x480(0x08)
	struct USolarInputButton* Btn_Unfollow; // 0x488(0x08)
	struct USolarAdapterWidget* Panel_Shortcut; // 0x490(0x08)
	bool bCanParachute; // 0x498(0x01)
	char pad_499[0x7]; // 0x499(0x07)

	bool TrySkydiveUnfollow(); // Function Solarland.Temp_SolarBattleControl.TrySkydiveUnfollow // (Final|Native|Protected) // @ game+0x1f0d1f0
	struct FString SetBattleUISubItemVisibilityByGameMode(enum class ECustomGameModeTypeForUI GameModeType); // Function Solarland.Temp_SolarBattleControl.SetBattleUISubItemVisibilityByGameMode // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnToggleCursorVisibility(bool bIsVisible); // Function Solarland.Temp_SolarBattleControl.OnToggleCursorVisibility // (Final|Native|Protected) // @ game+0x1f0c850
	void OnSkydivingLeaderChanged(struct ASolarPlayerState* SelfPS); // Function Solarland.Temp_SolarBattleControl.OnSkydivingLeaderChanged // (Final|Native|Protected) // @ game+0x1f0c7d0
	struct UUserWidget* OnHomeGetSelf(); // Function Solarland.Temp_SolarBattleControl.OnHomeGetSelf // (Final|Native|Protected) // @ game+0x1f0c760
	void OnBtnUnfollowClicked(); // Function Solarland.Temp_SolarBattleControl.OnBtnUnfollowClicked // (Final|Native|Protected) // @ game+0x1f0c5f0
	void OnBattleUIVisibilityChanged(bool bVisible); // Function Solarland.Temp_SolarBattleControl.OnBattleUIVisibilityChanged // (Final|Native|Protected) // @ game+0x1ca82f0
	struct FString GetWidgetForTutorial(struct UWidget*& OutWidget, struct TArray<struct FName>& InWidgetLink); // Function Solarland.Temp_SolarBattleControl.GetWidgetForTutorial // (Final|Native|Protected|HasOutParms) // @ game+0x1f0c310
	struct FString GetRenderTransPosition(struct FWidgetTransform& OutResult, struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.GetRenderTransPosition // (Final|Native|Protected|HasOutParms) // @ game+0x1f0c0e0
	struct FString GetCanvasPosition(struct FVector2D& OutResult, struct FName& ChildName); // Function Solarland.Temp_SolarBattleControl.GetCanvasPosition // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x1f0bf50
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.Temp_SolarBattleControl.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b900
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.Temp_SolarBattleControl.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b640
};

// Class Solarland.TimedEffectController
// Size: 0x40 (Inherited: 0x28)
struct UTimedEffectController : UActorEffectController {
	float FadeInTime; // 0x28(0x04)
	float KeepTime; // 0x2c(0x04)
	float FadeOutTime; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class Solarland.Tutorial
// Size: 0x138 (Inherited: 0x28)
struct UTutorial : UObject {
	char pad_28[0x40]; // 0x28(0x40)
	struct FTutorialTableRow Data; // 0x68(0x98)
	struct UTutorialTriggerCondition* TriggerConditionBP; // 0x100(0x08)
	struct UTutorialTaskSequenceAction* TutorialTask; // 0x108(0x08)
	char pad_110[0x28]; // 0x110(0x28)

	void Stop(); // Function Solarland.Tutorial.Stop // (Final|Native|Public) // @ game+0x1f0d1b0
	void ReceiveOnStart(); // Function Solarland.Tutorial.ReceiveOnStart // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnSingleTaskFinish(); // Function Solarland.Tutorial.ReceiveOnSingleTaskFinish // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnFinish(); // Function Solarland.Tutorial.ReceiveOnFinish // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnSingleTaskFinish(); // Function Solarland.Tutorial.OnSingleTaskFinish // (Final|Native|Private) // @ game+0x1f0c7b0
	struct FTutorialTableRow GetTableRowData(); // Function Solarland.Tutorial.GetTableRowData // (Final|Native|Public|Const) // @ game+0x1f0c290
	int32_t GetCurrentFinishNum(); // Function Solarland.Tutorial.GetCurrentFinishNum // (Final|Native|Public|Const) // @ game+0x1f0c080
};

// Class Solarland.TutorialCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialCondition : UObject {

	struct FString GetWorldName(); // Function Solarland.TutorialCondition.GetWorldName // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f0c460
	struct ASolarCharacter* GetPlayer(); // Function Solarland.TutorialCondition.GetPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f0c0b0
};

// Class Solarland.TutorialActionCondition
// Size: 0x250 (Inherited: 0x28)
struct UTutorialActionCondition : UTutorialCondition {
	struct FTutorialActionTableRow ActionData; // 0x28(0x228)

	void SpawnFixedAreaInteractActor(int32_t SpawnerID, struct ATutorialLevelInteractableActor*& OutActor); // Function Solarland.TutorialActionCondition.SpawnFixedAreaInteractActor // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f0d0b0
	void OnReset(); // Function Solarland.TutorialActionCondition.OnReset // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnEnd(); // Function Solarland.TutorialActionCondition.OnEnd // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnBegin(); // Function Solarland.TutorialActionCondition.OnBegin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialActionCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f0c260
	void GetBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerOnVehicle*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIsOnVehicle // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f0be00
	void GetBotAIs(struct TArray<int32_t> SpawnerIds, struct TArray<struct ASolarBotAIControllerInGuide*>& OutBotAI); // Function Solarland.TutorialActionCondition.GetBotAIs // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f0bcb0
	void GetAllActorsOfClass(struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Solarland.TutorialActionCondition.GetAllActorsOfClass // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f0bbc0
	bool CheckSatisfy(); // Function Solarland.TutorialActionCondition.CheckSatisfy // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.TutorialLevelInteractableActor
// Size: 0x228 (Inherited: 0x228)
struct ATutorialLevelInteractableActor : AActor {

	void UnregisterEvent(); // Function Solarland.TutorialLevelInteractableActor.UnregisterEvent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RegisterEvent(); // Function Solarland.TutorialLevelInteractableActor.RegisterEvent // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialLevelInteractableActor.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f0c260
};

// Class Solarland.TutorialLevelSaveGame
// Size: 0x80 (Inherited: 0x28)
struct UTutorialLevelSaveGame : USaveGame {
	struct TMap<struct FString, struct FTutorialLevelSaveData> TutorialLevelSaveDatas; // 0x28(0x50)
	enum class EPlayerProficiency PlayerProficiency; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Solarland.TutorialLevelSpawner
// Size: 0x250 (Inherited: 0x228)
struct ATutorialLevelSpawner : AActor {
	int32_t SpawnerID; // 0x228(0x04)
	struct FVector BoxExtent; // 0x22c(0x0c)
	bool bSpawnBeginPlay; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	float DelayTime; // 0x23c(0x04)
	struct ATutorialLevelInteractableActor* InteractableActorClass; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	struct ATutorialLevelInteractableActor* SpawnInteractActor(); // Function Solarland.TutorialLevelSpawner.SpawnInteractActor // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0d180
};

// Class Solarland.TutorialLevelSplineComponent
// Size: 0x6a0 (Inherited: 0x630)
struct UTutorialLevelSplineComponent : USplineComponent {
	struct TMap<enum class ESplineMeshType, struct FSplineMeshDetails> SplineMeshMap; // 0x630(0x50)
	struct UTutorialLevelSplineComponent* FollowingSpline; // 0x680(0x08)
	struct TArray<struct USplineMeshComponent*> SplineMeshComponents; // 0x688(0x10)
	char pad_698[0x8]; // 0x698(0x08)

	void SetMeshsVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Solarland.TutorialLevelSplineComponent.SetMeshsVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0cda0
	void SetFollowingSpline(struct UTutorialLevelSplineComponent* InFollowingSpline); // Function Solarland.TutorialLevelSplineComponent.SetFollowingSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0cd20
	void CreateSplineMesh(); // Function Solarland.TutorialLevelSplineComponent.CreateSplineMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0b9e0
};

// Class Solarland.TutorialStepAction
// Size: 0x2d8 (Inherited: 0x70)
struct UTutorialStepAction : UActionNode {
	char pad_70[0x28]; // 0x70(0x28)
	int32_t OwnerTutorialID; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FTutorialActionTableRow Data; // 0xa0(0x228)
	struct UTutorialActionCondition* InterruptConditionBP; // 0x2c8(0x08)
	struct UTutorialActionCondition* EndConditionBP; // 0x2d0(0x08)

	void StartRepeatOperation(); // Function Solarland.TutorialStepAction.StartRepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SpawnBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0cfd0
	void SpawnBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.SpawnBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0cef0
	void ShowUI(); // Function Solarland.TutorialStepAction.ShowUI // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void RepeatOperation(); // Function Solarland.TutorialStepAction.RepeatOperation // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveTick(float DeltaTime); // Function Solarland.TutorialStepAction.ReceiveTick // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveSetupData(); // Function Solarland.TutorialStepAction.ReceiveSetupData // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnReset(); // Function Solarland.TutorialStepAction.ReceiveOnReset // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnEnd(); // Function Solarland.TutorialStepAction.ReceiveOnEnd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveOnBegin(); // Function Solarland.TutorialStepAction.ReceiveOnBegin // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void ReceiveMinExecuteTimeUp(); // Function Solarland.TutorialStepAction.ReceiveMinExecuteTimeUp // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnResetEvent(); // Function Solarland.TutorialStepAction.OnResetEvent // (Final|Native|Private) // @ game+0x1f0c790
	void OnEndedEvent(); // Function Solarland.TutorialStepAction.OnEndedEvent // (Final|Native|Private) // @ game+0x1f0c740
	void OnDisposedEvent(); // Function Solarland.TutorialStepAction.OnDisposedEvent // (Final|Native|Private) // @ game+0x1f0c720
	void OnBeganEvent(); // Function Solarland.TutorialStepAction.OnBeganEvent // (Final|Native|Private) // @ game+0x1f0c540
	struct FTutorialActionTableRow GetTableRowData(); // Function Solarland.TutorialStepAction.GetTableRowData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f0c2d0
	void DestoryBotAIsOnVehicle(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIsOnVehicle // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0bae0
	void DestoryBotAIs(struct TArray<int32_t> SpawnerIds); // Function Solarland.TutorialStepAction.DestoryBotAIs // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0ba00
};

// Class Solarland.TutorialTaskSequenceAction
// Size: 0x90 (Inherited: 0x90)
struct UTutorialTaskSequenceAction : USequenceNode {
};

// Class Solarland.TutorialTriggerCondition
// Size: 0x28 (Inherited: 0x28)
struct UTutorialTriggerCondition : UTutorialCondition {

	struct USolarTutorialManager* GetSolarTutorialManager(); // Function Solarland.TutorialTriggerCondition.GetSolarTutorialManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f0c260
	bool CheckSatisfy(struct FTutorialTableRow& InData); // Function Solarland.TutorialTriggerCondition.CheckSatisfy // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.TweenBase
// Size: 0x2d8 (Inherited: 0x260)
struct UTweenBase : UUserWidget {
	bool AutoPlay; // 0x260(0x01)
	char pad_261[0x3]; // 0x261(0x03)
	float Interval; // 0x264(0x04)
	bool bLoop; // 0x268(0x01)
	bool bEndHide; // 0x269(0x01)
	char pad_26A[0x26]; // 0x26a(0x26)
	struct FMulticastInlineDelegate OnTweenStart; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTweenStop; // 0x2a0(0x10)
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct UWidget* LinkWidget; // 0x2c0(0x08)
	char pad_2C8[0x4]; // 0x2c8(0x04)
	float Progress; // 0x2cc(0x04)
	char pad_2D0[0x8]; // 0x2d0(0x08)

	void Stop(); // Function Solarland.TweenBase.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0d1d0
	void Reset(); // Function Solarland.TweenBase.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0cd00
	void Play(); // Function Solarland.TweenBase.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0cc60
	void InitAndPlay(); // Function Solarland.TweenBase.InitAndPlay // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0c500
	void Init(); // Function Solarland.TweenBase.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0c4e0
};

// Class Solarland.TweenImage
// Size: 0x3d0 (Inherited: 0x2d8)
struct UTweenImage : UTweenBase {
	struct UImage* TargetImg; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FImageColorTween ColorTween; // 0x360(0x48)
	struct FUIRenderOpacityTween OpacityTween; // 0x3a8(0x28)

	void InitImageTween(); // Function Solarland.TweenImage.InitImageTween // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0c520
};

// Class Solarland.TweenText
// Size: 0x3a8 (Inherited: 0x2d8)
struct UTweenText : UTweenBase {
	struct UTextBlock* TargetText; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FTextColorTween ColorTween; // 0x360(0x48)
};

// Class Solarland.TweenWidget
// Size: 0x388 (Inherited: 0x2d8)
struct UTweenWidget : UTweenBase {
	struct UWidget* TargetWidget; // 0x2d8(0x08)
	struct FUIScaleTween ScaleTween; // 0x2e0(0x40)
	struct FUIPositionTween PostionTween; // 0x320(0x40)
	struct FUIRenderOpacityTween OpacityTween; // 0x360(0x28)
};

// Class Solarland.UIBackpackWeaponWidget
// Size: 0x4e0 (Inherited: 0x340)
struct UUIBackpackWeaponWidget : USolarUserWidget {
	struct UButton* BtnWeapon; // 0x340(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x348(0x08)
	struct UCanvasPanel* Panel_Info; // 0x350(0x08)
	struct UHorizontalBox* HorizontalBox_Name; // 0x358(0x08)
	struct UHorizontalBox* HorizontalBox_Ammo; // 0x360(0x08)
	struct UImage* Img_BG; // 0x368(0x08)
	struct UImage* Img_DragDetect; // 0x370(0x08)
	struct UUIDragWidget* Drag_Weapon; // 0x378(0x08)
	struct USolarTextBlock* Txt_Name; // 0x380(0x08)
	struct USolarTextBlock* Txt_BulletNum; // 0x388(0x08)
	struct USolarTextBlock* Txt_BulletSum; // 0x390(0x08)
	struct USolarTextBlock* Txt_Range; // 0x398(0x08)
	struct USolarTextBlock* Txt_Difficulty; // 0x3a0(0x08)
	struct UVerticalBox* Weapon_Detail; // 0x3a8(0x08)
	struct USolarTextBlock* Txt_Weapon_Type; // 0x3b0(0x08)
	struct USolarTextBlock* Txt_DMGNum; // 0x3b8(0x08)
	struct UImage* Img_BulletIcon; // 0x3c0(0x08)
	struct UHorizontalBox* Weapon_Parts_New; // 0x3c8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x3d0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x3d8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x3e0(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x3e8(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x3f0(0x08)
	int32_t weaponid; // 0x3f8(0x04)
	uint32_t WeaponUniqueID; // 0x3fc(0x04)
	int32_t WeaponSlot; // 0x400(0x04)
	int32_t WeaponAmmoNum; // 0x404(0x04)
	int32_t WeaponExtraAmmoNum; // 0x408(0x04)
	enum class EWidgetPassiveMode WeaponPassiveMode; // 0x40c(0x01)
	char pad_40D[0x3]; // 0x40d(0x03)
	struct TMap<enum class EWeaponType, int32_t> WeaponType2TextIdMap; // 0x410(0x50)
	struct TMap<enum class EWeaponType, struct FSoftObjectPath> WeaponType2BulltSpMap; // 0x460(0x50)
	struct FVector2D ImgSkillSize; // 0x4b0(0x08)
	char pad_4B8[0x4]; // 0x4b8(0x04)
	struct TWeakObjectPtr<struct ASolarPlayerNormalWeapon> OwnerWeapon; // 0x4bc(0x08)
	char pad_4C4[0x1c]; // 0x4c4(0x1c)

	void UpdatePassiveMode(); // Function Solarland.UIBackpackWeaponWidget.UpdatePassiveMode // (Final|Native|Protected) // @ game+0x1f0d220
	void SetWidgetPassiveMode(enum class EWidgetPassiveMode InMode); // Function Solarland.UIBackpackWeaponWidget.SetWidgetPassiveMode // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x1f0ce70
	void RefreshBySlot(int32_t InWeaponSlot); // Function Solarland.UIBackpackWeaponWidget.RefreshBySlot // (Final|Native|Public) // @ game+0x1f0cc80
	void OnWeaponUpdateAmmoCount(int32_t InFireModeType, struct ASolarWeapon* InWeapon); // Function Solarland.UIBackpackWeaponWidget.OnWeaponUpdateAmmoCount // (Final|Native|Protected) // @ game+0x1f0cba0
	void OnWeaponSlotUpdateAmmo(int32_t InWeaponSlotID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotUpdateAmmo // (Final|Native|Protected) // @ game+0x1f0cb20
	void OnWeaponSlotQuitReload(int32_t InWeaponSlotID, bool InbFinishReload); // Function Solarland.UIBackpackWeaponWidget.OnWeaponSlotQuitReload // (Final|Native|Protected) // @ game+0x1f0ca60
	void OnWeaponPartChanged(int32_t InWeaponID); // Function Solarland.UIBackpackWeaponWidget.OnWeaponPartChanged // (Final|Native|Protected) // @ game+0x1f0c9e0
	void OnWeaponAmmoChanged(int32_t InWeaponSlot, int32_t InCurrNum, int32_t MaxNum); // Function Solarland.UIBackpackWeaponWidget.OnWeaponAmmoChanged // (Final|Native|Protected) // @ game+0x1f0c8e0
	void OnCharacterLevelChanged(int32_t NewLevel, int32_t OldLevel, struct FString DynamicTip); // Function Solarland.UIBackpackWeaponWidget.OnCharacterLevelChanged // (Final|Native|Protected) // @ game+0x1f0c610
};

// Class Solarland.UIBackpackWidget
// Size: 0x5f0 (Inherited: 0x340)
struct UUIBackpackWidget : USolarUserWidget {
	struct UUIWeaponPartWidget* Weapon_Part_Muzzle; // 0x340(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Grip; // 0x348(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Clip; // 0x350(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_Scope; // 0x358(0x08)
	struct UUIWeaponPartWidget* Weapon_Part_GunStock; // 0x360(0x08)
	struct URichTextBlock* TextBlock_item_2; // 0x368(0x08)
	struct URichTextBlock* TextBlock_item_3; // 0x370(0x08)
	struct URichTextBlock* TextBlock_item_4; // 0x378(0x08)
	struct URichTextBlock* TextBlock_item_5; // 0x380(0x08)
	struct URichTextBlock* TextBlock_item_6; // 0x388(0x08)
	struct URichTextBlock* TextBlock_item_7; // 0x390(0x08)
	struct URichTextBlock* TextBlock_item_8; // 0x398(0x08)
	struct URichTextBlock* TextBlock_item_9; // 0x3a0(0x08)
	struct URichTextBlock* TextBlock_item_10; // 0x3a8(0x08)
	struct UUIDragWidget* dragitem_item_2; // 0x3b0(0x08)
	struct UUIDragWidget* dragitem_item_3; // 0x3b8(0x08)
	struct UUIDragWidget* dragitem_item_4; // 0x3c0(0x08)
	struct UUIDragWidget* dragitem_item_5; // 0x3c8(0x08)
	struct UUIDragWidget* dragitem_item_6; // 0x3d0(0x08)
	struct UUIDragWidget* dragitem_item_7; // 0x3d8(0x08)
	struct UUIDragWidget* dragitem_item_8; // 0x3e0(0x08)
	struct UUIDragWidget* dragitem_item_9; // 0x3e8(0x08)
	struct UUIDragWidget* dragitem_item_10; // 0x3f0(0x08)
	struct UUIDragWidget* dragitem_Relive; // 0x3f8(0x08)
	struct UUIBackpackWeaponWidget* Weapon_A; // 0x400(0x08)
	struct UUIBackpackWeaponWidget* Weapon_B; // 0x408(0x08)
	struct UUIDragWidget* dragitem_Summon; // 0x410(0x08)
	struct UCanvasPanel* Panel_Empty; // 0x418(0x08)
	struct UImage* Img_Summon_Bg; // 0x420(0x08)
	struct UUIDragWidget* dragitem_equip_2; // 0x428(0x08)
	struct UUIDragWidget* dragitem_equip_3; // 0x430(0x08)
	struct UUIDragWidget* dragitem_equip_4; // 0x438(0x08)
	struct UUIDragWidget* dragitem_equip_5; // 0x440(0x08)
	struct UImage* Item_BG_2; // 0x448(0x08)
	struct UImage* Item_BG_3; // 0x450(0x08)
	struct UImage* Item_BG_4; // 0x458(0x08)
	struct UImage* Item_BG_5; // 0x460(0x08)
	struct UImage* Item_Quality_BG_2; // 0x468(0x08)
	struct UImage* Item_Quality_BG_3; // 0x470(0x08)
	struct UImage* Item_Quality_BG_4; // 0x478(0x08)
	struct UImage* Item_Quality_BG_5; // 0x480(0x08)
	struct UImage* Equip_Icon_2; // 0x488(0x08)
	struct UImage* Equip_Icon_3; // 0x490(0x08)
	struct UImage* Equip_Icon_4; // 0x498(0x08)
	struct UImage* Equip_Icon_5; // 0x4a0(0x08)
	struct UButton* BtnShield; // 0x4a8(0x08)
	struct UButton* BtnBattery; // 0x4b0(0x08)
	struct UButton* BtnHorPush; // 0x4b8(0x08)
	struct UButton* BtnVerPush; // 0x4c0(0x08)
	struct UButton* BtnRespawn; // 0x4c8(0x08)
	struct UButton* BtnSpecial; // 0x4d0(0x08)
	struct UButton* BtnSMGAmmo; // 0x4d8(0x08)
	struct USolarTextBlock* Txt_Relive; // 0x4e0(0x08)
	struct UImage* Relive_Quality_BG; // 0x4e8(0x08)
	struct UOverlay* Relive; // 0x4f0(0x08)
	struct UWidgetSwitcher* WidgetSwitcher_Mode; // 0x4f8(0x08)
	struct UCanvasPanel* PickupPosition; // 0x500(0x08)
	struct UButton* Button_Close; // 0x508(0x08)
	struct UUIDropMaskWidget* OnDropMask; // 0x510(0x08)
	struct UUIDropMaskWidget* OnDropMask_2; // 0x518(0x08)
	struct FString Style_ItemNum; // 0x520(0x10)
	struct FString Style_MaxNum; // 0x530(0x10)
	struct FString EquipTexPrePath; // 0x540(0x10)
	bool bWeaponPartInit; // 0x550(0x01)
	char pad_551[0x7]; // 0x551(0x07)
	struct TArray<int32_t> ItemIDArray; // 0x558(0x10)
	struct TArray<struct URichTextBlock*> ItemTextArray; // 0x568(0x10)
	struct TArray<struct UUIDragWidget*> ItemDragWidgetArray; // 0x578(0x10)
	struct TArray<enum class EItemType> EquipTypeArray; // 0x588(0x10)
	struct TArray<struct UUIDragWidget*> EquipDragWidgetArray; // 0x598(0x10)
	struct TArray<struct UImage*> EquipBGArray; // 0x5a8(0x10)
	struct TArray<struct UImage*> EquipQualityBGArray; // 0x5b8(0x10)
	struct TArray<struct UImage*> EquipIconArray; // 0x5c8(0x10)
	struct TArray<struct UButton*> EquipBtnArray; // 0x5d8(0x10)
	int32_t MaxUpgradeLevel; // 0x5e8(0x04)
	char pad_5EC[0x4]; // 0x5ec(0x04)

	void UpdateReviveItemDisplay(); // Function Solarland.UIBackpackWidget.UpdateReviveItemDisplay // (Final|Native|Protected) // @ game+0x1f10930
	void UpdateLevelProgress(float Level); // Function Solarland.UIBackpackWidget.UpdateLevelProgress // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowWeaponUI(); // Function Solarland.UIBackpackWidget.ShowWeaponUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f107a0
	void ShowWeaponPartsUI(); // Function Solarland.UIBackpackWidget.ShowWeaponPartsUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f10780
	void ShowItemUI(); // Function Solarland.UIBackpackWidget.ShowItemUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f10760
	void ShowHomeItemUI(); // Function Solarland.UIBackpackWidget.ShowHomeItemUI // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void ShowEquipUI(); // Function Solarland.UIBackpackWidget.ShowEquipUI // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f10420
	void RefreshUpgradeRewardsDetail(int32_t Level, struct TArray<enum class EClassLevelUpRewardType>& RewardTypeArray, struct TArray<struct FSoftObjectPath>& IconPathArray, struct TArray<struct FString>& DescriptionArray); // Function Solarland.UIBackpackWidget.RefreshUpgradeRewardsDetail // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshTacticalSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshTacticalSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshSuperSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshSuperSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshSummonWeapon(); // Function Solarland.UIBackpackWidget.RefreshSummonWeapon // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f10230
	void RefreshPassiveSkillInfo(struct FString Name, struct FString Description, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshPassiveSkillInfo // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void RefreshCharacterNameAndIcon(struct FString Name, struct TSoftObjectPtr<UTexture2D>& IconPath); // Function Solarland.UIBackpackWidget.RefreshCharacterNameAndIcon // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponWidgetClicked(); // Function Solarland.UIBackpackWidget.OnWeaponWidgetClicked // (Final|Native|Protected|Const) // @ game+0x1f100f0
	void OnSetDropMaskVisibility(bool bVisible); // Function Solarland.UIBackpackWidget.OnSetDropMaskVisibility // (Final|Native|Protected) // @ game+0x1f0fdf0
	void OnPlayerStateRep(enum class EPlayerStateRepType RepType, struct APlayerState* PlayerState); // Function Solarland.UIBackpackWidget.OnPlayerStateRep // (Final|Native|Protected) // @ game+0x1f0fd10
	void OnCharacterLevelExpChanged(int32_t NewLevel, float NewExpRatio); // Function Solarland.UIBackpackWidget.OnCharacterLevelExpChanged // (Final|Native|Protected) // @ game+0x1f0fc20
	void OnCharacterIDSet(int32_t CharacterId); // Function Solarland.UIBackpackWidget.OnCharacterIDSet // (Final|Native|Protected) // @ game+0x1f0fba0
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.UIBackpackWidget.OnCharacterDead // (Final|Native|Protected) // @ game+0x1f0fb20
	void OnBtnVerPushClicked(); // Function Solarland.UIBackpackWidget.OnBtnVerPushClicked // (Final|Native|Protected|Const) // @ game+0x1f0fb00
	void OnBtnSpecialClicked(); // Function Solarland.UIBackpackWidget.OnBtnSpecialClicked // (Final|Native|Protected|Const) // @ game+0x1f0fae0
	void OnBtnShieldClicked(); // Function Solarland.UIBackpackWidget.OnBtnShieldClicked // (Final|Native|Protected|Const) // @ game+0x1f0fac0
	void OnBtnRespawnClicked(); // Function Solarland.UIBackpackWidget.OnBtnRespawnClicked // (Final|Native|Protected|Const) // @ game+0x1f0faa0
	void OnBtnHorPushClicked(); // Function Solarland.UIBackpackWidget.OnBtnHorPushClicked // (Final|Native|Protected|Const) // @ game+0x1f0fa80
	void OnBtnBatteryClicked(); // Function Solarland.UIBackpackWidget.OnBtnBatteryClicked // (Final|Native|Protected|Const) // @ game+0x1f0fa60
	void OnBackpackVisibilitySet(bool bInVisible); // Function Solarland.UIBackpackWidget.OnBackpackVisibilitySet // (Final|Native|Protected) // @ game+0x1f0f9d0
	void OnBackpackModeChanged(int32_t ModeIndex); // Function Solarland.UIBackpackWidget.OnBackpackModeChanged // (Final|Native|Protected) // @ game+0x1f0f950
	void InitDefaultWeaponPart(); // Function Solarland.UIBackpackWidget.InitDefaultWeaponPart // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f0f930
	void HideUpgradeDetail(int32_t Level); // Function Solarland.UIBackpackWidget.HideUpgradeDetail // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
	struct FString ClearWidgetInPanel(struct FName& InPanelName); // Function Solarland.UIBackpackWidget.ClearWidgetInPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b820
	void BindDelegates(); // Function Solarland.UIBackpackWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1f0f910
	struct FString AddWidgetToPanel(struct UPanelSlot*& OutResult, struct UWidget* InWidget, struct FName& InPanelName, bool bReplaceOld); // Function Solarland.UIBackpackWidget.AddWidgetToPanel // (Final|Native|Protected|HasOutParms) // @ game+0x1f0b460
};

// Class Solarland.UIComponentNationalFlag
// Size: 0x368 (Inherited: 0x340)
struct UUIComponentNationalFlag : USolarUserWidget {
	struct FVector2D NationalFlagSize; // 0x340(0x08)
	struct FVector2D ClanFlagSize; // 0x348(0x08)
	bool bIgnoreAccountFlagSwitch; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct UImage* Img_FlagIcon; // 0x358(0x08)
	int32_t CurFlagId; // 0x360(0x04)
	char pad_364[0x4]; // 0x364(0x04)

	void RefreshFlagByPath(struct FString TextureFullPath); // Function Solarland.UIComponentNationalFlag.RefreshFlagByPath // (Final|Native|Public|BlueprintCallable) // @ game+0x1f10190
	void RefreshFlag(int32_t InFlagID); // Function Solarland.UIComponentNationalFlag.RefreshFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x1f10110
};

// Class Solarland.UICustomNoticeLayerWidget
// Size: 0x500 (Inherited: 0x340)
struct UUICustomNoticeLayerWidget : USolarUserWidget {
	struct TMap<enum class ECustomNoticeType, struct UCanvasPanel*> NoticePanel; // 0x340(0x50)
	char pad_390[0xa0]; // 0x390(0xa0)
	struct TMap<enum class ECustomNoticeColor, struct FNoticeColorData> NoticeColor; // 0x430(0x50)
	struct UCustomNoticeTable* NoticeConfig; // 0x480(0x08)
	struct UCustomNoticeImageTable* NoticeImageConfig; // 0x488(0x08)
	struct FSoftObjectPath GlobalKillNoticeWidgetPath; // 0x490(0x18)
	int32_t GlobalKillMaxShowNum; // 0x4a8(0x04)
	int32_t GlobalKillNoticeBeginPosX; // 0x4ac(0x04)
	int32_t GlobalKillNoticeBeginPosY; // 0x4b0(0x04)
	int32_t GlobalKillNoticeInterval; // 0x4b4(0x04)
	char pad_4B8[0x28]; // 0x4b8(0x28)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeNormalPtr; // 0x4e0(0x08)
	struct TWeakObjectPtr<struct UBattleNoticePickup> PickUpNoticeHomePtr; // 0x4e8(0x08)
	struct TWeakObjectPtr<struct UBattleNoticeEquipReplace> EquipReplaceNoticePtr; // 0x4f0(0x08)
	char pad_4F8[0x4]; // 0x4f8(0x04)
	int32_t SkydivingCaptainNoticeId; // 0x4fc(0x04)

	void UpdateGlobalKillNoticePosition(); // Function Solarland.UICustomNoticeLayerWidget.UpdateGlobalKillNoticePosition // (Native|Event|Protected|BlueprintEvent) // @ game+0x1259730
	void ShowWidgetAsync(struct FNoticeData& NoticeData); // Function Solarland.UICustomNoticeLayerWidget.ShowWidgetAsync // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x1f107c0
	void ShowGameNoticeCustom(struct FString NoticeText, enum class ECustomNoticeType NoticeType, struct UUINoticeBase* NoticeClass, float NoticeTime, enum class ECustomNoticeColor NoticeColor, struct UPaperSprite* NoticeIcon); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeCustom // (Final|Native|Public|BlueprintCallable) // @ game+0x1f10590
	void ShowGameNoticeByID(int32_t NoticeId, struct TMap<struct FString, struct FString>& Param); // Function Solarland.UICustomNoticeLayerWidget.ShowGameNoticeByID // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f10440
	void OnSkydivingCaptainChanged(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UICustomNoticeLayerWidget.OnSkydivingCaptainChanged // (Final|Native|Protected) // @ game+0x1f0ffd0
	void OnShowHUDGameNotice(int32_t InNoticeID, struct FHUDNoticeParams& InNoticeParams); // Function Solarland.UICustomNoticeLayerWidget.OnShowHUDGameNotice // (Final|Native|Protected|HasOutParms) // @ game+0x1f0fe80
	void OnPickUpNoticeAnimFinished(); // Function Solarland.UICustomNoticeLayerWidget.OnPickUpNoticeAnimFinished // (Final|Native|Private) // @ game+0x1f0fcf0
	void InitNoticePanel(); // Function Solarland.UICustomNoticeLayerWidget.InitNoticePanel // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.UIDefenderPlaerShowWidget
// Size: 0x3c8 (Inherited: 0x340)
struct UUIDefenderPlaerShowWidget : USolarUserWidget {
	struct UScaleBox* ScaleBox_Card; // 0x340(0x08)
	struct FString playerName; // 0x348(0x10)
	int32_t Level; // 0x358(0x04)
	int32_t RankLevelID; // 0x35c(0x04)
	int32_t PlayerGender; // 0x360(0x04)
	bool bIsMyTeam; // 0x364(0x01)
	char pad_365[0x3]; // 0x365(0x03)
	int32_t PlayerSeat; // 0x368(0x04)
	bool bIsMySelf; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	int32_t CardPose; // 0x370(0x04)
	int32_t Cardbackground; // 0x374(0x04)
	struct TArray<struct FExpRankMedalData> AllExpRankMedalData; // 0x378(0x10)
	int32_t CharacterExp; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct TArray<struct FMedalInfo> TargetCardMedalArray; // 0x390(0x10)
	struct ASolarPlayerState* PlayerState; // 0x3a0(0x08)
	struct ASolarBusinessCardCharacter* RTCharacter; // 0x3a8(0x08)
	struct AActor* RTCharacterBackground; // 0x3b0(0x08)
	struct FVector RTLocation; // 0x3b8(0x0c)
	char pad_3C4[0x4]; // 0x3c4(0x04)

	void SetPlayerShowInfo(struct ASolarPlayerState* PS, bool bIsSelf, int32_t Seat, bool bIsSelfTeam, int32_t SelfLevel, struct FVector CardRTLocation); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerShowInfo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x1f10250
	void SetPlayerBusinessInfo(struct FString ClanName, struct FString Name, int32_t PlayerLevel, int32_t PlayerAccountFlag, int32_t PlayerRankLevel, int32_t PlayerPlayerNumber, struct FExpRankMedalData ExpRankMedalData, int32_t CharacterProficiencyExp, int32_t CharacterId); // Function Solarland.UIDefenderPlaerShowWidget.SetPlayerBusinessInfo // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetCharacterSkin(); // Function Solarland.UIDefenderPlaerShowWidget.SetCharacterSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void SetBusinessCard(int32_t PoseId, int32_t BackgroundId, int32_t SkinId, struct UScaleBox* ParentPanel); // Function Solarland.UIDefenderPlaerShowWidget.SetBusinessCard // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnRefreshWidget(); // Function Solarland.UIDefenderPlaerShowWidget.OnRefreshWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1f0fdd0
	struct FString GetNameCardCharacterPathByCharacterIDAndCardPose(int32_t CharacterId, int32_t CardPoseID); // Function Solarland.UIDefenderPlaerShowWidget.GetNameCardCharacterPathByCharacterIDAndCardPose // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.UIDefenderTeamShowWidget
// Size: 0x460 (Inherited: 0x340)
struct UUIDefenderTeamShowWidget : USolarUserWidget {
	struct UUIDefenderPlaerShowWidget* Player_2; // 0x340(0x08)
	struct UUIDefenderPlaerShowWidget* Player_3; // 0x348(0x08)
	struct UUIDefenderPlaerShowWidget* Player_4; // 0x350(0x08)
	struct UUIDefenderPlaerShowWidget* Player_5; // 0x358(0x08)
	struct UWidgetAnimation* Exit_Anim; // 0x360(0x08)
	int32_t PlayerNum; // 0x368(0x04)
	bool bIsMyTeam; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
	struct FName LevelName; // 0x370(0x08)
	struct FString ActorName_2; // 0x378(0x10)
	struct FString ActorName_3; // 0x388(0x10)
	struct FString ActorName_4; // 0x398(0x10)
	struct FString ActorName_5; // 0x3a8(0x10)
	struct FString CameraName_2; // 0x3b8(0x10)
	struct FString CameraName_3; // 0x3c8(0x10)
	struct FString CameraName_4; // 0x3d8(0x10)
	struct FString CameraName_5; // 0x3e8(0x10)
	struct TArray<struct ASolarPlayerState*> MyTeamPlayerState; // 0x3f8(0x10)
	struct TArray<struct ASolarPlayerState*> DefenderTeamPlayerState; // 0x408(0x10)
	struct TArray<struct UUIDefenderPlaerShowWidget*> ShowWidget; // 0x418(0x10)
	struct TArray<struct AActor*> OutActors; // 0x428(0x10)
	struct TArray<struct ASceneCapture2D*> OutSceneCapture2Ds; // 0x438(0x10)
	struct TArray<struct FWidgetTransform> Transforms; // 0x448(0x10)
	char pad_458[0x8]; // 0x458(0x08)

	void UpdateOpeningShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.UpdateOpeningShow // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SwitchTeamShow(enum class EDefenderTeamType TeamType); // Function Solarland.UIDefenderTeamShowWidget.SwitchTeamShow // (Final|Native|Public|BlueprintCallable) // @ game+0x1f160a0
	void ShowPlayerInfo(); // Function Solarland.UIDefenderTeamShowWidget.ShowPlayerInfo // (Final|Native|Public) // @ game+0x1f16080
	void SetMyTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetMyTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f159f0
	void SetDefenderTeamPlayerState(struct TArray<struct ASolarPlayerState*>& TeamPlayerState); // Function Solarland.UIDefenderTeamShowWidget.SetDefenderTeamPlayerState // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f14d10
	void CloseDefenderTeamShowWidget(); // Function Solarland.UIDefenderTeamShowWidget.CloseDefenderTeamShowWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x1f13a00
};

// Class Solarland.UIDragWidget
// Size: 0x428 (Inherited: 0x340)
struct UUIDragWidget : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	struct UImage* ItemImage; // 0x350(0x08)
	struct USizeBox* WidgetSize; // 0x358(0x08)
	struct FSlateBrush ImageOuter; // 0x360(0x98)
	int32_t ItemID; // 0x3f8(0x04)
	int32_t ItemNum; // 0x3fc(0x04)
	enum class EItemType ItemType; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct FString ItemName; // 0x408(0x10)
	int32_t WeaponSlot; // 0x418(0x04)
	struct FVector2D OffsetVec; // 0x41c(0x08)
	char pad_424[0x4]; // 0x424(0x04)

	void SetDragWidgetSize(struct FVector2D InSize); // Function Solarland.UIDragWidget.SetDragWidgetSize // (Final|Native|Public|HasDefaults) // @ game+0x1f15280
	void SetDragWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIDragWidget.SetDragWeaponSlot // (Final|Native|Public) // @ game+0x1f15200
	void SetDragItemData(int32_t InID, int32_t InNum, int32_t InItemType, struct FString InItemName); // Function Solarland.UIDragWidget.SetDragItemData // (Final|Native|Public) // @ game+0x1f150a0
	void SetDragImageRenderScale(struct FVector2D InScale); // Function Solarland.UIDragWidget.SetDragImageRenderScale // (Final|Native|Public|HasDefaults) // @ game+0x1f15020
	void SetDragImageBrushFromTexture(struct UTexture2D* InTexture2D, bool InMatchSize); // Function Solarland.UIDragWidget.SetDragImageBrushFromTexture // (Final|Native|Public) // @ game+0x1f14f50
	void SetDragImageBrush(struct FSlateBrush& InBrush); // Function Solarland.UIDragWidget.SetDragImageBrush // (Final|Native|Public|HasOutParms) // @ game+0x1f14dc0
	void OnEndDragDropCall(bool InVisibility); // Function Solarland.UIDragWidget.OnEndDragDropCall // (Final|Native|Protected) // @ game+0x1f14990
	void BindDelegates(); // Function Solarland.UIDragWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1f13840
};

// Class Solarland.UIDropMaskWidget
// Size: 0x348 (Inherited: 0x340)
struct UUIDropMaskWidget : USolarUserWidget {
	struct USolarDragDropOperation* OperationData; // 0x340(0x08)

	void OnDropMutiItem(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIDropMaskWidget.OnDropMutiItem // (Final|Native|Protected) // @ game+0x1f148d0
	void OnDropConfirmHandle(); // Function Solarland.UIDropMaskWidget.OnDropConfirmHandle // (Final|Native|Protected) // @ game+0x1f148b0
};

// Class Solarland.UIEmojiContainer
// Size: 0x378 (Inherited: 0x340)
struct UUIEmojiContainer : USolarUserWidget {
	char pad_340[0x10]; // 0x340(0x10)
	struct UCanvasPanel* Panel; // 0x350(0x08)
	char pad_358[0x10]; // 0x358(0x10)
	struct USolarUserWidget* CommonEmojiBubbleSubClass; // 0x368(0x08)
	int32_t PreCreateEmojiNum; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
};

// Class Solarland.UIGlobalConfig
// Size: 0x120 (Inherited: 0x30)
struct UUIGlobalConfig : UDataAsset {
	struct TMap<char, struct FTeamMemberColor> TeamMemberColors; // 0x30(0x50)
	struct TMap<char, struct FItemQualityData> ItemQualityData; // 0x80(0x50)
	struct TMap<char, struct FOBTeamColor> OBTeamColors; // 0xd0(0x50)

	struct FOBTeamColor GetOBTeamColor(int32_t TeamNum); // Function Solarland.UIGlobalConfig.GetOBTeamColor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f13c90
};

// Class Solarland.UILayerBase
// Size: 0x280 (Inherited: 0x260)
struct UUILayerBase : UUserWidget {
	struct UCanvasPanel* InGameBaseUILayer; // 0x260(0x08)
	struct UCanvasPanel* VirtualControllerLayer; // 0x268(0x08)
	struct UCanvasPanel* InGamePopupLayer; // 0x270(0x08)
	struct UCanvasPanel* OutGameUILayer; // 0x278(0x08)
};

// Class Solarland.UIManager
// Size: 0x128 (Inherited: 0x30)
struct UUIManager : USolarGameManager {
	char pad_30[0x30]; // 0x30(0x30)
	struct TArray<struct FDelegate> OnBigMapOpenDelegateGroup; // 0x60(0x10)
	struct TArray<struct FDelegate> OnBigMapVisibilityChangedDelegateGroup; // 0x70(0x10)
	struct UDataTable* BattleWidgetSettings; // 0x80(0x08)
	struct USolarUIRoot* SolarUIRoot; // 0x88(0x08)
	struct TArray<struct FDestroyObjectStruct> NeedToDestroyObjects; // 0x90(0x10)
	char pad_A0[0x88]; // 0xa0(0x88)

	void WatchReference(); // Function Solarland.UIManager.WatchReference // (Final|Native|Public) // @ game+0x1f16370
	void WatchAllReference(); // Function Solarland.UIManager.WatchAllReference // (Final|Native|Public) // @ game+0x1f16350
	void UpdateButtonSprite(struct UButton* TargetButton, struct FString AtlasType, struct FString NormalSpName, struct FString PressedSpName, struct FString HoveredSpName, struct FString DisableSpName); // Function Solarland.UIManager.UpdateButtonSprite // (Final|Native|Static|Public) // @ game+0x1f16140
	void TriggerDelegate(); // Function Solarland.UIManager.TriggerDelegate // (Final|Native|Public) // @ game+0x1f16120
	struct USolarUserWidget* ShowUIByName(struct FString InName, int32_t RootID); // Function Solarland.UIManager.ShowUIByName // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SetWidgetLayout(struct UWidget* InWidget, float Scale, float Opacity, float PositionX, float PositionY, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetLayout // (Final|Native|Static|Public) // @ game+0x1f15e00
	void SetWidgetChildrenLayout(struct UUserWidget* InRootWidget, struct FName& PanelAliasName, float Scale, float Opacity, float PositionX, float PositionY, bool bInVisible, bool bInCanHide, float AnchorsMinimumX, float AnchorsMinimumY, float AnchorsMaximumX, float AnchorsMaximumY); // Function Solarland.UIManager.SetWidgetChildrenLayout // (Final|Native|Static|Public|HasOutParms) // @ game+0x1f15aa0
	struct USolarUserWidget* SetUIActive(struct USolarUserWidget* InWidget, bool Inactive); // Function Solarland.UIManager.SetUIActive // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void SetMaterialInstanceParams(struct UImage* Image, struct FString ParamName, float Value); // Function Solarland.UIManager.SetMaterialInstanceParams // (Final|Native|Static|Public) // @ game+0x1f158e0
	void SetMaterialInstanceColor(struct UImage* Image, struct FString ParamName, struct FLinearColor& Value); // Function Solarland.UIManager.SetMaterialInstanceColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1f157d0
	void SetLoadingUIByLevelAndDisplay(int32_t InModelID, int32_t InLevel, int32_t InMapIndex, bool InDisableCustomLoading); // Function Solarland.UIManager.SetLoadingUIByLevelAndDisplay // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void SetImageTintColor(struct UImage* Img, struct FLinearColor& InColor); // Function Solarland.UIManager.SetImageTintColor // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1f15710
	void SetImageTexture(struct UImage* Img, struct UTexture2D* Texture); // Function Solarland.UIManager.SetImageTexture // (Final|Native|Static|Public) // @ game+0x1f15660
	void SetImageFromTextureOrSprite(struct UImage* DstImage, struct FSoftObjectPath& Path, bool bMatchSize); // Function Solarland.UIManager.SetImageFromTextureOrSprite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1f15530
	void SetImageColor(struct UImage* Img, float R, float G, float B, float A); // Function Solarland.UIManager.SetImageColor // (Final|Native|Static|Public) // @ game+0x1f153b0
	void SetFireInputStyle(struct UFireInputWidget* FireInput, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetFireInputStyle // (Final|Native|Static|Public) // @ game+0x1f15300
	void SetCheckedState(struct UCheckBox* Box, enum class ECheckBoxState State); // Function Solarland.UIManager.SetCheckedState // (Final|Native|Static|Public) // @ game+0x1f14c60
	void SetCheckboxStyle(struct UCheckBox* CheckBox, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetCheckboxStyle // (Final|Native|Static|Public) // @ game+0x1f14bb0
	void SetCheckBoxIsChecked(struct UCheckBox* CheckBox, bool Checked); // Function Solarland.UIManager.SetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x1f14af0
	void SetButtonStyle(struct UButton* Btn, struct USlateWidgetStyleAsset* Style); // Function Solarland.UIManager.SetButtonStyle // (Final|Native|Static|Public) // @ game+0x1f14a40
	void RemoveAllWidgets(); // Function Solarland.UIManager.RemoveAllWidgets // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OpenUIGM(struct FString UIID, int32_t RootID); // Function Solarland.UIManager.OpenUIGM // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OpenConfirmUIInLua(int32_t ConfirmID); // Function Solarland.UIManager.OpenConfirmUIInLua // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnLuaHotReloadFileChanged(struct FString LuaSysPath, struct FString LuaPathName); // Function Solarland.UIManager.OnLuaHotReloadFileChanged // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnInitLuaHotReload(); // Function Solarland.UIManager.OnInitLuaHotReload // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnGameManagersInitialized(); // Function Solarland.UIManager.OnGameManagersInitialized // (Final|Native|Protected) // @ game+0x1f14a20
	void OnClientStartGame(); // Function Solarland.UIManager.OnClientStartGame // (Final|Native|Protected) // @ game+0x1f14890
	void LuaCloseUI(struct FString MapName); // Function Solarland.UIManager.LuaCloseUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct UTexture2D* LoadTexture2DBySoftPath(struct FSoftObjectPath& Path); // Function Solarland.UIManager.LoadTexture2DBySoftPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1f147e0
	struct UTexture2D* LoadTexture2DByPath(struct UObject* InOuter, struct FString FullPath); // Function Solarland.UIManager.LoadTexture2DByPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f14700
	struct UTexture2D* LoadTexture2D(struct UObject* InOuter, struct FString TextureType, struct FString TexName); // Function Solarland.UIManager.LoadTexture2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f145d0
	struct UTexture2D* LoadQualityBG(struct UObject* InOuter, int32_t InQuality); // Function Solarland.UIManager.LoadQualityBG // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f14510
	struct UPaperSprite* LoadPaperSprite(struct UObject* InOuter, struct FString AtlasPath, struct FString SpName); // Function Solarland.UIManager.LoadPaperSprite // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f143e0
	struct UMaterialInterface* LoadMaterialInstance(struct UObject* InOuter, struct FString MaterialType, struct FString MaterialName); // Function Solarland.UIManager.LoadMaterialInstance // (Final|Native|Static|Public) // @ game+0x1f142b0
	bool IsWidgetVisibleForDisplay(struct UWidget* InWidget); // Function Solarland.UIManager.IsWidgetVisibleForDisplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f14230
	void InvalidateWidgetPrepass(struct UWidget* InWidget); // Function Solarland.UIManager.InvalidateWidgetPrepass // (Final|Native|Static|Public) // @ game+0x1f141c0
	void InitLvlTextWidget(struct UTextBlock* InHeadTextWidget, struct UTextBlock* InTrailTextWidget); // Function Solarland.UIManager.InitLvlTextWidget // (Final|Native|Static|Public) // @ game+0x1f14110
	struct ASolarCharacter* GetWidgetOwningCharacter(struct UWidget* InWidget); // Function Solarland.UIManager.GetWidgetOwningCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f14090
	struct FString GetWeaponTextureFullPath(struct FString& IconPath); // Function Solarland.UIManager.GetWeaponTextureFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f13fa0
	struct UUserWidget* GetUIPanel(struct FString MapName); // Function Solarland.UIManager.GetUIPanel // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FString GetTexture2DFullPath(struct FString& PrePath, struct FString& IconPath); // Function Solarland.UIManager.GetTexture2DFullPath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f13e40
	struct FString GetQualityBGFullPath(int32_t InQuality, bool bWithSuffix); // Function Solarland.UIManager.GetQualityBGFullPath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1f13d40
	struct UTexture2D* GetPlayerAvatarByID(int32_t PlayerAvatarID); // Function Solarland.UIManager.GetPlayerAvatarByID // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	int32_t GetLobbyID(); // Function Solarland.UIManager.GetLobbyID // (Event|Public|BlueprintEvent|Const) // @ game+0xae69f0
	bool GetCheckBoxIsChecked(struct UCheckBox* CheckBox); // Function Solarland.UIManager.GetCheckBoxIsChecked // (Final|Native|Static|Public) // @ game+0x1f13c10
	struct UCanvasPanelSlot* GetCanvasPanelSlotForWidget(struct UWidget* Widget); // Function Solarland.UIManager.GetCanvasPanelSlotForWidget // (Final|Native|Static|Public) // @ game+0x1f13b90
	struct FCustomWidget_TableRow GetBattleWidgetSetting(struct FString ConfigName); // Function Solarland.UIManager.GetBattleWidgetSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x1f13a20
	struct UUserWidget* GetBattleBackpackWidget(); // Function Solarland.UIManager.GetBattleBackpackWidget // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ExitSpectateMode(); // Function Solarland.UIManager.ExitSpectateMode // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void EnterSpectateMode(); // Function Solarland.UIManager.EnterSpectateMode // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void CloseUIGM(struct FString UIID); // Function Solarland.UIManager.CloseUIGM // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void CloseLoadingUI(); // Function Solarland.UIManager.CloseLoadingUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct FMargin ClampInScreenOffsets(struct UWidget* WorldContextObject, struct FMargin& Offsets, struct FAnchors& Anchors, struct FVector2D& Alignment); // Function Solarland.UIManager.ClampInScreenOffsets // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x1f13860
};

// Class Solarland.UIMassDiscardWidget
// Size: 0x3a0 (Inherited: 0x340)
struct UUIMassDiscardWidget : USolarUserWidget {
	char pad_340[0x20]; // 0x340(0x20)
	struct UButton* Button_Increase; // 0x360(0x08)
	struct UButton* Button_Decrease; // 0x368(0x08)
	struct UComponentButtonBaseWidget* Button_Confirm; // 0x370(0x08)
	struct UComponentButtonBaseWidget* Button_Cancel; // 0x378(0x08)
	struct USlider* Slider_Quantity; // 0x380(0x08)
	struct UProgressBar* ProgressBar_Quantity; // 0x388(0x08)
	struct UTextBlock* Text_Quantity; // 0x390(0x08)
	struct UTextBlock* Text_Total; // 0x398(0x08)

	void SetDiscardItemData(int32_t InItemID, int32_t InTotalCount); // Function Solarland.UIMassDiscardWidget.SetDiscardItemData // (Final|Native|Protected) // @ game+0x1f1a350
	void OnSliderValueChanged(float InValue); // Function Solarland.UIMassDiscardWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x1f19fd0
	void OnLongPressUpdate(); // Function Solarland.UIMassDiscardWidget.OnLongPressUpdate // (Final|Native|Protected) // @ game+0x1f19e90
	void OnDiscardItemNumChanged(); // Function Solarland.UIMassDiscardWidget.OnDiscardItemNumChanged // (Final|Native|Protected) // @ game+0x1f19df0
	void OnBtnIncreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseReleased // (Final|Native|Protected) // @ game+0x1f19d10
	void OnBtnIncreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreasePressed // (Final|Native|Protected) // @ game+0x1f19d50
	void OnBtnIncreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnIncreaseClicked // (Final|Native|Protected) // @ game+0x1f19d30
	void OnBtnDecreaseReleased(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseReleased // (Final|Native|Protected) // @ game+0x1f19d10
	void OnBtnDecreasePressed(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreasePressed // (Final|Native|Protected) // @ game+0x1f19cf0
	void OnBtnDecreaseClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnDecreaseClicked // (Final|Native|Protected) // @ game+0x1f19cd0
	void OnBtnConfirmClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnConfirmClicked // (Final|Native|Protected) // @ game+0x1f19cb0
	void OnBtnCancelClicked(); // Function Solarland.UIMassDiscardWidget.OnBtnCancelClicked // (Final|Native|Protected) // @ game+0x1f19c90
	void InitWidgets(); // Function Solarland.UIMassDiscardWidget.InitWidgets // (Final|Native|Protected) // @ game+0x1f19c70
	void BindDelegates(); // Function Solarland.UIMassDiscardWidget.BindDelegates // (Final|Native|Protected) // @ game+0x1f19970
};

// Class Solarland.UINavigationManager
// Size: 0xb0 (Inherited: 0x30)
struct UUINavigationManager : USolarGameManager {
	char pad_30[0x8]; // 0x30(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> WidgetOpenedMap; // 0x38(0x50)
	struct TArray<struct USolarUserWidget*> TmpRemovedWidgets; // 0x88(0x10)
	char pad_98[0x10]; // 0x98(0x10)
	struct USolarUIRoot* SolarUIRoot; // 0xa8(0x08)

	void UnbindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.UnbindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct USolarUserWidget* ShowUIBySubClass(struct USolarUserWidget* SubClass, enum class EUIRoot RootID); // Function Solarland.UINavigationManager.ShowUIBySubClass // (Final|Native|Public) // @ game+0x1f1a710
	bool ShowPanelUI(struct USolarUserWidget* createWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ShowPanelUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void RemoveUIFromOpenedMap(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.RemoveUIFromOpenedMap // (Final|Native|Public) // @ game+0x1f1a090
	void RemoveAllSolarWidgets(); // Function Solarland.UINavigationManager.RemoveAllSolarWidgets // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void PrePooledWidgetReset(struct UUserWidget* UserWidget); // Function Solarland.UINavigationManager.PrePooledWidgetReset // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void OnShowPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnShowPanelUI // (Final|Native|Protected) // @ game+0x1f19f50
	void OnPostLoadMapInitUIRoot(struct UWorld* InWorld); // Function Solarland.UINavigationManager.OnPostLoadMapInitUIRoot // (Final|Native|Public) // @ game+0x8e33f0
	void OnOpenPanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnOpenPanelUI // (Final|Native|Protected) // @ game+0x1f19eb0
	void OnHidePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnHidePanelUI // (Final|Native|Protected) // @ game+0x1f19e10
	void OnClosePanelUI(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.OnClosePanelUI // (Final|Native|Protected) // @ game+0x1f19d70
	struct USolarUserWidget* GetShowTopWidget(); // Function Solarland.UINavigationManager.GetShowTopWidget // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	struct UUserWidget* GetOpenedWidget(struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.GetOpenedWidget // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void CloseUIBySubClass(struct USolarUserWidget* SubClass); // Function Solarland.UINavigationManager.CloseUIBySubClass // (Final|Native|Public) // @ game+0x1f19aa0
	void ClosePanelUI(struct USolarUserWidget* closeWidget, struct FString UniqueWidgetKey); // Function Solarland.UINavigationManager.ClosePanelUI // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void ClearAllOpenedWidget(); // Function Solarland.UINavigationManager.ClearAllOpenedWidget // (Final|Native|Public) // @ game+0x1f19a40
	void BindWidgetVisibilityChangedEvent(struct FDelegate& VisibilityChangedEvent); // Function Solarland.UINavigationManager.BindWidgetVisibilityChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f19990
	void BindCustomControlDefine(struct USolarUserWidget* PanelWidget, struct USolarUserWidget* UserWidget, struct FString FullPath); // Function Solarland.UINavigationManager.BindCustomControlDefine // (Event|Public|BlueprintEvent) // @ game+0xae69f0
	void BatchRemovedWidgets(bool bRemoveAll); // Function Solarland.UINavigationManager.BatchRemovedWidgets // (Final|Native|Public) // @ game+0x1f198e0
	void AddUIToOpenedMap(struct FString UniqueWidgetKey, struct USolarUserWidget* Widget); // Function Solarland.UINavigationManager.AddUIToOpenedMap // (Final|Native|Public) // @ game+0x1f19800
	void AddBatchRemovedWidget(struct USolarUserWidget* UserWidget); // Function Solarland.UINavigationManager.AddBatchRemovedWidget // (Final|Native|Public) // @ game+0x1f19780
};

// Class Solarland.UINotice_TaskComplete
// Size: 0x3a0 (Inherited: 0x368)
struct UUINotice_TaskComplete : UUINoticeBase {
	struct UWidgetAnimation* FinishTaskAnim; // 0x368(0x08)
	struct UWidgetAnimation* ExitTaskAnim; // 0x370(0x08)
	struct USolarTextBlock* Txt_TaskPercent; // 0x378(0x08)
	struct USolarTextBlock* Txt_TaskDescTex; // 0x380(0x08)
	struct UCanvasPanel* Normal; // 0x388(0x08)
	struct UCanvasPanel* Finish; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)

	void OnTaskFinishedAnimEnd(); // Function Solarland.UINotice_TaskComplete.OnTaskFinishedAnimEnd // (Final|Native|Public) // @ game+0x1f1a050
};

// Class Solarland.UINoticeKill
// Size: 0x3c8 (Inherited: 0x368)
struct UUINoticeKill : UUINoticeBase {
	struct UTextBlock* KillerNameWidget; // 0x368(0x08)
	struct UTextBlock* VictimNameWidget; // 0x370(0x08)
	struct USolarImage* KillTypeWidget; // 0x378(0x08)
	struct UImage* WeaponTypeWidget; // 0x380(0x08)
	struct UImage* ImgeKillBar_Special; // 0x388(0x08)
	struct UImage* ImgeKillBar_Common; // 0x390(0x08)
	struct UUIComponentNationalFlag* KillerFlagWidget; // 0x398(0x08)
	struct UUIComponentNationalFlag* KilledFlagWidget; // 0x3a0(0x08)
	struct UUserWidget* KillerTeamNumb; // 0x3a8(0x08)
	struct UUserWidget* KilledTeamNumb; // 0x3b0(0x08)
	struct UContentWidget* RevengeContentWidget; // 0x3b8(0x08)
	struct UContentWidget* ShutDownContentWidget; // 0x3c0(0x08)

	int32_t RefreshSwticher(); // Function Solarland.UINoticeKill.RefreshSwticher // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.UINoticeKillCombo
// Size: 0x3c0 (Inherited: 0x368)
struct UUINoticeKillCombo : UUINoticeBase {
	enum class ELocalNoticeType LocalNoticeType; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x370(0x08)
	struct UImage* Img_KillEffect; // 0x378(0x08)
	struct UCanvasPanel* Panel_KillEffectInfo; // 0x380(0x08)
	struct USolarTextBlock* Text_KillEffectInfo; // 0x388(0x08)
	struct USolarTextBlock* Text_ShutDownInfo; // 0x390(0x08)
	struct USolarTextBlock* Text_KillerName; // 0x398(0x08)
	struct USolarImage* Img_Killer; // 0x3a0(0x08)
	struct USolarTextBlock* Text_KilledName; // 0x3a8(0x08)
	struct USolarImage* Img_Killed; // 0x3b0(0x08)
	struct USolarRichTextBlock* Text_TerminatorName; // 0x3b8(0x08)
};

// Class Solarland.UINoticeKillLeader
// Size: 0x390 (Inherited: 0x368)
struct UUINoticeKillLeader : UUINoticeBase {
	bool bIsKillLeaderShutDown; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct UWidgetSwitcher* WidgetSwitcher_1; // 0x370(0x08)
	struct USolarTextBlock* text_killleader; // 0x378(0x08)
	struct USolarTextBlock* Txt_shutdown_killleader; // 0x380(0x08)
	struct USolarTextBlock* Txt_death_name; // 0x388(0x08)
};

// Class Solarland.UINoticeKillLeaderInfo
// Size: 0x370 (Inherited: 0x368)
struct UUINoticeKillLeaderInfo : UUINoticeBase {
	struct USolarTextBlock* Text_KillLeaderInfo; // 0x368(0x08)
};

// Class Solarland.UINoticeKillTotal
// Size: 0x430 (Inherited: 0x368)
struct UUINoticeKillTotal : UUINoticeBase {
	struct UWidgetSwitcher* wgs_combo_phase; // 0x368(0x08)
	struct USolarTextBlock* Text_NickName; // 0x370(0x08)
	int32_t ActiveKillTotalWidgetIndex; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct TMap<int32_t, int32_t> KillTotalTextMap; // 0x380(0x50)
	char pad_3D0[0x60]; // 0x3d0(0x60)
};

// Class Solarland.UINoticeReviveDisableHint
// Size: 0x388 (Inherited: 0x368)
struct UUINoticeReviveDisableHint : UUINoticeBase {
	struct USolarTextBlock* Text_CDData; // 0x368(0x08)
	struct UWidgetAnimation* Loop_Anim; // 0x370(0x08)
	char pad_378[0x10]; // 0x378(0x10)
};

// Class Solarland.UINoticeSkydivingCaptain
// Size: 0x368 (Inherited: 0x368)
struct UUINoticeSkydivingCaptain : UUINoticeBase {

	void RefreshContent(int32_t TeamIndex, struct FString playerName, bool IsLocalPlayer); // Function Solarland.UINoticeSkydivingCaptain.RefreshContent // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.UINoticeVictory
// Size: 0x418 (Inherited: 0x368)
struct UUINoticeVictory : UUINoticeBase {
	struct UButton* BtnReturn; // 0x368(0x08)
	char pad_370[0xa8]; // 0x370(0xa8)

	void OnReturnBtnClick(); // Function Solarland.UINoticeVictory.OnReturnBtnClick // (Final|Native|Public) // @ game+0x1f19f30
};

// Class Solarland.UIPanelConfig
// Size: 0x78 (Inherited: 0x28)
struct UUIPanelConfig : UObject {
	struct TMap<enum class EUIPanelName, struct FUIPanelConfigEntry> PanelConfigs; // 0x28(0x50)
};

// Class Solarland.UISubsystem
// Size: 0xb0 (Inherited: 0x30)
struct UUISubsystem : UGameInstanceSubsystem {
	struct UUIGlobalConfig* GlobalConfig; // 0x30(0x08)
	struct UUIPanelConfig* UIPanelConfig; // 0x38(0x08)
	struct TMap<struct FString, struct USolarUserWidget*> CacheWidgets; // 0x40(0x50)
	char pad_90[0x20]; // 0x90(0x20)

	void PostInitializeAfterPatch(); // Function Solarland.UISubsystem.PostInitializeAfterPatch // (Final|Native|Public) // @ game+0x1f1a070
};

// Class Solarland.UISystemSettings
// Size: 0xe0 (Inherited: 0x38)
struct UUISystemSettings : UDeveloperSettings {
	int32_t InGameWidgetPoolSize; // 0x38(0x04)
	int32_t VirtualControllerPoolSize; // 0x3c(0x04)
	int32_t InGamePopupPoolSize; // 0x40(0x04)
	int32_t OutGameWidgetPoolSize; // 0x44(0x04)
	struct FSoftObjectPath UIGlobalConfig; // 0x48(0x18)
	struct FSoftClassPath UILayer; // 0x60(0x18)
	struct FSoftClassPath UIPanelConfigClass; // 0x78(0x18)
	struct TMap<struct FGameplayTag, struct FInteractionButtonSpec> InteractionButtons; // 0x90(0x50)
};

// Class Solarland.UIWeaponPartWidget
// Size: 0x458 (Inherited: 0x340)
struct UUIWeaponPartWidget : USolarUserWidget {
	struct UImage* Img_Icon; // 0x340(0x08)
	struct UImage* Img_LevelBg; // 0x348(0x08)
	struct UImage* Img_PartsBg; // 0x350(0x08)
	struct USizeBox* WidgetSize; // 0x358(0x08)
	struct UUserWidget* DragDropWidgetClass; // 0x360(0x08)
	struct FLinearColor ColorNotEquip; // 0x368(0x10)
	struct FLinearColor ColorDisable; // 0x378(0x10)
	struct FLinearColor ColorNormal; // 0x388(0x10)
	struct FLinearColor ColorQuality; // 0x398(0x10)
	int32_t ItemID; // 0x3a8(0x04)
	int32_t ItemNum; // 0x3ac(0x04)
	enum class EItemType ItemType; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct FString ItemName; // 0x3b8(0x10)
	int32_t WeaponSlot; // 0x3c8(0x04)
	enum class EWeaponPartType WeaponPartType; // 0x3cc(0x01)
	char pad_3CD[0x3]; // 0x3cd(0x03)
	int32_t WeaponPartLevel; // 0x3d0(0x04)
	enum class EWeaponPartType EquippedPartType; // 0x3d4(0x01)
	enum class EUIWeaponPartState CurrentState; // 0x3d5(0x01)
	bool bIsable; // 0x3d6(0x01)
	bool bUseHUDIcon; // 0x3d7(0x01)
	struct FVector2D OffsetVec; // 0x3d8(0x08)
	struct TMap<int32_t, struct FString> DefaultWeaponPartIconMaps; // 0x3e0(0x50)
	struct FString WeaponPartPrePath; // 0x430(0x10)
	bool bApplyToWeaponSlot; // 0x440(0x01)
	char pad_441[0x3]; // 0x441(0x03)
	struct FLinearColor PartBGDefaultColor; // 0x444(0x10)
	char pad_454[0x4]; // 0x454(0x04)

	void UpdateWidgetByEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.UpdateWidgetByEnable // (Final|Native|Public) // @ game+0x1f1a7d0
	void SetWidgetSize(struct FVector2D& InSize); // Function Solarland.UIWeaponPartWidget.SetWidgetSize // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f1a680
	void SetWeaponSlot(int32_t InWeaponSlot); // Function Solarland.UIWeaponPartWidget.SetWeaponSlot // (Final|Native|Public) // @ game+0x1f1a600
	void SetWeaponPartData(int32_t InID, int32_t InNumber); // Function Solarland.UIWeaponPartWidget.SetWeaponPartData // (Final|Native|Public) // @ game+0x1f1a540
	void SetIsEnable(bool InIsable); // Function Solarland.UIWeaponPartWidget.SetIsEnable // (Final|Native|Public) // @ game+0x1f1a4b0
	void SetBrushFromTexture(struct UTexture2D* InTextureAsset, bool InMatchSize); // Function Solarland.UIWeaponPartWidget.SetBrushFromTexture // (Final|Native|Protected) // @ game+0x1f1a1f0
	void InitDefaultWeaponPart(enum class EWeaponPartType InWeaponPartType, bool InUseHUDIcon); // Function Solarland.UIWeaponPartWidget.InitDefaultWeaponPart // (Final|Native|Public) // @ game+0x1f19ba0
	void ClearWeaponPartData(); // Function Solarland.UIWeaponPartWidget.ClearWeaponPartData // (Final|Native|Public) // @ game+0x1f19a60
};

// Class Solarland.SolarBTT_NgaiBotBattle
// Size: 0x98 (Inherited: 0x98)
struct USolarBTT_NgaiBotBattle : UBTTask_BlackboardBase {
};

// Class Solarland.VehicleAIPath
// Size: 0x238 (Inherited: 0x228)
struct AVehicleAIPath : AActor {
	struct USplineComponent* PathComponent; // 0x228(0x08)
	int32_t PathId; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
};

// Class Solarland.VehicleAISpawnerInGuide
// Size: 0x280 (Inherited: 0x278)
struct AVehicleAISpawnerInGuide : ASpawnerInGuide {
	float NoDamageLeftHP; // 0x278(0x04)
	int32_t PathId; // 0x27c(0x04)
};

// Class Solarland.VehicleCollisionSubsystem
// Size: 0x80 (Inherited: 0x30)
struct UVehicleCollisionSubsystem : UEngineSubsystem {
	char pad_30[0x50]; // 0x30(0x50)
};

// Class Solarland.VehicleMoveWidget
// Size: 0x420 (Inherited: 0x1e0)
struct UVehicleMoveWidget : USolarJoyStick {
	struct FSlateBrush JoyStickThumb; // 0x1e0(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x278(0x98)
	struct FVector2D ThumbSize; // 0x310(0x08)
	struct FSlateBrush SprintImage; // 0x318(0x98)
	struct FVector2D SprintSize; // 0x3b0(0x08)
	float TriggerPressTime; // 0x3b8(0x04)
	float DistanceSprintImageToCenter; // 0x3bc(0x04)
	float ShowLockSprintIconSectorAngle; // 0x3c0(0x04)
	struct FVector2D VisualSize; // 0x3c4(0x08)
	char pad_3CC[0x14]; // 0x3cc(0x14)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x400(0x10)
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x410(0x10)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.VehicleMoveWidget.SetSprintToCenterDistance // (Final|Native|Public) // @ game+0x1f1eab0
	void ResetSprintState(); // Function Solarland.VehicleMoveWidget.ResetSprintState // (Final|Native|Public) // @ game+0x1f1ea90
};

// Class Solarland.VehiclePreviewActor
// Size: 0x380 (Inherited: 0x380)
struct AVehiclePreviewActor : APreviewActor {
};

// Class Solarland.SolarVehicleSkinPreviewData
// Size: 0x360 (Inherited: 0x30)
struct USolarVehicleSkinPreviewData : UDataAsset {
	struct FSolarVehicleSkinPreviewMeshInfo VehicleMeshInfo; // 0x30(0xb0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> WeaponMeshInfos; // 0xe0(0x10)
	struct FSolarVehicleSkinPreviewMeshInfo MirrorMeshInfo; // 0xf0(0xb0)
	struct TArray<struct FSolarVehicleSkinPreviewMeshInfo> MirrorWeaponMeshInfos; // 0x1a0(0x10)
	struct TArray<struct FVehicleVFX> VehicleVFXs; // 0x1b0(0x10)
	struct TArray<struct FSolarVehicleMaterialData> VehicleMaterialDataArray; // 0x1c0(0x10)
	struct FTransform PageTransforms[0x8]; // 0x1d0(0x180)
	struct FSolarVehicleSkinPreviewPageInfo PageInfos[0x8]; // 0x350(0x10)
};

// Class Solarland.SolarVehiclePreview
// Size: 0x2d0 (Inherited: 0x228)
struct ASolarVehiclePreview : AActor {
	struct USkeletalMeshComponent* VehicleMesh; // 0x228(0x08)
	struct TArray<struct USkeletalMeshComponent*> WeaponMeshes; // 0x230(0x10)
	struct USkeletalMeshComponent* MirrorVehicleMesh; // 0x240(0x08)
	struct TArray<struct USkeletalMeshComponent*> MirrorWeaponMeshes; // 0x248(0x10)
	char pad_258[0x10]; // 0x258(0x10)
	struct TMap<struct USkeletalMeshComponent*, struct FSolarPreviewChangeEffectInfo> ChangeEffectInfos; // 0x268(0x50)
	struct UCurveFloat* ChangeMatCurve; // 0x2b8(0x08)
	char pad_2C0[0x10]; // 0x2c0(0x10)

	void OnChangeEffectTimer(); // Function Solarland.SolarVehiclePreview.OnChangeEffectTimer // (Final|Native|Protected) // @ game+0x1f1e2a0
};

// Class Solarland.VehicleStealthGCNotify_Actor
// Size: 0x4c8 (Inherited: 0x298)
struct AVehicleStealthGCNotify_Actor : AGameplayCueNotify_Actor {
	struct UMaterialInterface* StealthMaterial; // 0x298(0x08)
	struct FRuntimeFloatCurve NormalStealthCurve; // 0x2a0(0x88)
	char pad_328[0x8]; // 0x328(0x08)
	struct FRuntimeFloatCurve VehicleVelocityCurve; // 0x330(0x88)
	struct FRuntimeFloatCurve VehicleBeDamagedCurve; // 0x3b8(0x88)
	struct FName StealthMaterialParamPowerName; // 0x440(0x08)
	struct FName StealthMaterialParamDistanceName; // 0x448(0x08)
	float StealthMaterialParamDistanceValue; // 0x450(0x04)
	char pad_454[0x34]; // 0x454(0x34)
	struct FString EnterStealthEngine3p; // 0x488(0x10)
	struct FString EnterStealthEngine3pEnemy; // 0x498(0x10)
	struct FString CancelStealthEngine3p; // 0x4a8(0x10)
	struct FString CancelStealthEngine3pEnemy; // 0x4b8(0x10)

	void OnVehicleSkinUpdate(struct ASolarVehiclePawn* InVehiclePawn); // Function Solarland.VehicleStealthGCNotify_Actor.OnVehicleSkinUpdate // (Final|Native|Private) // @ game+0x1f1e810
	void OnToggleStealth(bool bInStealh); // Function Solarland.VehicleStealthGCNotify_Actor.OnToggleStealth // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f1e670
	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x1f1e440
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleStealthGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x1f1e2c0
};

// Class Solarland.VehicleStopArea
// Size: 0x228 (Inherited: 0x228)
struct AVehicleStopArea : AActor {
};

// Class Solarland.VehicleWeaponAnimInstance
// Size: 0x310 (Inherited: 0x2d0)
struct UVehicleWeaponAnimInstance : UWeaponAnimInstance {
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FRotator VehicleWeaponPitchRot; // 0x2d8(0x0c)
	struct FRotator VehicleWeaponYawRot; // 0x2e4(0x0c)
	struct FVector LeftBoneIKOffset; // 0x2f0(0x0c)
	struct FVector RightBoneIKOffset; // 0x2fc(0x0c)
	bool bVehicleWeaponReloading; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
};

// Class Solarland.VehicleWeaponCrossHairWidget
// Size: 0x498 (Inherited: 0x300)
struct UVehicleWeaponCrossHairWidget : UCrossHairWidget {
	bool bUseSecondReticle; // 0x300(0x01)
	char pad_301[0x3]; // 0x301(0x03)
	float DirectionRadius; // 0x304(0x04)
	struct UCanvasPanel* SecondReticlePanel; // 0x308(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x310(0x08)
	struct UImage* ReticleDirectionImage; // 0x318(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x320(0x08)
	struct UImage* RangedImage; // 0x328(0x08)
	char pad_330[0x20]; // 0x330(0x20)
	struct USizeBox* AssistLockSizeBox; // 0x350(0x08)
	struct UCanvasPanel* ChangeNewAssistLockPawnPanel; // 0x358(0x08)
	struct UCanvasPanel* EnterLockPawnPanel; // 0x360(0x08)
	char pad_368[0x14]; // 0x368(0x14)
	struct TWeakObjectPtr<struct APawn> AssistLockPawn; // 0x37c(0x08)
	char pad_384[0x4]; // 0x384(0x04)
	struct UGlobalVehicleWeaponConfig* GVehicleWeaponConfig; // 0x388(0x08)
	struct ASolarPlayerController* SolarPlayerController; // 0x390(0x08)
	char pad_398[0xa0]; // 0x398(0xa0)
	struct TArray<struct TWeakObjectPtr<struct APawn>> PawnsToBeAssistLock; // 0x438(0x10)
	float CurProgressOfPreEnterAssistLock; // 0x448(0x04)
	float PreEnterAssistLockSpeed; // 0x44c(0x04)
	char pad_450[0x10]; // 0x450(0x10)
	float TimeIntervalToCheckBlock; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UCanvasPanel* DynamicAimCanvas; // 0x468(0x08)
	struct UCanvasPanelSlot* DynamicAimCanvasSlot; // 0x470(0x08)
	float DynamicAimOccludeOpacity; // 0x478(0x04)
	struct FVector2D DynamicAimSmoothSpeed; // 0x47c(0x08)
	char pad_484[0xc]; // 0x484(0x0c)
	bool bAlwaysShowOverload; // 0x490(0x01)
	char pad_491[0x7]; // 0x491(0x07)

	struct FVector2D UpdateAssistLockUIScale(); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockUIScale // (BlueprintCosmetic|Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x1f1eb30
	void UpdateAssistLockStateUI(enum class EAssistLockState InEAssistLockState); // Function Solarland.VehicleWeaponCrossHairWidget.UpdateAssistLockStateUI // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SetWidgetResources(struct UCanvasPanel*& InSecondReticlePanel, struct UImage*& InReticleDirectionImage, struct UImage*& InRangedImage, struct USizeBox*& InAssistLockSizeBox, struct UCanvasPanel*& InChangeNewAssistLockPawnPanel, struct UCanvasPanel*& InEnterLockPawnPanel, struct UCanvasPanel*& InCanvas_Dynamic); // Function Solarland.VehicleWeaponCrossHairWidget.SetWidgetResources // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnTransformerWeaponChanged(enum class ETransformerType InType); // Function Solarland.VehicleWeaponCrossHairWidget.OnTransformerWeaponChanged // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void InitAssitLockInfo(struct ASolarVehicleWeapon* VehicleWeapon); // Function Solarland.VehicleWeaponCrossHairWidget.InitAssitLockInfo // (Final|Native|Private) // @ game+0x1f1e150
	struct UCanvasPanel* GetSecondReticlePanel(); // Function Solarland.VehicleWeaponCrossHairWidget.GetSecondReticlePanel // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	struct UImage* GetReticleDirectionImage(); // Function Solarland.VehicleWeaponCrossHairWidget.GetReticleDirectionImage // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
};

// Class Solarland.VehicleWeaponScopeWidget
// Size: 0x3e0 (Inherited: 0x340)
struct UVehicleWeaponScopeWidget : USolarUserWidget {
	enum class EVehicleWeaponScopeType PresetScopeType; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct UImage* img_Vehicle; // 0x348(0x08)
	struct UImage* Img_Weapon; // 0x350(0x08)
	struct UCanvasPanel* Panel_Pitch; // 0x358(0x08)
	struct UWeaponScopeSliderWidget* Crosshair_Slider; // 0x360(0x08)
	struct USolarCheckBox* Btn_Pitch; // 0x368(0x08)
	struct UCanvasPanel* SecondReticlePanel; // 0x370(0x08)
	struct UCanvasPanel* Panel_BG; // 0x378(0x08)
	struct UCanvasPanel* Panel_Border; // 0x380(0x08)
	struct UImage* ReticleDirection; // 0x388(0x08)
	struct UCanvasPanel* Coredot; // 0x390(0x08)
	struct USolarWeaponRechamberWidget* HUD_CarFireCD_L; // 0x398(0x08)
	struct UWidgetAnimation* Anim_Enter; // 0x3a0(0x08)
	struct UCanvasPanelSlot* SecondReticleSlot; // 0x3a8(0x08)
	struct UCanvasPanelSlot* ReticleDirectionSlot; // 0x3b0(0x08)
	struct UImage* ProgressImage; // 0x3b8(0x08)
	struct UWidgetAnimation* ProgressAnima; // 0x3c0(0x08)
	struct UMaterialInstanceDynamic* ProgressMaterial; // 0x3c8(0x08)
	char pad_3D0[0x10]; // 0x3d0(0x10)

	void UpdateScopeUI(struct ASolarVehicleWeapon* VehicleWeapon, struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.UpdateScopeUI // (Final|Native|Public|HasOutParms) // @ game+0x1f1eb70
	void SetChargeProgress(struct UImage*& InProgressImage, struct UWidgetAnimation*& InProgressAnima); // Function Solarland.VehicleWeaponScopeWidget.SetChargeProgress // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void OnUpdateChargeProgress(bool InbCharging, int32_t InChargeMode, float InChargeProgress); // Function Solarland.VehicleWeaponScopeWidget.OnUpdateChargeProgress // (Final|Native|Protected) // @ game+0x1f1e700
	void OnScopeTriggerChanged(bool bChecked); // Function Solarland.VehicleWeaponScopeWidget.OnScopeTriggerChanged // (Final|Native|Protected) // @ game+0x1f1e5e0
	void OnScopeOpened(); // Function Solarland.VehicleWeaponScopeWidget.OnScopeOpened // (Final|Native|Public) // @ game+0x1f1e5c0
	void InitScopeUI(struct ASolarVehiclePawn* InVehicle, bool bSpectate); // Function Solarland.VehicleWeaponScopeWidget.InitScopeUI // (Final|Native|Public) // @ game+0x1f1e1d0
	void ApplyWeaponCrossHairToScope(struct FVehicleWeaponCrossHairInfo& InCrossHairInfo); // Function Solarland.VehicleWeaponScopeWidget.ApplyWeaponCrossHairToScope // (Final|Native|Protected|HasOutParms) // @ game+0x1f1e080
};

// Class Solarland.VehicleWholeShieldGCNotify_Actor
// Size: 0x578 (Inherited: 0x298)
struct AVehicleWholeShieldGCNotify_Actor : AGameplayCueNotify_Actor {
	struct TSoftObjectPtr<UMaterialInterface> TeammateWholeShieldMaterial; // 0x298(0x28)
	struct TSoftObjectPtr<UMaterialInterface> NoTeammateWholeShieldMaterial; // 0x2c0(0x28)
	struct FName StartShieldMaterialParam; // 0x2e8(0x08)
	struct FRuntimeFloatCurve StartShieldCurve; // 0x2f0(0x88)
	struct FName ShieldMaterialChangeParam; // 0x378(0x08)
	struct TMap<float, float> HighShieldChangeRateToMaterialValue; // 0x380(0x50)
	struct TMap<float, float> LowShieldChangeRateToMaterialValue; // 0x3d0(0x50)
	struct FName SphereParameterName; // 0x420(0x08)
	struct FName HitLocaitonParameterName; // 0x428(0x08)
	struct FRuntimeFloatCurve HitEffectDurationCurve; // 0x430(0x88)
	struct TSoftObjectPtr<UParticleSystem> TeammateBulletHitEffect; // 0x4b8(0x28)
	struct TSoftObjectPtr<UParticleSystem> NoTeammateBulletHitEffect; // 0x4e0(0x28)
	struct FVector BulletHitEffectScale; // 0x508(0x0c)
	char pad_514[0x64]; // 0x514(0x64)

	void OnPlayerGetOnVehicle(int32_t GetOnSeatIndex, struct ASolarCharacter* GetOnPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOnVehicle // (Final|Native|Private) // @ game+0x1f1e500
	void OnPlayerGetOffVehicle(int32_t GetOffSeatIndex, struct ASolarCharacter* GetOffPlayer); // Function Solarland.VehicleWholeShieldGCNotify_Actor.OnPlayerGetOffVehicle // (Final|Native|Private) // @ game+0x1f1e380
};

// Class Solarland.VerticalFOVComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UVerticalFOVComponent : UActorComponent {
	float VerticalFOV; // 0xb0(0x04)
	float AspectRatioThreshold; // 0xb4(0x04)
	float HorizontalFOV; // 0xb8(0x04)
	char pad_BC[0xc]; // 0xbc(0x0c)
};

// Class Solarland.VibrateConfig
// Size: 0xa0 (Inherited: 0x30)
struct UVibrateConfig : UDataAsset {
	struct UDataTable* dataTab; // 0x30(0x08)
	struct TMap<enum class EWeaponVibrateFactor, float> WeaponVibrateFactorMap; // 0x38(0x50)
	struct FSoftObjectPath WeaponDataTabPath; // 0x88(0x18)
};

// Class Solarland.VisibilityFlagSettings
// Size: 0x50 (Inherited: 0x38)
struct UVisibilityFlagSettings : UDeveloperSettings {
	struct FGameplayTag DefaultVisibilityFlagTag; // 0x38(0x08)
	struct TArray<struct FGameplayTag> VisibilityFlagTags; // 0x40(0x10)

	int32_t StaticGetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.StaticGetVisibilityFlag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1f23b80
	int32_t GetVisibilityFlag(struct FGameplayTag& Tag); // Function Solarland.VisibilityFlagSettings.GetVisibilityFlag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1c28cf0
};

// Class Solarland.VisualSoundConfig
// Size: 0x178 (Inherited: 0x30)
struct UVisualSoundConfig : UDataAsset {
	char ElemMaxCount; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float VehicleMoveDecidingSpeed; // 0x34(0x04)
	struct TMap<enum class EBattlePromptType, struct FVisualSoundData> VisualSoundDataMap; // 0x38(0x50)
	struct TMap<enum class EBattlePromptType, float> DetectionDisMap; // 0x88(0x50)
	struct TMap<enum class EBattlePromptType, float> AliveTimeMap; // 0xd8(0x50)
	struct TMap<enum class EBattlePromptType, float> BreakTimeMap; // 0x128(0x50)
};

// Class Solarland.WalkWidgetNew
// Size: 0x6d0 (Inherited: 0x1e0)
struct UWalkWidgetNew : USolarJoyStick {
	struct FMulticastInlineDelegate OnSprintChangeToCenterState; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnSprintIconActive; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSprintIconHide; // 0x200(0x10)
	struct FMulticastInlineDelegate OnSprintLockIconActive; // 0x210(0x10)
	struct FMulticastInlineDelegate OnStartSprintFree; // 0x220(0x10)
	struct FMulticastInlineDelegate OnTerminateSprintFree; // 0x230(0x10)
	struct FSlateBrush JoyStickThumb; // 0x240(0x98)
	struct FSlateBrush JoyStickThumbPress; // 0x2d8(0x98)
	struct FSlateBrush JoyStickBG; // 0x370(0x98)
	struct FSlateBrush SprintImage; // 0x408(0x98)
	struct FSlateBrush UsedSprintImage; // 0x4a0(0x98)
	struct FSlateBrush SprintImageHovered; // 0x538(0x98)
	struct FSlateBrush UsedSprintImageHovered; // 0x5d0(0x98)
	struct FVector2D SprintSize; // 0x668(0x08)
	float TriggerDistanceToSprint; // 0x670(0x04)
	float TriggerDistanceToShowSprint; // 0x674(0x04)
	float ShowSprintIconSectorAngle; // 0x678(0x04)
	float ShowLockSprintIconSectorAngle; // 0x67c(0x04)
	bool bOpenLeftHalfTouch; // 0x680(0x01)
	bool bUseTouchStartOffset; // 0x681(0x01)
	char pad_682[0x2]; // 0x682(0x02)
	struct FVector2D VisualCenter; // 0x684(0x08)
	struct FVector2D VisualSize; // 0x68c(0x08)
	struct FVector2D ThumbSize; // 0x694(0x08)
	struct FVector2D InputScale; // 0x69c(0x08)
	float ActiveOpacity; // 0x6a4(0x04)
	float InactiveOpacity; // 0x6a8(0x04)
	float TimeUntilDeactive; // 0x6ac(0x04)
	bool bPreventReCenter; // 0x6b0(0x01)
	char pad_6B1[0x1f]; // 0x6b1(0x1f)

	void SetSprintToCenterDistance(float Distance); // Function Solarland.WalkWidgetNew.SetSprintToCenterDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23b00
	void SetNewSprintImageResource(struct UObject* NewResource, struct UObject* NewHoveredResource); // Function Solarland.WalkWidgetNew.SetNewSprintImageResource // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23a40
	void SetNewSprintImage(struct FSlateBrush& NewImage, struct FSlateBrush& NewHoveredImage); // Function Solarland.WalkWidgetNew.SetNewSprintImage // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f23760
	void SetCustomizeVisualInfo(struct FVector2D& InPosition, float InScale); // Function Solarland.WalkWidgetNew.SetCustomizeVisualInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1f23670
	void SetCanChangeSprintState(bool CanChange); // Function Solarland.WalkWidgetNew.SetCanChangeSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f235e0
	void ResetSprintState(); // Function Solarland.WalkWidgetNew.ResetSprintState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23590
	void ResetSprintImage(); // Function Solarland.WalkWidgetNew.ResetSprintImage // (Final|Native|Public|BlueprintCallable) // @ game+0x1f23570
};

// Class Solarland.WarmGameHeroPickRule
// Size: 0x28 (Inherited: 0x28)
struct UWarmGameHeroPickRule : UHeroPickRuleBase {
};

// Class Solarland.WeaponAbilityBase
// Size: 0x3b0 (Inherited: 0x310)
struct AWeaponAbilityBase : ASolarAbility {
	struct FHitResult HitResult; // 0x308(0x88)
	bool bClientVaild; // 0x390(0x01)
	bool bServerVaild; // 0x391(0x01)
	bool bLife; // 0x392(0x01)
	float Lifetime; // 0x394(0x04)
	struct AActor* TargetActor; // 0x398(0x08)
	struct TWeakObjectPtr<struct ASolarWeapon> TargetWeapon; // 0x3a4(0x08)
	char pad_3AF[0x1]; // 0x3af(0x01)

	bool HasLife(); // Function Solarland.WeaponAbilityBase.HasLife // (Final|Native|Public|Const) // @ game+0x1f231a0
};

// Class Solarland.WeaponAssistAimWeaponConfig
// Size: 0x2a8 (Inherited: 0x30)
struct UWeaponAssistAimWeaponConfig : UDataAsset {
	float MaxTargetDetectionDistance; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FGameplayTagRequirements BaseFollowTagRequirements; // 0x38(0x50)
	float BaseFollowHorizontalSpeed; // 0x88(0x04)
	float BaseFollowVerticalSpeed; // 0x8c(0x04)
	struct TArray<struct FBaseFollowSpeedByTag> BaseFollowSpeedByTags; // 0x90(0x10)
	struct FGameplayTagRequirements TargetVelocityFollowTagRequirements; // 0xa0(0x50)
	float TargetVelocityFollowDeactivationDelay; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FRuntimeFloatCurve TargetVelocityFollowHorizontalRatioCurve; // 0xf8(0x88)
	struct FRuntimeFloatCurve TargetVelocityFollowVerticalRatioCurve; // 0x180(0x88)
	float TargetVelocityFollowHorizontalRatioCurveScale; // 0x208(0x04)
	float TargetVelocityFollowVerticalRatioCurveScale; // 0x20c(0x04)
	float TargetVelocityFollowMaxHorizontalSpeed; // 0x210(0x04)
	float TargetVelocityFollowMaxVerticalSpeed; // 0x214(0x04)
	struct FRuntimeFloatCurve GlobalSensitivityScaleCurve; // 0x218(0x88)
	float GlobalSensitivityScaleCurveScale; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
};

// Class Solarland.WeaponAssistAimConfig
// Size: 0xc0 (Inherited: 0x30)
struct UWeaponAssistAimConfig : UDataAsset {
	bool bEnableNewAssistAim; // 0x30(0x01)
	char AssistAimTargetFlag; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
	struct TArray<enum class EObjectTypeQuery> TargetDetectionBlockTypes; // 0x38(0x10)
	struct TArray<enum class EObjectTypeQuery> LockAimingBlockTypes; // 0x48(0x10)
	bool bEnableAssistFollow; // 0x58(0x01)
	bool bEnableGlobalSensitivityScale; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct FWeaponAssistAimWeaponConfigAll DefaultAssistAimWeaponConfigAll; // 0x60(0x60)
};

// Class Solarland.WeaponCameraShakePattern
// Size: 0x28 (Inherited: 0x28)
struct UWeaponCameraShakePattern : UObject {
};

// Class Solarland.WeaponCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x28)
struct UWeaponCameraShakePatternRuntime : UObject {
	struct UWeaponCameraShakePattern* PattenData; // 0x28(0x08)
};

// Class Solarland.NormalCameraShakePattern
// Size: 0x30 (Inherited: 0x28)
struct UNormalCameraShakePattern : UWeaponCameraShakePattern {
	struct UCameraShake* ShakeClass; // 0x28(0x08)
};

// Class Solarland.NormalCameraShakePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UNormalCameraShakePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.CameraShakeWithCurvePattern
// Size: 0x40 (Inherited: 0x28)
struct UCameraShakeWithCurvePattern : UWeaponCameraShakePattern {
	struct UCameraShakeWithCurve* ShakeClass; // 0x28(0x08)
	struct UCameraShakeWithCurve* ShakeTemplate; // 0x30(0x08)
	int32_t RandomSeed; // 0x38(0x04)
	int32_t RandomStep; // 0x3c(0x04)
};

// Class Solarland.CameraShakeWithCurvePatternRuntime
// Size: 0x30 (Inherited: 0x30)
struct UCameraShakeWithCurvePatternRuntime : UWeaponCameraShakePatternRuntime {
};

// Class Solarland.WeaponDamageExecutionCalc
// Size: 0x40 (Inherited: 0x40)
struct UWeaponDamageExecutionCalc : UGameplayEffectExecutionCalculation {
};

// Class Solarland.WeaponEffect_ExtraAmmoAbility
// Size: 0x1c0 (Inherited: 0x1a8)
struct UWeaponEffect_ExtraAmmoAbility : USolarAbilityEffect {
	struct TArray<struct ASolarAbility*> ExtraAbilities; // 0x1a8(0x10)
	enum class EWeaponFireModeType WeaponFireModeType; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
};

// Class Solarland.WeaponEffect_ReplaceBullet
// Size: 0x1b8 (Inherited: 0x1a8)
struct UWeaponEffect_ReplaceBullet : USolarAbilityEffect {
	struct ASolarBullet* BulletClass; // 0x1a8(0x08)
	enum class EWeaponFireModeType WeaponFireModeType; // 0x1b0(0x01)
	char pad_1B1[0x7]; // 0x1b1(0x07)
};

// Class Solarland.WeaponExtraAttributeSet
// Size: 0x100 (Inherited: 0x30)
struct UWeaponExtraAttributeSet : USolarAttributeSet {
	struct FGameplayAttributeData ExtraARMag; // 0x30(0x10)
	struct FGameplayAttributeData ExtraSMGMag; // 0x40(0x10)
	struct FGameplayAttributeData ExtraSGMag; // 0x50(0x10)
	struct FGameplayAttributeData ExtraSRMag; // 0x60(0x10)
	struct FGameplayAttributeData ARLoadSpeedMultiple; // 0x70(0x10)
	struct FGameplayAttributeData SMGLoadSpeedMultiple; // 0x80(0x10)
	struct FGameplayAttributeData SGLoadSpeedMultiple; // 0x90(0x10)
	struct FGameplayAttributeData SRLoadSpeedMultiple; // 0xa0(0x10)
	struct FGameplayAttributeData ARHeadshotDamageMultiple; // 0xb0(0x10)
	struct FGameplayAttributeData SMGHeadshotDamageMultiple; // 0xc0(0x10)
	struct FGameplayAttributeData SGHeadshotDamageMultiple; // 0xd0(0x10)
	struct FGameplayAttributeData SRHeadshotDamageMultiple; // 0xe0(0x10)
	struct FGameplayAttributeData WeaponSkillCDMultiple; // 0xf0(0x10)

	void OnRep_WeaponSkillCDMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_WeaponSkillCDMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1f27be0
	void OnRep_SRLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SRLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1f27b20
	void OnRep_SMGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SMGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1f27a80
	void OnRep_SGLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_SGLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1f279e0
	void OnRep_ExtraSRMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSRMag // (Final|Native|Protected|HasOutParms) // @ game+0x1f278e0
	void OnRep_ExtraSMGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSMGMag // (Final|Native|Protected|HasOutParms) // @ game+0x1f27840
	void OnRep_ExtraSGMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraSGMag // (Final|Native|Protected|HasOutParms) // @ game+0x1f277a0
	void OnRep_ExtraARMag(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ExtraARMag // (Final|Native|Protected|HasOutParms) // @ game+0x1f27700
	void OnRep_ARLoadSpeedMultiple(struct FGameplayAttributeData& OldValue); // Function Solarland.WeaponExtraAttributeSet.OnRep_ARLoadSpeedMultiple // (Final|Native|Protected|HasOutParms) // @ game+0x1f27660
};

// Class Solarland.WeaponGrowthManager
// Size: 0x30 (Inherited: 0x28)
struct UWeaponGrowthManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	struct FString GetWeaponBpPath(int32_t ID); // Function Solarland.WeaponGrowthManager.GetWeaponBpPath // (Final|Native|Public) // @ game+0x1f27510
};

// Class Solarland.WeaponHitAbility
// Size: 0x3b0 (Inherited: 0x3b0)
struct AWeaponHitAbility : AWeaponAbilityBase {
};

// Class Solarland.WeaponSkinData
// Size: 0x2b0 (Inherited: 0x30)
struct UWeaponSkinData : UDataAsset {
	enum class EWeaponSkinType WeaponSkinType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FWeaponBodyData WeaponData; // 0x38(0xf0)
	struct TArray<struct FWeaponSkinPartData> WeaponBarMap; // 0x128(0x10)
	bool WeaponBarLocked; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponClipMap; // 0x140(0x10)
	bool WeaponClipLocked; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponGripMap; // 0x158(0x10)
	bool WeaponGripLocked; // 0x168(0x01)
	bool bUseGripIkSocket; // 0x169(0x01)
	char pad_16A[0x6]; // 0x16a(0x06)
	struct TArray<struct FWeaponSkinPartData> WeaponScopeMap; // 0x170(0x10)
	struct TMap<int32_t, struct FTransform> ScopeOffsetMap; // 0x180(0x50)
	bool WeaponScopeLocked; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct TArray<struct FWeaponSkinPartData> WeaponStockMap; // 0x1d8(0x10)
	bool WeaponStockLocked; // 0x1e8(0x01)
	char pad_1E9[0x7]; // 0x1e9(0x07)
	struct ASolarBullet* DedicatedBulletEffect; // 0x1f0(0x08)
	struct ASolarBullet* DedicatedSkillEffect; // 0x1f8(0x08)
	struct FSoftClassPath DedicatedBulletEffectPath; // 0x200(0x18)
	struct FSoftClassPath DedicatedSkillEffectPath; // 0x218(0x18)
	struct UParticleSystem* DedicatedKillEffect; // 0x230(0x08)
	struct FSoftObjectPath DedicatedKillEffectPath; // 0x238(0x18)
	struct FSoftObjectPath DedicatedSpecialEffectPath; // 0x250(0x18)
	struct UActorEffect* DedicatedDissolvedDeathActorEffect; // 0x268(0x08)
	struct FSoftObjectPath DedicatedDissolvedDeathFXPath; // 0x270(0x18)
	struct FString PlayAudioEventName; // 0x288(0x10)
	struct FString StopAudioEventName; // 0x298(0x10)
	struct UAnimSequence* OutsideAnimation; // 0x2a8(0x08)

	void ModifyResPath(); // Function Solarland.WeaponSkinData.ModifyResPath // (Final|Native|Public|BlueprintCallable) // @ game+0x1f27640
	bool IsMeshReplace(); // Function Solarland.WeaponSkinData.IsMeshReplace // (Final|Native|Public) // @ game+0x1f275e0
	bool GetPartLockedInfoByType(enum class EWeaponPartType PartType); // Function Solarland.WeaponSkinData.GetPartLockedInfoByType // (Final|Native|Public|Const) // @ game+0x1f27480
	bool GetPartDataArrayByType(enum class EWeaponPartType PartType, struct TArray<struct FWeaponSkinPartData>& PartDataMap); // Function Solarland.WeaponSkinData.GetPartDataArrayByType // (Final|Native|Public|HasOutParms|Const) // @ game+0x1f27320
};

// Class Solarland.WeaponNetComponent
// Size: 0x140 (Inherited: 0xb0)
struct UWeaponNetComponent : UActorComponent {
	struct FWeaponUpgradeNetData UpgradeData; // 0xb0(0x20)
	struct FWeaponPartsNetData PartsData; // 0xd0(0x60)
	bool bSkinModule; // 0x130(0x01)
	bool bUpgradeModule; // 0x131(0x01)
	bool bPartsModule; // 0x132(0x01)
	struct FWeaponLevelUpInfo LevelData; // 0x133(0x03)
	char pad_136[0x2]; // 0x136(0x02)
	int32_t PartsInitCount; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)

	void OnRep_UpgradeData(); // Function Solarland.WeaponNetComponent.OnRep_UpgradeData // (Final|Native|Public) // @ game+0x1f27bc0
	void OnRep_PartsInitCount(); // Function Solarland.WeaponNetComponent.OnRep_PartsInitCount // (Final|Native|Public) // @ game+0x1f279c0
	void OnRep_PartsData(); // Function Solarland.WeaponNetComponent.OnRep_PartsData // (Final|Native|Public) // @ game+0x1f279a0
	void OnRep_Level(); // Function Solarland.WeaponNetComponent.OnRep_Level // (Final|Native|Public) // @ game+0x1f27980
};

// Class Solarland.WeaponPartStaticMeshComponent
// Size: 0x600 (Inherited: 0x600)
struct UWeaponPartStaticMeshComponent : UStaticMeshComponent {
};

// Class Solarland.WeaponPartComp
// Size: 0x710 (Inherited: 0x600)
struct UWeaponPartComp : UWeaponPartStaticMeshComponent {
	int32_t PartID; // 0x5fc(0x04)
	bool bDataAssetInit; // 0x604(0x01)
	bool bMeshAssetsInit; // 0x605(0x01)
	char pad_606[0x2]; // 0x606(0x02)
	struct UWeaponPartDataAsset* OrginDataAsset; // 0x608(0x08)
	struct UWeaponPartDataAsset* SkinPartDataAsset; // 0x610(0x08)
	struct UStaticMesh* PartFightMesh; // 0x618(0x08)
	struct UWeaponSkinData* WeaponSkin; // 0x620(0x08)
	struct FWeaponSkinPartData SkinMatchedPartData; // 0x628(0x40)
	char pad_668[0x2]; // 0x668(0x02)
	enum class EWeaponPartType WeaponPartType; // 0x66a(0x01)
	char pad_66B[0xa5]; // 0x66b(0xa5)

	void SwitchLOD(int32_t LOD); // Function Solarland.WeaponPartComp.SwitchLOD // (Final|Native|Public) // @ game+0x1f2ba70
	void SetPartVisibility(bool bVisibility); // Function Solarland.WeaponPartComp.SetPartVisibility // (Native|Public) // @ game+0x1f2b7d0
	void SetPartIDAndPartData(int32_t InPartID); // Function Solarland.WeaponPartComp.SetPartIDAndPartData // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2b750
	void ResetSkin(); // Function Solarland.WeaponPartComp.ResetSkin // (Native|Public|BlueprintCallable) // @ game+0x12592d0
	void PartInitializeServer(); // Function Solarland.WeaponPartComp.PartInitializeServer // (Final|Native|Public) // @ game+0x1f2b690
	void PartInitializeClient(); // Function Solarland.WeaponPartComp.PartInitializeClient // (Final|Native|Public) // @ game+0x1f2b670
	void PartInitialize(int32_t InPartID); // Function Solarland.WeaponPartComp.PartInitialize // (Final|Native|Public) // @ game+0x1f2b5f0
	void OnLoadSkinDataCompleted(); // Function Solarland.WeaponPartComp.OnLoadSkinDataCompleted // (Native|Protected) // @ game+0x1258d50
	void OnLoadMeshDataCompleted(); // Function Solarland.WeaponPartComp.OnLoadMeshDataCompleted // (Native|Protected) // @ game+0x1259290
	void OnLoadCompletedInternal(bool bSuccess); // Function Solarland.WeaponPartComp.OnLoadCompletedInternal // (Native|Protected) // @ game+0x1f2b420
	void OnLoadCompleted(bool bSuccess); // Function Solarland.WeaponPartComp.OnLoadCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f2b390
	bool IsValidPart(); // Function Solarland.WeaponPartComp.IsValidPart // (Native|Public|Const) // @ game+0x1f2b340
	bool IsPartEnable(); // Function Solarland.WeaponPartComp.IsPartEnable // (Final|Native|Public|Const) // @ game+0x1f2b250
	bool IsOnlyData(); // Function Solarland.WeaponPartComp.IsOnlyData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2b1f0
	void InitializeMeshLOD(); // Function Solarland.WeaponPartComp.InitializeMeshLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2b080
	bool HasInitialized(); // Function Solarland.WeaponPartComp.HasInitialized // (Native|Public|Const) // @ game+0x1f2ad50
	enum class EWeaponPartType GetPartType(); // Function Solarland.WeaponPartComp.GetPartType // (Final|Native|Public|Const) // @ game+0x1f2aa70
	int32_t GetPartID(); // Function Solarland.WeaponPartComp.GetPartID // (Native|Public|Const) // @ game+0x1f2a9b0
	struct UWeaponPartDataAsset* GetPartData(); // Function Solarland.WeaponPartComp.GetPartData // (Final|Native|Public|Const) // @ game+0x1f2a980
};

// Class Solarland.WeaponPartClipComp
// Size: 0x710 (Inherited: 0x710)
struct UWeaponPartClipComp : UWeaponPartComp {

	bool IsSupportExtract(); // Function Solarland.WeaponPartClipComp.IsSupportExtract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f27610
	struct FRotator GetHandRotOffset(); // Function Solarland.WeaponPartClipComp.GetHandRotOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f272e0
	struct FVector GetHandLocOffset(); // Function Solarland.WeaponPartClipComp.GetHandLocOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f272a0
	float GetDropLifeSpan(); // Function Solarland.WeaponPartClipComp.GetDropLifeSpan // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f27270
	struct FName GetCharacterHandSocket(); // Function Solarland.WeaponPartClipComp.GetCharacterHandSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f27230
	struct FName GetCharacterHandInverseSocket(); // Function Solarland.WeaponPartClipComp.GetCharacterHandInverseSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f271f0
};

// Class Solarland.WeaponPartDataAsset
// Size: 0x110 (Inherited: 0x30)
struct UWeaponPartDataAsset : UDataAsset {
	bool bOnlyData; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FSoftObjectPath ViewStaticMeshPath; // 0x38(0x18)
	struct FTransform PreviewTransform; // 0x50(0x30)
	struct FSoftObjectPath FightStaticMeshPath; // 0x80(0x18)
	struct FSoftObjectPath PartIcon; // 0x98(0x18)
	struct TMap<int32_t, struct FVector> SpecificScaleMap; // 0xb0(0x50)
	struct UWeaponPartWeaponAttributeDataAsset* WeaponAttributeConfig; // 0x100(0x08)
	char pad_108[0x8]; // 0x108(0x08)
};

// Class Solarland.WeaponPartClipDataAsset
// Size: 0x140 (Inherited: 0x110)
struct UWeaponPartClipDataAsset : UWeaponPartDataAsset {
	bool bSupportExtract; // 0x108(0x01)
	struct FVector HandLocOffsetVector; // 0x10c(0x0c)
	struct FRotator HandRotOffsetRotator; // 0x118(0x0c)
	float DropLifeSpan; // 0x124(0x04)
	struct FName CharacterHandSocket; // 0x128(0x08)
	struct FName CharacterHandInverseSocket; // 0x130(0x08)
	char pad_13D[0x3]; // 0x13d(0x03)
};

// Class Solarland.WeaponPartWeaponAttributeDataAsset
// Size: 0x50 (Inherited: 0x30)
struct UWeaponPartWeaponAttributeDataAsset : UDataAsset {
	struct FWeaponAttributeModifierContainer AttributeModifiers; // 0x30(0x10)
	struct TArray<struct FWeaponPartWeaponAttributeByWeaponType> ModifiersByWeaponType; // 0x40(0x10)
};

// Class Solarland.WeaponPartGripComp
// Size: 0x710 (Inherited: 0x710)
struct UWeaponPartGripComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGripDataAsset
// Size: 0x160 (Inherited: 0x110)
struct UWeaponPartGripDataAsset : UWeaponPartDataAsset {
	struct TMap<enum class ECharacterBodyScaleType, struct FWeaponPartGripDataForCharacter> DataForCharacterMap; // 0x108(0x50)
};

// Class Solarland.WeaponPartGunStockComp
// Size: 0x710 (Inherited: 0x710)
struct UWeaponPartGunStockComp : UWeaponPartComp {
};

// Class Solarland.WeaponPartGunStockDataAsset
// Size: 0x110 (Inherited: 0x110)
struct UWeaponPartGunStockDataAsset : UWeaponPartDataAsset {
};

// Class Solarland.WeaponPartMuzzleComp
// Size: 0x710 (Inherited: 0x710)
struct UWeaponPartMuzzleComp : UWeaponPartComp {

	bool HasSilencer(); // Function Solarland.WeaponPartMuzzleComp.HasSilencer // (Final|Native|Public|Const) // @ game+0x1f2adb0
	bool HasFlameArrester(); // Function Solarland.WeaponPartMuzzleComp.HasFlameArrester // (Final|Native|Public|Const) // @ game+0x1f2ad20
};

// Class Solarland.WeaponPartMuzzleDataAsset
// Size: 0x110 (Inherited: 0x110)
struct UWeaponPartMuzzleDataAsset : UWeaponPartDataAsset {
	bool bSilencer; // 0x108(0x01)
	bool bFlameArrester; // 0x109(0x01)
};

// Class Solarland.WeaponPartRunesComp
// Size: 0x160 (Inherited: 0xb0)
struct UWeaponPartRunesComp : UActorComponent {
	struct TArray<int32_t> Runes; // 0xb0(0x10)
	char pad_C0[0xa0]; // 0xc0(0xa0)

	void UpdateData(struct TArray<int32_t>& Data); // Function Solarland.WeaponPartRunesComp.UpdateData // (Final|Native|Public|HasOutParms) // @ game+0x1f2baf0
	void OnInitilizeServer(); // Function Solarland.WeaponPartRunesComp.OnInitilizeServer // (Final|Native|Protected) // @ game+0x1f2b370
	void OnInitilizeClient(); // Function Solarland.WeaponPartRunesComp.OnInitilizeClient // (Final|Native|Protected) // @ game+0x8ba190
	bool IsValid(); // Function Solarland.WeaponPartRunesComp.IsValid // (Final|Native|Public) // @ game+0x1f2b310
	enum class EWeaponPartType GetPartType(); // Function Solarland.WeaponPartRunesComp.GetPartType // (Final|Native|Public|Const) // @ game+0x1f2aaa0
};

// Class Solarland.WeaponPartsComponent
// Size: 0x170 (Inherited: 0xb0)
struct UWeaponPartsComponent : UActorComponent {
	char pad_B0[0x30]; // 0xb0(0x30)
	struct UWeaponPartRunesComp* RunesComp; // 0xe0(0x08)
	struct UWeaponPartScopeComp* ScopeComp; // 0xe8(0x08)
	struct UWeaponPartClipComp* ClipComp; // 0xf0(0x08)
	struct UWeaponPartMuzzleComp* MuzzleComp; // 0xf8(0x08)
	struct UWeaponPartGripComp* GripComp; // 0x100(0x08)
	struct UWeaponPartGunStockComp* GunStockComp; // 0x108(0x08)
	struct UStaticMeshComponent* CrossHairPlane; // 0x110(0x08)
	struct UStaticMeshComponent* RedCrosshairPanel; // 0x118(0x08)
	char pad_120[0x1]; // 0x120(0x01)
	bool bQuickScope; // 0x121(0x01)
	char pad_122[0x2]; // 0x122(0x02)
	struct FName ScopeSocket; // 0x124(0x08)
	struct FName GripSocket; // 0x12c(0x08)
	struct FName ClipSocket; // 0x134(0x08)
	struct FName OldClipSocket; // 0x13c(0x08)
	struct FName MuzzleSocket; // 0x144(0x08)
	struct FName GunStockSocket; // 0x14c(0x08)
	char pad_154[0x4]; // 0x154(0x04)
	struct ASolarWeapon* MyWeaponActor; // 0x158(0x08)
	struct UWeaponNetComponent* WeaponNetComp; // 0x160(0x08)
	char pad_168[0x8]; // 0x168(0x08)

	void UpdateSkin(struct UWeaponSkinData* SkinData); // Function Solarland.WeaponPartsComponent.UpdateSkin // (Final|Native|Public) // @ game+0x1f2bd00
	void UpdateSinglePartHoldView(struct UWeaponPartComp* PartComp, bool bLocal); // Function Solarland.WeaponPartsComponent.UpdateSinglePartHoldView // (Final|Native|Protected) // @ game+0x1f2bc30
	void UpdateHoldView(bool bLocal); // Function Solarland.WeaponPartsComponent.UpdateHoldView // (Final|Native|Public) // @ game+0x1f2bba0
	bool SinglePartHasInitilized(struct UWeaponPartComp* Part); // Function Solarland.WeaponPartsComponent.SinglePartHasInitilized // (Final|Native|Protected) // @ game+0x1f2b9e0
	void ShowParts(bool Show, enum class EWeaponPartVisibilityChangeFlag Flag); // Function Solarland.WeaponPartsComponent.ShowParts // (Final|Native|Public) // @ game+0x1f2b920
	void SetSinglePartSkin(struct UWeaponPartComp* Part, struct UWeaponSkinData* SkinData); // Function Solarland.WeaponPartsComponent.SetSinglePartSkin // (Final|Native|Protected) // @ game+0x1f2b860
	void ResetSkin(); // Function Solarland.WeaponPartsComponent.ResetSkin // (Final|Native|Public) // @ game+0x1f2b730
	void ResetPartSkin(struct UWeaponPartComp* Part); // Function Solarland.WeaponPartsComponent.ResetPartSkin // (Final|Native|Protected) // @ game+0x1f2b6b0
	bool OverrideWeaponAmmoConfig(int32_t InFireModeType, int32_t InAmmoID); // Function Solarland.WeaponPartsComponent.OverrideWeaponAmmoConfig // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f2b530
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsPartExist // (Final|Native|Protected|Const) // @ game+0x1f2b280
	bool IsDefaultPart(int32_t PartID); // Function Solarland.WeaponPartsComponent.IsDefaultPart // (Final|Native|Public|Const) // @ game+0x1f2b130
	bool IsAmmoExist(int32_t ID); // Function Solarland.WeaponPartsComponent.IsAmmoExist // (Final|Native|Protected|Const) // @ game+0x1f2b0a0
	void InitEffectData(struct TArray<float>& hipV, struct TArray<float>& shoulderV, struct FWeaponPartsNetData& Data); // Function Solarland.WeaponPartsComponent.InitEffectData // (Final|Native|Protected|HasOutParms) // @ game+0x1f2aed0
	void InitAllPartsEffectData(struct FWeaponPartsNetData& Data); // Function Solarland.WeaponPartsComponent.InitAllPartsEffectData // (Final|Native|Protected|HasOutParms) // @ game+0x1f2ade0
	bool HasInitilizeFinish(); // Function Solarland.WeaponPartsComponent.HasInitilizeFinish // (Final|Native|Public) // @ game+0x1f2ad80
	struct TArray<struct UWeaponPartComp*> GetValidWeaponParts(); // Function Solarland.WeaponPartsComponent.GetValidWeaponParts // (Final|Native|Public|Const) // @ game+0x1f2aca0
	int32_t GetPartsTypeByID(int32_t ID); // Function Solarland.WeaponPartsComponent.GetPartsTypeByID // (Final|Native|Protected|Const) // @ game+0x1f2aba0
	struct FString GetPartsBpByID(int32_t ID); // Function Solarland.WeaponPartsComponent.GetPartsBpByID // (Final|Native|Protected|Const) // @ game+0x1f2aad0
	int32_t GetPartLevelByID(int32_t ID); // Function Solarland.WeaponPartsComponent.GetPartLevelByID // (Final|Native|Protected|Const) // @ game+0x1f2a9e0
	struct FWeaponPartsNetData GetNetData(); // Function Solarland.WeaponPartsComponent.GetNetData // (Final|Native|Protected|Const) // @ game+0x1f2a8e0
	void AttachToRightSocket(struct UWeaponPartComp* PartComp); // Function Solarland.WeaponPartsComponent.AttachToRightSocket // (Final|Native|Protected) // @ game+0x1f2a630
};

// Class Solarland.WeaponPartScopeComp
// Size: 0x840 (Inherited: 0x710)
struct UWeaponPartScopeComp : UWeaponPartComp {
	bool bOpen; // 0x710(0x01)
	char pad_711[0x3]; // 0x711(0x03)
	float FovValue; // 0x714(0x04)
	float HipToAdsTime; // 0x718(0x04)
	char pad_71C[0x4]; // 0x71c(0x04)
	struct UCurveFloat* FovChangeCurve; // 0x720(0x08)
	float HitEffectScale; // 0x728(0x04)
	char pad_72C[0x114]; // 0x72c(0x114)

	void OpenScope(float Time); // Function Solarland.WeaponPartScopeComp.OpenScope // (Final|Native|Public) // @ game+0x1f2b4b0
	bool IsOpened(); // Function Solarland.WeaponPartScopeComp.IsOpened // (Final|Native|Public|Const) // @ game+0x1f2b220
	bool IsNeedThermalImage(); // Function Solarland.WeaponPartScopeComp.IsNeedThermalImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2b1c0
	int32_t GetScopeType(); // Function Solarland.WeaponPartScopeComp.GetScopeType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2ac70
	struct FVector GetScopeAimCenterPoint(); // Function Solarland.WeaponPartScopeComp.GetScopeAimCenterPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2ac30
	struct FRotator GetFPPRotation(); // Function Solarland.WeaponPartScopeComp.GetFPPRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2a7f0
	struct FVector GetFPPLocation(); // Function Solarland.WeaponPartScopeComp.GetFPPLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2a700
	float GetDistanceToEyeWhenScope(); // Function Solarland.WeaponPartScopeComp.GetDistanceToEyeWhenScope // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2a6d0
	void CloseScope(); // Function Solarland.WeaponPartScopeComp.CloseScope // (Final|Native|Public) // @ game+0x1f2a6b0
};

// Class Solarland.WeaponPartScopeDataAsset
// Size: 0x260 (Inherited: 0x110)
struct UWeaponPartScopeDataAsset : UWeaponPartDataAsset {
	int32_t TypeID; // 0x108(0x04)
	struct FVector FPPLocation; // 0x10c(0x0c)
	struct FRotator FPPRotation; // 0x118(0x0c)
	bool bNeedThermalImage; // 0x124(0x01)
	float DistanceToEyeWhenScope; // 0x128(0x04)
	bool bShoulderShootChangeScale; // 0x12c(0x01)
	float ShoulderShootChangeScale; // 0x130(0x04)
	struct FName CrosshairSocketName; // 0x134(0x08)
	char pad_13E[0x2]; // 0x13e(0x02)
	struct FSoftObjectPath LodXMeshPath; // 0x140(0x18)
	struct FSoftObjectPath ScopeCrossHairMaterialPath; // 0x158(0x18)
	struct FSoftObjectPath ScopeCrossHairMeshPath; // 0x170(0x18)
	struct FSoftObjectPath ScopeCrossHairRedPointMaterialPath; // 0x188(0x18)
	struct FSoftObjectPath ScopeCrossHairRedPointMeshPath; // 0x1a0(0x18)
	bool bVibration; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct TMap<int32_t, struct FPartScopeCorrect> CorrectMapData; // 0x1c0(0x50)
	struct FSolarAmmoMeshData AmmoMeshData; // 0x210(0x48)
	char pad_258[0x8]; // 0x258(0x08)

	struct FRotator GetFPPRotation(int32_t& weaponid); // Function Solarland.WeaponPartScopeDataAsset.GetFPPRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2a830
	struct FVector GetFPPLocation(int32_t& weaponid); // Function Solarland.WeaponPartScopeDataAsset.GetFPPLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f2a740
};

// Class Solarland.WeaponRecoilPattern
// Size: 0x28 (Inherited: 0x28)
struct UWeaponRecoilPattern : UObject {
};

// Class Solarland.WeaponRecoilPatternRuntime
// Size: 0x30 (Inherited: 0x28)
struct UWeaponRecoilPatternRuntime : UObject {
	struct UWeaponRecoilPattern* PattenData; // 0x28(0x08)
};

// Class Solarland.SimpleRecoilPattern
// Size: 0xc0 (Inherited: 0x28)
struct USimpleRecoilPattern : UWeaponRecoilPattern {
	float OffsetTime; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FRuntimeFloatCurve OffsetCurve; // 0x30(0x88)
	struct UWeaponRecoilOffsetGenerator* OffsetGenerator; // 0xb8(0x08)
};

// Class Solarland.SimpleRecoilPatternRuntime
// Size: 0x50 (Inherited: 0x30)
struct USimpleRecoilPatternRuntime : UWeaponRecoilPatternRuntime {
	char pad_30[0x20]; // 0x30(0x20)
};

// Class Solarland.RecoverableRecoilPattern
// Size: 0x1f8 (Inherited: 0x28)
struct URecoverableRecoilPattern : UWeaponRecoilPattern {
	float IncreaseTime; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FRuntimeFloatCurve IncreaseCurve; // 0x30(0x88)
	bool bLimitMaxOffset; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	struct FVector2D MaxOffset; // 0xbc(0x08)
	struct FVector2D StopRecoveryOffset; // 0xc4(0x08)
	char pad_CC[0x4]; // 0xcc(0x04)
	struct UWeaponRecoilOffsetGenerator* OffsetGenerator; // 0xd0(0x08)
	enum class ERecoilDecreaseMode DecreaseMode; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FRuntimeFloatCurve DecreaseSpeedCurve; // 0xe0(0x88)
	float DecreaseTime; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FRuntimeFloatCurve DecreaseRatioCurve; // 0x170(0x88)
};

// Class Solarland.RecoverableRecoilPatternRuntime
// Size: 0x60 (Inherited: 0x30)
struct URecoverableRecoilPatternRuntime : UWeaponRecoilPatternRuntime {
	char pad_30[0x30]; // 0x30(0x30)
};

// Class Solarland.WeaponRecoilOffsetGenerator
// Size: 0x28 (Inherited: 0x28)
struct UWeaponRecoilOffsetGenerator : UObject {
};

// Class Solarland.RandomRangeOffsetGenerator
// Size: 0x48 (Inherited: 0x28)
struct URandomRangeOffsetGenerator : UWeaponRecoilOffsetGenerator {
	struct FSymmetricRangeFloat HorizontalRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat VerticalRange; // 0x34(0x0c)
	int32_t RandomSeed; // 0x40(0x04)
	int32_t RandomStep; // 0x44(0x04)
};

// Class Solarland.RandomByPerlinNoiseOffsetGenerator
// Size: 0x50 (Inherited: 0x28)
struct URandomByPerlinNoiseOffsetGenerator : UWeaponRecoilOffsetGenerator {
	struct FSymmetricRangeFloat HorizontalRange; // 0x28(0x0c)
	struct FSymmetricRangeFloat VerticalRange; // 0x34(0x0c)
	float HorizontalNoiseBase; // 0x40(0x04)
	float VerticalNoiseBase; // 0x44(0x04)
	float HorizontalNoiseFrequency; // 0x48(0x04)
	float VerticalNoiseFrequency; // 0x4c(0x04)
};

// Class Solarland.FixedCurveOffsetGenerator
// Size: 0x148 (Inherited: 0x28)
struct UFixedCurveOffsetGenerator : UWeaponRecoilOffsetGenerator {
	struct FRuntimeFloatCurve HorizontalOffsetCurve; // 0x28(0x88)
	struct FRuntimeFloatCurve VerticalOffsetCurve; // 0xb0(0x88)
	float HorizontalScale; // 0x138(0x04)
	float VerticalScale; // 0x13c(0x04)
	int32_t HorizontalRepeatStartIndex; // 0x140(0x04)
	int32_t VerticalRepeatStartIndex; // 0x144(0x04)
};

// Class Solarland.FixedPointsOffsetGenerator
// Size: 0x48 (Inherited: 0x28)
struct UFixedPointsOffsetGenerator : UWeaponRecoilOffsetGenerator {
	struct TArray<struct FVector2D> OffsetPoints; // 0x28(0x10)
	float HorizontalScale; // 0x38(0x04)
	float VerticalScale; // 0x3c(0x04)
	int32_t RepeatStartIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Solarland.FixedSectionOffsetGenerator
// Size: 0x40 (Inherited: 0x28)
struct UFixedSectionOffsetGenerator : UWeaponRecoilOffsetGenerator {
	struct TArray<struct FFixedSectionInfo> Sections; // 0x28(0x10)
	int32_t RepeatStartIndex; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Solarland.WeaponryPartBase
// Size: 0x680 (Inherited: 0x600)
struct UWeaponryPartBase : UStaticMeshComponent {
	int32_t PartID; // 0x600(0x04)
	bool bDataAssetInit; // 0x604(0x01)
	bool bMeshAssetsInit; // 0x605(0x01)
	char pad_606[0x2]; // 0x606(0x02)
	struct FSoftObjectPath AssetPath; // 0x608(0x18)
	struct UWeaponPartDataAsset* OrginDataAsset; // 0x620(0x08)
	struct UWeaponPartDataAsset* SkinPartDataAsset; // 0x628(0x08)
	struct UStaticMesh* MyStaticMesh; // 0x630(0x08)
	struct UWeaponSkinData* WeaponSkin; // 0x638(0x08)
	struct FWeaponSkinPartData SkinMatchedPartData; // 0x640(0x40)

	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PartUninstall(int32_t ID); // Function Solarland.WeaponryPartBase.PartUninstall // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void PartInitialize(int32_t ID, bool bShowHDMesh, bool bDefault); // Function Solarland.WeaponryPartBase.PartInitialize // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void OnInitMeshAssets(); // Function Solarland.WeaponryPartBase.OnInitMeshAssets // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnInitDataAsset(); // Function Solarland.WeaponryPartBase.OnInitDataAsset // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	bool IsValidPart(); // Function Solarland.WeaponryPartBase.IsValidPart // (Native|Public) // @ game+0x1f2b340
	bool HasInitialized(); // Function Solarland.WeaponryPartBase.HasInitialized // (Native|Public|Const) // @ game+0x1f2ad50
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetSkinNeedLoadAssets // (Final|Native|Public) // @ game+0x1f2f260
	enum class EWeaponPartType GetPartType(); // Function Solarland.WeaponryPartBase.GetPartType // (Native|Public|Const) // @ game+0x1f2ef80
	int32_t GetPartID(); // Function Solarland.WeaponryPartBase.GetPartID // (Native|Public|Const) // @ game+0x1f2a9b0
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadMesh(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadMesh // (Native|Public) // @ game+0x1f2ee00
	struct TArray<struct FSoftObjectPath> GetClientNeedLoadAssets(bool bShowHDMesh); // Function Solarland.WeaponryPartBase.GetClientNeedLoadAssets // (Final|Native|Public) // @ game+0x1f2ed20
};

// Class Solarland.WeaponryPartClip
// Size: 0x680 (Inherited: 0x680)
struct UWeaponryPartClip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartComponent
// Size: 0x110 (Inherited: 0xb0)
struct UWeaponryPartComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponryPartScope* ScopeComp; // 0xb8(0x08)
	struct UWeaponryPartClip* ClipComp; // 0xc0(0x08)
	struct UWeaponryPartMuzzle* MuzzleComp; // 0xc8(0x08)
	struct UWeaponryPartGrip* GripComp; // 0xd0(0x08)
	struct UWeaponryPartGunStock* GunStockComp; // 0xd8(0x08)
	struct FName ScopeSocket; // 0xe0(0x08)
	struct FName GripSocket; // 0xe8(0x08)
	struct FName ClipSocket; // 0xf0(0x08)
	struct FName MuzzleSocket; // 0xf8(0x08)
	struct FName GunStockSocket; // 0x100(0x08)
	struct AWeaponryWeapon* MyWeaponActor; // 0x108(0x08)

	void UpdateSkin(struct UWeaponSkinData* SkinData, bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.UpdateSkin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UninstallWeaponPart(int32_t PartID); // Function Solarland.WeaponryPartComponent.UninstallWeaponPart // (Final|Native|Public) // @ game+0x1f2fff0
	bool SinglePartHasInitilized(struct UWeaponryPartBase* Part); // Function Solarland.WeaponryPartComponent.SinglePartHasInitilized // (Final|Native|Public) // @ game+0x1f2b9e0
	void ShowParts(bool Show); // Function Solarland.WeaponryPartComponent.ShowParts // (Final|Native|Public|BlueprintCallable) // @ game+0x1f2fde0
	void SetSinglePartSkin(struct UWeaponryPartBase* Part, struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryPartComponent.SetSinglePartSkin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ResetSkin(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.ResetSkin // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool ReplaceWeaponPart(int32_t PartID, bool bReplaceRoute); // Function Solarland.WeaponryPartComponent.ReplaceWeaponPart // (Final|Native|Public) // @ game+0x1f2fa10
	bool IsPartExist(int32_t ID); // Function Solarland.WeaponryPartComponent.IsPartExist // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	void InitDefaultParts(bool bShowHDMesh); // Function Solarland.WeaponryPartComponent.InitDefaultParts // (Final|Native|Public) // @ game+0x1f2f460
	bool HasInitilizeFinish(); // Function Solarland.WeaponryPartComponent.HasInitilizeFinish // (Final|Native|Public) // @ game+0x1f2f430
	int32_t GetPartsTypeByID(int32_t ID); // Function Solarland.WeaponryPartComponent.GetPartsTypeByID // (Event|Public|BlueprintEvent|Const) // @ game+0x224bbb0
	void AttachToRightSocket(struct UWeaponryPartBase* PartComp); // Function Solarland.WeaponryPartComponent.AttachToRightSocket // (Final|Native|Public) // @ game+0x1f2eb70
};

// Class Solarland.WeaponryPartGrip
// Size: 0x680 (Inherited: 0x680)
struct UWeaponryPartGrip : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartGunStock
// Size: 0x680 (Inherited: 0x680)
struct UWeaponryPartGunStock : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartMuzzle
// Size: 0x680 (Inherited: 0x680)
struct UWeaponryPartMuzzle : UWeaponryPartBase {
};

// Class Solarland.WeaponryPartScope
// Size: 0x680 (Inherited: 0x680)
struct UWeaponryPartScope : UWeaponryPartBase {
};

// Class Solarland.WeaponrySkinComponent
// Size: 0xc8 (Inherited: 0xb0)
struct UWeaponrySkinComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UWeaponSkinData* SkinDataAsset; // 0xb8(0x08)
	struct AWeaponryWeapon* MyWeapon; // 0xc0(0x08)

	struct UWeaponSkinData* GetSkinData(); // Function Solarland.WeaponrySkinComponent.GetSkinData // (Final|Native|Public) // @ game+0x1f2f130
};

// Class Solarland.WeaponryWeapon
// Size: 0x4e0 (Inherited: 0x228)
struct AWeaponryWeapon : AActor {
	char pad_228[0x8]; // 0x228(0x08)
	struct FTransform PreviewTransform; // 0x230(0x30)
	struct FTransform ScoOffsetTransform; // 0x260(0x30)
	struct FTransform StoOffsetTransform; // 0x290(0x30)
	struct FTransform GriOffsetTransform; // 0x2c0(0x30)
	struct FTransform BarOffsetTransform; // 0x2f0(0x30)
	struct FTransform CliOffsetTransform; // 0x320(0x30)
	struct FTransform ShopPreviewTransform; // 0x350(0x30)
	struct FTransform BattlePassPreviewTransform; // 0x380(0x30)
	struct FTransform GetRewardTransform; // 0x3b0(0x30)
	struct FTransform GrowTaskTransform; // 0x3e0(0x30)
	struct FTransform LuckDrawTransform; // 0x410(0x30)
	struct FTransform CarouselDrawTransform; // 0x440(0x30)
	struct USingleWeaponConfig* Config; // 0x470(0x08)
	struct USkeletalMeshComponent* Mesh; // 0x478(0x08)
	struct FVector DestLocation; // 0x480(0x0c)
	float BaseSpeedValue; // 0x48c(0x04)
	float TimeLineCurve; // 0x490(0x04)
	bool BeginTweenPos; // 0x494(0x01)
	char pad_495[0x3]; // 0x495(0x03)
	float DecValue; // 0x498(0x04)
	bool CurrIsDecMode; // 0x49c(0x01)
	bool IsDownloadHDModel; // 0x49d(0x01)
	char pad_49E[0x2]; // 0x49e(0x02)
	int32_t weaponid; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	struct FSoftObjectPath FightMeshPath; // 0x4a8(0x18)
	struct UParticleSystemComponent* SkinSpecialEffect; // 0x4c0(0x08)
	struct UWeaponryPartComponent* WeaponPartComponent; // 0x4c8(0x08)
	struct UWeaponrySkinComponent* WeaponSkinComponent; // 0x4d0(0x08)
	char pad_4D8[0x8]; // 0x4d8(0x08)

	void TransformToMirror(struct FTransform OriginalTransform); // Function Solarland.WeaponryWeapon.TransformToMirror // (Final|Native|Public|HasDefaults) // @ game+0x1f2ff00
	void StopTweenImmediately(struct FVector& DestPos); // Function Solarland.WeaponryWeapon.StopTweenImmediately // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f2fe70
	void SetWeaponSkin(struct UWeaponSkinData* SkinData); // Function Solarland.WeaponryWeapon.SetWeaponSkin // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SetIsDownloadHDModel(bool InValue); // Function Solarland.WeaponryWeapon.SetIsDownloadHDModel // (Final|Native|Public) // @ game+0x1f2fb10
	void ResetSkinSpecialEffect(); // Function Solarland.WeaponryWeapon.ResetSkinSpecialEffect // (Final|Native|Public) // @ game+0x1f2faf0
	void ResetMaterial(); // Function Solarland.WeaponryWeapon.ResetMaterial // (Final|Native|Protected) // @ game+0x1f2fad0
	void PostUpdateAppearance(); // Function Solarland.WeaponryWeapon.PostUpdateAppearance // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponSkinRefresh(bool bValid, int32_t SkinId); // Function Solarland.WeaponryWeapon.OnWeaponSkinRefresh // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void OnWeaponDataInitComplete(); // Function Solarland.WeaponryWeapon.OnWeaponDataInitComplete // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void MoveToSpecifiedPos(struct FVector& DestPos, bool IsDecMode, float BaseValue, float CurveValue); // Function Solarland.WeaponryWeapon.MoveToSpecifiedPos // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f2f8a0
	struct UParticleSystemComponent* InternalPlayEffectAttached(struct UParticleSystem* PS, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FAttachedEffectParam Param); // Function Solarland.WeaponryWeapon.InternalPlayEffectAttached // (Final|Native|Protected) // @ game+0x1f2f5c0
	void InitWeaponConfig(int32_t weaponid, struct FVector DefaultLoc); // Function Solarland.WeaponryWeapon.InitWeaponConfig // (Final|Native|Public|HasDefaults) // @ game+0x1f2f4f0
	struct TArray<struct FSoftObjectPath> GetSkinNeedLoadAssets(struct UWeaponSkinData* SkinData, bool bLoadHDMesh); // Function Solarland.WeaponryWeapon.GetSkinNeedLoadAssets // (Native|Public) // @ game+0x1f2f150
	bool GetIsDownloadHDModel(); // Function Solarland.WeaponryWeapon.GetIsDownloadHDModel // (Final|Native|Public) // @ game+0x1f2ef50
	struct USingleWeaponConfig* GetCurrentConfig(); // Function Solarland.WeaponryWeapon.GetCurrentConfig // (Final|Native|Public|Const) // @ game+0x1f2eee0
	void EnqueueUpdateAppearanceCmd(char Cmd, struct FString Params); // Function Solarland.WeaponryWeapon.EnqueueUpdateAppearanceCmd // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void EmptyMeshOverrideMaterials(); // Function Solarland.WeaponryWeapon.EmptyMeshOverrideMaterials // (Final|Native|Public) // @ game+0x1f2ebf0
};

// Class Solarland.WeaponScanAbility
// Size: 0x498 (Inherited: 0x428)
struct UWeaponScanAbility : USolarWeaponGameplayAbility {
	struct ASolarRadarBase* RadarClass; // 0x428(0x08)
	struct ASolarRadarBase* SpawnedRadar; // 0x430(0x08)
	float EffectRadius; // 0x438(0x04)
	float DelayDisplayTime; // 0x43c(0x04)
	struct UAnimMontage* ExecuteAnimMontage; // 0x440(0x08)
	struct UAnimMontage* ExecuteAnimMontageWithWeapon; // 0x448(0x08)
	bool bExecuteAnimMontageByWeaponStatus; // 0x450(0x01)
	bool bWaitMontageNotifyToSpawnRadar; // 0x451(0x01)
	char pad_452[0x2]; // 0x452(0x02)
	struct FName SpawnRadarMontageNotify; // 0x454(0x08)
	bool bWaitExecuteAnimCompletedSpawnRader; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	struct UGameplayEffect* WaitSpawnGameplayEffect; // 0x460(0x08)
	struct FActiveGameplayEffectHandle ActiveWaitSpawnEffectHandle; // 0x468(0x08)
	struct ASolarCharacter* EffectUser; // 0x470(0x08)
	char pad_478[0x10]; // 0x478(0x10)
	struct TWeakObjectPtr<struct AActor> InstigatorCache; // 0x488(0x08)
	char pad_490[0x8]; // 0x490(0x08)

	void SpawnRadar(); // Function Solarland.WeaponScanAbility.SpawnRadar // (Final|Native|Private) // @ game+0x1f36440
	void RemoveWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.RemoveWaitSpawnEffect // (Final|Native|Private) // @ game+0x1f35dd0
	void OnMontageNotify(struct FName NotifyName); // Function Solarland.WeaponScanAbility.OnMontageNotify // (Final|Native|Private) // @ game+0x1f34bf0
	void OnExecuteAnimationCompleted(); // Function Solarland.WeaponScanAbility.OnExecuteAnimationCompleted // (Final|Native|Private) // @ game+0x1f34bd0
	void OnCharacterReset(); // Function Solarland.WeaponScanAbility.OnCharacterReset // (Final|Native|Private) // @ game+0x1f34b30
	void AddWaitSpawnEffect(); // Function Solarland.WeaponScanAbility.AddWaitSpawnEffect // (Final|Native|Private) // @ game+0x1f34010
	void ActiveRader(); // Function Solarland.WeaponScanAbility.ActiveRader // (Final|Native|Private) // @ game+0x1f33ff0
};

// Class Solarland.WeaponScopeSliderWidget
// Size: 0x398 (Inherited: 0x340)
struct UWeaponScopeSliderWidget : USolarUserWidget {
	struct TArray<struct FScopeSliderData> ScopeSliderDatas; // 0x340(0x10)
	int32_t ScopeSliderType; // 0x350(0x04)
	float SliderAnimPlaySpeed; // 0x354(0x04)
	float SliderValueScale; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct USlider* Slider_ADS; // 0x360(0x08)
	struct USolarTextBlock* Txt_Scope; // 0x368(0x08)
	struct UWidgetAnimation* Anim_Type0; // 0x370(0x08)
	struct UWidgetAnimation* Anim_Type1; // 0x378(0x08)
	struct UWidgetAnimation* AnimToPlay; // 0x380(0x08)
	char pad_388[0x10]; // 0x388(0x10)

	void SetSliderDisplay(bool bSkipAnimation); // Function Solarland.WeaponScopeSliderWidget.SetSliderDisplay // (Final|Native|Protected) // @ game+0x1f363b0
	void OnSliderValueChangedOnPC(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChangedOnPC // (Final|Native|Protected) // @ game+0x1f34cf0
	void OnSliderValueChanged(float InValue); // Function Solarland.WeaponScopeSliderWidget.OnSliderValueChanged // (Final|Native|Protected) // @ game+0x1f34c70
};

// Class Solarland.WeaponShootConfig
// Size: 0x210 (Inherited: 0x30)
struct UWeaponShootConfig : UDataAsset {
	bool bEnableNewShootAlgorithm; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float ShootOriginRange; // 0x34(0x04)
	float StandardShootDistance; // 0x38(0x04)
	float BaseSpread; // 0x3c(0x04)
	float SpreadSmoothSpeed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FRuntimeFloatCurve SpreadDistributionCurve; // 0x48(0x88)
	struct TArray<struct FWeaponAttributeModifiersByTag> ModifiersByOwnerTag; // 0xd0(0x10)
	float SprayingResetTime; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct UWeaponSpreadPattern* SpreadPattern; // 0xe8(0x08)
	struct UWeaponRecoilPattern* RecoilPattern; // 0xf0(0x08)
	struct UWeaponRecoilPattern* ScopeKickPattern; // 0xf8(0x08)
	struct TMap<enum class EWeaponScopeType, struct FVector2D> ScopeKickScaleMap; // 0x100(0x50)
	bool bIsolateCrossHairFromScope; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct UWeaponRecoilPattern* CrossHairKickPattern; // 0x158(0x08)
	struct TMap<enum class EWeaponScopeType, struct FVector2D> CrossHairKickScaleMap; // 0x160(0x50)
	struct UWeaponCameraShakePattern* ShakePatternOnShot; // 0x1b0(0x08)
	struct UWeaponCameraShakePattern* ShakePatternOnScopeShot; // 0x1b8(0x08)
	struct TMap<enum class EWeaponScopeType, float> ShakeScaleMapOnScopeShot; // 0x1c0(0x50)
};

// Class Solarland.WeaponSpreadAndRecoil
// Size: 0xd0 (Inherited: 0x28)
struct UWeaponSpreadAndRecoil : UObject {
	struct ASolarWeapon* Weapon; // 0x28(0x08)
	char pad_30[0x8]; // 0x30(0x08)
	struct UWeaponSpreadPatternRuntime* SpreadPattern; // 0x38(0x08)
	struct UWeaponRecoilPatternRuntime* RecoilPattern; // 0x40(0x08)
	struct UWeaponRecoilPatternRuntime* ScopeKickPattern; // 0x48(0x08)
	struct UWeaponRecoilPatternRuntime* CrossHairKickPattern; // 0x50(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnShot; // 0x58(0x08)
	struct UWeaponCameraShakePatternRuntime* ShakePatternOnScopeShot; // 0x60(0x08)
	struct TMap<enum class EWeaponScopeType, struct UWeaponCameraShakePatternRuntime*> ShakePatternMapOnScopeShot; // 0x68(0x50)
	char pad_B8[0x18]; // 0xb8(0x18)
};

// Class Solarland.WeaponSpreadPattern
// Size: 0x28 (Inherited: 0x28)
struct UWeaponSpreadPattern : UObject {
};

// Class Solarland.WeaponSpreadPatternRuntime
// Size: 0x30 (Inherited: 0x28)
struct UWeaponSpreadPatternRuntime : UObject {
	struct UWeaponSpreadPattern* PattenData; // 0x28(0x08)
};

// Class Solarland.SimpleSpreadPattern
// Size: 0x1f8 (Inherited: 0x28)
struct USimpleSpreadPattern : UWeaponSpreadPattern {
	struct TArray<struct FWeaponAttributeParam> SpreadModifiers; // 0x28(0x10)
	float SpreadScaleIncreaseTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRuntimeFloatCurve SpreadScaleIncreaseCurve; // 0x40(0x88)
	struct TArray<struct FSpreadScaleIncrease> SpreadScaleIncreases; // 0xc8(0x10)
	enum class ESpreadScaleDecreaseMode SpreadScaleDecreaseMode; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FRuntimeFloatCurve SpreadScaleDecreaseSpeedCurve; // 0xe0(0x88)
	float SpreadScaleDecreaseTime; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FRuntimeFloatCurve SpreadScaleDecreaseRatioCurve; // 0x170(0x88)
};

// Class Solarland.SimpleSpreadPatternRuntime
// Size: 0x60 (Inherited: 0x30)
struct USimpleSpreadPatternRuntime : UWeaponSpreadPatternRuntime {
	char pad_30[0x30]; // 0x30(0x30)
};

// Class Solarland.WeaponSystemAssistAim
// Size: 0x88 (Inherited: 0x28)
struct UWeaponSystemAssistAim : UObject {
	char pad_28[0x60]; // 0x28(0x60)

	void RefreshCurrentWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemAssistAim.RefreshCurrentWeapon // (Final|Native|Public) // @ game+0x1f35d50
	bool Init(struct TScriptInterface<ISolarAssistAimInterface>& AAInterface); // Function Solarland.WeaponSystemAssistAim.Init // (Final|Native|Public|HasOutParms) // @ game+0x1f34700
	bool GetActive(); // Function Solarland.WeaponSystemAssistAim.GetActive // (Final|Native|Public) // @ game+0x1f341f0
};

// Class Solarland.WeaponSystemAutoFire
// Size: 0xa8 (Inherited: 0x28)
struct UWeaponSystemAutoFire : UObject {
	char pad_28[0x80]; // 0x28(0x80)

	void OnWeaponFire(); // Function Solarland.WeaponSystemAutoFire.OnWeaponFire // (Final|Native|Private) // @ game+0x1f35070
};

// Class Solarland.WeaponSystemBase
// Size: 0x1b0 (Inherited: 0xb0)
struct UWeaponSystemBase : UActorComponent {
	char pad_B0[0x78]; // 0xb0(0x78)
	struct UWeaponSystemAutoFire* WeaponSystemAutoFire; // 0x128(0x08)
	struct USolarWeaponFireInputResolver* WeaponSystemFireInputResolver; // 0x130(0x08)
	struct UWeaponSystemAssistAim* WeaponSystemAssistAim; // 0x138(0x08)
	struct FWeaponSystemInteract WeaponSysIneract; // 0x140(0x50)
	char pad_190[0x10]; // 0x190(0x10)
	struct AActor* MyPossessPawn; // 0x1a0(0x08)
	bool bAssistAim; // 0x1a8(0x01)
	bool bAutoFire; // 0x1a9(0x01)
	char pad_1AA[0x6]; // 0x1aa(0x06)

	void WeaponAssistSystemTick(float InDeltaTime); // Function Solarland.WeaponSystemBase.WeaponAssistSystemTick // (Final|Native|Private) // @ game+0x1f36630
	void SwitchSingleWeaponPressMode(); // Function Solarland.WeaponSystemBase.SwitchSingleWeaponPressMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1f36580
	void SwitchDoScopeMode(); // Function Solarland.WeaponSystemBase.SwitchDoScopeMode // (Final|Native|Public|BlueprintCallable) // @ game+0x8ba190
	void SwitchAutoScopeEnable(); // Function Solarland.WeaponSystemBase.SwitchAutoScopeEnable // (Native|Public|BlueprintCallable) // @ game+0x1258890
	void SwitchAutoFireEnable(); // Function Solarland.WeaponSystemBase.SwitchAutoFireEnable // (Native|Public) // @ game+0x12588d0
	void SwitchAutoFire(bool Open); // Function Solarland.WeaponSystemBase.SwitchAutoFire // (Final|Native|Public) // @ game+0x1f364f0
	void SwitchAssistAim(bool opened); // Function Solarland.WeaponSystemBase.SwitchAssistAim // (Final|Native|Public) // @ game+0x1f36460
	void SetCurrentActiveWeapon(struct ASolarWeapon* Weapon); // Function Solarland.WeaponSystemBase.SetCurrentActiveWeapon // (Final|Native|Protected) // @ game+0x1f36330
	void SetCrosshairVisible(bool InVisible); // Function Solarland.WeaponSystemBase.SetCrosshairVisible // (Native|Public|BlueprintCallable) // @ game+0x1f362a0
	void SetAutoScope(bool bOpen); // Function Solarland.WeaponSystemBase.SetAutoScope // (Final|Native|Public) // @ game+0x1f36210
	void ServerPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.ServerPlayNoAmmoSound // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x124bb00
	void ReceiveMsgFromPlayer(bool bClient, struct FPlayerWeaponMsg& Msg); // Function Solarland.WeaponSystemBase.ReceiveMsgFromPlayer // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x1f35950
	void OnTouchScreen(); // Function Solarland.WeaponSystemBase.OnTouchScreen // (Final|Native|Public) // @ game+0x8ba190
	void OnToggleAutoFire(); // Function Solarland.WeaponSystemBase.OnToggleAutoFire // (Final|Native|Protected) // @ game+0x1f34d90
	void OnToggleAssistAim(); // Function Solarland.WeaponSystemBase.OnToggleAssistAim // (Final|Native|Protected) // @ game+0x1f34d70
	void OnOtherPlayerSpectateMyOwner(); // Function Solarland.WeaponSystemBase.OnOtherPlayerSpectateMyOwner // (Native|Public) // @ game+0x124bae0
	void NetMulticastPlayNoAmmoSound(); // Function Solarland.WeaponSystemBase.NetMulticastPlayNoAmmoSound // (Net|Native|Event|NetMulticast|Public) // @ game+0x124bc20
	bool IsUsingSpecialQuickAdsButton(); // Function Solarland.WeaponSystemBase.IsUsingSpecialQuickAdsButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f34a10
	struct USolarWeaponFireInputResolver* GetFireInputResolver(); // Function Solarland.WeaponSystemBase.GetFireInputResolver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f34410
	void GetFireButtonInputState(enum class ESolarWeaponFireInputButtonState& OutLeftFireButton, enum class ESolarWeaponFireInputButtonState& OutRightFireButton, enum class ESolarWeaponFireInputButtonState& OutQuickAdsButton); // Function Solarland.WeaponSystemBase.GetFireButtonInputState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f342d0
	struct FWeaponSysStateStruct GetCurrentState(); // Function Solarland.WeaponSystemBase.GetCurrentState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f34220
	bool CheckAutoFire(bool& canfire); // Function Solarland.WeaponSystemBase.CheckAutoFire // (Final|Native|Protected|HasOutParms) // @ game+0x1f34030
};

// Class Solarland.WeaponSystemPlayerBase
// Size: 0x260 (Inherited: 0x1b0)
struct UWeaponSystemPlayerBase : UWeaponSystemBase {
	char pad_1B0[0x10]; // 0x1b0(0x10)
	struct USolarGameInstanceBase* GameInstance; // 0x1c0(0x08)
	struct TArray<struct FSolarWeaponSlotData> WeaponSlotDatas; // 0x1c8(0x10)
	struct FSolarWeaponSystemData WeaponSystemData; // 0x1d8(0x28)
	struct ASolarCharacter* MyPawn; // 0x200(0x08)
	char pad_208[0x20]; // 0x208(0x20)
	struct FWeaponAction WeaponPickupAction; // 0x228(0x08)
	struct FWeaponAction WeaponSwitchAction; // 0x230(0x08)
	struct FWeaponAction WeaponReplaceAction; // 0x238(0x08)
	struct FWeaponAction WeaponDropAction; // 0x240(0x08)
	struct FWeaponAction WeaponClearAction; // 0x248(0x08)
	struct FWeaponAction WeaponDataUpdateAction; // 0x250(0x08)
	struct FWeaponAction WeaponSwapAction; // 0x258(0x08)

	void TriggerBoltAnim(); // Function Solarland.WeaponSystemPlayerBase.TriggerBoltAnim // (Final|Native|Public) // @ game+0x1f42470
	void SpawnMeleeWeapon(struct ASolarCharacter* Owner); // Function Solarland.WeaponSystemPlayerBase.SpawnMeleeWeapon // (Final|Native|Protected) // @ game+0x1f422e0
	void ResetCurrentWeaponFireState(); // Function Solarland.WeaponSystemPlayerBase.ResetCurrentWeaponFireState // (Final|Native|Public) // @ game+0x1f41930
	void PostBolt(); // Function Solarland.WeaponSystemPlayerBase.PostBolt // (Final|Native|Public) // @ game+0x1f416f0
	void OpenScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.OpenScopeForSpectator // (Native|Public) // @ game+0x1257850
	void OnRep_WeaponSystemData(struct FSolarWeaponSystemData InLastWeaponSystemData); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponSystemData // (Final|Native|Protected) // @ game+0x1f41410
	void OnRep_WeaponSwitchAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponSwitchAction // (Native|Protected) // @ game+0x1259710
	void OnRep_WeaponSwapAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponSwapAction // (Native|Protected) // @ game+0x1258170
	void OnRep_WeaponReplaceAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponReplaceAction // (Native|Protected) // @ game+0x1257c50
	void OnRep_WeaponPickupAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponPickupAction // (Native|Protected) // @ game+0x12581d0
	void OnRep_WeaponDropAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponDropAction // (Native|Protected) // @ game+0x1258090
	void OnRep_WeaponDataUpdateAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponDataUpdateAction // (Native|Protected) // @ game+0x12596f0
	void OnRep_WeaponClearAction(); // Function Solarland.WeaponSystemPlayerBase.OnRep_WeaponClearAction // (Native|Protected) // @ game+0x1257990
	struct ASolarPlayerWeapon* GetWeaponBySlot(int32_t Slot); // Function Solarland.WeaponSystemPlayerBase.GetWeaponBySlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40f30
	struct ASolarUnArmWeapon* GetUnArmWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetUnArmWeapon // (Final|Native|Public|Const) // @ game+0x1f40f00
	struct ASolarPlayerWeapon* GetPackSecondaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackSecondaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f40ea0
	struct ASolarPlayerWeapon* GetPackPrimaryWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetPackPrimaryWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f40e70
	int32_t GetLastActiveWeaponSlot(); // Function Solarland.WeaponSystemPlayerBase.GetLastActiveWeaponSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f40e40
	bool GetIsUnArm(); // Function Solarland.WeaponSystemPlayerBase.GetIsUnArm // (Final|Native|Public) // @ game+0x1f40e10
	float GetCurrentWeaponReloadTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponReloadTime // (Final|Native|Public) // @ game+0x1f40a80
	bool GetCurrentWeaponIsOverloading(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIsOverloading // (Final|Native|Public) // @ game+0x1f40a50
	struct UTexture2D* GetCurrentWeaponIcon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponIcon // (Final|Native|Protected) // @ game+0x1f40a20
	float GetCurrentWeaponBoltTime(int32_t Mode); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeaponBoltTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f40990
	struct ASolarPlayerWeapon* GetCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f40960
	float GetCurrentSwitchWeaponTime(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentSwitchWeaponTime // (Final|Native|Public) // @ game+0x1f40900
	int32_t GetCurrentActiveSlot(); // Function Solarland.WeaponSystemPlayerBase.GetCurrentActiveSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f408d0
	struct UStaticMesh* GetClipMeshOfCurrentWeapon(); // Function Solarland.WeaponSystemPlayerBase.GetClipMeshOfCurrentWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x1f408a0
	void GameStatisticsWeaponSkill(struct FString Param); // Function Solarland.WeaponSystemPlayerBase.GameStatisticsWeaponSkill // (Final|Native|Public) // @ game+0x1f40800
	void CrosshairQuitReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairQuitReload // (Native|Public) // @ game+0x7e17a0
	void CrosshairEnterReload(); // Function Solarland.WeaponSystemPlayerBase.CrosshairEnterReload // (Native|Public) // @ game+0x1257f30
	void CloseScopeForSpectator(); // Function Solarland.WeaponSystemPlayerBase.CloseScopeForSpectator // (Native|Public) // @ game+0x7a9ae0
	void CleanWeaponSlotsUI(); // Function Solarland.WeaponSystemPlayerBase.CleanWeaponSlotsUI // (Final|Native|Public|BlueprintCallable) // @ game+0x1f40670
	void ChangeShootingOption(); // Function Solarland.WeaponSystemPlayerBase.ChangeShootingOption // (Final|Native|Public) // @ game+0x1f40650
	void CancelSecondaryFire(); // Function Solarland.WeaponSystemPlayerBase.CancelSecondaryFire // (Native|Public) // @ game+0x1258250
};

// Class Solarland.WeaponSystemPlayer
// Size: 0x308 (Inherited: 0x260)
struct UWeaponSystemPlayer : UWeaponSystemPlayerBase {
	char pad_260[0x50]; // 0x260(0x50)
	bool bCanOperateWhenOverload; // 0x2b0(0x01)
	char pad_2B1[0x1]; // 0x2b1(0x01)
	bool bInitializeWeaponSystem; // 0x2b2(0x01)
	char pad_2B3[0x15]; // 0x2b3(0x15)
	float ReloadBlockTimeMax; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct FString ReceviedReloadMessage; // 0x2d0(0x10)
	char pad_2E0[0x10]; // 0x2e0(0x10)
	struct AStaticMeshActor* DroppedClip; // 0x2f0(0x08)
	struct AStaticMeshActor* ExtractedClip; // 0x2f8(0x08)
	bool bHoldFire; // 0x300(0x01)
	char pad_301[0x7]; // 0x301(0x07)

	void TestSetSkin(int32_t SkinId); // Function Solarland.WeaponSystemPlayer.TestSetSkin // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f365a0
	void TestSafeArea(); // Function Solarland.WeaponSystemPlayer.TestSafeArea // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x7e19f0
	void TakeOffEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.TakeOffEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void SwitchFireMode(); // Function Solarland.WeaponSystemPlayer.SwitchFireMode // (Native|Public) // @ game+0x1258230
	void ServerSwitch(char TargetSlot); // Function Solarland.WeaponSystemPlayer.ServerSwitch // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f36190
	void ServerSwap(char SourceSlot, char TargetSlot); // Function Solarland.WeaponSystemPlayer.ServerSwap // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f360d0
	void ServerReplaceUpgradeRoute(char Slot); // Function Solarland.WeaponSystemPlayer.ServerReplaceUpgradeRoute // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f36050
	void ServerReload(char CurrentSlot, char FireMode); // Function Solarland.WeaponSystemPlayer.ServerReload // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f35f90
	bool ServerPackDropWeapon(int32_t Slot); // Function Solarland.WeaponSystemPlayer.ServerPackDropWeapon // (Native|Public) // @ game+0x1f35ef0
	void ServerGameStaticsWeaponSkill(char FireMode); // Function Solarland.WeaponSystemPlayer.ServerGameStaticsWeaponSkill // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f35e70
	void ServerAutoDropWeapon(struct ASolarPlayerWeapon* InPendingDropWeapon); // Function Solarland.WeaponSystemPlayer.ServerAutoDropWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x127a640
	void ReplaceUpgradeRoute(int32_t Slot); // Function Solarland.WeaponSystemPlayer.ReplaceUpgradeRoute // (Final|Native|Public) // @ game+0x1f35df0
	void RecieveSafeAreaUpdateMsg(int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveSafeAreaUpdateMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f35cd0
	void RecieveExpPackMsg(int32_t ItemID, int32_t Num); // Function Solarland.WeaponSystemPlayer.RecieveExpPackMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f35c10
	void RecieveExpMsg(bool bClient, int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.RecieveExpMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f35ad0
	void RecieveAssistMsg(enum class ESolarCharacterType HitedCharacterType); // Function Solarland.WeaponSystemPlayer.RecieveAssistMsg // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f35a50
	void PutEquipAttributes(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.PutEquipAttributes // (Event|Protected|BlueprintEvent) // @ game+0x224bbb0
	void PrintSensitivityGM(); // Function Solarland.WeaponSystemPlayer.PrintSensitivityGM // (Final|Native|Protected) // @ game+0x8ba190
	void PostAddWeaponEXPMessageWhenKill(int32_t InWeaponSlot, enum class ESolarHitType InHitType, float InDamage, bool InbKillPlayer); // Function Solarland.WeaponSystemPlayer.PostAddWeaponEXPMessageWhenKill // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f35800
	void OnWeaponUpgrade(int32_t InCurrentLevel, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpgrade // (Final|Native|Protected) // @ game+0x1f35740
	void OnWeaponUpdateSkillPoint(uint32_t InWeaponUniqueID, bool InbCoolDownFinish, int32_t InCurrentExtraPoint); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateSkillPoint // (Final|Native|Protected) // @ game+0x1f35640
	void OnWeaponUpdatePart(int32_t InNewPartId, int32_t InOldPartID, uint32_t InWeaponUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdatePart // (Final|Native|Protected) // @ game+0x1f35540
	void OnWeaponUpdateExp(float InTotalExp, float InCurrentExp, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateExp // (Final|Native|Protected) // @ game+0x1f35430
	void OnWeaponUpdateClipCapacity(int32_t InFireMode, struct ASolarWeapon* InWeapon); // Function Solarland.WeaponSystemPlayer.OnWeaponUpdateClipCapacity // (Final|Native|Protected) // @ game+0x1f35370
	void OnWeaponUnlockAttributeSlot(); // Function Solarland.WeaponSystemPlayer.OnWeaponUnlockAttributeSlot // (Final|Native|Protected) // @ game+0x1f35350
	void OnWeaponSwitchOverload(bool InbSwitchOn, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponSwitchOverload // (Final|Native|Protected) // @ game+0x1f35290
	void OnWeaponReleaseSkill(bool InbSuccess, uint32_t InUniqueID, uint32_t InResultID); // Function Solarland.WeaponSystemPlayer.OnWeaponReleaseSkill // (Final|Native|Protected) // @ game+0x1f35190
	void OnWeaponQuitReload(int32_t InFireMode, bool InbReloadSuccess, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponQuitReload // (Final|Native|Protected) // @ game+0x1f35090
	void OnWeaponEnterReload(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterReload // (Final|Native|Protected) // @ game+0x1f34fb0
	void OnWeaponEnterFireCD(int32_t InFireMode, uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterFireCD // (Final|Native|Protected) // @ game+0x1f34ef0
	void OnWeaponEnterBurstFire(int32_t InFireMode); // Function Solarland.WeaponSystemPlayer.OnWeaponEnterBurstFire // (Final|Native|Protected) // @ game+0x1f34e70
	void OnWeaponChangeAppreance(bool InbWeaponPart, enum class EWeaponPartType InWeaponPartType); // Function Solarland.WeaponSystemPlayer.OnWeaponChangeAppreance // (Final|Native|Protected) // @ game+0x1f34db0
	void OnPlayerEnergyUpdate(); // Function Solarland.WeaponSystemPlayer.OnPlayerEnergyUpdate // (Final|Native|Protected) // @ game+0x8ba190
	void OnEnterBattleAction(enum class EEnterBattleType battleType); // Function Solarland.WeaponSystemPlayer.OnEnterBattleAction // (Final|Native|Protected) // @ game+0x1f34b50
	bool NeedThermalImage(); // Function Solarland.WeaponSystemPlayer.NeedThermalImage // (Final|Native|Protected) // @ game+0x1f34b00
	bool IsWeaponAmmoUseEnergy(int32_t Slot, int32_t FireMode); // Function Solarland.WeaponSystemPlayer.IsWeaponAmmoUseEnergy // (Final|Native|Protected) // @ game+0x1f34a40
	bool IsReloadBlock(); // Function Solarland.WeaponSystemPlayer.IsReloadBlock // (Final|Native|Protected|Const) // @ game+0x1f349e0
	bool IsOwnUpgradeRoute(int32_t Slot); // Function Solarland.WeaponSystemPlayer.IsOwnUpgradeRoute // (Final|Native|Public|BlueprintCallable) // @ game+0x1f34950
	bool IsCurrentWeapon(uint32_t InUniqueID); // Function Solarland.WeaponSystemPlayer.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x1f348c0
	bool InternalReplaceUpgradeRoute(struct ASolarPlayerWeapon* wp); // Function Solarland.WeaponSystemPlayer.InternalReplaceUpgradeRoute // (Final|Native|Public|BlueprintCallable) // @ game+0x1f34830
	void InitializeWeaponSystem(struct ASolarCharacter* InOwner); // Function Solarland.WeaponSystemPlayer.InitializeWeaponSystem // (Final|Native|Public) // @ game+0x1f347b0
	int32_t GetWeaponSkin(struct ASolarPlayerWeapon* Weapon); // Function Solarland.WeaponSystemPlayer.GetWeaponSkin // (Final|Native|Public) // @ game+0x1f34670
	struct ASolarPlayerWeapon* GetWeaponByItemID(int32_t ItemInstanceId); // Function Solarland.WeaponSystemPlayer.GetWeaponByItemID // (Final|Native|Private) // @ game+0x1f345e0
	struct ASolarPlayerWeapon* GetWeaponByID(int32_t ID); // Function Solarland.WeaponSystemPlayer.GetWeaponByID // (Final|Native|Protected) // @ game+0x1f34550
	int32_t GetSlotByItemID(int64_t InItemThisID); // Function Solarland.WeaponSystemPlayer.GetSlotByItemID // (Final|Native|Protected) // @ game+0x1f344c0
	float GetRetrofitCost(int32_t Slot); // Function Solarland.WeaponSystemPlayer.GetRetrofitCost // (Final|Native|Public|BlueprintCallable) // @ game+0x1f34430
	bool CurrentWeaponIsThermalImage(); // Function Solarland.WeaponSystemPlayer.CurrentWeaponIsThermalImage // (Final|Native|Protected) // @ game+0x1f341c0
	void ClientRecieveExpMsg(int32_t Type, int32_t Num, int32_t Slot); // Function Solarland.WeaponSystemPlayer.ClientRecieveExpMsg // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x1f340d0
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayer.ClearWeapons // (Native|Public) // @ game+0x124bc00
	bool CanReplaceUpgradeRoute(int32_t Slot); // Function Solarland.WeaponSystemPlayer.CanReplaceUpgradeRoute // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
};

// Class Solarland.WeaponSystemPlayerAI
// Size: 0x280 (Inherited: 0x260)
struct UWeaponSystemPlayerAI : UWeaponSystemPlayerBase {
	char pad_260[0x20]; // 0x260(0x20)

	void ServerAIPickupWeapon(char Slot); // Function Solarland.WeaponSystemPlayerAI.ServerAIPickupWeapon // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x1f41950
	bool IsCurrentWeapon(int32_t ID); // Function Solarland.WeaponSystemPlayerAI.IsCurrentWeapon // (Final|Native|Protected) // @ game+0x1f41200
	void ClearWeapons(); // Function Solarland.WeaponSystemPlayerAI.ClearWeapons // (Native|Public) // @ game+0x124bc00
};

// Class Solarland.WeaponSystemVehicleComponent
// Size: 0x2d8 (Inherited: 0x1b0)
struct UWeaponSystemVehicleComponent : UWeaponSystemBase {
	struct FWeaponSystemInteract WeaponSystemInteract; // 0x1b0(0x50)
	char pad_200[0x20]; // 0x200(0x20)
	struct ASolarVehicleWeapon* CurrentWeapon; // 0x220(0x08)
	struct ASolarCharacter* MyPawn; // 0x228(0x08)
	char pad_230[0x38]; // 0x230(0x38)
	struct FWeaponAction WeaponEquipAction; // 0x268(0x08)
	struct FWeaponAction WeaponUnequipAction; // 0x270(0x08)
	struct FWeaponAction WeaponStartReloadAction; // 0x278(0x08)
	struct TMap<struct FName, enum class EVehicleWeaponScopeType> SavedWeaponScopeMap; // 0x280(0x50)
	enum class EVehicleWeaponScopeType CurrentScopeType; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)

	void ServerStatVehicleWeaponFire(struct FString Param); // Function Solarland.WeaponSystemVehicleComponent.ServerStatVehicleWeaponFire // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1f41b20
	void ServerStartReload(); // Function Solarland.WeaponSystemVehicleComponent.ServerStartReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1258810
	void ServerReload(char ModeIndex, int32_t Need); // Function Solarland.WeaponSystemVehicleComponent.ServerReload // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1f41a50
	void ServerChangeWeaponScopeType(enum class EVehicleWeaponScopeType InScopeType); // Function Solarland.WeaponSystemVehicleComponent.ServerChangeWeaponScopeType // (Net|Native|Event|Protected|NetServer) // @ game+0x1f419d0
	void OnRep_WeaponUnequipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponUnequipAction // (Final|Native|Private) // @ game+0x1f41560
	void OnRep_WeaponStartReloadAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponStartReloadAction // (Final|Native|Private) // @ game+0x1f413f0
	void OnRep_WeaponEquipAction(); // Function Solarland.WeaponSystemVehicleComponent.OnRep_WeaponEquipAction // (Final|Native|Private) // @ game+0x1f413d0
	void OnRep_CurrentWeapon(struct ASolarVehicleWeapon* PreviousWeapon); // Function Solarland.WeaponSystemVehicleComponent.OnRep_CurrentWeapon // (Final|Native|Public) // @ game+0x1f41350
	struct ASolarVehicleWeapon* GetCurrentVehicleWeapon(); // Function Solarland.WeaponSystemVehicleComponent.GetCurrentVehicleWeapon // (Final|Native|Public|Const) // @ game+0x1f40930
	void FireInput(bool bPress); // Function Solarland.WeaponSystemVehicleComponent.FireInput // (Final|Native|Public) // @ game+0x1f40750
};

// Class Solarland.WeaponUIStyleSheet
// Size: 0xc8 (Inherited: 0xc8)
struct UWeaponUIStyleSheet : UDataTable {
};

// Class Solarland.WidgetInputManager
// Size: 0x130 (Inherited: 0x28)
struct UWidgetInputManager : UObject {
	struct FDelegate OnTouchStartDetected; // 0x28(0x10)
	struct FDelegate OnTouchUpdate; // 0x38(0x10)
	struct FDelegate OnTouchEndDetected; // 0x48(0x10)
	struct FDelegate OnPointerStartDetected; // 0x58(0x10)
	struct FDelegate OnPointerUpdate; // 0x68(0x10)
	struct FDelegate OnPointerEndDetected; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)
	struct TMap<int32_t, struct FVector2D> TouchedList; // 0x90(0x50)
	struct TMap<int32_t, struct FVector2D> PointerList; // 0xe0(0x50)

	struct UWidget* K2_GetManagedWidget(); // Function Solarland.WidgetInputManager.K2_GetManagedWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f440b0
	bool GetWidgetTouchedList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetTouchedList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f43e40
	bool GetWidgetPointerList(struct USolarUserWidget* InWidget, struct TMap<int32_t, struct FVector2D>& OutList); // Function Solarland.WidgetInputManager.GetWidgetPointerList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x1f43c80
};

// Class Solarland.WorldMarkButton
// Size: 0x380 (Inherited: 0x340)
struct UWorldMarkButton : USolarUserWidget {
	struct UImage* Select_Arrow; // 0x340(0x08)
	struct UButton* WorldMarkBtn; // 0x348(0x08)
	struct UWidgetSwitcher* Switcher; // 0x350(0x08)
	char pad_358[0x4]; // 0x358(0x04)
	float UnHoveredDis; // 0x35c(0x04)
	bool bIfTouchMoveout; // 0x360(0x01)
	bool bIfQuickChatWheelOpened; // 0x361(0x01)
	char pad_362[0x6]; // 0x362(0x06)
	struct ASolarHUDInGame* SolarHUDInGame; // 0x368(0x08)
	bool bIfChooseAnyMark; // 0x370(0x01)
	bool bIfPressed; // 0x371(0x01)
	char pad_372[0x2]; // 0x372(0x02)
	float LongPressDeltaTime; // 0x374(0x04)
	char pad_378[0x8]; // 0x378(0x08)

	void SetMarkButtonState(enum class EMarkButtonState NewState); // Function Solarland.WorldMarkButton.SetMarkButtonState // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void ResetButton(); // Function Solarland.WorldMarkButton.ResetButton // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	struct FEventReply ReleaseMouseCapture(); // Function Solarland.WorldMarkButton.ReleaseMouseCapture // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f445c0
	void RefreshButtonState(); // Function Solarland.WorldMarkButton.RefreshButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x1f445a0
	void OnMarkButtonDragSelectEnded(); // Function Solarland.WorldMarkButton.OnMarkButtonDragSelectEnded // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f44580
	void OnCustomGameStateChanged(enum class ESCMInGameState NewGameState); // Function Solarland.WorldMarkButton.OnCustomGameStateChanged // (Final|Native|Public) // @ game+0x1f44500
	void OnCharacterDead(struct ASolarCharacter* InCharacter); // Function Solarland.WorldMarkButton.OnCharacterDead // (Final|Native|Protected) // @ game+0x1f44480
	void LongPressCheckBegin(); // Function Solarland.WorldMarkButton.LongPressCheckBegin // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f440e0
	void ClearLongPressCheckTimer(); // Function Solarland.WorldMarkButton.ClearLongPressCheckTimer // (Final|Native|Protected|BlueprintCallable) // @ game+0x1f43c60
	struct FEventReply CaptureMouse(); // Function Solarland.WorldMarkButton.CaptureMouse // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x1f43b50
};

// Class Solarland.WorldMarkComponent
// Size: 0x128 (Inherited: 0xb0)
struct UWorldMarkComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct ASolarCharacter* Owner; // 0xb8(0x08)
	uint32_t WorldMarkPoolOriginSize; // 0xc0(0x04)
	float MinCheckDistance; // 0xc4(0x04)
	float MaxCheckDistance; // 0xc8(0x04)
	char pad_CC[0x5c]; // 0xcc(0x5c)

	void VehicleNotify(int32_t VehicleID, int32_t NameLocID, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.VehicleNotify // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void UpdateAttachedMarks(); // Function Solarland.WorldMarkComponent.UpdateAttachedMarks // (Final|Native|Public) // @ game+0x1f44760
	void UnMarkItemByIDLuaCall(int64_t instanceID); // Function Solarland.WorldMarkComponent.UnMarkItemByIDLuaCall // (Final|Native|Public) // @ game+0x1f446e0
	void ResponseChosenMark(); // Function Solarland.WorldMarkComponent.ResponseChosenMark // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void RemoveAttachedMarkByActors(struct TArray<struct AActor*>& InActors); // Function Solarland.WorldMarkComponent.RemoveAttachedMarkByActors // (Final|Native|Public|HasOutParms) // @ game+0x1f44630
	void RecycleWorldMark(struct UHUD_WorldMark* WorldMark); // Function Solarland.WorldMarkComponent.RecycleWorldMark // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void NotifyThatToFarToMark(); // Function Solarland.WorldMarkComponent.NotifyThatToFarToMark // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void MarkWarningOnWorld(); // Function Solarland.WorldMarkComponent.MarkWarningOnWorld // (Final|Native|Public) // @ game+0x1f44460
	void MarkQuickChatOnWorld(struct FString IconImg); // Function Solarland.WorldMarkComponent.MarkQuickChatOnWorld // (Final|Native|Public) // @ game+0x1f443c0
	void MarkPointOnWorld(); // Function Solarland.WorldMarkComponent.MarkPointOnWorld // (Final|Native|Public) // @ game+0x1f443a0
	void MarkOnWorldByMinimapPosition(int32_t PosInTeam, struct FVector2D& MinimapPos); // Function Solarland.WorldMarkComponent.MarkOnWorldByMinimapPosition // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f442d0
	void MarkItemInPickupList(struct FVector& ItemLocation, struct FSolarItemData& ItemData); // Function Solarland.WorldMarkComponent.MarkItemInPickupList // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f44180
	void MarkActorByAttachToThem(struct AActor* InActor); // Function Solarland.WorldMarkComponent.MarkActorByAttachToThem // (Final|Native|Public) // @ game+0x1f44100
	void LuaRelease(); // Function Solarland.WorldMarkComponent.LuaRelease // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void LuaInit(); // Function Solarland.WorldMarkComponent.LuaInit // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void InteractTypeNotify(enum class EInteractableType Type, struct ASolarPlayerController* Controller); // Function Solarland.WorldMarkComponent.InteractTypeNotify // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void Init(struct ASolarCharacter* Character); // Function Solarland.WorldMarkComponent.Init // (Final|Native|Public) // @ game+0x1f44030
	struct UHUD_WorldMarkPanel* GetWorldMarkPanel(); // Function Solarland.WorldMarkComponent.GetWorldMarkPanel // (Final|Native|Public) // @ game+0x1f44000
	struct UHUD_WorldMark* GetFreeWorldMark(); // Function Solarland.WorldMarkComponent.GetFreeWorldMark // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CreateWorldMark(int32_t PosInTeam, struct FWorldMarkData& InWorldMarkedData); // Function Solarland.WorldMarkComponent.CreateWorldMark // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x224bbb0
	void CreateWarningWidget(struct FWorldMarkData Data); // Function Solarland.WorldMarkComponent.CreateWarningWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CreateItemMarkWidget(struct FWorldMarkData Data); // Function Solarland.WorldMarkComponent.CreateItemMarkWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	void CreateInvalidWidget(struct FWorldMarkData Data, bool bShouldNotify); // Function Solarland.WorldMarkComponent.CreateInvalidWidget // (Event|Public|BlueprintEvent) // @ game+0x224bbb0
	bool CheckMarkPointIsOutOfMap(struct FVector& Location); // Function Solarland.WorldMarkComponent.CheckMarkPointIsOutOfMap // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x1f43bc0
};

